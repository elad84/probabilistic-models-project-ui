/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*** IMPORTS FROM imports-loader ***/
	var define = false;

	// import {AjaxUtil} from '../utils/AjaxUtils';
	var AjaxUtil = __webpack_require__(1).AjaxUtil;
	// import vis from 'vis';
	var vis = __webpack_require__(2);
	var $ = __webpack_require__(4);
	var dt = __webpack_require__(5)(window, $);
	// import dt from 'datatables.net';
	// import 'datatables.net-dt/css/jquery.dataTables.css'

	var tableNodes = {},
	    nodeTablePrefix = "networkNode",
	    nodeValues = {};
	var binaryMatrixTable = void 0,
	    AllEdges = [];

	function createTables(columns, tableData, tableId, tableName, display) {
	    var tableHeaders = "";
	    var columnData = [];
	    //create table header
	    $.each(columns, function (i, val) {
	        tableHeaders += "<th>" + val + "</th>";
	        columnData.push({ data: val });
	    });

	    if (!display) {
	        var nodeTableId = nodeTablePrefix + tableId;
	        $("#tableDiv").append('<div id="' + nodeTableId + '" class="tableNode" style="display:none"/>');
	        $("#" + nodeTableId).append('<div>' + tableName + '</div>');
	        $("#" + nodeTableId).append('<table id="displayTable' + tableId + '" class="display cell-border" cellspacing="0" width="100%">' + '<thead><tr>' + tableHeaders + '</tr></thead>' + '</table>');
	    } else {
	        $('#binaryMatrix').append('<table id="displayTable' + tableId + '" class="display cell-border" cellspacing="0" width="100%">' + '<thead><tr>' + tableHeaders + '</tr></thead>' + '</table>');
	    }

	    var newTable = $('#displayTable' + tableId).DataTable({
	        "bPaginate": false,
	        "columns.data": columnData,
	        "searching": false
	    });

	    //add all the rows to the table
	    for (var i = 0; i < tableData.length; i++) {
	        newTable.row.add(tableData[i]);
	    }

	    if (display) {
	        binaryMatrixTable = newTable;
	    }

	    tableNodes[tableId] = newTable;
	    newTable.draw(false);

	    if (!display) {
	        $(newTable.column(columns.length - 1).nodes()).addClass('highlight');
	    }
	}

	$(document).ready(function () {
	    getExample();
	});

	function getExample() {
	    AjaxUtil.getData('POST', 'http://localhost:8080/bayesian/network', { "filePath": "/Users/eladcohen/IdeaProjects/probabilistic-model/src/main/resources/networks/workday.json" }, function (networkNodes) {
	        var nodes = new vis.DataSet({}),
	            edges = new vis.DataSet({}),
	            moralizedNodes = new vis.DataSet({}),
	            moralizedEdges = new vis.DataSet({});
	        var columns = void 0,
	            nodeMapping = {},
	            binaryMatrixColumns = [''],
	            binaryMatrixRows = [],
	            binaryMatrixMap = {};

	        var node = void 0;

	        for (var i = 0; i < networkNodes.length; i++) {
	            node = networkNodes[i];
	            nodeMapping[node.nodeId] = node.displayName;
	            nodeValues[node.nodeId] = node.domain;

	            //add to membership matrix
	            binaryMatrixColumns.push('&Psi;' + node.nodeId);

	            var binaryMatrixRow = Array.apply(null, Array(networkNodes.length + 1)).map(Number.prototype.valueOf, 0);
	            //add display name as first column
	            binaryMatrixRow[0] = node.displayName;
	            binaryMatrixRow[node.nodeId] = 1;
	            binaryMatrixMap[node.nodeId] = binaryMatrixRow;
	        }

	        for (var _i = 0; _i < networkNodes.length; _i++) {
	            node = networkNodes[_i];
	            columns = [];
	            columns.push(node.displayName);

	            nodes.add([{
	                id: node.nodeId,
	                label: node.displayName
	            }]);

	            moralizedNodes.add([{
	                id: node.nodeId,
	                label: node.displayName
	            }]);

	            if (node.parentList && node.parentList.length > 0) {
	                for (var j = 0; j < node.parentList.length; j++) {

	                    if (AllEdges.indexOf(node.parentList[j] + '_' + node.nodeId) > -1 || AllEdges.indexOf(node.nodeId + '_' + node.parentList[j]) > -1) {
	                        continue;
	                    }

	                    AllEdges.push(node.parentList[j] + '_' + node.nodeId);
	                    edges.add([{
	                        from: node.parentList[j],
	                        to: node.nodeId,
	                        arrows: 'to'
	                    }]);

	                    moralizedEdges.add([{
	                        from: node.parentList[j],
	                        to: node.nodeId
	                    }]);

	                    for (var k = j + 1; k < node.parentList.length; k++) {
	                        moralizedEdges.add([{
	                            from: node.parentList[j],
	                            to: node.parentList[k]
	                        }]);
	                    }

	                    binaryMatrixMap[node.parentList[j]][node.nodeId] = 1;

	                    //add column for parent
	                    columns.push(nodeMapping[node.parentList[j]]);
	                }
	            }

	            columns.push("probability");

	            var conditionalTable = node.conditionalTable;
	            var tableData = [],
	                nodeValue = void 0,
	                row = void 0;

	            for (var _i2 = 0; _i2 < conditionalTable.length; _i2++) {
	                nodeValue = conditionalTable[_i2];

	                if (nodeValue.dependency) {
	                    for (var _j = 0; _j < nodeValue.dependency.length; _j++) {
	                        row = [];
	                        row.push(nodeValue.nodeValue);
	                        var nodeValueDepedency = nodeValue.dependency[_j];
	                        for (var _k = 0; _k < nodeValueDepedency.dependencyNodes.length; _k++) {
	                            row.push(nodeValueDepedency.dependencyNodes[_k].value);
	                        }
	                        row.push(nodeValueDepedency.probability);
	                        tableData.push(row);
	                    }
	                } else {
	                    row = [];
	                    row.push(nodeValue.nodeValue);
	                    row.push(nodeValue.probability);
	                    tableData.push(row);
	                }
	            }
	            createTables(columns, tableData, node.nodeId, node.displayName, false);
	        }

	        for (var _row in binaryMatrixMap) {
	            if (binaryMatrixMap.hasOwnProperty(_row)) {
	                binaryMatrixRows.push(binaryMatrixMap[_row]);
	            }
	        }

	        createTables(binaryMatrixColumns, binaryMatrixRows, 'BinaryMatrix', null, true);
	        // createTables(['', '&Psi;1','&Psi;2','&Psi;3', '&Psi;5','m4'], [['x1',1,1,1,0,0],
	        // ['x2',0,1,0,1,1],['x3',0,0,1,0,1],['x5',0,0,0,1,0]], 'BinaryMatrix', null, true);

	        var ids = nodes.getIds();

	        // create a network
	        var container = document.getElementById('mynetwork');
	        var data = {
	            nodes: nodes,
	            edges: edges
	        };
	        var options = {};
	        var network = new vis.Network(container, data, options);

	        var moralizedContainer = document.getElementById('moralized');
	        var moralizedGraph = new vis.Network(moralizedContainer, {
	            nodes: moralizedNodes,
	            edges: moralizedEdges
	        }, {});

	        // $('.moralized').hide();

	        network.on('click', function (properties) {
	            $('.tableNode').hide();
	            for (var _i3 = 0; _i3 < properties.nodes.length; _i3++) {
	                $("#" + nodeTablePrefix + properties.nodes[_i3]).show();
	            }
	        });

	        moralizedGraph.on('click', function (properties) {
	            $('#observed').empty();
	            var options = nodeValues[properties.nodes[0]];
	            for (var _i4 = 0; _i4 < options.length; _i4++) {
	                $('#observed').append('<option>' + options[_i4] + '</option>');
	            }
	            $(binaryMatrixTable.row(properties.nodes[0]).nodes()).addClass('highlight');

	            // if ( $(this).hasClass('selected') ) {
	            //     $(this).removeClass('selected');
	            // }
	            // else {
	            //     moralizedGraph.$('tr.selected').removeClass('selected');
	            //     $(this).addClass('selected');
	            // }
	        });
	    });
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/*** IMPORTS FROM imports-loader ***/
	var define = false;

	/**
	 * Created by eladcohen on 15/01/2017.
	 */

	var AjaxUtil = exports.AjaxUtil = function () {
	    function AjaxUtil() {
	        _classCallCheck(this, AjaxUtil);
	    }

	    _createClass(AjaxUtil, null, [{
	        key: "createCors",
	        value: function createCors(method, url) {
	            var xhr = new XMLHttpRequest();
	            if ("withCredentials" in xhr) {
	                xhr.open(method, url, true);
	            } else if (typeof XDomainRequest != "undefined") {
	                //support for IE
	                xhr = new XDomainRequest();
	                xhr.open(method, url);
	            } else {
	                xhr = null;
	            }
	            return xhr;
	        }
	    }, {
	        key: "getData",
	        value: function getData(method, url, data, responseCallback) {
	            var xhr = this.createCors(method, url);
	            if (!xhr) {
	                throw "cannot make request to " + url + " not supported";
	            }

	            xhr.setRequestHeader('Content-Type', 'application/json');

	            xhr.onload = function () {
	                var text = xhr.responseText;
	                var response = JSON.parse(text);
	                responseCallback(response);
	            };

	            xhr.error = function () {
	                console.log("error ");
	            };

	            //make the actual call
	            xhr.send(JSON.stringify(data));
	        }
	    }, {
	        key: "loadFile",
	        value: function loadFile(type, url) {
	            var loader = null;
	            //create loader by the type
	            switch (type) {
	                case "js":
	                    loader = document['createElement']('script');
	                    loader.async = true;
	                    loader.type = 'text/javascript';
	                    loader.src = url;
	                    break;
	                case "css":
	                    loader = document['createElement']('link');
	                    loader.rel = 'stylesheet';
	                    loader.type = 'text/css';
	                    loader.href = url;
	                    break;
	                default:
	                    throw "unknown type " + type;
	            }
	            document.getElementsByTagName("head")[0]['appendChild'](loader);
	        }
	    }]);

	    return AjaxUtil;
	}();

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';var _typeof2=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/*** IMPORTS FROM imports-loader ***/var define=false;/**
	 * vis.js
	 * https://github.com/almende/vis
	 *
	 * A dynamic, browser-based visualization library.
	 *
	 * @version 4.17.0
	 * @date    2016-11-05
	 *
	 * @license
	 * Copyright (C) 2011-2016 Almende B.V, http://almende.com
	 *
	 * Vis.js is dual licensed under both
	 *
	 * * The Apache 2.0 License
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * and
	 *
	 * * The MIT License
	 *   http://opensource.org/licenses/MIT
	 *
	 * Vis.js may be distributed under either license.
	 */"use strict";(function webpackUniversalModuleDefinition(root,factory){if(( false?'undefined':_typeof2(exports))==='object'&&( false?'undefined':_typeof2(module))==='object')module.exports=factory();else if(typeof define==='function'&&define.amd)define([],factory);else if(( false?'undefined':_typeof2(exports))==='object')exports["vis"]=factory();else root["vis"]=factory();})(undefined,function(){return(/******/function(modules){// webpackBootstrap
	/******/// The module cache
	/******/var installedModules={};/******/// The require function
	/******/function __webpack_require__(moduleId){/******/// Check if module is in cache
	/******/if(installedModules[moduleId])/******/return installedModules[moduleId].exports;/******/// Create a new module (and put it into the cache)
	/******/var module=installedModules[moduleId]={/******/exports:{},/******/id:moduleId,/******/loaded:false/******/};/******/// Execute the module function
	/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/// Flag the module as loaded
	/******/module.loaded=true;/******/// Return the exports of the module
	/******/return module.exports;/******/}/******/// expose the modules object (__webpack_modules__)
	/******/__webpack_require__.m=modules;/******/// expose the module cache
	/******/__webpack_require__.c=installedModules;/******/// __webpack_public_path__
	/******/__webpack_require__.p="";/******/// Load entry module and return exports
	/******/return __webpack_require__(0);/******/}(/************************************************************************//******/[/* 0 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);// Graph3d
	util.extend(exports,__webpack_require__(7));// Timeline & Graph2d
	util.extend(exports,__webpack_require__(26));// Network
	util.extend(exports,__webpack_require__(62));/***/},/* 1 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};// utility functions
	// first check if moment.js is already loaded in the browser window, if so,
	// use this instance. Else, load via commonjs.
	var moment=__webpack_require__(2);var uuid=__webpack_require__(6);/**
	   * Test whether given object is a number
	   * @param {*} object
	   * @return {Boolean} isNumber
	   */exports.isNumber=function(object){return object instanceof Number||typeof object=='number';};/**
	   * Remove everything in the DOM object
	   * @param DOMobject
	   */exports.recursiveDOMDelete=function(DOMobject){if(DOMobject){while(DOMobject.hasChildNodes()===true){exports.recursiveDOMDelete(DOMobject.firstChild);DOMobject.removeChild(DOMobject.firstChild);}}};/**
	   * this function gives you a range between 0 and 1 based on the min and max values in the set, the total sum of all values and the current value.
	   *
	   * @param min
	   * @param max
	   * @param total
	   * @param value
	   * @returns {number}
	   */exports.giveRange=function(min,max,total,value){if(max==min){return 0.5;}else{var scale=1/(max-min);return Math.max(0,(value-min)*scale);}};/**
	   * Test whether given object is a string
	   * @param {*} object
	   * @return {Boolean} isString
	   */exports.isString=function(object){return object instanceof String||typeof object=='string';};/**
	   * Test whether given object is a Date, or a String containing a Date
	   * @param {Date | String} object
	   * @return {Boolean} isDate
	   */exports.isDate=function(object){if(object instanceof Date){return true;}else if(exports.isString(object)){// test whether this string contains a date
	var match=ASPDateRegex.exec(object);if(match){return true;}else if(!isNaN(Date.parse(object))){return true;}}return false;};/**
	   * Create a semi UUID
	   * source: http://stackoverflow.com/a/105074/1262753
	   * @return {String} uuid
	   */exports.randomUUID=function(){return uuid.v4();};/**
	   * assign all keys of an object that are not nested objects to a certain value (used for color objects).
	   * @param obj
	   * @param value
	   */exports.assignAllKeys=function(obj,value){for(var prop in obj){if(obj.hasOwnProperty(prop)){if(_typeof(obj[prop])!=='object'){obj[prop]=value;}}}};/**
	   * Fill an object with a possibly partially defined other object. Only copies values if the a object has an object requiring values.
	   * That means an object is not created on a property if only the b object has it.
	   * @param obj
	   * @param value
	   */exports.fillIfDefined=function(a,b){var allowDeletion=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;for(var prop in a){if(b[prop]!==undefined){if(_typeof(b[prop])!=='object'){if((b[prop]===undefined||b[prop]===null)&&a[prop]!==undefined&&allowDeletion===true){delete a[prop];}else{a[prop]=b[prop];}}else{if(_typeof(a[prop])==='object'){exports.fillIfDefined(a[prop],b[prop],allowDeletion);}}}}};/**
	   * Extend object a with the properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Object} a
	   * @param {... Object} b
	   * @return {Object} a
	   */exports.protoExtend=function(a,b){for(var i=1;i<arguments.length;i++){var other=arguments[i];for(var prop in other){a[prop]=other[prop];}}return a;};/**
	   * Extend object a with the properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Object} a
	   * @param {... Object} b
	   * @return {Object} a
	   */exports.extend=function(a,b){for(var i=1;i<arguments.length;i++){var other=arguments[i];for(var prop in other){if(other.hasOwnProperty(prop)){a[prop]=other[prop];}}}return a;};/**
	   * Extend object a with selected properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Array.<String>} props
	   * @param {Object} a
	   * @param {Object} b
	   * @return {Object} a
	   */exports.selectiveExtend=function(props,a,b){if(!Array.isArray(props)){throw new Error('Array with property names expected as first argument');}for(var i=2;i<arguments.length;i++){var other=arguments[i];for(var p=0;p<props.length;p++){var prop=props[p];if(other.hasOwnProperty(prop)){a[prop]=other[prop];}}}return a;};/**
	   * Extend object a with selected properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Array.<String>} props
	   * @param {Object} a
	   * @param {Object} b
	   * @return {Object} a
	   */exports.selectiveDeepExtend=function(props,a,b){var allowDeletion=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;// TODO: add support for Arrays to deepExtend
	if(Array.isArray(b)){throw new TypeError('Arrays are not supported by deepExtend');}for(var i=2;i<arguments.length;i++){var other=arguments[i];for(var p=0;p<props.length;p++){var prop=props[p];if(other.hasOwnProperty(prop)){if(b[prop]&&b[prop].constructor===Object){if(a[prop]===undefined){a[prop]={};}if(a[prop].constructor===Object){exports.deepExtend(a[prop],b[prop],false,allowDeletion);}else{if(b[prop]===null&&a[prop]!==undefined&&allowDeletion===true){delete a[prop];}else{a[prop]=b[prop];}}}else if(Array.isArray(b[prop])){throw new TypeError('Arrays are not supported by deepExtend');}else{if(b[prop]===null&&a[prop]!==undefined&&allowDeletion===true){delete a[prop];}else{a[prop]=b[prop];}}}}}return a;};/**
	   * Extend object a with selected properties of object b or a series of objects
	   * Only properties with defined values are copied
	   * @param {Array.<String>} props
	   * @param {Object} a
	   * @param {Object} b
	   * @return {Object} a
	   */exports.selectiveNotDeepExtend=function(props,a,b){var allowDeletion=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;// TODO: add support for Arrays to deepExtend
	if(Array.isArray(b)){throw new TypeError('Arrays are not supported by deepExtend');}for(var prop in b){if(b.hasOwnProperty(prop)){if(props.indexOf(prop)==-1){if(b[prop]&&b[prop].constructor===Object){if(a[prop]===undefined){a[prop]={};}if(a[prop].constructor===Object){exports.deepExtend(a[prop],b[prop]);}else{if(b[prop]===null&&a[prop]!==undefined&&allowDeletion===true){delete a[prop];}else{a[prop]=b[prop];}}}else if(Array.isArray(b[prop])){a[prop]=[];for(var i=0;i<b[prop].length;i++){a[prop].push(b[prop][i]);}}else{if(b[prop]===null&&a[prop]!==undefined&&allowDeletion===true){delete a[prop];}else{a[prop]=b[prop];}}}}}return a;};/**
	   * Deep extend an object a with the properties of object b
	   * @param {Object} a
	   * @param {Object} b
	   * @param [Boolean] protoExtend --> optional parameter. If true, the prototype values will also be extended.
	   *                                  (ie. the options objects that inherit from others will also get the inherited options)
	   * @param [Boolean] global      --> optional parameter. If true, the values of fields that are null will not deleted
	   * @returns {Object}
	   */exports.deepExtend=function(a,b,protoExtend,allowDeletion){for(var prop in b){if(b.hasOwnProperty(prop)||protoExtend===true){if(b[prop]&&b[prop].constructor===Object){if(a[prop]===undefined){a[prop]={};}if(a[prop].constructor===Object){exports.deepExtend(a[prop],b[prop],protoExtend);}else{if(b[prop]===null&&a[prop]!==undefined&&allowDeletion===true){delete a[prop];}else{a[prop]=b[prop];}}}else if(Array.isArray(b[prop])){a[prop]=[];for(var i=0;i<b[prop].length;i++){a[prop].push(b[prop][i]);}}else{if(b[prop]===null&&a[prop]!==undefined&&allowDeletion===true){delete a[prop];}else{a[prop]=b[prop];}}}}return a;};/**
	   * Test whether all elements in two arrays are equal.
	   * @param {Array} a
	   * @param {Array} b
	   * @return {boolean} Returns true if both arrays have the same length and same
	   *                   elements.
	   */exports.equalArray=function(a,b){if(a.length!=b.length)return false;for(var i=0,len=a.length;i<len;i++){if(a[i]!=b[i])return false;}return true;};/**
	   * Convert an object to another type
	   * @param {Boolean | Number | String | Date | Moment | Null | undefined} object
	   * @param {String | undefined} type   Name of the type. Available types:
	   *                                    'Boolean', 'Number', 'String',
	   *                                    'Date', 'Moment', ISODate', 'ASPDate'.
	   * @return {*} object
	   * @throws Error
	   */exports.convert=function(object,type){var match;if(object===undefined){return undefined;}if(object===null){return null;}if(!type){return object;}if(!(typeof type==='string')&&!(type instanceof String)){throw new Error('Type must be a string');}//noinspection FallthroughInSwitchStatementJS
	switch(type){case'boolean':case'Boolean':return Boolean(object);case'number':case'Number':if(!isNaN(Date.parse(object))){return moment(object).valueOf();}else{return Number(object.valueOf());}case'string':case'String':return String(object);case'Date':if(exports.isNumber(object)){return new Date(object);}if(object instanceof Date){return new Date(object.valueOf());}else if(moment.isMoment(object)){return new Date(object.valueOf());}if(exports.isString(object)){match=ASPDateRegex.exec(object);if(match){// object is an ASP date
	return new Date(Number(match[1]));// parse number
	}else{return moment(new Date(object)).toDate();// parse string
	}}else{throw new Error('Cannot convert object of type '+exports.getType(object)+' to type Date');}case'Moment':if(exports.isNumber(object)){return moment(object);}if(object instanceof Date){return moment(object.valueOf());}else if(moment.isMoment(object)){return moment(object);}if(exports.isString(object)){match=ASPDateRegex.exec(object);if(match){// object is an ASP date
	return moment(Number(match[1]));// parse number
	}else{return moment(object);// parse string
	}}else{throw new Error('Cannot convert object of type '+exports.getType(object)+' to type Date');}case'ISODate':if(exports.isNumber(object)){return new Date(object);}else if(object instanceof Date){return object.toISOString();}else if(moment.isMoment(object)){return object.toDate().toISOString();}else if(exports.isString(object)){match=ASPDateRegex.exec(object);if(match){// object is an ASP date
	return new Date(Number(match[1])).toISOString();// parse number
	}else{return moment(object).format();// ISO 8601
	}}else{throw new Error('Cannot convert object of type '+exports.getType(object)+' to type ISODate');}case'ASPDate':if(exports.isNumber(object)){return'/Date('+object+')/';}else if(object instanceof Date){return'/Date('+object.valueOf()+')/';}else if(exports.isString(object)){match=ASPDateRegex.exec(object);var value;if(match){// object is an ASP date
	value=new Date(Number(match[1])).valueOf();// parse number
	}else{value=new Date(object).valueOf();// parse string
	}return'/Date('+value+')/';}else{throw new Error('Cannot convert object of type '+exports.getType(object)+' to type ASPDate');}default:throw new Error('Unknown type "'+type+'"');}};// parse ASP.Net Date pattern,
	// for example '/Date(1198908717056)/' or '/Date(1198908717056-0700)/'
	// code from http://momentjs.com/
	var ASPDateRegex=/^\/?Date\((\-?\d+)/i;/**
	   * Get the type of an object, for example exports.getType([]) returns 'Array'
	   * @param {*} object
	   * @return {String} type
	   */exports.getType=function(object){var type=typeof object==='undefined'?'undefined':_typeof(object);if(type=='object'){if(object===null){return'null';}if(object instanceof Boolean){return'Boolean';}if(object instanceof Number){return'Number';}if(object instanceof String){return'String';}if(Array.isArray(object)){return'Array';}if(object instanceof Date){return'Date';}return'Object';}else if(type=='number'){return'Number';}else if(type=='boolean'){return'Boolean';}else if(type=='string'){return'String';}else if(type===undefined){return'undefined';}return type;};/**
	   * Used to extend an array and copy it. This is used to propagate paths recursively.
	   *
	   * @param arr
	   * @param newValue
	   * @returns {Array}
	   */exports.copyAndExtendArray=function(arr,newValue){var newArr=[];for(var i=0;i<arr.length;i++){newArr.push(arr[i]);}newArr.push(newValue);return newArr;};/**
	   * Used to extend an array and copy it. This is used to propagate paths recursively.
	   *
	   * @param arr
	   * @param newValue
	   * @returns {Array}
	   */exports.copyArray=function(arr){var newArr=[];for(var i=0;i<arr.length;i++){newArr.push(arr[i]);}return newArr;};/**
	   * Retrieve the absolute left value of a DOM element
	   * @param {Element} elem        A dom element, for example a div
	   * @return {number} left        The absolute left position of this element
	   *                              in the browser page.
	   */exports.getAbsoluteLeft=function(elem){return elem.getBoundingClientRect().left;};exports.getAbsoluteRight=function(elem){return elem.getBoundingClientRect().right;};/**
	   * Retrieve the absolute top value of a DOM element
	   * @param {Element} elem        A dom element, for example a div
	   * @return {number} top        The absolute top position of this element
	   *                              in the browser page.
	   */exports.getAbsoluteTop=function(elem){return elem.getBoundingClientRect().top;};/**
	   * add a className to the given elements style
	   * @param {Element} elem
	   * @param {String} className
	   */exports.addClassName=function(elem,className){var classes=elem.className.split(' ');if(classes.indexOf(className)==-1){classes.push(className);// add the class to the array
	elem.className=classes.join(' ');}};/**
	   * add a className to the given elements style
	   * @param {Element} elem
	   * @param {String} className
	   */exports.removeClassName=function(elem,className){var classes=elem.className.split(' ');var index=classes.indexOf(className);if(index!=-1){classes.splice(index,1);// remove the class from the array
	elem.className=classes.join(' ');}};/**
	   * For each method for both arrays and objects.
	   * In case of an array, the built-in Array.forEach() is applied.
	   * In case of an Object, the method loops over all properties of the object.
	   * @param {Object | Array} object   An Object or Array
	   * @param {function} callback       Callback method, called for each item in
	   *                                  the object or array with three parameters:
	   *                                  callback(value, index, object)
	   */exports.forEach=function(object,callback){var i,len;if(Array.isArray(object)){// array
	for(i=0,len=object.length;i<len;i++){callback(object[i],i,object);}}else{// object
	for(i in object){if(object.hasOwnProperty(i)){callback(object[i],i,object);}}}};/**
	   * Convert an object into an array: all objects properties are put into the
	   * array. The resulting array is unordered.
	   * @param {Object} object
	   * @param {Array} array
	   */exports.toArray=function(object){var array=[];for(var prop in object){if(object.hasOwnProperty(prop))array.push(object[prop]);}return array;};/**
	   * Update a property in an object
	   * @param {Object} object
	   * @param {String} key
	   * @param {*} value
	   * @return {Boolean} changed
	   */exports.updateProperty=function(object,key,value){if(object[key]!==value){object[key]=value;return true;}else{return false;}};/**
	   * Throttle the given function to be only executed once per animation frame
	   * @param {function} fn
	   * @returns {function} Returns the throttled function
	   */exports.throttle=function(fn){var scheduled=false;return function throttled(){if(!scheduled){scheduled=true;requestAnimationFrame(function(){scheduled=false;fn();});}};};/**
	   * Add and event listener. Works for all browsers
	   * @param {Element}     element    An html element
	   * @param {string}      action     The action, for example "click",
	   *                                 without the prefix "on"
	   * @param {function}    listener   The callback function to be executed
	   * @param {boolean}     [useCapture]
	   */exports.addEventListener=function(element,action,listener,useCapture){if(element.addEventListener){if(useCapture===undefined)useCapture=false;if(action==="mousewheel"&&navigator.userAgent.indexOf("Firefox")>=0){action="DOMMouseScroll";// For Firefox
	}element.addEventListener(action,listener,useCapture);}else{element.attachEvent("on"+action,listener);// IE browsers
	}};/**
	   * Remove an event listener from an element
	   * @param {Element}     element         An html dom element
	   * @param {string}      action          The name of the event, for example "mousedown"
	   * @param {function}    listener        The listener function
	   * @param {boolean}     [useCapture]
	   */exports.removeEventListener=function(element,action,listener,useCapture){if(element.removeEventListener){// non-IE browsers
	if(useCapture===undefined)useCapture=false;if(action==="mousewheel"&&navigator.userAgent.indexOf("Firefox")>=0){action="DOMMouseScroll";// For Firefox
	}element.removeEventListener(action,listener,useCapture);}else{// IE browsers
	element.detachEvent("on"+action,listener);}};/**
	   * Cancels the event if it is cancelable, without stopping further propagation of the event.
	   */exports.preventDefault=function(event){if(!event)event=window.event;if(event.preventDefault){event.preventDefault();// non-IE browsers
	}else{event.returnValue=false;// IE browsers
	}};/**
	   * Get HTML element which is the target of the event
	   * @param {Event} event
	   * @return {Element} target element
	   */exports.getTarget=function(event){// code from http://www.quirksmode.org/js/events_properties.html
	if(!event){event=window.event;}var target;if(event.target){target=event.target;}else if(event.srcElement){target=event.srcElement;}if(target.nodeType!=undefined&&target.nodeType==3){// defeat Safari bug
	target=target.parentNode;}return target;};/**
	   * Check if given element contains given parent somewhere in the DOM tree
	   * @param {Element} element
	   * @param {Element} parent
	   */exports.hasParent=function(element,parent){var e=element;while(e){if(e===parent){return true;}e=e.parentNode;}return false;};exports.option={};/**
	   * Convert a value into a boolean
	   * @param {Boolean | function | undefined} value
	   * @param {Boolean} [defaultValue]
	   * @returns {Boolean} bool
	   */exports.option.asBoolean=function(value,defaultValue){if(typeof value=='function'){value=value();}if(value!=null){return value!=false;}return defaultValue||null;};/**
	   * Convert a value into a number
	   * @param {Boolean | function | undefined} value
	   * @param {Number} [defaultValue]
	   * @returns {Number} number
	   */exports.option.asNumber=function(value,defaultValue){if(typeof value=='function'){value=value();}if(value!=null){return Number(value)||defaultValue||null;}return defaultValue||null;};/**
	   * Convert a value into a string
	   * @param {String | function | undefined} value
	   * @param {String} [defaultValue]
	   * @returns {String} str
	   */exports.option.asString=function(value,defaultValue){if(typeof value=='function'){value=value();}if(value!=null){return String(value);}return defaultValue||null;};/**
	   * Convert a size or location into a string with pixels or a percentage
	   * @param {String | Number | function | undefined} value
	   * @param {String} [defaultValue]
	   * @returns {String} size
	   */exports.option.asSize=function(value,defaultValue){if(typeof value=='function'){value=value();}if(exports.isString(value)){return value;}else if(exports.isNumber(value)){return value+'px';}else{return defaultValue||null;}};/**
	   * Convert a value into a DOM element
	   * @param {HTMLElement | function | undefined} value
	   * @param {HTMLElement} [defaultValue]
	   * @returns {HTMLElement | null} dom
	   */exports.option.asElement=function(value,defaultValue){if(typeof value=='function'){value=value();}return value||defaultValue||null;};/**
	   * http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
	   *
	   * @param {String} hex
	   * @returns {{r: *, g: *, b: *}} | 255 range
	   */exports.hexToRGB=function(hex){// Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
	var shorthandRegex=/^#?([a-f\d])([a-f\d])([a-f\d])$/i;hex=hex.replace(shorthandRegex,function(m,r,g,b){return r+r+g+g+b+b;});var result=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);return result?{r:parseInt(result[1],16),g:parseInt(result[2],16),b:parseInt(result[3],16)}:null;};/**
	   * This function takes color in hex format or rgb() or rgba() format and overrides the opacity. Returns rgba() string.
	   * @param color
	   * @param opacity
	   * @returns {*}
	   */exports.overrideOpacity=function(color,opacity){if(color.indexOf("rgba")!=-1){return color;}else if(color.indexOf("rgb")!=-1){var rgb=color.substr(color.indexOf("(")+1).replace(")","").split(",");return"rgba("+rgb[0]+","+rgb[1]+","+rgb[2]+","+opacity+")";}else{var rgb=exports.hexToRGB(color);if(rgb==null){return color;}else{return"rgba("+rgb.r+","+rgb.g+","+rgb.b+","+opacity+")";}}};/**
	   *
	   * @param red     0 -- 255
	   * @param green   0 -- 255
	   * @param blue    0 -- 255
	   * @returns {string}
	   * @constructor
	   */exports.RGBToHex=function(red,green,blue){return"#"+((1<<24)+(red<<16)+(green<<8)+blue).toString(16).slice(1);};/**
	   * Parse a color property into an object with border, background, and
	   * highlight colors
	   * @param {Object | String} color
	   * @return {Object} colorObject
	   */exports.parseColor=function(color){var c;if(exports.isString(color)===true){if(exports.isValidRGB(color)===true){var rgb=color.substr(4).substr(0,color.length-5).split(',').map(function(value){return parseInt(value);});color=exports.RGBToHex(rgb[0],rgb[1],rgb[2]);}if(exports.isValidHex(color)===true){var hsv=exports.hexToHSV(color);var lighterColorHSV={h:hsv.h,s:hsv.s*0.8,v:Math.min(1,hsv.v*1.02)};var darkerColorHSV={h:hsv.h,s:Math.min(1,hsv.s*1.25),v:hsv.v*0.8};var darkerColorHex=exports.HSVToHex(darkerColorHSV.h,darkerColorHSV.s,darkerColorHSV.v);var lighterColorHex=exports.HSVToHex(lighterColorHSV.h,lighterColorHSV.s,lighterColorHSV.v);c={background:color,border:darkerColorHex,highlight:{background:lighterColorHex,border:darkerColorHex},hover:{background:lighterColorHex,border:darkerColorHex}};}else{c={background:color,border:color,highlight:{background:color,border:color},hover:{background:color,border:color}};}}else{c={};c.background=color.background||undefined;c.border=color.border||undefined;if(exports.isString(color.highlight)){c.highlight={border:color.highlight,background:color.highlight};}else{c.highlight={};c.highlight.background=color.highlight&&color.highlight.background||undefined;c.highlight.border=color.highlight&&color.highlight.border||undefined;}if(exports.isString(color.hover)){c.hover={border:color.hover,background:color.hover};}else{c.hover={};c.hover.background=color.hover&&color.hover.background||undefined;c.hover.border=color.hover&&color.hover.border||undefined;}}return c;};/**
	   * http://www.javascripter.net/faq/rgb2hsv.htm
	   *
	   * @param red
	   * @param green
	   * @param blue
	   * @returns {*}
	   * @constructor
	   */exports.RGBToHSV=function(red,green,blue){red=red/255;green=green/255;blue=blue/255;var minRGB=Math.min(red,Math.min(green,blue));var maxRGB=Math.max(red,Math.max(green,blue));// Black-gray-white
	if(minRGB==maxRGB){return{h:0,s:0,v:minRGB};}// Colors other than black-gray-white:
	var d=red==minRGB?green-blue:blue==minRGB?red-green:blue-red;var h=red==minRGB?3:blue==minRGB?1:5;var hue=60*(h-d/(maxRGB-minRGB))/360;var saturation=(maxRGB-minRGB)/maxRGB;var value=maxRGB;return{h:hue,s:saturation,v:value};};var cssUtil={// split a string with css styles into an object with key/values
	split:function split(cssText){var styles={};cssText.split(';').forEach(function(style){if(style.trim()!=''){var parts=style.split(':');var key=parts[0].trim();var value=parts[1].trim();styles[key]=value;}});return styles;},// build a css text string from an object with key/values
	join:function join(styles){return Object.keys(styles).map(function(key){return key+': '+styles[key];}).join('; ');}};/**
	   * Append a string with css styles to an element
	   * @param {Element} element
	   * @param {String} cssText
	   */exports.addCssText=function(element,cssText){var currentStyles=cssUtil.split(element.style.cssText);var newStyles=cssUtil.split(cssText);var styles=exports.extend(currentStyles,newStyles);element.style.cssText=cssUtil.join(styles);};/**
	   * Remove a string with css styles from an element
	   * @param {Element} element
	   * @param {String} cssText
	   */exports.removeCssText=function(element,cssText){var styles=cssUtil.split(element.style.cssText);var removeStyles=cssUtil.split(cssText);for(var key in removeStyles){if(removeStyles.hasOwnProperty(key)){delete styles[key];}}element.style.cssText=cssUtil.join(styles);};/**
	   * https://gist.github.com/mjijackson/5311256
	   * @param h
	   * @param s
	   * @param v
	   * @returns {{r: number, g: number, b: number}}
	   * @constructor
	   */exports.HSVToRGB=function(h,s,v){var r,g,b;var i=Math.floor(h*6);var f=h*6-i;var p=v*(1-s);var q=v*(1-f*s);var t=v*(1-(1-f)*s);switch(i%6){case 0:r=v,g=t,b=p;break;case 1:r=q,g=v,b=p;break;case 2:r=p,g=v,b=t;break;case 3:r=p,g=q,b=v;break;case 4:r=t,g=p,b=v;break;case 5:r=v,g=p,b=q;break;}return{r:Math.floor(r*255),g:Math.floor(g*255),b:Math.floor(b*255)};};exports.HSVToHex=function(h,s,v){var rgb=exports.HSVToRGB(h,s,v);return exports.RGBToHex(rgb.r,rgb.g,rgb.b);};exports.hexToHSV=function(hex){var rgb=exports.hexToRGB(hex);return exports.RGBToHSV(rgb.r,rgb.g,rgb.b);};exports.isValidHex=function(hex){var isOk=/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);return isOk;};exports.isValidRGB=function(rgb){rgb=rgb.replace(" ","");var isOk=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/i.test(rgb);return isOk;};exports.isValidRGBA=function(rgba){rgba=rgba.replace(" ","");var isOk=/rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),(.{1,3})\)/i.test(rgba);return isOk;};/**
	   * This recursively redirects the prototype of JSON objects to the referenceObject
	   * This is used for default options.
	   *
	   * @param referenceObject
	   * @returns {*}
	   */exports.selectiveBridgeObject=function(fields,referenceObject){if((typeof referenceObject==='undefined'?'undefined':_typeof(referenceObject))=="object"){var objectTo=Object.create(referenceObject);for(var i=0;i<fields.length;i++){if(referenceObject.hasOwnProperty(fields[i])){if(_typeof(referenceObject[fields[i]])=="object"){objectTo[fields[i]]=exports.bridgeObject(referenceObject[fields[i]]);}}}return objectTo;}else{return null;}};/**
	   * This recursively redirects the prototype of JSON objects to the referenceObject
	   * This is used for default options.
	   *
	   * @param referenceObject
	   * @returns {*}
	   */exports.bridgeObject=function(referenceObject){if((typeof referenceObject==='undefined'?'undefined':_typeof(referenceObject))=="object"){var objectTo=Object.create(referenceObject);for(var i in referenceObject){if(referenceObject.hasOwnProperty(i)){if(_typeof(referenceObject[i])=="object"){objectTo[i]=exports.bridgeObject(referenceObject[i]);}}}return objectTo;}else{return null;}};/**
	   * This method provides a stable sort implementation, very fast for presorted data
	   *
	   * @param a the array
	   * @param a order comparator
	   * @returns {the array}
	   */exports.insertSort=function(a,compare){for(var i=0;i<a.length;i++){var k=a[i];for(var j=i;j>0&&compare(k,a[j-1])<0;j--){a[j]=a[j-1];}a[j]=k;}return a;};/**
	   * this is used to set the options of subobjects in the options object. A requirement of these subobjects
	   * is that they have an 'enabled' element which is optional for the user but mandatory for the program.
	   *
	   * @param [object] mergeTarget | this is either this.options or the options used for the groups.
	   * @param [object] options     | options
	   * @param [String] option      | this is the option key in the options argument
	   */exports.mergeOptions=function(mergeTarget,options,option){var allowDeletion=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var globalOptions=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(options[option]===null){mergeTarget[option]=Object.create(globalOptions[option]);}else{if(options[option]!==undefined){if(typeof options[option]==='boolean'){mergeTarget[option].enabled=options[option];}else{if(options[option].enabled===undefined){mergeTarget[option].enabled=true;}for(var prop in options[option]){if(options[option].hasOwnProperty(prop)){mergeTarget[option][prop]=options[option][prop];}}}}}};/**
	   * This function does a binary search for a visible item in a sorted list. If we find a visible item, the code that uses
	   * this function will then iterate in both directions over this sorted list to find all visible items.
	   *
	   * @param {Item[]} orderedItems       | Items ordered by start
	   * @param {function} comparator       | -1 is lower, 0 is equal, 1 is higher
	   * @param {String} field
	   * @param {String} field2
	   * @returns {number}
	   * @private
	   */exports.binarySearchCustom=function(orderedItems,comparator,field,field2){var maxIterations=10000;var iteration=0;var low=0;var high=orderedItems.length-1;while(low<=high&&iteration<maxIterations){var middle=Math.floor((low+high)/2);var item=orderedItems[middle];var value=field2===undefined?item[field]:item[field][field2];var searchResult=comparator(value);if(searchResult==0){// jihaa, found a visible item!
	return middle;}else if(searchResult==-1){// it is too small --> increase low
	low=middle+1;}else{// it is too big --> decrease high
	high=middle-1;}iteration++;}return-1;};/**
	   * This function does a binary search for a specific value in a sorted array. If it does not exist but is in between of
	   * two values, we return either the one before or the one after, depending on user input
	   * If it is found, we return the index, else -1.
	   *
	   * @param {Array} orderedItems
	   * @param {{start: number, end: number}} target
	   * @param {String} field
	   * @param {String} sidePreference   'before' or 'after'
	   * @param {function} comparator an optional comparator, returning -1,0,1 for <,==,>.
	   * @returns {number}
	   * @private
	   */exports.binarySearchValue=function(orderedItems,target,field,sidePreference,comparator){var maxIterations=10000;var iteration=0;var low=0;var high=orderedItems.length-1;var prevValue,value,nextValue,middle;var comparator=comparator!=undefined?comparator:function(a,b){return a==b?0:a<b?-1:1;};while(low<=high&&iteration<maxIterations){// get a new guess
	middle=Math.floor(0.5*(high+low));prevValue=orderedItems[Math.max(0,middle-1)][field];value=orderedItems[middle][field];nextValue=orderedItems[Math.min(orderedItems.length-1,middle+1)][field];if(comparator(value,target)==0){// we found the target
	return middle;}else if(comparator(prevValue,target)<0&&comparator(value,target)>0){// target is in between of the previous and the current
	return sidePreference=='before'?Math.max(0,middle-1):middle;}else if(comparator(value,target)<0&&comparator(nextValue,target)>0){// target is in between of the current and the next
	return sidePreference=='before'?middle:Math.min(orderedItems.length-1,middle+1);}else{// didnt find the target, we need to change our boundaries.
	if(comparator(value,target)<0){// it is too small --> increase low
	low=middle+1;}else{// it is too big --> decrease high
	high=middle-1;}}iteration++;}// didnt find anything. Return -1.
	return-1;};/*
	   * Easing Functions - inspired from http://gizma.com/easing/
	   * only considering the t value for the range [0, 1] => [0, 1]
	   * https://gist.github.com/gre/1650294
	   */exports.easingFunctions={// no easing, no acceleration
	linear:function linear(t){return t;},// accelerating from zero velocity
	easeInQuad:function easeInQuad(t){return t*t;},// decelerating to zero velocity
	easeOutQuad:function easeOutQuad(t){return t*(2-t);},// acceleration until halfway, then deceleration
	easeInOutQuad:function easeInOutQuad(t){return t<.5?2*t*t:-1+(4-2*t)*t;},// accelerating from zero velocity
	easeInCubic:function easeInCubic(t){return t*t*t;},// decelerating to zero velocity
	easeOutCubic:function easeOutCubic(t){return--t*t*t+1;},// acceleration until halfway, then deceleration
	easeInOutCubic:function easeInOutCubic(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1;},// accelerating from zero velocity
	easeInQuart:function easeInQuart(t){return t*t*t*t;},// decelerating to zero velocity
	easeOutQuart:function easeOutQuart(t){return 1- --t*t*t*t;},// acceleration until halfway, then deceleration
	easeInOutQuart:function easeInOutQuart(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t;},// accelerating from zero velocity
	easeInQuint:function easeInQuint(t){return t*t*t*t*t;},// decelerating to zero velocity
	easeOutQuint:function easeOutQuint(t){return 1+--t*t*t*t*t;},// acceleration until halfway, then deceleration
	easeInOutQuint:function easeInOutQuint(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t;}};exports.getScrollBarWidth=function(){var inner=document.createElement('p');inner.style.width="100%";inner.style.height="200px";var outer=document.createElement('div');outer.style.position="absolute";outer.style.top="0px";outer.style.left="0px";outer.style.visibility="hidden";outer.style.width="200px";outer.style.height="150px";outer.style.overflow="hidden";outer.appendChild(inner);document.body.appendChild(outer);var w1=inner.offsetWidth;outer.style.overflow='scroll';var w2=inner.offsetWidth;if(w1==w2)w2=outer.clientWidth;document.body.removeChild(outer);return w1-w2;};/***/},/* 2 *//***/function(module,exports,__webpack_require__){'use strict';// first check if moment.js is already loaded in the browser window, if so,
	// use this instance. Else, load via commonjs.
	module.exports=typeof window!=='undefined'&&window['moment']||__webpack_require__(3);/***/},/* 3 *//***/function(module,exports,__webpack_require__){/* WEBPACK VAR INJECTION */(function(module){//! moment.js
	//! version : 2.15.2
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	;(function(global,factory){true?module.exports=factory():typeof define==='function'&&define.amd?define(factory):global.moment=factory();})(this,function(){'use strict';var hookCallback;function utils_hooks__hooks(){return hookCallback.apply(null,arguments);}// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback(callback){hookCallback=callback;}function isArray(input){return input instanceof Array||Object.prototype.toString.call(input)==='[object Array]';}function isObject(input){// IE8 will treat undefined and null as object if it wasn't for
	// input != null
	return input!=null&&Object.prototype.toString.call(input)==='[object Object]';}function isObjectEmpty(obj){var k;for(k in obj){// even if its not own property I'd still call it non-empty
	return false;}return true;}function isDate(input){return input instanceof Date||Object.prototype.toString.call(input)==='[object Date]';}function map(arr,fn){var res=[],i;for(i=0;i<arr.length;++i){res.push(fn(arr[i],i));}return res;}function hasOwnProp(a,b){return Object.prototype.hasOwnProperty.call(a,b);}function extend(a,b){for(var i in b){if(hasOwnProp(b,i)){a[i]=b[i];}}if(hasOwnProp(b,'toString')){a.toString=b.toString;}if(hasOwnProp(b,'valueOf')){a.valueOf=b.valueOf;}return a;}function create_utc__createUTC(input,format,locale,strict){return createLocalOrUTC(input,format,locale,strict,true).utc();}function defaultParsingFlags(){// We need to deep clone this object.
	return{empty:false,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:false,invalidMonth:null,invalidFormat:false,userInvalidated:false,iso:false,parsedDateParts:[],meridiem:null};}function getParsingFlags(m){if(m._pf==null){m._pf=defaultParsingFlags();}return m._pf;}var some;if(Array.prototype.some){some=Array.prototype.some;}else{some=function some(fun){var t=Object(this);var len=t.length>>>0;for(var i=0;i<len;i++){if(i in t&&fun.call(this,t[i],i,t)){return true;}}return false;};}function valid__isValid(m){if(m._isValid==null){var flags=getParsingFlags(m);var parsedParts=some.call(flags.parsedDateParts,function(i){return i!=null;});var isNowValid=!isNaN(m._d.getTime())&&flags.overflow<0&&!flags.empty&&!flags.invalidMonth&&!flags.invalidWeekday&&!flags.nullInput&&!flags.invalidFormat&&!flags.userInvalidated&&(!flags.meridiem||flags.meridiem&&parsedParts);if(m._strict){isNowValid=isNowValid&&flags.charsLeftOver===0&&flags.unusedTokens.length===0&&flags.bigHour===undefined;}if(Object.isFrozen==null||!Object.isFrozen(m)){m._isValid=isNowValid;}else{return isNowValid;}}return m._isValid;}function valid__createInvalid(flags){var m=create_utc__createUTC(NaN);if(flags!=null){extend(getParsingFlags(m),flags);}else{getParsingFlags(m).userInvalidated=true;}return m;}function isUndefined(input){return input===void 0;}// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties=utils_hooks__hooks.momentProperties=[];function copyConfig(to,from){var i,prop,val;if(!isUndefined(from._isAMomentObject)){to._isAMomentObject=from._isAMomentObject;}if(!isUndefined(from._i)){to._i=from._i;}if(!isUndefined(from._f)){to._f=from._f;}if(!isUndefined(from._l)){to._l=from._l;}if(!isUndefined(from._strict)){to._strict=from._strict;}if(!isUndefined(from._tzm)){to._tzm=from._tzm;}if(!isUndefined(from._isUTC)){to._isUTC=from._isUTC;}if(!isUndefined(from._offset)){to._offset=from._offset;}if(!isUndefined(from._pf)){to._pf=getParsingFlags(from);}if(!isUndefined(from._locale)){to._locale=from._locale;}if(momentProperties.length>0){for(i in momentProperties){prop=momentProperties[i];val=from[prop];if(!isUndefined(val)){to[prop]=val;}}}return to;}var updateInProgress=false;// Moment prototype object
	function Moment(config){copyConfig(this,config);this._d=new Date(config._d!=null?config._d.getTime():NaN);// Prevent infinite loop in case updateOffset creates new moment
	// objects.
	if(updateInProgress===false){updateInProgress=true;utils_hooks__hooks.updateOffset(this);updateInProgress=false;}}function isMoment(obj){return obj instanceof Moment||obj!=null&&obj._isAMomentObject!=null;}function absFloor(number){if(number<0){// -0 -> 0
	return Math.ceil(number)||0;}else{return Math.floor(number);}}function toInt(argumentForCoercion){var coercedNumber=+argumentForCoercion,value=0;if(coercedNumber!==0&&isFinite(coercedNumber)){value=absFloor(coercedNumber);}return value;}// compare two arrays, return the number of differences
	function compareArrays(array1,array2,dontConvert){var len=Math.min(array1.length,array2.length),lengthDiff=Math.abs(array1.length-array2.length),diffs=0,i;for(i=0;i<len;i++){if(dontConvert&&array1[i]!==array2[i]||!dontConvert&&toInt(array1[i])!==toInt(array2[i])){diffs++;}}return diffs+lengthDiff;}function warn(msg){if(utils_hooks__hooks.suppressDeprecationWarnings===false&&typeof console!=='undefined'&&console.warn){console.warn('Deprecation warning: '+msg);}}function deprecate(msg,fn){var firstTime=true;return extend(function(){if(utils_hooks__hooks.deprecationHandler!=null){utils_hooks__hooks.deprecationHandler(null,msg);}if(firstTime){var args=[];var arg;for(var i=0;i<arguments.length;i++){arg='';if(_typeof2(arguments[i])==='object'){arg+='\n['+i+'] ';for(var key in arguments[0]){arg+=key+': '+arguments[0][key]+', ';}arg=arg.slice(0,-2);// Remove trailing comma and space
	}else{arg=arguments[i];}args.push(arg);}warn(msg+'\nArguments: '+Array.prototype.slice.call(args).join('')+'\n'+new Error().stack);firstTime=false;}return fn.apply(this,arguments);},fn);}var deprecations={};function deprecateSimple(name,msg){if(utils_hooks__hooks.deprecationHandler!=null){utils_hooks__hooks.deprecationHandler(name,msg);}if(!deprecations[name]){warn(msg);deprecations[name]=true;}}utils_hooks__hooks.suppressDeprecationWarnings=false;utils_hooks__hooks.deprecationHandler=null;function isFunction(input){return input instanceof Function||Object.prototype.toString.call(input)==='[object Function]';}function locale_set__set(config){var prop,i;for(i in config){prop=config[i];if(isFunction(prop)){this[i]=prop;}else{this['_'+i]=prop;}}this._config=config;// Lenient ordinal parsing accepts just a number in addition to
	// number + (possibly) stuff coming from _ordinalParseLenient.
	this._ordinalParseLenient=new RegExp(this._ordinalParse.source+'|'+/\d{1,2}/.source);}function mergeConfigs(parentConfig,childConfig){var res=extend({},parentConfig),prop;for(prop in childConfig){if(hasOwnProp(childConfig,prop)){if(isObject(parentConfig[prop])&&isObject(childConfig[prop])){res[prop]={};extend(res[prop],parentConfig[prop]);extend(res[prop],childConfig[prop]);}else if(childConfig[prop]!=null){res[prop]=childConfig[prop];}else{delete res[prop];}}}for(prop in parentConfig){if(hasOwnProp(parentConfig,prop)&&!hasOwnProp(childConfig,prop)&&isObject(parentConfig[prop])){// make sure changes to properties don't modify parent config
	res[prop]=extend({},res[prop]);}}return res;}function Locale(config){if(config!=null){this.set(config);}}var keys;if(Object.keys){keys=Object.keys;}else{keys=function keys(obj){var i,res=[];for(i in obj){if(hasOwnProp(obj,i)){res.push(i);}}return res;};}var defaultCalendar={sameDay:'[Today at] LT',nextDay:'[Tomorrow at] LT',nextWeek:'dddd [at] LT',lastDay:'[Yesterday at] LT',lastWeek:'[Last] dddd [at] LT',sameElse:'L'};function locale_calendar__calendar(key,mom,now){var output=this._calendar[key]||this._calendar['sameElse'];return isFunction(output)?output.call(mom,now):output;}var defaultLongDateFormat={LTS:'h:mm:ss A',LT:'h:mm A',L:'MM/DD/YYYY',LL:'MMMM D, YYYY',LLL:'MMMM D, YYYY h:mm A',LLLL:'dddd, MMMM D, YYYY h:mm A'};function longDateFormat(key){var format=this._longDateFormat[key],formatUpper=this._longDateFormat[key.toUpperCase()];if(format||!formatUpper){return format;}this._longDateFormat[key]=formatUpper.replace(/MMMM|MM|DD|dddd/g,function(val){return val.slice(1);});return this._longDateFormat[key];}var defaultInvalidDate='Invalid date';function invalidDate(){return this._invalidDate;}var defaultOrdinal='%d';var defaultOrdinalParse=/\d{1,2}/;function ordinal(number){return this._ordinal.replace('%d',number);}var defaultRelativeTime={future:'in %s',past:'%s ago',s:'a few seconds',m:'a minute',mm:'%d minutes',h:'an hour',hh:'%d hours',d:'a day',dd:'%d days',M:'a month',MM:'%d months',y:'a year',yy:'%d years'};function relative__relativeTime(number,withoutSuffix,string,isFuture){var output=this._relativeTime[string];return isFunction(output)?output(number,withoutSuffix,string,isFuture):output.replace(/%d/i,number);}function pastFuture(diff,output){var format=this._relativeTime[diff>0?'future':'past'];return isFunction(format)?format(output):format.replace(/%s/i,output);}var aliases={};function addUnitAlias(unit,shorthand){var lowerCase=unit.toLowerCase();aliases[lowerCase]=aliases[lowerCase+'s']=aliases[shorthand]=unit;}function normalizeUnits(units){return typeof units==='string'?aliases[units]||aliases[units.toLowerCase()]:undefined;}function normalizeObjectUnits(inputObject){var normalizedInput={},normalizedProp,prop;for(prop in inputObject){if(hasOwnProp(inputObject,prop)){normalizedProp=normalizeUnits(prop);if(normalizedProp){normalizedInput[normalizedProp]=inputObject[prop];}}}return normalizedInput;}var priorities={};function addUnitPriority(unit,priority){priorities[unit]=priority;}function getPrioritizedUnits(unitsObj){var units=[];for(var u in unitsObj){units.push({unit:u,priority:priorities[u]});}units.sort(function(a,b){return a.priority-b.priority;});return units;}function makeGetSet(unit,keepTime){return function(value){if(value!=null){get_set__set(this,unit,value);utils_hooks__hooks.updateOffset(this,keepTime);return this;}else{return get_set__get(this,unit);}};}function get_set__get(mom,unit){return mom.isValid()?mom._d['get'+(mom._isUTC?'UTC':'')+unit]():NaN;}function get_set__set(mom,unit,value){if(mom.isValid()){mom._d['set'+(mom._isUTC?'UTC':'')+unit](value);}}// MOMENTS
	function stringGet(units){units=normalizeUnits(units);if(isFunction(this[units])){return this[units]();}return this;}function stringSet(units,value){if((typeof units==='undefined'?'undefined':_typeof2(units))==='object'){units=normalizeObjectUnits(units);var prioritized=getPrioritizedUnits(units);for(var i=0;i<prioritized.length;i++){this[prioritized[i].unit](units[prioritized[i].unit]);}}else{units=normalizeUnits(units);if(isFunction(this[units])){return this[units](value);}}return this;}function zeroFill(number,targetLength,forceSign){var absNumber=''+Math.abs(number),zerosToFill=targetLength-absNumber.length,sign=number>=0;return(sign?forceSign?'+':'':'-')+Math.pow(10,Math.max(0,zerosToFill)).toString().substr(1)+absNumber;}var formattingTokens=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;var localFormattingTokens=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;var formatFunctions={};var formatTokenFunctions={};// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken(token,padded,ordinal,callback){var func=callback;if(typeof callback==='string'){func=function func(){return this[callback]();};}if(token){formatTokenFunctions[token]=func;}if(padded){formatTokenFunctions[padded[0]]=function(){return zeroFill(func.apply(this,arguments),padded[1],padded[2]);};}if(ordinal){formatTokenFunctions[ordinal]=function(){return this.localeData().ordinal(func.apply(this,arguments),token);};}}function removeFormattingTokens(input){if(input.match(/\[[\s\S]/)){return input.replace(/^\[|\]$/g,'');}return input.replace(/\\/g,'');}function makeFormatFunction(format){var array=format.match(formattingTokens),i,length;for(i=0,length=array.length;i<length;i++){if(formatTokenFunctions[array[i]]){array[i]=formatTokenFunctions[array[i]];}else{array[i]=removeFormattingTokens(array[i]);}}return function(mom){var output='',i;for(i=0;i<length;i++){output+=array[i]instanceof Function?array[i].call(mom,format):array[i];}return output;};}// format date using native date object
	function formatMoment(m,format){if(!m.isValid()){return m.localeData().invalidDate();}format=expandFormat(format,m.localeData());formatFunctions[format]=formatFunctions[format]||makeFormatFunction(format);return formatFunctions[format](m);}function expandFormat(format,locale){var i=5;function replaceLongDateFormatTokens(input){return locale.longDateFormat(input)||input;}localFormattingTokens.lastIndex=0;while(i>=0&&localFormattingTokens.test(format)){format=format.replace(localFormattingTokens,replaceLongDateFormatTokens);localFormattingTokens.lastIndex=0;i-=1;}return format;}var match1=/\d/;//       0 - 9
	var match2=/\d\d/;//      00 - 99
	var match3=/\d{3}/;//     000 - 999
	var match4=/\d{4}/;//    0000 - 9999
	var match6=/[+-]?\d{6}/;// -999999 - 999999
	var match1to2=/\d\d?/;//       0 - 99
	var match3to4=/\d\d\d\d?/;//     999 - 9999
	var match5to6=/\d\d\d\d\d\d?/;//   99999 - 999999
	var match1to3=/\d{1,3}/;//       0 - 999
	var match1to4=/\d{1,4}/;//       0 - 9999
	var match1to6=/[+-]?\d{1,6}/;// -999999 - 999999
	var matchUnsigned=/\d+/;//       0 - inf
	var matchSigned=/[+-]?\d+/;//    -inf - inf
	var matchOffset=/Z|[+-]\d\d:?\d\d/gi;// +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset=/Z|[+-]\d\d(?::?\d\d)?/gi;// +00 -00 +00:00 -00:00 +0000 -0000 or Z
	var matchTimestamp=/[+-]?\d+(\.\d{1,3})?/;// 123456789 123456789.123
	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;var regexes={};function addRegexToken(token,regex,strictRegex){regexes[token]=isFunction(regex)?regex:function(isStrict,localeData){return isStrict&&strictRegex?strictRegex:regex;};}function getParseRegexForToken(token,config){if(!hasOwnProp(regexes,token)){return new RegExp(unescapeFormat(token));}return regexes[token](config._strict,config._locale);}// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s){return regexEscape(s.replace('\\','').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(matched,p1,p2,p3,p4){return p1||p2||p3||p4;}));}function regexEscape(s){return s.replace(/[-\/\\^$*+?.()|[\]{}]/g,'\\$&');}var tokens={};function addParseToken(token,callback){var i,func=callback;if(typeof token==='string'){token=[token];}if(typeof callback==='number'){func=function func(input,array){array[callback]=toInt(input);};}for(i=0;i<token.length;i++){tokens[token[i]]=func;}}function addWeekParseToken(token,callback){addParseToken(token,function(input,array,config,token){config._w=config._w||{};callback(input,config._w,config,token);});}function addTimeToArrayFromToken(token,input,config){if(input!=null&&hasOwnProp(tokens,token)){tokens[token](input,config._a,config,token);}}var YEAR=0;var MONTH=1;var DATE=2;var HOUR=3;var MINUTE=4;var SECOND=5;var MILLISECOND=6;var WEEK=7;var WEEKDAY=8;var indexOf;if(Array.prototype.indexOf){indexOf=Array.prototype.indexOf;}else{indexOf=function indexOf(o){// I know
	var i;for(i=0;i<this.length;++i){if(this[i]===o){return i;}}return-1;};}function daysInMonth(year,month){return new Date(Date.UTC(year,month+1,0)).getUTCDate();}// FORMATTING
	addFormatToken('M',['MM',2],'Mo',function(){return this.month()+1;});addFormatToken('MMM',0,0,function(format){return this.localeData().monthsShort(this,format);});addFormatToken('MMMM',0,0,function(format){return this.localeData().months(this,format);});// ALIASES
	addUnitAlias('month','M');// PRIORITY
	addUnitPriority('month',8);// PARSING
	addRegexToken('M',match1to2);addRegexToken('MM',match1to2,match2);addRegexToken('MMM',function(isStrict,locale){return locale.monthsShortRegex(isStrict);});addRegexToken('MMMM',function(isStrict,locale){return locale.monthsRegex(isStrict);});addParseToken(['M','MM'],function(input,array){array[MONTH]=toInt(input)-1;});addParseToken(['MMM','MMMM'],function(input,array,config,token){var month=config._locale.monthsParse(input,token,config._strict);// if we didn't find a month name, mark the date as invalid.
	if(month!=null){array[MONTH]=month;}else{getParsingFlags(config).invalidMonth=input;}});// LOCALES
	var MONTHS_IN_FORMAT=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;var defaultLocaleMonths='January_February_March_April_May_June_July_August_September_October_November_December'.split('_');function localeMonths(m,format){if(!m){return this._months;}return isArray(this._months)?this._months[m.month()]:this._months[(this._months.isFormat||MONTHS_IN_FORMAT).test(format)?'format':'standalone'][m.month()];}var defaultLocaleMonthsShort='Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');function localeMonthsShort(m,format){if(!m){return this._monthsShort;}return isArray(this._monthsShort)?this._monthsShort[m.month()]:this._monthsShort[MONTHS_IN_FORMAT.test(format)?'format':'standalone'][m.month()];}function units_month__handleStrictParse(monthName,format,strict){var i,ii,mom,llc=monthName.toLocaleLowerCase();if(!this._monthsParse){// this is not used
	this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];for(i=0;i<12;++i){mom=create_utc__createUTC([2000,i]);this._shortMonthsParse[i]=this.monthsShort(mom,'').toLocaleLowerCase();this._longMonthsParse[i]=this.months(mom,'').toLocaleLowerCase();}}if(strict){if(format==='MMM'){ii=indexOf.call(this._shortMonthsParse,llc);return ii!==-1?ii:null;}else{ii=indexOf.call(this._longMonthsParse,llc);return ii!==-1?ii:null;}}else{if(format==='MMM'){ii=indexOf.call(this._shortMonthsParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._longMonthsParse,llc);return ii!==-1?ii:null;}else{ii=indexOf.call(this._longMonthsParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._shortMonthsParse,llc);return ii!==-1?ii:null;}}}function localeMonthsParse(monthName,format,strict){var i,mom,regex;if(this._monthsParseExact){return units_month__handleStrictParse.call(this,monthName,format,strict);}if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];}// TODO: add sorting
	// Sorting makes sure if one month (or abbr) is a prefix of another
	// see sorting in computeMonthsParse
	for(i=0;i<12;i++){// make the regex if we don't have it already
	mom=create_utc__createUTC([2000,i]);if(strict&&!this._longMonthsParse[i]){this._longMonthsParse[i]=new RegExp('^'+this.months(mom,'').replace('.','')+'$','i');this._shortMonthsParse[i]=new RegExp('^'+this.monthsShort(mom,'').replace('.','')+'$','i');}if(!strict&&!this._monthsParse[i]){regex='^'+this.months(mom,'')+'|^'+this.monthsShort(mom,'');this._monthsParse[i]=new RegExp(regex.replace('.',''),'i');}// test the regex
	if(strict&&format==='MMMM'&&this._longMonthsParse[i].test(monthName)){return i;}else if(strict&&format==='MMM'&&this._shortMonthsParse[i].test(monthName)){return i;}else if(!strict&&this._monthsParse[i].test(monthName)){return i;}}}// MOMENTS
	function setMonth(mom,value){var dayOfMonth;if(!mom.isValid()){// No op
	return mom;}if(typeof value==='string'){if(/^\d+$/.test(value)){value=toInt(value);}else{value=mom.localeData().monthsParse(value);// TODO: Another silent failure?
	if(typeof value!=='number'){return mom;}}}dayOfMonth=Math.min(mom.date(),daysInMonth(mom.year(),value));mom._d['set'+(mom._isUTC?'UTC':'')+'Month'](value,dayOfMonth);return mom;}function getSetMonth(value){if(value!=null){setMonth(this,value);utils_hooks__hooks.updateOffset(this,true);return this;}else{return get_set__get(this,'Month');}}function getDaysInMonth(){return daysInMonth(this.year(),this.month());}var defaultMonthsShortRegex=matchWord;function monthsShortRegex(isStrict){if(this._monthsParseExact){if(!hasOwnProp(this,'_monthsRegex')){computeMonthsParse.call(this);}if(isStrict){return this._monthsShortStrictRegex;}else{return this._monthsShortRegex;}}else{if(!hasOwnProp(this,'_monthsShortRegex')){this._monthsShortRegex=defaultMonthsShortRegex;}return this._monthsShortStrictRegex&&isStrict?this._monthsShortStrictRegex:this._monthsShortRegex;}}var defaultMonthsRegex=matchWord;function monthsRegex(isStrict){if(this._monthsParseExact){if(!hasOwnProp(this,'_monthsRegex')){computeMonthsParse.call(this);}if(isStrict){return this._monthsStrictRegex;}else{return this._monthsRegex;}}else{if(!hasOwnProp(this,'_monthsRegex')){this._monthsRegex=defaultMonthsRegex;}return this._monthsStrictRegex&&isStrict?this._monthsStrictRegex:this._monthsRegex;}}function computeMonthsParse(){function cmpLenRev(a,b){return b.length-a.length;}var shortPieces=[],longPieces=[],mixedPieces=[],i,mom;for(i=0;i<12;i++){// make the regex if we don't have it already
	mom=create_utc__createUTC([2000,i]);shortPieces.push(this.monthsShort(mom,''));longPieces.push(this.months(mom,''));mixedPieces.push(this.months(mom,''));mixedPieces.push(this.monthsShort(mom,''));}// Sorting makes sure if one month (or abbr) is a prefix of another it
	// will match the longer piece.
	shortPieces.sort(cmpLenRev);longPieces.sort(cmpLenRev);mixedPieces.sort(cmpLenRev);for(i=0;i<12;i++){shortPieces[i]=regexEscape(shortPieces[i]);longPieces[i]=regexEscape(longPieces[i]);}for(i=0;i<24;i++){mixedPieces[i]=regexEscape(mixedPieces[i]);}this._monthsRegex=new RegExp('^('+mixedPieces.join('|')+')','i');this._monthsShortRegex=this._monthsRegex;this._monthsStrictRegex=new RegExp('^('+longPieces.join('|')+')','i');this._monthsShortStrictRegex=new RegExp('^('+shortPieces.join('|')+')','i');}// FORMATTING
	addFormatToken('Y',0,0,function(){var y=this.year();return y<=9999?''+y:'+'+y;});addFormatToken(0,['YY',2],0,function(){return this.year()%100;});addFormatToken(0,['YYYY',4],0,'year');addFormatToken(0,['YYYYY',5],0,'year');addFormatToken(0,['YYYYYY',6,true],0,'year');// ALIASES
	addUnitAlias('year','y');// PRIORITIES
	addUnitPriority('year',1);// PARSING
	addRegexToken('Y',matchSigned);addRegexToken('YY',match1to2,match2);addRegexToken('YYYY',match1to4,match4);addRegexToken('YYYYY',match1to6,match6);addRegexToken('YYYYYY',match1to6,match6);addParseToken(['YYYYY','YYYYYY'],YEAR);addParseToken('YYYY',function(input,array){array[YEAR]=input.length===2?utils_hooks__hooks.parseTwoDigitYear(input):toInt(input);});addParseToken('YY',function(input,array){array[YEAR]=utils_hooks__hooks.parseTwoDigitYear(input);});addParseToken('Y',function(input,array){array[YEAR]=parseInt(input,10);});// HELPERS
	function daysInYear(year){return isLeapYear(year)?366:365;}function isLeapYear(year){return year%4===0&&year%100!==0||year%400===0;}// HOOKS
	utils_hooks__hooks.parseTwoDigitYear=function(input){return toInt(input)+(toInt(input)>68?1900:2000);};// MOMENTS
	var getSetYear=makeGetSet('FullYear',true);function getIsLeapYear(){return isLeapYear(this.year());}function createDate(y,m,d,h,M,s,ms){//can't just apply() to create a date:
	//http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	var date=new Date(y,m,d,h,M,s,ms);//the date constructor remaps years 0-99 to 1900-1999
	if(y<100&&y>=0&&isFinite(date.getFullYear())){date.setFullYear(y);}return date;}function createUTCDate(y){var date=new Date(Date.UTC.apply(null,arguments));//the Date.UTC function remaps years 0-99 to 1900-1999
	if(y<100&&y>=0&&isFinite(date.getUTCFullYear())){date.setUTCFullYear(y);}return date;}// start-of-first-week - start-of-year
	function firstWeekOffset(year,dow,doy){var// first-week day -- which january is always in the first week (4 for iso, 1 for other)
	fwd=7+dow-doy,// first-week day local weekday -- which local weekday is fwd
	fwdlw=(7+createUTCDate(year,0,fwd).getUTCDay()-dow)%7;return-fwdlw+fwd-1;}//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year,week,weekday,dow,doy){var localWeekday=(7+weekday-dow)%7,weekOffset=firstWeekOffset(year,dow,doy),dayOfYear=1+7*(week-1)+localWeekday+weekOffset,resYear,resDayOfYear;if(dayOfYear<=0){resYear=year-1;resDayOfYear=daysInYear(resYear)+dayOfYear;}else if(dayOfYear>daysInYear(year)){resYear=year+1;resDayOfYear=dayOfYear-daysInYear(year);}else{resYear=year;resDayOfYear=dayOfYear;}return{year:resYear,dayOfYear:resDayOfYear};}function weekOfYear(mom,dow,doy){var weekOffset=firstWeekOffset(mom.year(),dow,doy),week=Math.floor((mom.dayOfYear()-weekOffset-1)/7)+1,resWeek,resYear;if(week<1){resYear=mom.year()-1;resWeek=week+weeksInYear(resYear,dow,doy);}else if(week>weeksInYear(mom.year(),dow,doy)){resWeek=week-weeksInYear(mom.year(),dow,doy);resYear=mom.year()+1;}else{resYear=mom.year();resWeek=week;}return{week:resWeek,year:resYear};}function weeksInYear(year,dow,doy){var weekOffset=firstWeekOffset(year,dow,doy),weekOffsetNext=firstWeekOffset(year+1,dow,doy);return(daysInYear(year)-weekOffset+weekOffsetNext)/7;}// FORMATTING
	addFormatToken('w',['ww',2],'wo','week');addFormatToken('W',['WW',2],'Wo','isoWeek');// ALIASES
	addUnitAlias('week','w');addUnitAlias('isoWeek','W');// PRIORITIES
	addUnitPriority('week',5);addUnitPriority('isoWeek',5);// PARSING
	addRegexToken('w',match1to2);addRegexToken('ww',match1to2,match2);addRegexToken('W',match1to2);addRegexToken('WW',match1to2,match2);addWeekParseToken(['w','ww','W','WW'],function(input,week,config,token){week[token.substr(0,1)]=toInt(input);});// HELPERS
	// LOCALES
	function localeWeek(mom){return weekOfYear(mom,this._week.dow,this._week.doy).week;}var defaultLocaleWeek={dow:0,// Sunday is the first day of the week.
	doy:6// The week that contains Jan 1st is the first week of the year.
	};function localeFirstDayOfWeek(){return this._week.dow;}function localeFirstDayOfYear(){return this._week.doy;}// MOMENTS
	function getSetWeek(input){var week=this.localeData().week(this);return input==null?week:this.add((input-week)*7,'d');}function getSetISOWeek(input){var week=weekOfYear(this,1,4).week;return input==null?week:this.add((input-week)*7,'d');}// FORMATTING
	addFormatToken('d',0,'do','day');addFormatToken('dd',0,0,function(format){return this.localeData().weekdaysMin(this,format);});addFormatToken('ddd',0,0,function(format){return this.localeData().weekdaysShort(this,format);});addFormatToken('dddd',0,0,function(format){return this.localeData().weekdays(this,format);});addFormatToken('e',0,0,'weekday');addFormatToken('E',0,0,'isoWeekday');// ALIASES
	addUnitAlias('day','d');addUnitAlias('weekday','e');addUnitAlias('isoWeekday','E');// PRIORITY
	addUnitPriority('day',11);addUnitPriority('weekday',11);addUnitPriority('isoWeekday',11);// PARSING
	addRegexToken('d',match1to2);addRegexToken('e',match1to2);addRegexToken('E',match1to2);addRegexToken('dd',function(isStrict,locale){return locale.weekdaysMinRegex(isStrict);});addRegexToken('ddd',function(isStrict,locale){return locale.weekdaysShortRegex(isStrict);});addRegexToken('dddd',function(isStrict,locale){return locale.weekdaysRegex(isStrict);});addWeekParseToken(['dd','ddd','dddd'],function(input,week,config,token){var weekday=config._locale.weekdaysParse(input,token,config._strict);// if we didn't get a weekday name, mark the date as invalid
	if(weekday!=null){week.d=weekday;}else{getParsingFlags(config).invalidWeekday=input;}});addWeekParseToken(['d','e','E'],function(input,week,config,token){week[token]=toInt(input);});// HELPERS
	function parseWeekday(input,locale){if(typeof input!=='string'){return input;}if(!isNaN(input)){return parseInt(input,10);}input=locale.weekdaysParse(input);if(typeof input==='number'){return input;}return null;}function parseIsoWeekday(input,locale){if(typeof input==='string'){return locale.weekdaysParse(input)%7||7;}return isNaN(input)?null:input;}// LOCALES
	var defaultLocaleWeekdays='Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');function localeWeekdays(m,format){if(!m){return this._weekdays;}return isArray(this._weekdays)?this._weekdays[m.day()]:this._weekdays[this._weekdays.isFormat.test(format)?'format':'standalone'][m.day()];}var defaultLocaleWeekdaysShort='Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');function localeWeekdaysShort(m){return m?this._weekdaysShort[m.day()]:this._weekdaysShort;}var defaultLocaleWeekdaysMin='Su_Mo_Tu_We_Th_Fr_Sa'.split('_');function localeWeekdaysMin(m){return m?this._weekdaysMin[m.day()]:this._weekdaysMin;}function day_of_week__handleStrictParse(weekdayName,format,strict){var i,ii,mom,llc=weekdayName.toLocaleLowerCase();if(!this._weekdaysParse){this._weekdaysParse=[];this._shortWeekdaysParse=[];this._minWeekdaysParse=[];for(i=0;i<7;++i){mom=create_utc__createUTC([2000,1]).day(i);this._minWeekdaysParse[i]=this.weekdaysMin(mom,'').toLocaleLowerCase();this._shortWeekdaysParse[i]=this.weekdaysShort(mom,'').toLocaleLowerCase();this._weekdaysParse[i]=this.weekdays(mom,'').toLocaleLowerCase();}}if(strict){if(format==='dddd'){ii=indexOf.call(this._weekdaysParse,llc);return ii!==-1?ii:null;}else if(format==='ddd'){ii=indexOf.call(this._shortWeekdaysParse,llc);return ii!==-1?ii:null;}else{ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null;}}else{if(format==='dddd'){ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._shortWeekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null;}else if(format==='ddd'){ii=indexOf.call(this._shortWeekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._minWeekdaysParse,llc);return ii!==-1?ii:null;}else{ii=indexOf.call(this._minWeekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._weekdaysParse,llc);if(ii!==-1){return ii;}ii=indexOf.call(this._shortWeekdaysParse,llc);return ii!==-1?ii:null;}}}function localeWeekdaysParse(weekdayName,format,strict){var i,mom,regex;if(this._weekdaysParseExact){return day_of_week__handleStrictParse.call(this,weekdayName,format,strict);}if(!this._weekdaysParse){this._weekdaysParse=[];this._minWeekdaysParse=[];this._shortWeekdaysParse=[];this._fullWeekdaysParse=[];}for(i=0;i<7;i++){// make the regex if we don't have it already
	mom=create_utc__createUTC([2000,1]).day(i);if(strict&&!this._fullWeekdaysParse[i]){this._fullWeekdaysParse[i]=new RegExp('^'+this.weekdays(mom,'').replace('.','\.?')+'$','i');this._shortWeekdaysParse[i]=new RegExp('^'+this.weekdaysShort(mom,'').replace('.','\.?')+'$','i');this._minWeekdaysParse[i]=new RegExp('^'+this.weekdaysMin(mom,'').replace('.','\.?')+'$','i');}if(!this._weekdaysParse[i]){regex='^'+this.weekdays(mom,'')+'|^'+this.weekdaysShort(mom,'')+'|^'+this.weekdaysMin(mom,'');this._weekdaysParse[i]=new RegExp(regex.replace('.',''),'i');}// test the regex
	if(strict&&format==='dddd'&&this._fullWeekdaysParse[i].test(weekdayName)){return i;}else if(strict&&format==='ddd'&&this._shortWeekdaysParse[i].test(weekdayName)){return i;}else if(strict&&format==='dd'&&this._minWeekdaysParse[i].test(weekdayName)){return i;}else if(!strict&&this._weekdaysParse[i].test(weekdayName)){return i;}}}// MOMENTS
	function getSetDayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN;}var day=this._isUTC?this._d.getUTCDay():this._d.getDay();if(input!=null){input=parseWeekday(input,this.localeData());return this.add(input-day,'d');}else{return day;}}function getSetLocaleDayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN;}var weekday=(this.day()+7-this.localeData()._week.dow)%7;return input==null?weekday:this.add(input-weekday,'d');}function getSetISODayOfWeek(input){if(!this.isValid()){return input!=null?this:NaN;}// behaves the same as moment#day except
	// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	// as a setter, sunday should belong to the previous week.
	if(input!=null){var weekday=parseIsoWeekday(input,this.localeData());return this.day(this.day()%7?weekday:weekday-7);}else{return this.day()||7;}}var defaultWeekdaysRegex=matchWord;function weekdaysRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this);}if(isStrict){return this._weekdaysStrictRegex;}else{return this._weekdaysRegex;}}else{if(!hasOwnProp(this,'_weekdaysRegex')){this._weekdaysRegex=defaultWeekdaysRegex;}return this._weekdaysStrictRegex&&isStrict?this._weekdaysStrictRegex:this._weekdaysRegex;}}var defaultWeekdaysShortRegex=matchWord;function weekdaysShortRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this);}if(isStrict){return this._weekdaysShortStrictRegex;}else{return this._weekdaysShortRegex;}}else{if(!hasOwnProp(this,'_weekdaysShortRegex')){this._weekdaysShortRegex=defaultWeekdaysShortRegex;}return this._weekdaysShortStrictRegex&&isStrict?this._weekdaysShortStrictRegex:this._weekdaysShortRegex;}}var defaultWeekdaysMinRegex=matchWord;function weekdaysMinRegex(isStrict){if(this._weekdaysParseExact){if(!hasOwnProp(this,'_weekdaysRegex')){computeWeekdaysParse.call(this);}if(isStrict){return this._weekdaysMinStrictRegex;}else{return this._weekdaysMinRegex;}}else{if(!hasOwnProp(this,'_weekdaysMinRegex')){this._weekdaysMinRegex=defaultWeekdaysMinRegex;}return this._weekdaysMinStrictRegex&&isStrict?this._weekdaysMinStrictRegex:this._weekdaysMinRegex;}}function computeWeekdaysParse(){function cmpLenRev(a,b){return b.length-a.length;}var minPieces=[],shortPieces=[],longPieces=[],mixedPieces=[],i,mom,minp,shortp,longp;for(i=0;i<7;i++){// make the regex if we don't have it already
	mom=create_utc__createUTC([2000,1]).day(i);minp=this.weekdaysMin(mom,'');shortp=this.weekdaysShort(mom,'');longp=this.weekdays(mom,'');minPieces.push(minp);shortPieces.push(shortp);longPieces.push(longp);mixedPieces.push(minp);mixedPieces.push(shortp);mixedPieces.push(longp);}// Sorting makes sure if one weekday (or abbr) is a prefix of another it
	// will match the longer piece.
	minPieces.sort(cmpLenRev);shortPieces.sort(cmpLenRev);longPieces.sort(cmpLenRev);mixedPieces.sort(cmpLenRev);for(i=0;i<7;i++){shortPieces[i]=regexEscape(shortPieces[i]);longPieces[i]=regexEscape(longPieces[i]);mixedPieces[i]=regexEscape(mixedPieces[i]);}this._weekdaysRegex=new RegExp('^('+mixedPieces.join('|')+')','i');this._weekdaysShortRegex=this._weekdaysRegex;this._weekdaysMinRegex=this._weekdaysRegex;this._weekdaysStrictRegex=new RegExp('^('+longPieces.join('|')+')','i');this._weekdaysShortStrictRegex=new RegExp('^('+shortPieces.join('|')+')','i');this._weekdaysMinStrictRegex=new RegExp('^('+minPieces.join('|')+')','i');}// FORMATTING
	function hFormat(){return this.hours()%12||12;}function kFormat(){return this.hours()||24;}addFormatToken('H',['HH',2],0,'hour');addFormatToken('h',['hh',2],0,hFormat);addFormatToken('k',['kk',2],0,kFormat);addFormatToken('hmm',0,0,function(){return''+hFormat.apply(this)+zeroFill(this.minutes(),2);});addFormatToken('hmmss',0,0,function(){return''+hFormat.apply(this)+zeroFill(this.minutes(),2)+zeroFill(this.seconds(),2);});addFormatToken('Hmm',0,0,function(){return''+this.hours()+zeroFill(this.minutes(),2);});addFormatToken('Hmmss',0,0,function(){return''+this.hours()+zeroFill(this.minutes(),2)+zeroFill(this.seconds(),2);});function meridiem(token,lowercase){addFormatToken(token,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),lowercase);});}meridiem('a',true);meridiem('A',false);// ALIASES
	addUnitAlias('hour','h');// PRIORITY
	addUnitPriority('hour',13);// PARSING
	function matchMeridiem(isStrict,locale){return locale._meridiemParse;}addRegexToken('a',matchMeridiem);addRegexToken('A',matchMeridiem);addRegexToken('H',match1to2);addRegexToken('h',match1to2);addRegexToken('HH',match1to2,match2);addRegexToken('hh',match1to2,match2);addRegexToken('hmm',match3to4);addRegexToken('hmmss',match5to6);addRegexToken('Hmm',match3to4);addRegexToken('Hmmss',match5to6);addParseToken(['H','HH'],HOUR);addParseToken(['a','A'],function(input,array,config){config._isPm=config._locale.isPM(input);config._meridiem=input;});addParseToken(['h','hh'],function(input,array,config){array[HOUR]=toInt(input);getParsingFlags(config).bigHour=true;});addParseToken('hmm',function(input,array,config){var pos=input.length-2;array[HOUR]=toInt(input.substr(0,pos));array[MINUTE]=toInt(input.substr(pos));getParsingFlags(config).bigHour=true;});addParseToken('hmmss',function(input,array,config){var pos1=input.length-4;var pos2=input.length-2;array[HOUR]=toInt(input.substr(0,pos1));array[MINUTE]=toInt(input.substr(pos1,2));array[SECOND]=toInt(input.substr(pos2));getParsingFlags(config).bigHour=true;});addParseToken('Hmm',function(input,array,config){var pos=input.length-2;array[HOUR]=toInt(input.substr(0,pos));array[MINUTE]=toInt(input.substr(pos));});addParseToken('Hmmss',function(input,array,config){var pos1=input.length-4;var pos2=input.length-2;array[HOUR]=toInt(input.substr(0,pos1));array[MINUTE]=toInt(input.substr(pos1,2));array[SECOND]=toInt(input.substr(pos2));});// LOCALES
	function localeIsPM(input){// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	// Using charAt should be more compatible.
	return(input+'').toLowerCase().charAt(0)==='p';}var defaultLocaleMeridiemParse=/[ap]\.?m?\.?/i;function localeMeridiem(hours,minutes,isLower){if(hours>11){return isLower?'pm':'PM';}else{return isLower?'am':'AM';}}// MOMENTS
	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour=makeGetSet('Hours',true);var baseConfig={calendar:defaultCalendar,longDateFormat:defaultLongDateFormat,invalidDate:defaultInvalidDate,ordinal:defaultOrdinal,ordinalParse:defaultOrdinalParse,relativeTime:defaultRelativeTime,months:defaultLocaleMonths,monthsShort:defaultLocaleMonthsShort,week:defaultLocaleWeek,weekdays:defaultLocaleWeekdays,weekdaysMin:defaultLocaleWeekdaysMin,weekdaysShort:defaultLocaleWeekdaysShort,meridiemParse:defaultLocaleMeridiemParse};// internal storage for locale config files
	var locales={};var globalLocale;function normalizeLocale(key){return key?key.toLowerCase().replace('_','-'):key;}// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names){var i=0,j,next,locale,split;while(i<names.length){split=normalizeLocale(names[i]).split('-');j=split.length;next=normalizeLocale(names[i+1]);next=next?next.split('-'):null;while(j>0){locale=loadLocale(split.slice(0,j).join('-'));if(locale){return locale;}if(next&&next.length>=j&&compareArrays(split,next,true)>=j-1){//the next array item is better than a shallower substring of this one
	break;}j--;}i++;}return null;}function loadLocale(name){var oldLocale=null;// TODO: Find a better way to register and load all the locales in Node
	if(!locales[name]&&typeof module!=='undefined'&&module&&module.exports){try{oldLocale=globalLocale._abbr;!function webpackMissingModule(){var e=new Error("Cannot find module \"./locale\"");e.code='MODULE_NOT_FOUND';throw e;}();// because defineLocale currently also sets the global locale, we
	// want to undo that for lazy loaded locales
	locale_locales__getSetGlobalLocale(oldLocale);}catch(e){}}return locales[name];}// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function locale_locales__getSetGlobalLocale(key,values){var data;if(key){if(isUndefined(values)){data=locale_locales__getLocale(key);}else{data=defineLocale(key,values);}if(data){// moment.duration._locale = moment._locale = data;
	globalLocale=data;}}return globalLocale._abbr;}function defineLocale(name,config){if(config!==null){var parentConfig=baseConfig;config.abbr=name;if(locales[name]!=null){deprecateSimple('defineLocaleOverride','use moment.updateLocale(localeName, config) to change '+'an existing locale. moment.defineLocale(localeName, '+'config) should only be used for creating a new locale '+'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');parentConfig=locales[name]._config;}else if(config.parentLocale!=null){if(locales[config.parentLocale]!=null){parentConfig=locales[config.parentLocale]._config;}else{// treat as if there is no base config
	deprecateSimple('parentLocaleUndefined','specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');}}locales[name]=new Locale(mergeConfigs(parentConfig,config));// backwards compat for now: also set the locale
	locale_locales__getSetGlobalLocale(name);return locales[name];}else{// useful for testing
	delete locales[name];return null;}}function updateLocale(name,config){if(config!=null){var locale,parentConfig=baseConfig;// MERGE
	if(locales[name]!=null){parentConfig=locales[name]._config;}config=mergeConfigs(parentConfig,config);locale=new Locale(config);locale.parentLocale=locales[name];locales[name]=locale;// backwards compat for now: also set the locale
	locale_locales__getSetGlobalLocale(name);}else{// pass null for config to unupdate, useful for tests
	if(locales[name]!=null){if(locales[name].parentLocale!=null){locales[name]=locales[name].parentLocale;}else if(locales[name]!=null){delete locales[name];}}}return locales[name];}// returns locale data
	function locale_locales__getLocale(key){var locale;if(key&&key._locale&&key._locale._abbr){key=key._locale._abbr;}if(!key){return globalLocale;}if(!isArray(key)){//short-circuit everything else
	locale=loadLocale(key);if(locale){return locale;}key=[key];}return chooseLocale(key);}function locale_locales__listLocales(){return keys(locales);}function checkOverflow(m){var overflow;var a=m._a;if(a&&getParsingFlags(m).overflow===-2){overflow=a[MONTH]<0||a[MONTH]>11?MONTH:a[DATE]<1||a[DATE]>daysInMonth(a[YEAR],a[MONTH])?DATE:a[HOUR]<0||a[HOUR]>24||a[HOUR]===24&&(a[MINUTE]!==0||a[SECOND]!==0||a[MILLISECOND]!==0)?HOUR:a[MINUTE]<0||a[MINUTE]>59?MINUTE:a[SECOND]<0||a[SECOND]>59?SECOND:a[MILLISECOND]<0||a[MILLISECOND]>999?MILLISECOND:-1;if(getParsingFlags(m)._overflowDayOfYear&&(overflow<YEAR||overflow>DATE)){overflow=DATE;}if(getParsingFlags(m)._overflowWeeks&&overflow===-1){overflow=WEEK;}if(getParsingFlags(m)._overflowWeekday&&overflow===-1){overflow=WEEKDAY;}getParsingFlags(m).overflow=overflow;}return m;}// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;var basicIsoRegex=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;var tzRegex=/Z|[+-]\d\d(?::?\d\d)?/;var isoDates=[['YYYYYY-MM-DD',/[+-]\d{6}-\d\d-\d\d/],['YYYY-MM-DD',/\d{4}-\d\d-\d\d/],['GGGG-[W]WW-E',/\d{4}-W\d\d-\d/],['GGGG-[W]WW',/\d{4}-W\d\d/,false],['YYYY-DDD',/\d{4}-\d{3}/],['YYYY-MM',/\d{4}-\d\d/,false],['YYYYYYMMDD',/[+-]\d{10}/],['YYYYMMDD',/\d{8}/],// YYYYMM is NOT allowed by the standard
	['GGGG[W]WWE',/\d{4}W\d{3}/],['GGGG[W]WW',/\d{4}W\d{2}/,false],['YYYYDDD',/\d{7}/]];// iso time formats and regexes
	var isoTimes=[['HH:mm:ss.SSSS',/\d\d:\d\d:\d\d\.\d+/],['HH:mm:ss,SSSS',/\d\d:\d\d:\d\d,\d+/],['HH:mm:ss',/\d\d:\d\d:\d\d/],['HH:mm',/\d\d:\d\d/],['HHmmss.SSSS',/\d\d\d\d\d\d\.\d+/],['HHmmss,SSSS',/\d\d\d\d\d\d,\d+/],['HHmmss',/\d\d\d\d\d\d/],['HHmm',/\d\d\d\d/],['HH',/\d\d/]];var aspNetJsonRegex=/^\/?Date\((\-?\d+)/i;// date from iso format
	function configFromISO(config){var i,l,string=config._i,match=extendedIsoRegex.exec(string)||basicIsoRegex.exec(string),allowTime,dateFormat,timeFormat,tzFormat;if(match){getParsingFlags(config).iso=true;for(i=0,l=isoDates.length;i<l;i++){if(isoDates[i][1].exec(match[1])){dateFormat=isoDates[i][0];allowTime=isoDates[i][2]!==false;break;}}if(dateFormat==null){config._isValid=false;return;}if(match[3]){for(i=0,l=isoTimes.length;i<l;i++){if(isoTimes[i][1].exec(match[3])){// match[2] should be 'T' or space
	timeFormat=(match[2]||' ')+isoTimes[i][0];break;}}if(timeFormat==null){config._isValid=false;return;}}if(!allowTime&&timeFormat!=null){config._isValid=false;return;}if(match[4]){if(tzRegex.exec(match[4])){tzFormat='Z';}else{config._isValid=false;return;}}config._f=dateFormat+(timeFormat||'')+(tzFormat||'');configFromStringAndFormat(config);}else{config._isValid=false;}}// date from iso format or fallback
	function configFromString(config){var matched=aspNetJsonRegex.exec(config._i);if(matched!==null){config._d=new Date(+matched[1]);return;}configFromISO(config);if(config._isValid===false){delete config._isValid;utils_hooks__hooks.createFromInputFallback(config);}}utils_hooks__hooks.createFromInputFallback=deprecate('value provided is not in a recognized ISO format. moment construction falls back to js Date(), '+'which is not reliable across all browsers and versions. Non ISO date formats are '+'discouraged and will be removed in an upcoming major release. Please refer to '+'http://momentjs.com/guides/#/warnings/js-date/ for more info.',function(config){config._d=new Date(config._i+(config._useUTC?' UTC':''));});// Pick the first defined of two or three arguments.
	function defaults(a,b,c){if(a!=null){return a;}if(b!=null){return b;}return c;}function currentDateArray(config){// hooks is actually the exported moment object
	var nowValue=new Date(utils_hooks__hooks.now());if(config._useUTC){return[nowValue.getUTCFullYear(),nowValue.getUTCMonth(),nowValue.getUTCDate()];}return[nowValue.getFullYear(),nowValue.getMonth(),nowValue.getDate()];}// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray(config){var i,date,input=[],currentDate,yearToUse;if(config._d){return;}currentDate=currentDateArray(config);//compute day of the year from weeks and weekdays
	if(config._w&&config._a[DATE]==null&&config._a[MONTH]==null){dayOfYearFromWeekInfo(config);}//if the day of the year is set, figure out what it is
	if(config._dayOfYear){yearToUse=defaults(config._a[YEAR],currentDate[YEAR]);if(config._dayOfYear>daysInYear(yearToUse)){getParsingFlags(config)._overflowDayOfYear=true;}date=createUTCDate(yearToUse,0,config._dayOfYear);config._a[MONTH]=date.getUTCMonth();config._a[DATE]=date.getUTCDate();}// Default to current date.
	// * if no year, month, day of month are given, default to today
	// * if day of month is given, default month and year
	// * if month is given, default only year
	// * if year is given, don't default anything
	for(i=0;i<3&&config._a[i]==null;++i){config._a[i]=input[i]=currentDate[i];}// Zero out whatever was not defaulted, including time
	for(;i<7;i++){config._a[i]=input[i]=config._a[i]==null?i===2?1:0:config._a[i];}// Check for 24:00:00.000
	if(config._a[HOUR]===24&&config._a[MINUTE]===0&&config._a[SECOND]===0&&config._a[MILLISECOND]===0){config._nextDay=true;config._a[HOUR]=0;}config._d=(config._useUTC?createUTCDate:createDate).apply(null,input);// Apply timezone offset from input. The actual utcOffset can be changed
	// with parseZone.
	if(config._tzm!=null){config._d.setUTCMinutes(config._d.getUTCMinutes()-config._tzm);}if(config._nextDay){config._a[HOUR]=24;}}function dayOfYearFromWeekInfo(config){var w,weekYear,week,weekday,dow,doy,temp,weekdayOverflow;w=config._w;if(w.GG!=null||w.W!=null||w.E!=null){dow=1;doy=4;// TODO: We need to take the current isoWeekYear, but that depends on
	// how we interpret now (local, utc, fixed offset). So create
	// a now version of current config (take local/utc/offset flags, and
	// create now).
	weekYear=defaults(w.GG,config._a[YEAR],weekOfYear(local__createLocal(),1,4).year);week=defaults(w.W,1);weekday=defaults(w.E,1);if(weekday<1||weekday>7){weekdayOverflow=true;}}else{dow=config._locale._week.dow;doy=config._locale._week.doy;weekYear=defaults(w.gg,config._a[YEAR],weekOfYear(local__createLocal(),dow,doy).year);week=defaults(w.w,1);if(w.d!=null){// weekday -- low day numbers are considered next week
	weekday=w.d;if(weekday<0||weekday>6){weekdayOverflow=true;}}else if(w.e!=null){// local weekday -- counting starts from begining of week
	weekday=w.e+dow;if(w.e<0||w.e>6){weekdayOverflow=true;}}else{// default to begining of week
	weekday=dow;}}if(week<1||week>weeksInYear(weekYear,dow,doy)){getParsingFlags(config)._overflowWeeks=true;}else if(weekdayOverflow!=null){getParsingFlags(config)._overflowWeekday=true;}else{temp=dayOfYearFromWeeks(weekYear,week,weekday,dow,doy);config._a[YEAR]=temp.year;config._dayOfYear=temp.dayOfYear;}}// constant that refers to the ISO standard
	utils_hooks__hooks.ISO_8601=function(){};// date from string and format string
	function configFromStringAndFormat(config){// TODO: Move this to another part of the creation flow to prevent circular deps
	if(config._f===utils_hooks__hooks.ISO_8601){configFromISO(config);return;}config._a=[];getParsingFlags(config).empty=true;// This array is used to make a Date, either with `new Date` or `Date.UTC`
	var string=''+config._i,i,parsedInput,tokens,token,skipped,stringLength=string.length,totalParsedInputLength=0;tokens=expandFormat(config._f,config._locale).match(formattingTokens)||[];for(i=0;i<tokens.length;i++){token=tokens[i];parsedInput=(string.match(getParseRegexForToken(token,config))||[])[0];// console.log('token', token, 'parsedInput', parsedInput,
	//         'regex', getParseRegexForToken(token, config));
	if(parsedInput){skipped=string.substr(0,string.indexOf(parsedInput));if(skipped.length>0){getParsingFlags(config).unusedInput.push(skipped);}string=string.slice(string.indexOf(parsedInput)+parsedInput.length);totalParsedInputLength+=parsedInput.length;}// don't parse if it's not a known token
	if(formatTokenFunctions[token]){if(parsedInput){getParsingFlags(config).empty=false;}else{getParsingFlags(config).unusedTokens.push(token);}addTimeToArrayFromToken(token,parsedInput,config);}else if(config._strict&&!parsedInput){getParsingFlags(config).unusedTokens.push(token);}}// add remaining unparsed input length to the string
	getParsingFlags(config).charsLeftOver=stringLength-totalParsedInputLength;if(string.length>0){getParsingFlags(config).unusedInput.push(string);}// clear _12h flag if hour is <= 12
	if(config._a[HOUR]<=12&&getParsingFlags(config).bigHour===true&&config._a[HOUR]>0){getParsingFlags(config).bigHour=undefined;}getParsingFlags(config).parsedDateParts=config._a.slice(0);getParsingFlags(config).meridiem=config._meridiem;// handle meridiem
	config._a[HOUR]=meridiemFixWrap(config._locale,config._a[HOUR],config._meridiem);configFromArray(config);checkOverflow(config);}function meridiemFixWrap(locale,hour,meridiem){var isPm;if(meridiem==null){// nothing to do
	return hour;}if(locale.meridiemHour!=null){return locale.meridiemHour(hour,meridiem);}else if(locale.isPM!=null){// Fallback
	isPm=locale.isPM(meridiem);if(isPm&&hour<12){hour+=12;}if(!isPm&&hour===12){hour=0;}return hour;}else{// this is not supposed to happen
	return hour;}}// date from string and array of format strings
	function configFromStringAndArray(config){var tempConfig,bestMoment,scoreToBeat,i,currentScore;if(config._f.length===0){getParsingFlags(config).invalidFormat=true;config._d=new Date(NaN);return;}for(i=0;i<config._f.length;i++){currentScore=0;tempConfig=copyConfig({},config);if(config._useUTC!=null){tempConfig._useUTC=config._useUTC;}tempConfig._f=config._f[i];configFromStringAndFormat(tempConfig);if(!valid__isValid(tempConfig)){continue;}// if there is any input that was not parsed add a penalty for that format
	currentScore+=getParsingFlags(tempConfig).charsLeftOver;//or tokens
	currentScore+=getParsingFlags(tempConfig).unusedTokens.length*10;getParsingFlags(tempConfig).score=currentScore;if(scoreToBeat==null||currentScore<scoreToBeat){scoreToBeat=currentScore;bestMoment=tempConfig;}}extend(config,bestMoment||tempConfig);}function configFromObject(config){if(config._d){return;}var i=normalizeObjectUnits(config._i);config._a=map([i.year,i.month,i.day||i.date,i.hour,i.minute,i.second,i.millisecond],function(obj){return obj&&parseInt(obj,10);});configFromArray(config);}function createFromConfig(config){var res=new Moment(checkOverflow(prepareConfig(config)));if(res._nextDay){// Adding is smart enough around DST
	res.add(1,'d');res._nextDay=undefined;}return res;}function prepareConfig(config){var input=config._i,format=config._f;config._locale=config._locale||locale_locales__getLocale(config._l);if(input===null||format===undefined&&input===''){return valid__createInvalid({nullInput:true});}if(typeof input==='string'){config._i=input=config._locale.preparse(input);}if(isMoment(input)){return new Moment(checkOverflow(input));}else if(isArray(format)){configFromStringAndArray(config);}else if(isDate(input)){config._d=input;}else if(format){configFromStringAndFormat(config);}else{configFromInput(config);}if(!valid__isValid(config)){config._d=null;}return config;}function configFromInput(config){var input=config._i;if(input===undefined){config._d=new Date(utils_hooks__hooks.now());}else if(isDate(input)){config._d=new Date(input.valueOf());}else if(typeof input==='string'){configFromString(config);}else if(isArray(input)){config._a=map(input.slice(0),function(obj){return parseInt(obj,10);});configFromArray(config);}else if((typeof input==='undefined'?'undefined':_typeof2(input))==='object'){configFromObject(config);}else if(typeof input==='number'){// from milliseconds
	config._d=new Date(input);}else{utils_hooks__hooks.createFromInputFallback(config);}}function createLocalOrUTC(input,format,locale,strict,isUTC){var c={};if(typeof locale==='boolean'){strict=locale;locale=undefined;}if(isObject(input)&&isObjectEmpty(input)||isArray(input)&&input.length===0){input=undefined;}// object construction must be done this way.
	// https://github.com/moment/moment/issues/1423
	c._isAMomentObject=true;c._useUTC=c._isUTC=isUTC;c._l=locale;c._i=input;c._f=format;c._strict=strict;return createFromConfig(c);}function local__createLocal(input,format,locale,strict){return createLocalOrUTC(input,format,locale,strict,false);}var prototypeMin=deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',function(){var other=local__createLocal.apply(null,arguments);if(this.isValid()&&other.isValid()){return other<this?this:other;}else{return valid__createInvalid();}});var prototypeMax=deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',function(){var other=local__createLocal.apply(null,arguments);if(this.isValid()&&other.isValid()){return other>this?this:other;}else{return valid__createInvalid();}});// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn,moments){var res,i;if(moments.length===1&&isArray(moments[0])){moments=moments[0];}if(!moments.length){return local__createLocal();}res=moments[0];for(i=1;i<moments.length;++i){if(!moments[i].isValid()||moments[i][fn](res)){res=moments[i];}}return res;}// TODO: Use [].sort instead?
	function min(){var args=[].slice.call(arguments,0);return pickBy('isBefore',args);}function max(){var args=[].slice.call(arguments,0);return pickBy('isAfter',args);}var now=function now(){return Date.now?Date.now():+new Date();};function Duration(duration){var normalizedInput=normalizeObjectUnits(duration),years=normalizedInput.year||0,quarters=normalizedInput.quarter||0,months=normalizedInput.month||0,weeks=normalizedInput.week||0,days=normalizedInput.day||0,hours=normalizedInput.hour||0,minutes=normalizedInput.minute||0,seconds=normalizedInput.second||0,milliseconds=normalizedInput.millisecond||0;// representation for dateAddRemove
	this._milliseconds=+milliseconds+seconds*1e3+// 1000
	minutes*6e4+// 1000 * 60
	hours*1000*60*60;//using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	// Because of dateAddRemove treats 24 hours as different from a
	// day when working around DST, we need to store them separately
	this._days=+days+weeks*7;// It is impossible translate months into days without knowing
	// which months you are are talking about, so we have to store
	// it separately.
	this._months=+months+quarters*3+years*12;this._data={};this._locale=locale_locales__getLocale();this._bubble();}function isDuration(obj){return obj instanceof Duration;}function absRound(number){if(number<0){return Math.round(-1*number)*-1;}else{return Math.round(number);}}// FORMATTING
	function offset(token,separator){addFormatToken(token,0,0,function(){var offset=this.utcOffset();var sign='+';if(offset<0){offset=-offset;sign='-';}return sign+zeroFill(~~(offset/60),2)+separator+zeroFill(~~offset%60,2);});}offset('Z',':');offset('ZZ','');// PARSING
	addRegexToken('Z',matchShortOffset);addRegexToken('ZZ',matchShortOffset);addParseToken(['Z','ZZ'],function(input,array,config){config._useUTC=true;config._tzm=offsetFromString(matchShortOffset,input);});// HELPERS
	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset=/([\+\-]|\d\d)/gi;function offsetFromString(matcher,string){var matches=(string||'').match(matcher)||[];var chunk=matches[matches.length-1]||[];var parts=(chunk+'').match(chunkOffset)||['-',0,0];var minutes=+(parts[1]*60)+toInt(parts[2]);return parts[0]==='+'?minutes:-minutes;}// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input,model){var res,diff;if(model._isUTC){res=model.clone();diff=(isMoment(input)||isDate(input)?input.valueOf():local__createLocal(input).valueOf())-res.valueOf();// Use low-level api, because this fn is low-level api.
	res._d.setTime(res._d.valueOf()+diff);utils_hooks__hooks.updateOffset(res,false);return res;}else{return local__createLocal(input).local();}}function getDateOffset(m){// On Firefox.24 Date#getTimezoneOffset returns a floating point.
	// https://github.com/moment/moment/pull/1871
	return-Math.round(m._d.getTimezoneOffset()/15)*15;}// HOOKS
	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	utils_hooks__hooks.updateOffset=function(){};// MOMENTS
	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset(input,keepLocalTime){var offset=this._offset||0,localAdjust;if(!this.isValid()){return input!=null?this:NaN;}if(input!=null){if(typeof input==='string'){input=offsetFromString(matchShortOffset,input);}else if(Math.abs(input)<16){input=input*60;}if(!this._isUTC&&keepLocalTime){localAdjust=getDateOffset(this);}this._offset=input;this._isUTC=true;if(localAdjust!=null){this.add(localAdjust,'m');}if(offset!==input){if(!keepLocalTime||this._changeInProgress){add_subtract__addSubtract(this,create__createDuration(input-offset,'m'),1,false);}else if(!this._changeInProgress){this._changeInProgress=true;utils_hooks__hooks.updateOffset(this,true);this._changeInProgress=null;}}return this;}else{return this._isUTC?offset:getDateOffset(this);}}function getSetZone(input,keepLocalTime){if(input!=null){if(typeof input!=='string'){input=-input;}this.utcOffset(input,keepLocalTime);return this;}else{return-this.utcOffset();}}function setOffsetToUTC(keepLocalTime){return this.utcOffset(0,keepLocalTime);}function setOffsetToLocal(keepLocalTime){if(this._isUTC){this.utcOffset(0,keepLocalTime);this._isUTC=false;if(keepLocalTime){this.subtract(getDateOffset(this),'m');}}return this;}function setOffsetToParsedOffset(){if(this._tzm){this.utcOffset(this._tzm);}else if(typeof this._i==='string'){var tZone=offsetFromString(matchOffset,this._i);if(tZone===0){this.utcOffset(0,true);}else{this.utcOffset(offsetFromString(matchOffset,this._i));}}return this;}function hasAlignedHourOffset(input){if(!this.isValid()){return false;}input=input?local__createLocal(input).utcOffset():0;return(this.utcOffset()-input)%60===0;}function isDaylightSavingTime(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset();}function isDaylightSavingTimeShifted(){if(!isUndefined(this._isDSTShifted)){return this._isDSTShifted;}var c={};copyConfig(c,this);c=prepareConfig(c);if(c._a){var other=c._isUTC?create_utc__createUTC(c._a):local__createLocal(c._a);this._isDSTShifted=this.isValid()&&compareArrays(c._a,other.toArray())>0;}else{this._isDSTShifted=false;}return this._isDSTShifted;}function isLocal(){return this.isValid()?!this._isUTC:false;}function isUtcOffset(){return this.isValid()?this._isUTC:false;}function isUtc(){return this.isValid()?this._isUTC&&this._offset===0:false;}// ASP.NET json date format regex
	var aspNetRegex=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;function create__createDuration(input,key){var duration=input,// matching against regexp is expensive, do it on demand
	match=null,sign,ret,diffRes;if(isDuration(input)){duration={ms:input._milliseconds,d:input._days,M:input._months};}else if(typeof input==='number'){duration={};if(key){duration[key]=input;}else{duration.milliseconds=input;}}else if(!!(match=aspNetRegex.exec(input))){sign=match[1]==='-'?-1:1;duration={y:0,d:toInt(match[DATE])*sign,h:toInt(match[HOUR])*sign,m:toInt(match[MINUTE])*sign,s:toInt(match[SECOND])*sign,ms:toInt(absRound(match[MILLISECOND]*1000))*sign// the millisecond decimal point is included in the match
	};}else if(!!(match=isoRegex.exec(input))){sign=match[1]==='-'?-1:1;duration={y:parseIso(match[2],sign),M:parseIso(match[3],sign),w:parseIso(match[4],sign),d:parseIso(match[5],sign),h:parseIso(match[6],sign),m:parseIso(match[7],sign),s:parseIso(match[8],sign)};}else if(duration==null){// checks for null or undefined
	duration={};}else if((typeof duration==='undefined'?'undefined':_typeof2(duration))==='object'&&('from'in duration||'to'in duration)){diffRes=momentsDifference(local__createLocal(duration.from),local__createLocal(duration.to));duration={};duration.ms=diffRes.milliseconds;duration.M=diffRes.months;}ret=new Duration(duration);if(isDuration(input)&&hasOwnProp(input,'_locale')){ret._locale=input._locale;}return ret;}create__createDuration.fn=Duration.prototype;function parseIso(inp,sign){// We'd normally use ~~inp for this, but unfortunately it also
	// converts floats to ints.
	// inp may be undefined, so careful calling replace on it.
	var res=inp&&parseFloat(inp.replace(',','.'));// apply sign while we're at it
	return(isNaN(res)?0:res)*sign;}function positiveMomentsDifference(base,other){var res={milliseconds:0,months:0};res.months=other.month()-base.month()+(other.year()-base.year())*12;if(base.clone().add(res.months,'M').isAfter(other)){--res.months;}res.milliseconds=+other-+base.clone().add(res.months,'M');return res;}function momentsDifference(base,other){var res;if(!(base.isValid()&&other.isValid())){return{milliseconds:0,months:0};}other=cloneWithOffset(other,base);if(base.isBefore(other)){res=positiveMomentsDifference(base,other);}else{res=positiveMomentsDifference(other,base);res.milliseconds=-res.milliseconds;res.months=-res.months;}return res;}// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction,name){return function(val,period){var dur,tmp;//invert the arguments, but complain about it
	if(period!==null&&!isNaN(+period)){deprecateSimple(name,'moment().'+name+'(period, number) is deprecated. Please use moment().'+name+'(number, period). '+'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');tmp=val;val=period;period=tmp;}val=typeof val==='string'?+val:val;dur=create__createDuration(val,period);add_subtract__addSubtract(this,dur,direction);return this;};}function add_subtract__addSubtract(mom,duration,isAdding,updateOffset){var milliseconds=duration._milliseconds,days=absRound(duration._days),months=absRound(duration._months);if(!mom.isValid()){// No op
	return;}updateOffset=updateOffset==null?true:updateOffset;if(milliseconds){mom._d.setTime(mom._d.valueOf()+milliseconds*isAdding);}if(days){get_set__set(mom,'Date',get_set__get(mom,'Date')+days*isAdding);}if(months){setMonth(mom,get_set__get(mom,'Month')+months*isAdding);}if(updateOffset){utils_hooks__hooks.updateOffset(mom,days||months);}}var add_subtract__add=createAdder(1,'add');var add_subtract__subtract=createAdder(-1,'subtract');function getCalendarFormat(myMoment,now){var diff=myMoment.diff(now,'days',true);return diff<-6?'sameElse':diff<-1?'lastWeek':diff<0?'lastDay':diff<1?'sameDay':diff<2?'nextDay':diff<7?'nextWeek':'sameElse';}function moment_calendar__calendar(time,formats){// We want to compare the start of today, vs this.
	// Getting start-of-today depends on whether we're local/utc/offset or not.
	var now=time||local__createLocal(),sod=cloneWithOffset(now,this).startOf('day'),format=utils_hooks__hooks.calendarFormat(this,sod)||'sameElse';var output=formats&&(isFunction(formats[format])?formats[format].call(this,now):formats[format]);return this.format(output||this.localeData().calendar(format,this,local__createLocal(now)));}function clone(){return new Moment(this);}function isAfter(input,units){var localInput=isMoment(input)?input:local__createLocal(input);if(!(this.isValid()&&localInput.isValid())){return false;}units=normalizeUnits(!isUndefined(units)?units:'millisecond');if(units==='millisecond'){return this.valueOf()>localInput.valueOf();}else{return localInput.valueOf()<this.clone().startOf(units).valueOf();}}function isBefore(input,units){var localInput=isMoment(input)?input:local__createLocal(input);if(!(this.isValid()&&localInput.isValid())){return false;}units=normalizeUnits(!isUndefined(units)?units:'millisecond');if(units==='millisecond'){return this.valueOf()<localInput.valueOf();}else{return this.clone().endOf(units).valueOf()<localInput.valueOf();}}function isBetween(from,to,units,inclusivity){inclusivity=inclusivity||'()';return(inclusivity[0]==='('?this.isAfter(from,units):!this.isBefore(from,units))&&(inclusivity[1]===')'?this.isBefore(to,units):!this.isAfter(to,units));}function isSame(input,units){var localInput=isMoment(input)?input:local__createLocal(input),inputMs;if(!(this.isValid()&&localInput.isValid())){return false;}units=normalizeUnits(units||'millisecond');if(units==='millisecond'){return this.valueOf()===localInput.valueOf();}else{inputMs=localInput.valueOf();return this.clone().startOf(units).valueOf()<=inputMs&&inputMs<=this.clone().endOf(units).valueOf();}}function isSameOrAfter(input,units){return this.isSame(input,units)||this.isAfter(input,units);}function isSameOrBefore(input,units){return this.isSame(input,units)||this.isBefore(input,units);}function diff(input,units,asFloat){var that,zoneDelta,delta,output;if(!this.isValid()){return NaN;}that=cloneWithOffset(input,this);if(!that.isValid()){return NaN;}zoneDelta=(that.utcOffset()-this.utcOffset())*6e4;units=normalizeUnits(units);if(units==='year'||units==='month'||units==='quarter'){output=monthDiff(this,that);if(units==='quarter'){output=output/3;}else if(units==='year'){output=output/12;}}else{delta=this-that;output=units==='second'?delta/1e3:// 1000
	units==='minute'?delta/6e4:// 1000 * 60
	units==='hour'?delta/36e5:// 1000 * 60 * 60
	units==='day'?(delta-zoneDelta)/864e5:// 1000 * 60 * 60 * 24, negate dst
	units==='week'?(delta-zoneDelta)/6048e5:// 1000 * 60 * 60 * 24 * 7, negate dst
	delta;}return asFloat?output:absFloor(output);}function monthDiff(a,b){// difference in months
	var wholeMonthDiff=(b.year()-a.year())*12+(b.month()-a.month()),// b is in (anchor - 1 month, anchor + 1 month)
	anchor=a.clone().add(wholeMonthDiff,'months'),anchor2,adjust;if(b-anchor<0){anchor2=a.clone().add(wholeMonthDiff-1,'months');// linear across the month
	adjust=(b-anchor)/(anchor-anchor2);}else{anchor2=a.clone().add(wholeMonthDiff+1,'months');// linear across the month
	adjust=(b-anchor)/(anchor2-anchor);}//check for negative zero, return zero if negative zero
	return-(wholeMonthDiff+adjust)||0;}utils_hooks__hooks.defaultFormat='YYYY-MM-DDTHH:mm:ssZ';utils_hooks__hooks.defaultFormatUtc='YYYY-MM-DDTHH:mm:ss[Z]';function toString(){return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');}function moment_format__toISOString(){var m=this.clone().utc();if(0<m.year()&&m.year()<=9999){if(isFunction(Date.prototype.toISOString)){// native implementation is ~50x faster, use it when we can
	return this.toDate().toISOString();}else{return formatMoment(m,'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');}}else{return formatMoment(m,'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');}}function format(inputString){if(!inputString){inputString=this.isUtc()?utils_hooks__hooks.defaultFormatUtc:utils_hooks__hooks.defaultFormat;}var output=formatMoment(this,inputString);return this.localeData().postformat(output);}function from(time,withoutSuffix){if(this.isValid()&&(isMoment(time)&&time.isValid()||local__createLocal(time).isValid())){return create__createDuration({to:this,from:time}).locale(this.locale()).humanize(!withoutSuffix);}else{return this.localeData().invalidDate();}}function fromNow(withoutSuffix){return this.from(local__createLocal(),withoutSuffix);}function to(time,withoutSuffix){if(this.isValid()&&(isMoment(time)&&time.isValid()||local__createLocal(time).isValid())){return create__createDuration({from:this,to:time}).locale(this.locale()).humanize(!withoutSuffix);}else{return this.localeData().invalidDate();}}function toNow(withoutSuffix){return this.to(local__createLocal(),withoutSuffix);}// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale(key){var newLocaleData;if(key===undefined){return this._locale._abbr;}else{newLocaleData=locale_locales__getLocale(key);if(newLocaleData!=null){this._locale=newLocaleData;}return this;}}var lang=deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',function(key){if(key===undefined){return this.localeData();}else{return this.locale(key);}});function localeData(){return this._locale;}function startOf(units){units=normalizeUnits(units);// the following switch intentionally omits break keywords
	// to utilize falling through the cases.
	switch(units){case'year':this.month(0);/* falls through */case'quarter':case'month':this.date(1);/* falls through */case'week':case'isoWeek':case'day':case'date':this.hours(0);/* falls through */case'hour':this.minutes(0);/* falls through */case'minute':this.seconds(0);/* falls through */case'second':this.milliseconds(0);}// weeks are a special case
	if(units==='week'){this.weekday(0);}if(units==='isoWeek'){this.isoWeekday(1);}// quarters are also special
	if(units==='quarter'){this.month(Math.floor(this.month()/3)*3);}return this;}function endOf(units){units=normalizeUnits(units);if(units===undefined||units==='millisecond'){return this;}// 'date' is an alias for 'day', so it should be considered as such.
	if(units==='date'){units='day';}return this.startOf(units).add(1,units==='isoWeek'?'week':units).subtract(1,'ms');}function to_type__valueOf(){return this._d.valueOf()-(this._offset||0)*60000;}function unix(){return Math.floor(this.valueOf()/1000);}function toDate(){return new Date(this.valueOf());}function toArray(){var m=this;return[m.year(),m.month(),m.date(),m.hour(),m.minute(),m.second(),m.millisecond()];}function toObject(){var m=this;return{years:m.year(),months:m.month(),date:m.date(),hours:m.hours(),minutes:m.minutes(),seconds:m.seconds(),milliseconds:m.milliseconds()};}function toJSON(){// new Date(NaN).toJSON() === null
	return this.isValid()?this.toISOString():null;}function moment_valid__isValid(){return valid__isValid(this);}function parsingFlags(){return extend({},getParsingFlags(this));}function invalidAt(){return getParsingFlags(this).overflow;}function creationData(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict};}// FORMATTING
	addFormatToken(0,['gg',2],0,function(){return this.weekYear()%100;});addFormatToken(0,['GG',2],0,function(){return this.isoWeekYear()%100;});function addWeekYearFormatToken(token,getter){addFormatToken(0,[token,token.length],0,getter);}addWeekYearFormatToken('gggg','weekYear');addWeekYearFormatToken('ggggg','weekYear');addWeekYearFormatToken('GGGG','isoWeekYear');addWeekYearFormatToken('GGGGG','isoWeekYear');// ALIASES
	addUnitAlias('weekYear','gg');addUnitAlias('isoWeekYear','GG');// PRIORITY
	addUnitPriority('weekYear',1);addUnitPriority('isoWeekYear',1);// PARSING
	addRegexToken('G',matchSigned);addRegexToken('g',matchSigned);addRegexToken('GG',match1to2,match2);addRegexToken('gg',match1to2,match2);addRegexToken('GGGG',match1to4,match4);addRegexToken('gggg',match1to4,match4);addRegexToken('GGGGG',match1to6,match6);addRegexToken('ggggg',match1to6,match6);addWeekParseToken(['gggg','ggggg','GGGG','GGGGG'],function(input,week,config,token){week[token.substr(0,2)]=toInt(input);});addWeekParseToken(['gg','GG'],function(input,week,config,token){week[token]=utils_hooks__hooks.parseTwoDigitYear(input);});// MOMENTS
	function getSetWeekYear(input){return getSetWeekYearHelper.call(this,input,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy);}function getSetISOWeekYear(input){return getSetWeekYearHelper.call(this,input,this.isoWeek(),this.isoWeekday(),1,4);}function getISOWeeksInYear(){return weeksInYear(this.year(),1,4);}function getWeeksInYear(){var weekInfo=this.localeData()._week;return weeksInYear(this.year(),weekInfo.dow,weekInfo.doy);}function getSetWeekYearHelper(input,week,weekday,dow,doy){var weeksTarget;if(input==null){return weekOfYear(this,dow,doy).year;}else{weeksTarget=weeksInYear(input,dow,doy);if(week>weeksTarget){week=weeksTarget;}return setWeekAll.call(this,input,week,weekday,dow,doy);}}function setWeekAll(weekYear,week,weekday,dow,doy){var dayOfYearData=dayOfYearFromWeeks(weekYear,week,weekday,dow,doy),date=createUTCDate(dayOfYearData.year,0,dayOfYearData.dayOfYear);this.year(date.getUTCFullYear());this.month(date.getUTCMonth());this.date(date.getUTCDate());return this;}// FORMATTING
	addFormatToken('Q',0,'Qo','quarter');// ALIASES
	addUnitAlias('quarter','Q');// PRIORITY
	addUnitPriority('quarter',7);// PARSING
	addRegexToken('Q',match1);addParseToken('Q',function(input,array){array[MONTH]=(toInt(input)-1)*3;});// MOMENTS
	function getSetQuarter(input){return input==null?Math.ceil((this.month()+1)/3):this.month((input-1)*3+this.month()%3);}// FORMATTING
	addFormatToken('D',['DD',2],'Do','date');// ALIASES
	addUnitAlias('date','D');// PRIOROITY
	addUnitPriority('date',9);// PARSING
	addRegexToken('D',match1to2);addRegexToken('DD',match1to2,match2);addRegexToken('Do',function(isStrict,locale){return isStrict?locale._ordinalParse:locale._ordinalParseLenient;});addParseToken(['D','DD'],DATE);addParseToken('Do',function(input,array){array[DATE]=toInt(input.match(match1to2)[0],10);});// MOMENTS
	var getSetDayOfMonth=makeGetSet('Date',true);// FORMATTING
	addFormatToken('DDD',['DDDD',3],'DDDo','dayOfYear');// ALIASES
	addUnitAlias('dayOfYear','DDD');// PRIORITY
	addUnitPriority('dayOfYear',4);// PARSING
	addRegexToken('DDD',match1to3);addRegexToken('DDDD',match3);addParseToken(['DDD','DDDD'],function(input,array,config){config._dayOfYear=toInt(input);});// HELPERS
	// MOMENTS
	function getSetDayOfYear(input){var dayOfYear=Math.round((this.clone().startOf('day')-this.clone().startOf('year'))/864e5)+1;return input==null?dayOfYear:this.add(input-dayOfYear,'d');}// FORMATTING
	addFormatToken('m',['mm',2],0,'minute');// ALIASES
	addUnitAlias('minute','m');// PRIORITY
	addUnitPriority('minute',14);// PARSING
	addRegexToken('m',match1to2);addRegexToken('mm',match1to2,match2);addParseToken(['m','mm'],MINUTE);// MOMENTS
	var getSetMinute=makeGetSet('Minutes',false);// FORMATTING
	addFormatToken('s',['ss',2],0,'second');// ALIASES
	addUnitAlias('second','s');// PRIORITY
	addUnitPriority('second',15);// PARSING
	addRegexToken('s',match1to2);addRegexToken('ss',match1to2,match2);addParseToken(['s','ss'],SECOND);// MOMENTS
	var getSetSecond=makeGetSet('Seconds',false);// FORMATTING
	addFormatToken('S',0,0,function(){return~~(this.millisecond()/100);});addFormatToken(0,['SS',2],0,function(){return~~(this.millisecond()/10);});addFormatToken(0,['SSS',3],0,'millisecond');addFormatToken(0,['SSSS',4],0,function(){return this.millisecond()*10;});addFormatToken(0,['SSSSS',5],0,function(){return this.millisecond()*100;});addFormatToken(0,['SSSSSS',6],0,function(){return this.millisecond()*1000;});addFormatToken(0,['SSSSSSS',7],0,function(){return this.millisecond()*10000;});addFormatToken(0,['SSSSSSSS',8],0,function(){return this.millisecond()*100000;});addFormatToken(0,['SSSSSSSSS',9],0,function(){return this.millisecond()*1000000;});// ALIASES
	addUnitAlias('millisecond','ms');// PRIORITY
	addUnitPriority('millisecond',16);// PARSING
	addRegexToken('S',match1to3,match1);addRegexToken('SS',match1to3,match2);addRegexToken('SSS',match1to3,match3);var token;for(token='SSSS';token.length<=9;token+='S'){addRegexToken(token,matchUnsigned);}function parseMs(input,array){array[MILLISECOND]=toInt(('0.'+input)*1000);}for(token='S';token.length<=9;token+='S'){addParseToken(token,parseMs);}// MOMENTS
	var getSetMillisecond=makeGetSet('Milliseconds',false);// FORMATTING
	addFormatToken('z',0,0,'zoneAbbr');addFormatToken('zz',0,0,'zoneName');// MOMENTS
	function getZoneAbbr(){return this._isUTC?'UTC':'';}function getZoneName(){return this._isUTC?'Coordinated Universal Time':'';}var momentPrototype__proto=Moment.prototype;momentPrototype__proto.add=add_subtract__add;momentPrototype__proto.calendar=moment_calendar__calendar;momentPrototype__proto.clone=clone;momentPrototype__proto.diff=diff;momentPrototype__proto.endOf=endOf;momentPrototype__proto.format=format;momentPrototype__proto.from=from;momentPrototype__proto.fromNow=fromNow;momentPrototype__proto.to=to;momentPrototype__proto.toNow=toNow;momentPrototype__proto.get=stringGet;momentPrototype__proto.invalidAt=invalidAt;momentPrototype__proto.isAfter=isAfter;momentPrototype__proto.isBefore=isBefore;momentPrototype__proto.isBetween=isBetween;momentPrototype__proto.isSame=isSame;momentPrototype__proto.isSameOrAfter=isSameOrAfter;momentPrototype__proto.isSameOrBefore=isSameOrBefore;momentPrototype__proto.isValid=moment_valid__isValid;momentPrototype__proto.lang=lang;momentPrototype__proto.locale=locale;momentPrototype__proto.localeData=localeData;momentPrototype__proto.max=prototypeMax;momentPrototype__proto.min=prototypeMin;momentPrototype__proto.parsingFlags=parsingFlags;momentPrototype__proto.set=stringSet;momentPrototype__proto.startOf=startOf;momentPrototype__proto.subtract=add_subtract__subtract;momentPrototype__proto.toArray=toArray;momentPrototype__proto.toObject=toObject;momentPrototype__proto.toDate=toDate;momentPrototype__proto.toISOString=moment_format__toISOString;momentPrototype__proto.toJSON=toJSON;momentPrototype__proto.toString=toString;momentPrototype__proto.unix=unix;momentPrototype__proto.valueOf=to_type__valueOf;momentPrototype__proto.creationData=creationData;// Year
	momentPrototype__proto.year=getSetYear;momentPrototype__proto.isLeapYear=getIsLeapYear;// Week Year
	momentPrototype__proto.weekYear=getSetWeekYear;momentPrototype__proto.isoWeekYear=getSetISOWeekYear;// Quarter
	momentPrototype__proto.quarter=momentPrototype__proto.quarters=getSetQuarter;// Month
	momentPrototype__proto.month=getSetMonth;momentPrototype__proto.daysInMonth=getDaysInMonth;// Week
	momentPrototype__proto.week=momentPrototype__proto.weeks=getSetWeek;momentPrototype__proto.isoWeek=momentPrototype__proto.isoWeeks=getSetISOWeek;momentPrototype__proto.weeksInYear=getWeeksInYear;momentPrototype__proto.isoWeeksInYear=getISOWeeksInYear;// Day
	momentPrototype__proto.date=getSetDayOfMonth;momentPrototype__proto.day=momentPrototype__proto.days=getSetDayOfWeek;momentPrototype__proto.weekday=getSetLocaleDayOfWeek;momentPrototype__proto.isoWeekday=getSetISODayOfWeek;momentPrototype__proto.dayOfYear=getSetDayOfYear;// Hour
	momentPrototype__proto.hour=momentPrototype__proto.hours=getSetHour;// Minute
	momentPrototype__proto.minute=momentPrototype__proto.minutes=getSetMinute;// Second
	momentPrototype__proto.second=momentPrototype__proto.seconds=getSetSecond;// Millisecond
	momentPrototype__proto.millisecond=momentPrototype__proto.milliseconds=getSetMillisecond;// Offset
	momentPrototype__proto.utcOffset=getSetOffset;momentPrototype__proto.utc=setOffsetToUTC;momentPrototype__proto.local=setOffsetToLocal;momentPrototype__proto.parseZone=setOffsetToParsedOffset;momentPrototype__proto.hasAlignedHourOffset=hasAlignedHourOffset;momentPrototype__proto.isDST=isDaylightSavingTime;momentPrototype__proto.isLocal=isLocal;momentPrototype__proto.isUtcOffset=isUtcOffset;momentPrototype__proto.isUtc=isUtc;momentPrototype__proto.isUTC=isUtc;// Timezone
	momentPrototype__proto.zoneAbbr=getZoneAbbr;momentPrototype__proto.zoneName=getZoneName;// Deprecations
	momentPrototype__proto.dates=deprecate('dates accessor is deprecated. Use date instead.',getSetDayOfMonth);momentPrototype__proto.months=deprecate('months accessor is deprecated. Use month instead',getSetMonth);momentPrototype__proto.years=deprecate('years accessor is deprecated. Use year instead',getSetYear);momentPrototype__proto.zone=deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',getSetZone);momentPrototype__proto.isDSTShifted=deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',isDaylightSavingTimeShifted);var momentPrototype=momentPrototype__proto;function moment__createUnix(input){return local__createLocal(input*1000);}function moment__createInZone(){return local__createLocal.apply(null,arguments).parseZone();}function preParsePostFormat(string){return string;}var prototype__proto=Locale.prototype;prototype__proto.calendar=locale_calendar__calendar;prototype__proto.longDateFormat=longDateFormat;prototype__proto.invalidDate=invalidDate;prototype__proto.ordinal=ordinal;prototype__proto.preparse=preParsePostFormat;prototype__proto.postformat=preParsePostFormat;prototype__proto.relativeTime=relative__relativeTime;prototype__proto.pastFuture=pastFuture;prototype__proto.set=locale_set__set;// Month
	prototype__proto.months=localeMonths;prototype__proto.monthsShort=localeMonthsShort;prototype__proto.monthsParse=localeMonthsParse;prototype__proto.monthsRegex=monthsRegex;prototype__proto.monthsShortRegex=monthsShortRegex;// Week
	prototype__proto.week=localeWeek;prototype__proto.firstDayOfYear=localeFirstDayOfYear;prototype__proto.firstDayOfWeek=localeFirstDayOfWeek;// Day of Week
	prototype__proto.weekdays=localeWeekdays;prototype__proto.weekdaysMin=localeWeekdaysMin;prototype__proto.weekdaysShort=localeWeekdaysShort;prototype__proto.weekdaysParse=localeWeekdaysParse;prototype__proto.weekdaysRegex=weekdaysRegex;prototype__proto.weekdaysShortRegex=weekdaysShortRegex;prototype__proto.weekdaysMinRegex=weekdaysMinRegex;// Hours
	prototype__proto.isPM=localeIsPM;prototype__proto.meridiem=localeMeridiem;function lists__get(format,index,field,setter){var locale=locale_locales__getLocale();var utc=create_utc__createUTC().set(setter,index);return locale[field](utc,format);}function listMonthsImpl(format,index,field){if(typeof format==='number'){index=format;format=undefined;}format=format||'';if(index!=null){return lists__get(format,index,field,'month');}var i;var out=[];for(i=0;i<12;i++){out[i]=lists__get(format,i,field,'month');}return out;}// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl(localeSorted,format,index,field){if(typeof localeSorted==='boolean'){if(typeof format==='number'){index=format;format=undefined;}format=format||'';}else{format=localeSorted;index=format;localeSorted=false;if(typeof format==='number'){index=format;format=undefined;}format=format||'';}var locale=locale_locales__getLocale(),shift=localeSorted?locale._week.dow:0;if(index!=null){return lists__get(format,(index+shift)%7,field,'day');}var i;var out=[];for(i=0;i<7;i++){out[i]=lists__get(format,(i+shift)%7,field,'day');}return out;}function lists__listMonths(format,index){return listMonthsImpl(format,index,'months');}function lists__listMonthsShort(format,index){return listMonthsImpl(format,index,'monthsShort');}function lists__listWeekdays(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdays');}function lists__listWeekdaysShort(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdaysShort');}function lists__listWeekdaysMin(localeSorted,format,index){return listWeekdaysImpl(localeSorted,format,index,'weekdaysMin');}locale_locales__getSetGlobalLocale('en',{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function ordinal(number){var b=number%10,output=toInt(number%100/10)===1?'th':b===1?'st':b===2?'nd':b===3?'rd':'th';return number+output;}});// Side effect imports
	utils_hooks__hooks.lang=deprecate('moment.lang is deprecated. Use moment.locale instead.',locale_locales__getSetGlobalLocale);utils_hooks__hooks.langData=deprecate('moment.langData is deprecated. Use moment.localeData instead.',locale_locales__getLocale);var mathAbs=Math.abs;function duration_abs__abs(){var data=this._data;this._milliseconds=mathAbs(this._milliseconds);this._days=mathAbs(this._days);this._months=mathAbs(this._months);data.milliseconds=mathAbs(data.milliseconds);data.seconds=mathAbs(data.seconds);data.minutes=mathAbs(data.minutes);data.hours=mathAbs(data.hours);data.months=mathAbs(data.months);data.years=mathAbs(data.years);return this;}function duration_add_subtract__addSubtract(duration,input,value,direction){var other=create__createDuration(input,value);duration._milliseconds+=direction*other._milliseconds;duration._days+=direction*other._days;duration._months+=direction*other._months;return duration._bubble();}// supports only 2.0-style add(1, 's') or add(duration)
	function duration_add_subtract__add(input,value){return duration_add_subtract__addSubtract(this,input,value,1);}// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function duration_add_subtract__subtract(input,value){return duration_add_subtract__addSubtract(this,input,value,-1);}function absCeil(number){if(number<0){return Math.floor(number);}else{return Math.ceil(number);}}function bubble(){var milliseconds=this._milliseconds;var days=this._days;var months=this._months;var data=this._data;var seconds,minutes,hours,years,monthsFromDays;// if we have a mix of positive and negative values, bubble down first
	// check: https://github.com/moment/moment/issues/2166
	if(!(milliseconds>=0&&days>=0&&months>=0||milliseconds<=0&&days<=0&&months<=0)){milliseconds+=absCeil(monthsToDays(months)+days)*864e5;days=0;months=0;}// The following code bubbles up values, see the tests for
	// examples of what that means.
	data.milliseconds=milliseconds%1000;seconds=absFloor(milliseconds/1000);data.seconds=seconds%60;minutes=absFloor(seconds/60);data.minutes=minutes%60;hours=absFloor(minutes/60);data.hours=hours%24;days+=absFloor(hours/24);// convert days to months
	monthsFromDays=absFloor(daysToMonths(days));months+=monthsFromDays;days-=absCeil(monthsToDays(monthsFromDays));// 12 months -> 1 year
	years=absFloor(months/12);months%=12;data.days=days;data.months=months;data.years=years;return this;}function daysToMonths(days){// 400 years have 146097 days (taking into account leap year rules)
	// 400 years have 12 months === 4800
	return days*4800/146097;}function monthsToDays(months){// the reverse of daysToMonths
	return months*146097/4800;}function as(units){var days;var months;var milliseconds=this._milliseconds;units=normalizeUnits(units);if(units==='month'||units==='year'){days=this._days+milliseconds/864e5;months=this._months+daysToMonths(days);return units==='month'?months:months/12;}else{// handle milliseconds separately because of floating point math errors (issue #1867)
	days=this._days+Math.round(monthsToDays(this._months));switch(units){case'week':return days/7+milliseconds/6048e5;case'day':return days+milliseconds/864e5;case'hour':return days*24+milliseconds/36e5;case'minute':return days*1440+milliseconds/6e4;case'second':return days*86400+milliseconds/1000;// Math.floor prevents floating point math errors here
	case'millisecond':return Math.floor(days*864e5)+milliseconds;default:throw new Error('Unknown unit '+units);}}}// TODO: Use this.as('ms')?
	function duration_as__valueOf(){return this._milliseconds+this._days*864e5+this._months%12*2592e6+toInt(this._months/12)*31536e6;}function makeAs(alias){return function(){return this.as(alias);};}var asMilliseconds=makeAs('ms');var asSeconds=makeAs('s');var asMinutes=makeAs('m');var asHours=makeAs('h');var asDays=makeAs('d');var asWeeks=makeAs('w');var asMonths=makeAs('M');var asYears=makeAs('y');function duration_get__get(units){units=normalizeUnits(units);return this[units+'s']();}function makeGetter(name){return function(){return this._data[name];};}var milliseconds=makeGetter('milliseconds');var seconds=makeGetter('seconds');var minutes=makeGetter('minutes');var hours=makeGetter('hours');var days=makeGetter('days');var months=makeGetter('months');var years=makeGetter('years');function weeks(){return absFloor(this.days()/7);}var round=Math.round;var thresholds={s:45,// seconds to minute
	m:45,// minutes to hour
	h:22,// hours to day
	d:26,// days to month
	M:11// months to year
	};// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string,number,withoutSuffix,isFuture,locale){return locale.relativeTime(number||1,!!withoutSuffix,string,isFuture);}function duration_humanize__relativeTime(posNegDuration,withoutSuffix,locale){var duration=create__createDuration(posNegDuration).abs();var seconds=round(duration.as('s'));var minutes=round(duration.as('m'));var hours=round(duration.as('h'));var days=round(duration.as('d'));var months=round(duration.as('M'));var years=round(duration.as('y'));var a=seconds<thresholds.s&&['s',seconds]||minutes<=1&&['m']||minutes<thresholds.m&&['mm',minutes]||hours<=1&&['h']||hours<thresholds.h&&['hh',hours]||days<=1&&['d']||days<thresholds.d&&['dd',days]||months<=1&&['M']||months<thresholds.M&&['MM',months]||years<=1&&['y']||['yy',years];a[2]=withoutSuffix;a[3]=+posNegDuration>0;a[4]=locale;return substituteTimeAgo.apply(null,a);}// This function allows you to set the rounding function for relative time strings
	function duration_humanize__getSetRelativeTimeRounding(roundingFunction){if(roundingFunction===undefined){return round;}if(typeof roundingFunction==='function'){round=roundingFunction;return true;}return false;}// This function allows you to set a threshold for relative time strings
	function duration_humanize__getSetRelativeTimeThreshold(threshold,limit){if(thresholds[threshold]===undefined){return false;}if(limit===undefined){return thresholds[threshold];}thresholds[threshold]=limit;return true;}function humanize(withSuffix){var locale=this.localeData();var output=duration_humanize__relativeTime(this,!withSuffix,locale);if(withSuffix){output=locale.pastFuture(+this,output);}return locale.postformat(output);}var iso_string__abs=Math.abs;function iso_string__toISOString(){// for ISO strings we do not use the normal bubbling rules:
	//  * milliseconds bubble up until they become hours
	//  * days do not bubble at all
	//  * months bubble up until they become years
	// This is because there is no context-free conversion between hours and days
	// (think of clock changes)
	// and also not between days and months (28-31 days per month)
	var seconds=iso_string__abs(this._milliseconds)/1000;var days=iso_string__abs(this._days);var months=iso_string__abs(this._months);var minutes,hours,years;// 3600 seconds -> 60 minutes -> 1 hour
	minutes=absFloor(seconds/60);hours=absFloor(minutes/60);seconds%=60;minutes%=60;// 12 months -> 1 year
	years=absFloor(months/12);months%=12;// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	var Y=years;var M=months;var D=days;var h=hours;var m=minutes;var s=seconds;var total=this.asSeconds();if(!total){// this is the same as C#'s (Noda) and python (isodate)...
	// but not other JS (goog.date)
	return'P0D';}return(total<0?'-':'')+'P'+(Y?Y+'Y':'')+(M?M+'M':'')+(D?D+'D':'')+(h||m||s?'T':'')+(h?h+'H':'')+(m?m+'M':'')+(s?s+'S':'');}var duration_prototype__proto=Duration.prototype;duration_prototype__proto.abs=duration_abs__abs;duration_prototype__proto.add=duration_add_subtract__add;duration_prototype__proto.subtract=duration_add_subtract__subtract;duration_prototype__proto.as=as;duration_prototype__proto.asMilliseconds=asMilliseconds;duration_prototype__proto.asSeconds=asSeconds;duration_prototype__proto.asMinutes=asMinutes;duration_prototype__proto.asHours=asHours;duration_prototype__proto.asDays=asDays;duration_prototype__proto.asWeeks=asWeeks;duration_prototype__proto.asMonths=asMonths;duration_prototype__proto.asYears=asYears;duration_prototype__proto.valueOf=duration_as__valueOf;duration_prototype__proto._bubble=bubble;duration_prototype__proto.get=duration_get__get;duration_prototype__proto.milliseconds=milliseconds;duration_prototype__proto.seconds=seconds;duration_prototype__proto.minutes=minutes;duration_prototype__proto.hours=hours;duration_prototype__proto.days=days;duration_prototype__proto.weeks=weeks;duration_prototype__proto.months=months;duration_prototype__proto.years=years;duration_prototype__proto.humanize=humanize;duration_prototype__proto.toISOString=iso_string__toISOString;duration_prototype__proto.toString=iso_string__toISOString;duration_prototype__proto.toJSON=iso_string__toISOString;duration_prototype__proto.locale=locale;duration_prototype__proto.localeData=localeData;// Deprecations
	duration_prototype__proto.toIsoString=deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',iso_string__toISOString);duration_prototype__proto.lang=lang;// Side effect imports
	// FORMATTING
	addFormatToken('X',0,0,'unix');addFormatToken('x',0,0,'valueOf');// PARSING
	addRegexToken('x',matchSigned);addRegexToken('X',matchTimestamp);addParseToken('X',function(input,array,config){config._d=new Date(parseFloat(input,10)*1000);});addParseToken('x',function(input,array,config){config._d=new Date(toInt(input));});// Side effect imports
	utils_hooks__hooks.version='2.15.2';setHookCallback(local__createLocal);utils_hooks__hooks.fn=momentPrototype;utils_hooks__hooks.min=min;utils_hooks__hooks.max=max;utils_hooks__hooks.now=now;utils_hooks__hooks.utc=create_utc__createUTC;utils_hooks__hooks.unix=moment__createUnix;utils_hooks__hooks.months=lists__listMonths;utils_hooks__hooks.isDate=isDate;utils_hooks__hooks.locale=locale_locales__getSetGlobalLocale;utils_hooks__hooks.invalid=valid__createInvalid;utils_hooks__hooks.duration=create__createDuration;utils_hooks__hooks.isMoment=isMoment;utils_hooks__hooks.weekdays=lists__listWeekdays;utils_hooks__hooks.parseZone=moment__createInZone;utils_hooks__hooks.localeData=locale_locales__getLocale;utils_hooks__hooks.isDuration=isDuration;utils_hooks__hooks.monthsShort=lists__listMonthsShort;utils_hooks__hooks.weekdaysMin=lists__listWeekdaysMin;utils_hooks__hooks.defineLocale=defineLocale;utils_hooks__hooks.updateLocale=updateLocale;utils_hooks__hooks.locales=locale_locales__listLocales;utils_hooks__hooks.weekdaysShort=lists__listWeekdaysShort;utils_hooks__hooks.normalizeUnits=normalizeUnits;utils_hooks__hooks.relativeTimeRounding=duration_humanize__getSetRelativeTimeRounding;utils_hooks__hooks.relativeTimeThreshold=duration_humanize__getSetRelativeTimeThreshold;utils_hooks__hooks.calendarFormat=getCalendarFormat;utils_hooks__hooks.prototype=momentPrototype;var _moment=utils_hooks__hooks;return _moment;});/* WEBPACK VAR INJECTION */}).call(exports,__webpack_require__(4)(module));/***/},/* 4 *//***/function(module,exports){module.exports=function(module){if(!module.webpackPolyfill){module.deprecate=function(){};module.paths=[];// module.parent = undefined by default
	module.children=[];module.webpackPolyfill=1;}return module;};/***/},/* 5 *//***/function(module,exports){function webpackContext(req){throw new Error("Cannot find module '"+req+"'.");}webpackContext.keys=function(){return[];};webpackContext.resolve=webpackContext;module.exports=webpackContext;webpackContext.id=5;/***/},/* 6 *//***/function(module,exports){/* WEBPACK VAR INJECTION */(function(global){'use strict';var _rng;var globalVar=typeof window!=='undefined'?window:typeof global!=='undefined'?global:null;if(globalVar&&globalVar.crypto&&crypto.getRandomValues){// WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	// Moderately fast, high quality
	var _rnds8=new Uint8Array(16);_rng=function whatwgRNG(){crypto.getRandomValues(_rnds8);return _rnds8;};}if(!_rng){// Math.random()-based (RNG)
	//
	// If all else fails, use Math.random().  It's fast, but is of unspecified
	// quality.
	var _rnds=new Array(16);_rng=function _rng(){for(var i=0,r;i<16;i++){if((i&0x03)===0)r=Math.random()*0x100000000;_rnds[i]=r>>>((i&0x03)<<3)&0xff;}return _rnds;};}//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php
	// Unique ID creation requires a high quality random # generator.  We feature
	// detect to determine the best RNG source, normalizing to a function that
	// returns 128-bits of randomness, since that's what's usually required
	//var _rng = require('./rng');
	// Maps for number <-> hex string conversion
	var _byteToHex=[];var _hexToByte={};for(var i=0;i<256;i++){_byteToHex[i]=(i+0x100).toString(16).substr(1);_hexToByte[_byteToHex[i]]=i;}// **`parse()` - Parse a UUID into it's component bytes**
	function parse(s,buf,offset){var i=buf&&offset||0,ii=0;buf=buf||[];s.toLowerCase().replace(/[0-9a-f]{2}/g,function(oct){if(ii<16){// Don't overflow!
	buf[i+ii++]=_hexToByte[oct];}});// Zero out remaining bytes if string was short
	while(ii<16){buf[i+ii++]=0;}return buf;}// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	function unparse(buf,offset){var i=offset||0,bth=_byteToHex;return bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+'-'+bth[buf[i++]]+bth[buf[i++]]+'-'+bth[buf[i++]]+bth[buf[i++]]+'-'+bth[buf[i++]]+bth[buf[i++]]+'-'+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]]+bth[buf[i++]];}// **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html
	// random #'s we need to init node and clockseq
	var _seedBytes=_rng();// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	var _nodeId=[_seedBytes[0]|0x01,_seedBytes[1],_seedBytes[2],_seedBytes[3],_seedBytes[4],_seedBytes[5]];// Per 4.2.2, randomize (14 bit) clockseq
	var _clockseq=(_seedBytes[6]<<8|_seedBytes[7])&0x3fff;// Previous uuid creation time
	var _lastMSecs=0,_lastNSecs=0;// See https://github.com/broofa/node-uuid for API details
	function v1(options,buf,offset){var i=buf&&offset||0;var b=buf||[];options=options||{};var clockseq=options.clockseq!==undefined?options.clockseq:_clockseq;// UUID timestamps are 100 nano-second units since the Gregorian epoch,
	// (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	// time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	// (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	var msecs=options.msecs!==undefined?options.msecs:new Date().getTime();// Per 4.2.1.2, use count of uuid's generated during the current clock
	// cycle to simulate higher resolution clock
	var nsecs=options.nsecs!==undefined?options.nsecs:_lastNSecs+1;// Time since last uuid creation (in msecs)
	var dt=msecs-_lastMSecs+(nsecs-_lastNSecs)/10000;// Per 4.2.1.2, Bump clockseq on clock regression
	if(dt<0&&options.clockseq===undefined){clockseq=clockseq+1&0x3fff;}// Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	// time interval
	if((dt<0||msecs>_lastMSecs)&&options.nsecs===undefined){nsecs=0;}// Per 4.2.1.2 Throw error if too many uuids are requested
	if(nsecs>=10000){throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');}_lastMSecs=msecs;_lastNSecs=nsecs;_clockseq=clockseq;// Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	msecs+=12219292800000;// `time_low`
	var tl=((msecs&0xfffffff)*10000+nsecs)%0x100000000;b[i++]=tl>>>24&0xff;b[i++]=tl>>>16&0xff;b[i++]=tl>>>8&0xff;b[i++]=tl&0xff;// `time_mid`
	var tmh=msecs/0x100000000*10000&0xfffffff;b[i++]=tmh>>>8&0xff;b[i++]=tmh&0xff;// `time_high_and_version`
	b[i++]=tmh>>>24&0xf|0x10;// include version
	b[i++]=tmh>>>16&0xff;// `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	b[i++]=clockseq>>>8|0x80;// `clock_seq_low`
	b[i++]=clockseq&0xff;// `node`
	var node=options.node||_nodeId;for(var n=0;n<6;n++){b[i+n]=node[n];}return buf?buf:unparse(b);}// **`v4()` - Generate random UUID**
	// See https://github.com/broofa/node-uuid for API details
	function v4(options,buf,offset){// Deprecated - 'format' argument, as supported in v1.2
	var i=buf&&offset||0;if(typeof options=='string'){buf=options=='binary'?new Array(16):null;options=null;}options=options||{};var rnds=options.random||(options.rng||_rng)();// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	rnds[6]=rnds[6]&0x0f|0x40;rnds[8]=rnds[8]&0x3f|0x80;// Copy bytes to buffer, if provided
	if(buf){for(var ii=0;ii<16;ii++){buf[i+ii]=rnds[ii];}}return buf||unparse(rnds);}// Export public API
	var uuid=v4;uuid.v1=v1;uuid.v4=v4;uuid.parse=parse;uuid.unparse=unparse;module.exports=uuid;/* WEBPACK VAR INJECTION */}).call(exports,function(){return this;}());/***/},/* 7 *//***/function(module,exports,__webpack_require__){'use strict';// utils
	exports.util=__webpack_require__(1);exports.DOMutil=__webpack_require__(8);// data
	exports.DataSet=__webpack_require__(9);exports.DataView=__webpack_require__(11);exports.Queue=__webpack_require__(10);// Graph3d
	exports.Graph3d=__webpack_require__(12);exports.graph3d={Camera:__webpack_require__(16),Filter:__webpack_require__(17),Point2d:__webpack_require__(15),Point3d:__webpack_require__(14),Slider:__webpack_require__(18),StepNumber:__webpack_require__(19)};// bundled external libraries
	exports.moment=__webpack_require__(2);exports.Hammer=__webpack_require__(22);exports.keycharm=__webpack_require__(25);/***/},/* 8 *//***/function(module,exports){'use strict';// DOM utility methods
	/**
	   * this prepares the JSON container for allocating SVG elements
	   * @param JSONcontainer
	   * @private
	   */exports.prepareElements=function(JSONcontainer){// cleanup the redundant svgElements;
	for(var elementType in JSONcontainer){if(JSONcontainer.hasOwnProperty(elementType)){JSONcontainer[elementType].redundant=JSONcontainer[elementType].used;JSONcontainer[elementType].used=[];}}};/**
	   * this cleans up all the unused SVG elements. By asking for the parentNode, we only need to supply the JSON container from
	   * which to remove the redundant elements.
	   *
	   * @param JSONcontainer
	   * @private
	   */exports.cleanupElements=function(JSONcontainer){// cleanup the redundant svgElements;
	for(var elementType in JSONcontainer){if(JSONcontainer.hasOwnProperty(elementType)){if(JSONcontainer[elementType].redundant){for(var i=0;i<JSONcontainer[elementType].redundant.length;i++){JSONcontainer[elementType].redundant[i].parentNode.removeChild(JSONcontainer[elementType].redundant[i]);}JSONcontainer[elementType].redundant=[];}}}};/**
	   * Ensures that all elements are removed first up so they can be recreated cleanly
	   * @param JSONcontainer
	   */exports.resetElements=function(JSONcontainer){exports.prepareElements(JSONcontainer);exports.cleanupElements(JSONcontainer);exports.prepareElements(JSONcontainer);};/**
	   * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
	   * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
	   *
	   * @param elementType
	   * @param JSONcontainer
	   * @param svgContainer
	   * @returns {*}
	   * @private
	   */exports.getSVGElement=function(elementType,JSONcontainer,svgContainer){var element;// allocate SVG element, if it doesnt yet exist, create one.
	if(JSONcontainer.hasOwnProperty(elementType)){// this element has been created before
	// check if there is an redundant element
	if(JSONcontainer[elementType].redundant.length>0){element=JSONcontainer[elementType].redundant[0];JSONcontainer[elementType].redundant.shift();}else{// create a new element and add it to the SVG
	element=document.createElementNS('http://www.w3.org/2000/svg',elementType);svgContainer.appendChild(element);}}else{// create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
	element=document.createElementNS('http://www.w3.org/2000/svg',elementType);JSONcontainer[elementType]={used:[],redundant:[]};svgContainer.appendChild(element);}JSONcontainer[elementType].used.push(element);return element;};/**
	   * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
	   * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
	   *
	   * @param elementType
	   * @param JSONcontainer
	   * @param DOMContainer
	   * @returns {*}
	   * @private
	   */exports.getDOMElement=function(elementType,JSONcontainer,DOMContainer,insertBefore){var element;// allocate DOM element, if it doesnt yet exist, create one.
	if(JSONcontainer.hasOwnProperty(elementType)){// this element has been created before
	// check if there is an redundant element
	if(JSONcontainer[elementType].redundant.length>0){element=JSONcontainer[elementType].redundant[0];JSONcontainer[elementType].redundant.shift();}else{// create a new element and add it to the SVG
	element=document.createElement(elementType);if(insertBefore!==undefined){DOMContainer.insertBefore(element,insertBefore);}else{DOMContainer.appendChild(element);}}}else{// create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
	element=document.createElement(elementType);JSONcontainer[elementType]={used:[],redundant:[]};if(insertBefore!==undefined){DOMContainer.insertBefore(element,insertBefore);}else{DOMContainer.appendChild(element);}}JSONcontainer[elementType].used.push(element);return element;};/**
	   * Draw a point object. This is a separate function because it can also be called by the legend.
	   * The reason the JSONcontainer and the target SVG svgContainer have to be supplied is so the legend can use these functions
	   * as well.
	   *
	   * @param x
	   * @param y
	   * @param groupTemplate: A template containing the necessary information to draw the datapoint e.g., {style: 'circle', size: 5, className: 'className' }
	   * @param JSONcontainer
	   * @param svgContainer
	   * @param labelObj
	   * @returns {*}
	   */exports.drawPoint=function(x,y,groupTemplate,JSONcontainer,svgContainer,labelObj){var point;if(groupTemplate.style=='circle'){point=exports.getSVGElement('circle',JSONcontainer,svgContainer);point.setAttributeNS(null,"cx",x);point.setAttributeNS(null,"cy",y);point.setAttributeNS(null,"r",0.5*groupTemplate.size);}else{point=exports.getSVGElement('rect',JSONcontainer,svgContainer);point.setAttributeNS(null,"x",x-0.5*groupTemplate.size);point.setAttributeNS(null,"y",y-0.5*groupTemplate.size);point.setAttributeNS(null,"width",groupTemplate.size);point.setAttributeNS(null,"height",groupTemplate.size);}if(groupTemplate.styles!==undefined){point.setAttributeNS(null,"style",groupTemplate.styles);}point.setAttributeNS(null,"class",groupTemplate.className+" vis-point");//handle label
	if(labelObj){var label=exports.getSVGElement('text',JSONcontainer,svgContainer);if(labelObj.xOffset){x=x+labelObj.xOffset;}if(labelObj.yOffset){y=y+labelObj.yOffset;}if(labelObj.content){label.textContent=labelObj.content;}if(labelObj.className){label.setAttributeNS(null,"class",labelObj.className+" vis-label");}label.setAttributeNS(null,"x",x);label.setAttributeNS(null,"y",y);}return point;};/**
	   * draw a bar SVG element centered on the X coordinate
	   *
	   * @param x
	   * @param y
	   * @param className
	   */exports.drawBar=function(x,y,width,height,className,JSONcontainer,svgContainer,style){if(height!=0){if(height<0){height*=-1;y-=height;}var rect=exports.getSVGElement('rect',JSONcontainer,svgContainer);rect.setAttributeNS(null,"x",x-0.5*width);rect.setAttributeNS(null,"y",y);rect.setAttributeNS(null,"width",width);rect.setAttributeNS(null,"height",height);rect.setAttributeNS(null,"class",className);if(style){rect.setAttributeNS(null,"style",style);}}};/***/},/* 9 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var util=__webpack_require__(1);var Queue=__webpack_require__(10);/**
	   * DataSet
	   *
	   * Usage:
	   *     var dataSet = new DataSet({
	   *         fieldId: '_id',
	   *         type: {
	   *             // ...
	   *         }
	   *     });
	   *
	   *     dataSet.add(item);
	   *     dataSet.add(data);
	   *     dataSet.update(item);
	   *     dataSet.update(data);
	   *     dataSet.remove(id);
	   *     dataSet.remove(ids);
	   *     var data = dataSet.get();
	   *     var data = dataSet.get(id);
	   *     var data = dataSet.get(ids);
	   *     var data = dataSet.get(ids, options, data);
	   *     dataSet.clear();
	   *
	   * A data set can:
	   * - add/remove/update data
	   * - gives triggers upon changes in the data
	   * - can  import/export data in various data formats
	   *
	   * @param {Array} [data]    Optional array with initial data
	   * @param {Object} [options]   Available options:
	   *                             {String} fieldId Field name of the id in the
	   *                                              items, 'id' by default.
	   *                             {Object.<String, String} type
	   *                                              A map with field names as key,
	   *                                              and the field type as value.
	   *                             {Object} queue   Queue changes to the DataSet,
	   *                                              flush them all at once.
	   *                                              Queue options:
	   *                                              - {number} delay  Delay in ms, null by default
	   *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
	   * @constructor DataSet
	   */// TODO: add a DataSet constructor DataSet(data, options)
	function DataSet(data,options){// correctly read optional arguments
	if(data&&!Array.isArray(data)){options=data;data=null;}this._options=options||{};this._data={};// map with data indexed by id
	this.length=0;// number of items in the DataSet
	this._fieldId=this._options.fieldId||'id';// name of the field containing id
	this._type={};// internal field types (NOTE: this can differ from this._options.type)
	// all variants of a Date are internally stored as Date, so we can convert
	// from everything to everything (also from ISODate to Number for example)
	if(this._options.type){var fields=Object.keys(this._options.type);for(var i=0,len=fields.length;i<len;i++){var field=fields[i];var value=this._options.type[field];if(value=='Date'||value=='ISODate'||value=='ASPDate'){this._type[field]='Date';}else{this._type[field]=value;}}}// TODO: deprecated since version 1.1.1 (or 2.0.0?)
	if(this._options.convert){throw new Error('Option "convert" is deprecated. Use "type" instead.');}this._subscribers={};// event subscribers
	// add initial data when provided
	if(data){this.add(data);}this.setOptions(options);}/**
	   * @param {Object} [options]   Available options:
	   *                             {Object} queue   Queue changes to the DataSet,
	   *                                              flush them all at once.
	   *                                              Queue options:
	   *                                              - {number} delay  Delay in ms, null by default
	   *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
	   * @param options
	   */DataSet.prototype.setOptions=function(options){if(options&&options.queue!==undefined){if(options.queue===false){// delete queue if loaded
	if(this._queue){this._queue.destroy();delete this._queue;}}else{// create queue and update its options
	if(!this._queue){this._queue=Queue.extend(this,{replace:['add','update','remove']});}if(_typeof(options.queue)==='object'){this._queue.setOptions(options.queue);}}}};/**
	   * Subscribe to an event, add an event listener
	   * @param {String} event        Event name. Available events: 'put', 'update',
	   *                              'remove'
	   * @param {function} callback   Callback method. Called with three parameters:
	   *                                  {String} event
	   *                                  {Object | null} params
	   *                                  {String | Number} senderId
	   */DataSet.prototype.on=function(event,callback){var subscribers=this._subscribers[event];if(!subscribers){subscribers=[];this._subscribers[event]=subscribers;}subscribers.push({callback:callback});};// TODO: remove this deprecated function some day (replaced with `on` since version 0.5, deprecated since v4.0)
	DataSet.prototype.subscribe=function(){throw new Error('DataSet.subscribe is deprecated. Use DataSet.on instead.');};/**
	   * Unsubscribe from an event, remove an event listener
	   * @param {String} event
	   * @param {function} callback
	   */DataSet.prototype.off=function(event,callback){var subscribers=this._subscribers[event];if(subscribers){this._subscribers[event]=subscribers.filter(function(listener){return listener.callback!=callback;});}};// TODO: remove this deprecated function some day (replaced with `on` since version 0.5, deprecated since v4.0)
	DataSet.prototype.unsubscribe=function(){throw new Error('DataSet.unsubscribe is deprecated. Use DataSet.off instead.');};/**
	   * Trigger an event
	   * @param {String} event
	   * @param {Object | null} params
	   * @param {String} [senderId]       Optional id of the sender.
	   * @private
	   */DataSet.prototype._trigger=function(event,params,senderId){if(event=='*'){throw new Error('Cannot trigger event *');}var subscribers=[];if(event in this._subscribers){subscribers=subscribers.concat(this._subscribers[event]);}if('*'in this._subscribers){subscribers=subscribers.concat(this._subscribers['*']);}for(var i=0,len=subscribers.length;i<len;i++){var subscriber=subscribers[i];if(subscriber.callback){subscriber.callback(event,params,senderId||null);}}};/**
	   * Add data.
	   * Adding an item will fail when there already is an item with the same id.
	   * @param {Object | Array} data
	   * @param {String} [senderId] Optional sender id
	   * @return {Array} addedIds      Array with the ids of the added items
	   */DataSet.prototype.add=function(data,senderId){var addedIds=[],id,me=this;if(Array.isArray(data)){// Array
	for(var i=0,len=data.length;i<len;i++){id=me._addItem(data[i]);addedIds.push(id);}}else if(data instanceof Object){// Single item
	id=me._addItem(data);addedIds.push(id);}else{throw new Error('Unknown dataType');}if(addedIds.length){this._trigger('add',{items:addedIds},senderId);}return addedIds;};/**
	   * Update existing items. When an item does not exist, it will be created
	   * @param {Object | Array} data
	   * @param {String} [senderId] Optional sender id
	   * @return {Array} updatedIds     The ids of the added or updated items
	   */DataSet.prototype.update=function(data,senderId){var addedIds=[];var updatedIds=[];var oldData=[];var updatedData=[];var me=this;var fieldId=me._fieldId;var addOrUpdate=function addOrUpdate(item){var id=item[fieldId];if(me._data[id]){var oldItem=util.extend({},me._data[id]);// update item
	id=me._updateItem(item);updatedIds.push(id);updatedData.push(item);oldData.push(oldItem);}else{// add new item
	id=me._addItem(item);addedIds.push(id);}};if(Array.isArray(data)){// Array
	for(var i=0,len=data.length;i<len;i++){if(data[i]instanceof Object){addOrUpdate(data[i]);}else{console.warn('Ignoring input item, which is not an object at index '+i);}}}else if(data instanceof Object){// Single item
	addOrUpdate(data);}else{throw new Error('Unknown dataType');}if(addedIds.length){this._trigger('add',{items:addedIds},senderId);}if(updatedIds.length){var props={items:updatedIds,oldData:oldData,data:updatedData};// TODO: remove deprecated property 'data' some day
	//Object.defineProperty(props, 'data', {
	//  'get': (function() {
	//    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
	//    return updatedData;
	//  }).bind(this)
	//});
	this._trigger('update',props,senderId);}return addedIds.concat(updatedIds);};/**
	   * Get a data item or multiple items.
	   *
	   * Usage:
	   *
	   *     get()
	   *     get(options: Object)
	   *
	   *     get(id: Number | String)
	   *     get(id: Number | String, options: Object)
	   *
	   *     get(ids: Number[] | String[])
	   *     get(ids: Number[] | String[], options: Object)
	   *
	   * Where:
	   *
	   * {Number | String} id         The id of an item
	   * {Number[] | String{}} ids    An array with ids of items
	   * {Object} options             An Object with options. Available options:
	   * {String} [returnType]        Type of data to be returned.
	   *                              Can be 'Array' (default) or 'Object'.
	   * {Object.<String, String>} [type]
	   * {String[]} [fields]          field names to be returned
	   * {function} [filter]          filter items
	   * {String | function} [order]  Order the items by a field name or custom sort function.
	   * @throws Error
	   */DataSet.prototype.get=function(args){var me=this;// parse the arguments
	var id,ids,options;var firstType=util.getType(arguments[0]);if(firstType=='String'||firstType=='Number'){// get(id [, options])
	id=arguments[0];options=arguments[1];}else if(firstType=='Array'){// get(ids [, options])
	ids=arguments[0];options=arguments[1];}else{// get([, options])
	options=arguments[0];}// determine the return type
	var returnType;if(options&&options.returnType){var allowedValues=['Array','Object'];returnType=allowedValues.indexOf(options.returnType)==-1?'Array':options.returnType;}else{returnType='Array';}// build options
	var type=options&&options.type||this._options.type;var filter=options&&options.filter;var items=[],item,itemIds,itemId,i,len;// convert items
	if(id!=undefined){// return a single item
	item=me._getItem(id,type);if(item&&filter&&!filter(item)){item=null;}}else if(ids!=undefined){// return a subset of items
	for(i=0,len=ids.length;i<len;i++){item=me._getItem(ids[i],type);if(!filter||filter(item)){items.push(item);}}}else{// return all items
	itemIds=Object.keys(this._data);for(i=0,len=itemIds.length;i<len;i++){itemId=itemIds[i];item=me._getItem(itemId,type);if(!filter||filter(item)){items.push(item);}}}// order the results
	if(options&&options.order&&id==undefined){this._sort(items,options.order);}// filter fields of the items
	if(options&&options.fields){var fields=options.fields;if(id!=undefined){item=this._filterFields(item,fields);}else{for(i=0,len=items.length;i<len;i++){items[i]=this._filterFields(items[i],fields);}}}// return the results
	if(returnType=='Object'){var result={},resultant;for(i=0,len=items.length;i<len;i++){resultant=items[i];result[resultant.id]=resultant;}return result;}else{if(id!=undefined){// a single item
	return item;}else{// just return our array
	return items;}}};/**
	   * Get ids of all items or from a filtered set of items.
	   * @param {Object} [options]    An Object with options. Available options:
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * @return {Array} ids
	   */DataSet.prototype.getIds=function(options){var data=this._data,filter=options&&options.filter,order=options&&options.order,type=options&&options.type||this._options.type,itemIds=Object.keys(data),i,len,id,item,items,ids=[];if(filter){// get filtered items
	if(order){// create ordered list
	items=[];for(i=0,len=itemIds.length;i<len;i++){id=itemIds[i];item=this._getItem(id,type);if(filter(item)){items.push(item);}}this._sort(items,order);for(i=0,len=items.length;i<len;i++){ids.push(items[i][this._fieldId]);}}else{// create unordered list
	for(i=0,len=itemIds.length;i<len;i++){id=itemIds[i];item=this._getItem(id,type);if(filter(item)){ids.push(item[this._fieldId]);}}}}else{// get all items
	if(order){// create an ordered list
	items=[];for(i=0,len=itemIds.length;i<len;i++){id=itemIds[i];items.push(data[id]);}this._sort(items,order);for(i=0,len=items.length;i<len;i++){ids.push(items[i][this._fieldId]);}}else{// create unordered list
	for(i=0,len=itemIds.length;i<len;i++){id=itemIds[i];item=data[id];ids.push(item[this._fieldId]);}}}return ids;};/**
	   * Returns the DataSet itself. Is overwritten for example by the DataView,
	   * which returns the DataSet it is connected to instead.
	   */DataSet.prototype.getDataSet=function(){return this;};/**
	   * Execute a callback function for every item in the dataset.
	   * @param {function} callback
	   * @param {Object} [options]    Available options:
	   *                              {Object.<String, String>} [type]
	   *                              {String[]} [fields] filter fields
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   */DataSet.prototype.forEach=function(callback,options){var filter=options&&options.filter,type=options&&options.type||this._options.type,data=this._data,itemIds=Object.keys(data),i,len,item,id;if(options&&options.order){// execute forEach on ordered list
	var items=this.get(options);for(i=0,len=items.length;i<len;i++){item=items[i];id=item[this._fieldId];callback(item,id);}}else{// unordered
	for(i=0,len=itemIds.length;i<len;i++){id=itemIds[i];item=this._getItem(id,type);if(!filter||filter(item)){callback(item,id);}}}};/**
	   * Map every item in the dataset.
	   * @param {function} callback
	   * @param {Object} [options]    Available options:
	   *                              {Object.<String, String>} [type]
	   *                              {String[]} [fields] filter fields
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * @return {Object[]} mappedItems
	   */DataSet.prototype.map=function(callback,options){var filter=options&&options.filter,type=options&&options.type||this._options.type,mappedItems=[],data=this._data,itemIds=Object.keys(data),i,len,id,item;// convert and filter items
	for(i=0,len=itemIds.length;i<len;i++){id=itemIds[i];item=this._getItem(id,type);if(!filter||filter(item)){mappedItems.push(callback(item,id));}}// order items
	if(options&&options.order){this._sort(mappedItems,options.order);}return mappedItems;};/**
	   * Filter the fields of an item
	   * @param {Object | null} item
	   * @param {String[]} fields     Field names
	   * @return {Object | null} filteredItem or null if no item is provided
	   * @private
	   */DataSet.prototype._filterFields=function(item,fields){if(!item){// item is null
	return item;}var filteredItem={},itemFields=Object.keys(item),len=itemFields.length,i,field;if(Array.isArray(fields)){for(i=0;i<len;i++){field=itemFields[i];if(fields.indexOf(field)!=-1){filteredItem[field]=item[field];}}}else{for(i=0;i<len;i++){field=itemFields[i];if(fields.hasOwnProperty(field)){filteredItem[fields[field]]=item[field];}}}return filteredItem;};/**
	   * Sort the provided array with items
	   * @param {Object[]} items
	   * @param {String | function} order      A field name or custom sort function.
	   * @private
	   */DataSet.prototype._sort=function(items,order){if(util.isString(order)){// order by provided field name
	var name=order;// field name
	items.sort(function(a,b){var av=a[name];var bv=b[name];return av>bv?1:av<bv?-1:0;});}else if(typeof order==='function'){// order by sort function
	items.sort(order);}// TODO: extend order by an Object {field:String, direction:String}
	//       where direction can be 'asc' or 'desc'
	else{throw new TypeError('Order must be a function or a string');}};/**
	   * Remove an object by pointer or by id
	   * @param {String | Number | Object | Array} id Object or id, or an array with
	   *                                              objects or ids to be removed
	   * @param {String} [senderId] Optional sender id
	   * @return {Array} removedIds
	   */DataSet.prototype.remove=function(id,senderId){var removedIds=[],removedItems=[],ids=[],i,len,itemId,item;// force everything to be an array for simplicity
	ids=Array.isArray(id)?id:[id];for(i=0,len=ids.length;i<len;i++){item=this._remove(ids[i]);if(item){itemId=item[this._fieldId];if(itemId){removedIds.push(itemId);removedItems.push(item);}}}if(removedIds.length){this._trigger('remove',{items:removedIds,oldData:removedItems},senderId);}return removedIds;};/**
	   * Remove an item by its id
	   * @param {Number | String | Object} id   id or item
	   * @returns {Number | String | null} id
	   * @private
	   */DataSet.prototype._remove=function(id){var item,ident;// confirm the id to use based on the args type
	if(util.isNumber(id)||util.isString(id)){ident=id;}else if(id instanceof Object){ident=id[this._fieldId];// look for the identifier field using _fieldId
	}// do the remove if the item is found
	if(ident!==undefined&&this._data[ident]){item=this._data[ident];delete this._data[ident];this.length--;return item;}return null;};/**
	   * Clear the data
	   * @param {String} [senderId] Optional sender id
	   * @return {Array} removedIds    The ids of all removed items
	   */DataSet.prototype.clear=function(senderId){var i,len;var ids=Object.keys(this._data);var items=[];for(i=0,len=ids.length;i<len;i++){items.push(this._data[ids[i]]);}this._data={};this.length=0;this._trigger('remove',{items:ids,oldData:items},senderId);return ids;};/**
	   * Find the item with maximum value of a specified field
	   * @param {String} field
	   * @return {Object | null} item  Item containing max value, or null if no items
	   */DataSet.prototype.max=function(field){var data=this._data,itemIds=Object.keys(data),max=null,maxField=null,i,len;for(i=0,len=itemIds.length;i<len;i++){var id=itemIds[i];var item=data[id];var itemField=item[field];if(itemField!=null&&(!max||itemField>maxField)){max=item;maxField=itemField;}}return max;};/**
	   * Find the item with minimum value of a specified field
	   * @param {String} field
	   * @return {Object | null} item  Item containing max value, or null if no items
	   */DataSet.prototype.min=function(field){var data=this._data,itemIds=Object.keys(data),min=null,minField=null,i,len;for(i=0,len=itemIds.length;i<len;i++){var id=itemIds[i];var item=data[id];var itemField=item[field];if(itemField!=null&&(!min||itemField<minField)){min=item;minField=itemField;}}return min;};/**
	   * Find all distinct values of a specified field
	   * @param {String} field
	   * @return {Array} values  Array containing all distinct values. If data items
	   *                         do not contain the specified field are ignored.
	   *                         The returned array is unordered.
	   */DataSet.prototype.distinct=function(field){var data=this._data;var itemIds=Object.keys(data);var values=[];var fieldType=this._options.type&&this._options.type[field]||null;var count=0;var i,j,len;for(i=0,len=itemIds.length;i<len;i++){var id=itemIds[i];var item=data[id];var value=item[field];var exists=false;for(j=0;j<count;j++){if(values[j]==value){exists=true;break;}}if(!exists&&value!==undefined){values[count]=value;count++;}}if(fieldType){for(i=0,len=values.length;i<len;i++){values[i]=util.convert(values[i],fieldType);}}return values;};/**
	   * Add a single item. Will fail when an item with the same id already exists.
	   * @param {Object} item
	   * @return {String} id
	   * @private
	   */DataSet.prototype._addItem=function(item){var id=item[this._fieldId];if(id!=undefined){// check whether this id is already taken
	if(this._data[id]){// item already exists
	throw new Error('Cannot add item: item with id '+id+' already exists');}}else{// generate an id
	id=util.randomUUID();item[this._fieldId]=id;}var d={},fields=Object.keys(item),i,len;for(i=0,len=fields.length;i<len;i++){var field=fields[i];var fieldType=this._type[field];// type may be undefined
	d[field]=util.convert(item[field],fieldType);}this._data[id]=d;this.length++;return id;};/**
	   * Get an item. Fields can be converted to a specific type
	   * @param {String} id
	   * @param {Object.<String, String>} [types]  field types to convert
	   * @return {Object | null} item
	   * @private
	   */DataSet.prototype._getItem=function(id,types){var field,value,i,len;// get the item from the dataset
	var raw=this._data[id];if(!raw){return null;}// convert the items field types
	var converted={},fields=Object.keys(raw);if(types){for(i=0,len=fields.length;i<len;i++){field=fields[i];value=raw[field];converted[field]=util.convert(value,types[field]);}}else{// no field types specified, no converting needed
	for(i=0,len=fields.length;i<len;i++){field=fields[i];value=raw[field];converted[field]=value;}}return converted;};/**
	   * Update a single item: merge with existing item.
	   * Will fail when the item has no id, or when there does not exist an item
	   * with the same id.
	   * @param {Object} item
	   * @return {String} id
	   * @private
	   */DataSet.prototype._updateItem=function(item){var id=item[this._fieldId];if(id==undefined){throw new Error('Cannot update item: item has no id (item: '+JSON.stringify(item)+')');}var d=this._data[id];if(!d){// item doesn't exist
	throw new Error('Cannot update item: no item with id '+id+' found');}// merge with current item
	var fields=Object.keys(item);for(var i=0,len=fields.length;i<len;i++){var field=fields[i];var fieldType=this._type[field];// type may be undefined
	d[field]=util.convert(item[field],fieldType);}return id;};module.exports=DataSet;/***/},/* 10 *//***/function(module,exports){'use strict';/**
	   * A queue
	   * @param {Object} options
	   *            Available options:
	   *            - delay: number    When provided, the queue will be flushed
	   *                               automatically after an inactivity of this delay
	   *                               in milliseconds.
	   *                               Default value is null.
	   *            - max: number      When the queue exceeds the given maximum number
	   *                               of entries, the queue is flushed automatically.
	   *                               Default value of max is Infinity.
	   * @constructor
	   */function Queue(options){// options
	this.delay=null;this.max=Infinity;// properties
	this._queue=[];this._timeout=null;this._extended=null;this.setOptions(options);}/**
	   * Update the configuration of the queue
	   * @param {Object} options
	   *            Available options:
	   *            - delay: number    When provided, the queue will be flushed
	   *                               automatically after an inactivity of this delay
	   *                               in milliseconds.
	   *                               Default value is null.
	   *            - max: number      When the queue exceeds the given maximum number
	   *                               of entries, the queue is flushed automatically.
	   *                               Default value of max is Infinity.
	   * @param options
	   */Queue.prototype.setOptions=function(options){if(options&&typeof options.delay!=='undefined'){this.delay=options.delay;}if(options&&typeof options.max!=='undefined'){this.max=options.max;}this._flushIfNeeded();};/**
	   * Extend an object with queuing functionality.
	   * The object will be extended with a function flush, and the methods provided
	   * in options.replace will be replaced with queued ones.
	   * @param {Object} object
	   * @param {Object} options
	   *            Available options:
	   *            - replace: Array.<string>
	   *                               A list with method names of the methods
	   *                               on the object to be replaced with queued ones.
	   *            - delay: number    When provided, the queue will be flushed
	   *                               automatically after an inactivity of this delay
	   *                               in milliseconds.
	   *                               Default value is null.
	   *            - max: number      When the queue exceeds the given maximum number
	   *                               of entries, the queue is flushed automatically.
	   *                               Default value of max is Infinity.
	   * @return {Queue} Returns the created queue
	   */Queue.extend=function(object,options){var queue=new Queue(options);if(object.flush!==undefined){throw new Error('Target object already has a property flush');}object.flush=function(){queue.flush();};var methods=[{name:'flush',original:undefined}];if(options&&options.replace){for(var i=0;i<options.replace.length;i++){var name=options.replace[i];methods.push({name:name,original:object[name]});queue.replace(object,name);}}queue._extended={object:object,methods:methods};return queue;};/**
	   * Destroy the queue. The queue will first flush all queued actions, and in
	   * case it has extended an object, will restore the original object.
	   */Queue.prototype.destroy=function(){this.flush();if(this._extended){var object=this._extended.object;var methods=this._extended.methods;for(var i=0;i<methods.length;i++){var method=methods[i];if(method.original){object[method.name]=method.original;}else{delete object[method.name];}}this._extended=null;}};/**
	   * Replace a method on an object with a queued version
	   * @param {Object} object   Object having the method
	   * @param {string} method   The method name
	   */Queue.prototype.replace=function(object,method){var me=this;var original=object[method];if(!original){throw new Error('Method '+method+' undefined');}object[method]=function(){// create an Array with the arguments
	var args=[];for(var i=0;i<arguments.length;i++){args[i]=arguments[i];}// add this call to the queue
	me.queue({args:args,fn:original,context:this});};};/**
	   * Queue a call
	   * @param {function | {fn: function, args: Array} | {fn: function, args: Array, context: Object}} entry
	   */Queue.prototype.queue=function(entry){if(typeof entry==='function'){this._queue.push({fn:entry});}else{this._queue.push(entry);}this._flushIfNeeded();};/**
	   * Check whether the queue needs to be flushed
	   * @private
	   */Queue.prototype._flushIfNeeded=function(){// flush when the maximum is exceeded.
	if(this._queue.length>this.max){this.flush();}// flush after a period of inactivity when a delay is configured
	clearTimeout(this._timeout);if(this.queue.length>0&&typeof this.delay==='number'){var me=this;this._timeout=setTimeout(function(){me.flush();},this.delay);}};/**
	   * Flush all queued calls
	   */Queue.prototype.flush=function(){while(this._queue.length>0){var entry=this._queue.shift();entry.fn.apply(entry.context||entry.fn,entry.args||[]);}};module.exports=Queue;/***/},/* 11 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);var DataSet=__webpack_require__(9);/**
	   * DataView
	   *
	   * a dataview offers a filtered view on a dataset or an other dataview.
	   *
	   * @param {DataSet | DataView} data
	   * @param {Object} [options]   Available options: see method get
	   *
	   * @constructor DataView
	   */function DataView(data,options){this._data=null;this._ids={};// ids of the items currently in memory (just contains a boolean true)
	this.length=0;// number of items in the DataView
	this._options=options||{};this._fieldId='id';// name of the field containing id
	this._subscribers={};// event subscribers
	var me=this;this.listener=function(){me._onEvent.apply(me,arguments);};this.setData(data);}// TODO: implement a function .config() to dynamically update things like configured filter
	// and trigger changes accordingly
	/**
	   * Set a data source for the view
	   * @param {DataSet | DataView} data
	   */DataView.prototype.setData=function(data){var ids,id,i,len,items;if(this._data){// unsubscribe from current dataset
	if(this._data.off){this._data.off('*',this.listener);}// trigger a remove of all items in memory
	ids=this._data.getIds({filter:this._options&&this._options.filter});items=[];for(i=0,len=ids.length;i<len;i++){items.push(this._data._data[ids[i]]);}this._ids={};this.length=0;this._trigger('remove',{items:ids,oldData:items});}this._data=data;if(this._data){// update fieldId
	this._fieldId=this._options.fieldId||this._data&&this._data.options&&this._data.options.fieldId||'id';// trigger an add of all added items
	ids=this._data.getIds({filter:this._options&&this._options.filter});for(i=0,len=ids.length;i<len;i++){id=ids[i];this._ids[id]=true;}this.length=ids.length;this._trigger('add',{items:ids});// subscribe to new dataset
	if(this._data.on){this._data.on('*',this.listener);}}};/**
	   * Refresh the DataView. Useful when the DataView has a filter function
	   * containing a variable parameter.
	   */DataView.prototype.refresh=function(){var id,i,len;var ids=this._data.getIds({filter:this._options&&this._options.filter}),oldIds=Object.keys(this._ids),newIds={},addedIds=[],removedIds=[],removedItems=[];// check for additions
	for(i=0,len=ids.length;i<len;i++){id=ids[i];newIds[id]=true;if(!this._ids[id]){addedIds.push(id);this._ids[id]=true;}}// check for removals
	for(i=0,len=oldIds.length;i<len;i++){id=oldIds[i];if(!newIds[id]){removedIds.push(id);removedItems.push(this._data[id]);delete this._ids[id];}}this.length+=addedIds.length-removedIds.length;// trigger events
	if(addedIds.length){this._trigger('add',{items:addedIds});}if(removedIds.length){this._trigger('remove',{items:removedIds,oldData:removedItems});}};/**
	   * Get data from the data view
	   *
	   * Usage:
	   *
	   *     get()
	   *     get(options: Object)
	   *     get(options: Object, data: Array | DataTable)
	   *
	   *     get(id: Number)
	   *     get(id: Number, options: Object)
	   *     get(id: Number, options: Object, data: Array | DataTable)
	   *
	   *     get(ids: Number[])
	   *     get(ids: Number[], options: Object)
	   *     get(ids: Number[], options: Object, data: Array | DataTable)
	   *
	   * Where:
	   *
	   * {Number | String} id         The id of an item
	   * {Number[] | String{}} ids    An array with ids of items
	   * {Object} options             An Object with options. Available options:
	   *                              {String} [type] Type of data to be returned. Can
	   *                                              be 'DataTable' or 'Array' (default)
	   *                              {Object.<String, String>} [convert]
	   *                              {String[]} [fields] field names to be returned
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * {Array | DataTable} [data]   If provided, items will be appended to this
	   *                              array or table. Required in case of Google
	   *                              DataTable.
	   * @param args
	   */DataView.prototype.get=function(args){var me=this;// parse the arguments
	var ids,options,data;var firstType=util.getType(arguments[0]);if(firstType=='String'||firstType=='Number'||firstType=='Array'){// get(id(s) [, options] [, data])
	ids=arguments[0];// can be a single id or an array with ids
	options=arguments[1];data=arguments[2];}else{// get([, options] [, data])
	options=arguments[0];data=arguments[1];}// extend the options with the default options and provided options
	var viewOptions=util.extend({},this._options,options);// create a combined filter method when needed
	if(this._options.filter&&options&&options.filter){viewOptions.filter=function(item){return me._options.filter(item)&&options.filter(item);};}// build up the call to the linked data set
	var getArguments=[];if(ids!=undefined){getArguments.push(ids);}getArguments.push(viewOptions);getArguments.push(data);return this._data&&this._data.get.apply(this._data,getArguments);};/**
	   * Get ids of all items or from a filtered set of items.
	   * @param {Object} [options]    An Object with options. Available options:
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * @return {Array} ids
	   */DataView.prototype.getIds=function(options){var ids;if(this._data){var defaultFilter=this._options.filter;var filter;if(options&&options.filter){if(defaultFilter){filter=function filter(item){return defaultFilter(item)&&options.filter(item);};}else{filter=options.filter;}}else{filter=defaultFilter;}ids=this._data.getIds({filter:filter,order:options&&options.order});}else{ids=[];}return ids;};/**
	   * Map every item in the dataset.
	   * @param {function} callback
	   * @param {Object} [options]    Available options:
	   *                              {Object.<String, String>} [type]
	   *                              {String[]} [fields] filter fields
	   *                              {function} [filter] filter items
	   *                              {String | function} [order] Order the items by
	   *                                  a field name or custom sort function.
	   * @return {Object[]} mappedItems
	   */DataView.prototype.map=function(callback,options){var mappedItems=[];if(this._data){var defaultFilter=this._options.filter;var filter;if(options&&options.filter){if(defaultFilter){filter=function filter(item){return defaultFilter(item)&&options.filter(item);};}else{filter=options.filter;}}else{filter=defaultFilter;}mappedItems=this._data.map(callback,{filter:filter,order:options&&options.order});}else{mappedItems=[];}return mappedItems;};/**
	   * Get the DataSet to which this DataView is connected. In case there is a chain
	   * of multiple DataViews, the root DataSet of this chain is returned.
	   * @return {DataSet} dataSet
	   */DataView.prototype.getDataSet=function(){var dataSet=this;while(dataSet instanceof DataView){dataSet=dataSet._data;}return dataSet||null;};/**
	   * Event listener. Will propagate all events from the connected data set to
	   * the subscribers of the DataView, but will filter the items and only trigger
	   * when there are changes in the filtered data set.
	   * @param {String} event
	   * @param {Object | null} params
	   * @param {String} senderId
	   * @private
	   */DataView.prototype._onEvent=function(event,params,senderId){var i,len,id,item;var ids=params&&params.items;var addedIds=[],updatedIds=[],removedIds=[],oldItems=[],updatedItems=[],removedItems=[];if(ids&&this._data){switch(event){case'add':// filter the ids of the added items
	for(i=0,len=ids.length;i<len;i++){id=ids[i];item=this.get(id);if(item){this._ids[id]=true;addedIds.push(id);}}break;case'update':// determine the event from the views viewpoint: an updated
	// item can be added, updated, or removed from this view.
	for(i=0,len=ids.length;i<len;i++){id=ids[i];item=this.get(id);if(item){if(this._ids[id]){updatedIds.push(id);updatedItems.push(params.data[i]);oldItems.push(params.oldData[i]);}else{this._ids[id]=true;addedIds.push(id);}}else{if(this._ids[id]){delete this._ids[id];removedIds.push(id);removedItems.push(params.oldData[i]);}else{// nothing interesting for me :-(
	}}}break;case'remove':// filter the ids of the removed items
	for(i=0,len=ids.length;i<len;i++){id=ids[i];if(this._ids[id]){delete this._ids[id];removedIds.push(id);removedItems.push(params.oldData[i]);}}break;}this.length+=addedIds.length-removedIds.length;if(addedIds.length){this._trigger('add',{items:addedIds},senderId);}if(updatedIds.length){this._trigger('update',{items:updatedIds,oldData:oldItems,data:updatedItems},senderId);}if(removedIds.length){this._trigger('remove',{items:removedIds,oldData:removedItems},senderId);}}};// copy subscription functionality from DataSet
	DataView.prototype.on=DataSet.prototype.on;DataView.prototype.off=DataSet.prototype.off;DataView.prototype._trigger=DataSet.prototype._trigger;// TODO: make these functions deprecated (replaced with `on` and `off` since version 0.5)
	DataView.prototype.subscribe=DataView.prototype.on;DataView.prototype.unsubscribe=DataView.prototype.off;module.exports=DataView;/***/},/* 12 *//***/function(module,exports,__webpack_require__){'use strict';var Emitter=__webpack_require__(13);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var util=__webpack_require__(1);var Point3d=__webpack_require__(14);var Point2d=__webpack_require__(15);var Camera=__webpack_require__(16);var Filter=__webpack_require__(17);var Slider=__webpack_require__(18);var StepNumber=__webpack_require__(19);var Range=__webpack_require__(20);var Settings=__webpack_require__(21);/// enumerate the available styles
	Graph3d.STYLE=Settings.STYLE;/**
	   * Following label is used in the settings to describe values which should be
	   * determined by the code while running, from the current data and graph style.
	   * 
	   * Using 'undefined' directly achieves the same thing, but this is more
	   * descriptive by describing the intent.
	   */var autoByDefault=undefined;/**
	   * Default values for option settings.
	   *
	   * These are the values used when a Graph3d instance is initialized without
	   * custom settings.
	   *
	   * If a field is not in this list, a default value of 'autoByDefault' is assumed,
	   * which is just an alias for 'undefined'.
	   */var DEFAULTS={width:'400px',height:'400px',filterLabel:'time',legendLabel:'value',xLabel:'x',yLabel:'y',zLabel:'z',xValueLabel:function xValueLabel(v){return v;},yValueLabel:function yValueLabel(v){return v;},zValueLabel:function zValueLabel(v){return v;},showGrid:true,showPerspective:true,showShadow:false,keepAspectRatio:true,verticalRatio:0.5,// 0.1 to 1.0, where 1.0 results in a 'cube'
	dotSizeRatio:0.02,// size of the dots as a fraction of the graph width
	showAnimationControls:autoByDefault,animationInterval:1000,// milliseconds
	animationPreload:false,animationAutoStart:autoByDefault,axisColor:'#4D4D4D',gridColor:'#D3D3D3',xCenter:'55%',yCenter:'50%',style:Graph3d.STYLE.DOT,tooltip:false,showLegend:autoByDefault,// determined by graph style
	backgroundColor:autoByDefault,dataColor:{fill:'#7DC1FF',stroke:'#3267D2',strokeWidth:1// px
	},cameraPosition:{horizontal:1.0,vertical:0.5,distance:1.7},xBarWidth:autoByDefault,yBarWidth:autoByDefault,valueMin:autoByDefault,valueMax:autoByDefault,xMin:autoByDefault,xMax:autoByDefault,xStep:autoByDefault,yMin:autoByDefault,yMax:autoByDefault,yStep:autoByDefault,zMin:autoByDefault,zMax:autoByDefault,zStep:autoByDefault};// -----------------------------------------------------------------------------
	// Class Graph3d
	// -----------------------------------------------------------------------------
	/**
	   * @constructor Graph3d
	   * Graph3d displays data in 3d.
	   *
	   * Graph3d is developed in javascript as a Google Visualization Chart.
	   *
	   * @param {Element} container   The DOM element in which the Graph3d will
	   *                              be created. Normally a div element.
	   * @param {DataSet | DataView | Array} [data]
	   * @param {Object} [options]
	   */function Graph3d(container,data,options){if(!(this instanceof Graph3d)){throw new SyntaxError('Constructor must be called with the new operator');}// create variables and set default values
	this.containerElement=container;this.dataTable=null;// The original data table
	this.dataPoints=null;// The table with point objects
	// create a frame and canvas
	this.create();Settings.setDefaults(DEFAULTS,this);// the column indexes
	this.colX=undefined;this.colY=undefined;this.colZ=undefined;this.colValue=undefined;this.colFilter=undefined;// TODO: customize axis range
	// apply options (also when undefined)
	this.setOptions(options);// apply data
	if(data){this.setData(data);}}// Extend Graph3d with an Emitter mixin
	Emitter(Graph3d.prototype);/**
	   * Calculate the scaling values, dependent on the range in x, y, and z direction
	   */Graph3d.prototype._setScale=function(){this.scale=new Point3d(1/this.xRange.range(),1/this.yRange.range(),1/this.zRange.range());// keep aspect ration between x and y scale if desired
	if(this.keepAspectRatio){if(this.scale.x<this.scale.y){//noinspection JSSuspiciousNameCombination
	this.scale.y=this.scale.x;}else{//noinspection JSSuspiciousNameCombination
	this.scale.x=this.scale.y;}}// scale the vertical axis
	this.scale.z*=this.verticalRatio;// TODO: can this be automated? verticalRatio?
	// determine scale for (optional) value
	if(this.valueRange!==undefined){this.scale.value=1/this.valueRange.range();}// position the camera arm
	var xCenter=this.xRange.center()*this.scale.x;var yCenter=this.yRange.center()*this.scale.y;var zCenter=this.zRange.center()*this.scale.z;this.camera.setArmLocation(xCenter,yCenter,zCenter);};/**
	   * Convert a 3D location to a 2D location on screen
	   * Source: ttp://en.wikipedia.org/wiki/3D_projection
	   *
	   * @param   {Point3d} point3d  A 3D point with parameters x, y, z
	   * @returns {Point2d} point2d  A 2D point with parameters x, y
	   */Graph3d.prototype._convert3Dto2D=function(point3d){var translation=this._convertPointToTranslation(point3d);return this._convertTranslationToScreen(translation);};/**
	   * Convert a 3D location its translation seen from the camera
	   * Source: http://en.wikipedia.org/wiki/3D_projection
	   *
	   * @param   {Point3d} point3d     A 3D point with parameters x, y, z
	   * @returns {Point3d} translation A 3D point with parameters x, y, z This is
	   *                                the translation of the point, seen from the
	   *                                camera.
	   */Graph3d.prototype._convertPointToTranslation=function(point3d){var cameraLocation=this.camera.getCameraLocation(),cameraRotation=this.camera.getCameraRotation(),ax=point3d.x*this.scale.x,ay=point3d.y*this.scale.y,az=point3d.z*this.scale.z,cx=cameraLocation.x,cy=cameraLocation.y,cz=cameraLocation.z,// calculate angles
	sinTx=Math.sin(cameraRotation.x),cosTx=Math.cos(cameraRotation.x),sinTy=Math.sin(cameraRotation.y),cosTy=Math.cos(cameraRotation.y),sinTz=Math.sin(cameraRotation.z),cosTz=Math.cos(cameraRotation.z),// calculate translation
	dx=cosTy*(sinTz*(ay-cy)+cosTz*(ax-cx))-sinTy*(az-cz),dy=sinTx*(cosTy*(az-cz)+sinTy*(sinTz*(ay-cy)+cosTz*(ax-cx)))+cosTx*(cosTz*(ay-cy)-sinTz*(ax-cx)),dz=cosTx*(cosTy*(az-cz)+sinTy*(sinTz*(ay-cy)+cosTz*(ax-cx)))-sinTx*(cosTz*(ay-cy)-sinTz*(ax-cx));return new Point3d(dx,dy,dz);};/**
	   * Convert a translation point to a point on the screen
	   *
	   * @param   {Point3d} translation A 3D point with parameters x, y, z This is
	   *                                the translation of the point, seen from the
	   *                                camera.
	   * @returns {Point2d} point2d     A 2D point with parameters x, y
	   */Graph3d.prototype._convertTranslationToScreen=function(translation){var ex=this.eye.x,ey=this.eye.y,ez=this.eye.z,dx=translation.x,dy=translation.y,dz=translation.z;// calculate position on screen from translation
	var bx;var by;if(this.showPerspective){bx=(dx-ex)*(ez/dz);by=(dy-ey)*(ez/dz);}else{bx=dx*-(ez/this.camera.getArmLength());by=dy*-(ez/this.camera.getArmLength());}// shift and scale the point to the center of the screen
	// use the width of the graph to scale both horizontally and vertically.
	return new Point2d(this.currentXCenter+bx*this.frame.canvas.clientWidth,this.currentYCenter-by*this.frame.canvas.clientWidth);};/**
	   * Calculate the translations and screen positions of all points
	   */Graph3d.prototype._calcTranslations=function(points,sort){if(sort===undefined){sort=true;}for(var i=0;i<points.length;i++){var point=points[i];point.trans=this._convertPointToTranslation(point.point);point.screen=this._convertTranslationToScreen(point.trans);// calculate the translation of the point at the bottom (needed for sorting)
	var transBottom=this._convertPointToTranslation(point.bottom);point.dist=this.showPerspective?transBottom.length():-transBottom.z;}if(!sort){return;}// sort the points on depth of their (x,y) position (not on z)
	var sortDepth=function sortDepth(a,b){return b.dist-a.dist;};points.sort(sortDepth);};Graph3d.prototype.getNumberOfRows=function(data){return data.length;};Graph3d.prototype.getNumberOfColumns=function(data){var counter=0;for(var column in data[0]){if(data[0].hasOwnProperty(column)){counter++;}}return counter;};Graph3d.prototype.getDistinctValues=function(data,column){var distinctValues=[];for(var i=0;i<data.length;i++){if(distinctValues.indexOf(data[i][column])==-1){distinctValues.push(data[i][column]);}}return distinctValues;};/**
	   * Get the absolute min/max values for the passed data column.
	   *
	   * @returns {Range} A Range instance with min/max members properly set.
	   */Graph3d.prototype.getColumnRange=function(data,column){var range=new Range();// Adjust the range so that it covers all values in the passed data elements.
	for(var i=0;i<data.length;i++){var item=data[i][column];range.adjust(item);}return range;};/**
	   * Check if the state is consistent for the use of the value field.
	   *
	   * Throws if a problem is detected.
	   */Graph3d.prototype._checkValueField=function(data){var hasValueField=this.style===Graph3d.STYLE.BARCOLOR||this.style===Graph3d.STYLE.BARSIZE||this.style===Graph3d.STYLE.DOTCOLOR||this.style===Graph3d.STYLE.DOTSIZE;if(!hasValueField){return;// No need to check further
	}// Following field must be present for the current graph style
	if(this.colValue===undefined){throw new Error('Expected data to have '+' field \'style\' '+' for graph style \''+this.style+'\'');}// The data must also contain this field.
	// Note that only first data element is checked.
	if(data[0][this.colValue]===undefined){throw new Error('Expected data to have '+' field \''+this.colValue+'\' '+' for graph style \''+this.style+'\'');}};/**
	   * Set default values for range
	   *
	   * The default values override the range values, if defined.
	   *
	   * Because it's possible that only defaultMin or defaultMax is set, it's better
	   * to pass in a range already set with the min/max set from the data. Otherwise,
	   * it's quite hard to process the min/max properly.
	   */Graph3d.prototype._setRangeDefaults=function(range,defaultMin,defaultMax){if(defaultMin!==undefined){range.min=defaultMin;}if(defaultMax!==undefined){range.max=defaultMax;}// This is the original way that the default min/max values were adjusted.
	// TODO: Perhaps it's better if an error is thrown if the values do not agree.
	//       But this will change the behaviour.
	if(range.max<=range.min)range.max=range.min+1;};/**
	   * Initialize the data from the data table. Calculate minimum and maximum values
	   * and column index values
	   * @param {Array | DataSet | DataView} rawData The data containing the items for
	   *                                             the Graph.
	   * @param {Number}                     style   Style Number
	   */Graph3d.prototype._dataInitialize=function(rawData,style){var me=this;// unsubscribe from the dataTable
	if(this.dataSet){this.dataSet.off('*',this._onChange);}if(rawData===undefined)return;if(Array.isArray(rawData)){rawData=new DataSet(rawData);}var data;if(rawData instanceof DataSet||rawData instanceof DataView){data=rawData.get();}else{throw new Error('Array, DataSet, or DataView expected');}if(data.length==0)return;this.dataSet=rawData;this.dataTable=data;// subscribe to changes in the dataset
	this._onChange=function(){me.setData(me.dataSet);};this.dataSet.on('*',this._onChange);// determine the location of x,y,z,value,filter columns
	this.colX='x';this.colY='y';this.colZ='z';var withBars=this.style==Graph3d.STYLE.BAR||this.style==Graph3d.STYLE.BARCOLOR||this.style==Graph3d.STYLE.BARSIZE;// determine barWidth from data
	if(withBars){if(this.defaultXBarWidth!==undefined){this.xBarWidth=this.defaultXBarWidth;}else{var dataX=this.getDistinctValues(data,this.colX);this.xBarWidth=dataX[1]-dataX[0]||1;}if(this.defaultYBarWidth!==undefined){this.yBarWidth=this.defaultYBarWidth;}else{var dataY=this.getDistinctValues(data,this.colY);this.yBarWidth=dataY[1]-dataY[0]||1;}}// calculate minimums and maximums
	var NUMSTEPS=5;var xRange=this.getColumnRange(data,this.colX);if(withBars){xRange.expand(this.xBarWidth/2);}this._setRangeDefaults(xRange,this.defaultXMin,this.defaultXMax);this.xRange=xRange;this.xStep=this.defaultXStep!==undefined?this.defaultXStep:xRange.range()/NUMSTEPS;var yRange=this.getColumnRange(data,this.colY);if(withBars){yRange.expand(this.yBarWidth/2);}this._setRangeDefaults(yRange,this.defaultYMin,this.defaultYMax);this.yRange=yRange;this.yStep=this.defaultYStep!==undefined?this.defaultYStep:yRange.range()/NUMSTEPS;var zRange=this.getColumnRange(data,this.colZ);this._setRangeDefaults(zRange,this.defaultZMin,this.defaultZMax);this.zRange=zRange;this.zStep=this.defaultZStep!==undefined?this.defaultZStep:zRange.range()/NUMSTEPS;if(data[0].hasOwnProperty('style')){this.colValue='style';var valueRange=this.getColumnRange(data,this.colValue);this._setRangeDefaults(valueRange,this.defaultValueMin,this.defaultValueMax);this.valueRange=valueRange;}// check if a filter column is provided
	// Needs to be started after zRange is defined
	if(data[0].hasOwnProperty('filter')){// Only set this field if it's actually present
	this.colFilter='filter';if(this.dataFilter===undefined){this.dataFilter=new Filter(rawData,this.colFilter,this);this.dataFilter.setOnLoadCallback(function(){me.redraw();});}}// set the scale dependent on the ranges.
	this._setScale();};/**
	   * Filter the data based on the current filter
	   *
	   * @param   {Array} data
	   * @returns {Array} dataPoints Array with point objects which can be drawn on
	   *                             screen
	   */Graph3d.prototype._getDataPoints=function(data){// TODO: store the created matrix dataPoints in the filters instead of
	//       reloading each time.
	var x,y,i,z,obj,point;var dataPoints=[];if(this.style===Graph3d.STYLE.GRID||this.style===Graph3d.STYLE.SURFACE){// copy all values from the google data table to a matrix
	// the provided values are supposed to form a grid of (x,y) positions
	// create two lists with all present x and y values
	var dataX=[];var dataY=[];for(i=0;i<this.getNumberOfRows(data);i++){x=data[i][this.colX]||0;y=data[i][this.colY]||0;if(dataX.indexOf(x)===-1){dataX.push(x);}if(dataY.indexOf(y)===-1){dataY.push(y);}}var sortNumber=function sortNumber(a,b){return a-b;};dataX.sort(sortNumber);dataY.sort(sortNumber);// create a grid, a 2d matrix, with all values.
	var dataMatrix=[];// temporary data matrix
	for(i=0;i<data.length;i++){x=data[i][this.colX]||0;y=data[i][this.colY]||0;z=data[i][this.colZ]||0;// TODO: implement Array().indexOf() for Internet Explorer
	var xIndex=dataX.indexOf(x);var yIndex=dataY.indexOf(y);if(dataMatrix[xIndex]===undefined){dataMatrix[xIndex]=[];}var point3d=new Point3d();point3d.x=x;point3d.y=y;point3d.z=z;point3d.data=data[i];obj={};obj.point=point3d;obj.trans=undefined;obj.screen=undefined;obj.bottom=new Point3d(x,y,this.zRange.min);dataMatrix[xIndex][yIndex]=obj;dataPoints.push(obj);}// fill in the pointers to the neighbors.
	for(x=0;x<dataMatrix.length;x++){for(y=0;y<dataMatrix[x].length;y++){if(dataMatrix[x][y]){dataMatrix[x][y].pointRight=x<dataMatrix.length-1?dataMatrix[x+1][y]:undefined;dataMatrix[x][y].pointTop=y<dataMatrix[x].length-1?dataMatrix[x][y+1]:undefined;dataMatrix[x][y].pointCross=x<dataMatrix.length-1&&y<dataMatrix[x].length-1?dataMatrix[x+1][y+1]:undefined;}}}}else{// 'dot', 'dot-line', etc.
	this._checkValueField(data);// copy all values from the google data table to a list with Point3d objects
	for(i=0;i<data.length;i++){point=new Point3d();point.x=data[i][this.colX]||0;point.y=data[i][this.colY]||0;point.z=data[i][this.colZ]||0;point.data=data[i];if(this.colValue!==undefined){point.value=data[i][this.colValue]||0;}obj={};obj.point=point;obj.bottom=new Point3d(point.x,point.y,this.zRange.min);obj.trans=undefined;obj.screen=undefined;if(this.style===Graph3d.STYLE.LINE){if(i>0){// Add next point for line drawing
	dataPoints[i-1].pointNext=obj;}}dataPoints.push(obj);}}return dataPoints;};/**
	   * Create the main frame for the Graph3d.
	   *
	   * This function is executed once when a Graph3d object is created. The frame
	   * contains a canvas, and this canvas contains all objects like the axis and
	   * nodes.
	   */Graph3d.prototype.create=function(){// remove all elements from the container element.
	while(this.containerElement.hasChildNodes()){this.containerElement.removeChild(this.containerElement.firstChild);}this.frame=document.createElement('div');this.frame.style.position='relative';this.frame.style.overflow='hidden';// create the graph canvas (HTML canvas element)
	this.frame.canvas=document.createElement('canvas');this.frame.canvas.style.position='relative';this.frame.appendChild(this.frame.canvas);//if (!this.frame.canvas.getContext) {
	{var noCanvas=document.createElement('DIV');noCanvas.style.color='red';noCanvas.style.fontWeight='bold';noCanvas.style.padding='10px';noCanvas.innerHTML='Error: your browser does not support HTML canvas';this.frame.canvas.appendChild(noCanvas);}this.frame.filter=document.createElement('div');this.frame.filter.style.position='absolute';this.frame.filter.style.bottom='0px';this.frame.filter.style.left='0px';this.frame.filter.style.width='100%';this.frame.appendChild(this.frame.filter);// add event listeners to handle moving and zooming the contents
	var me=this;var onmousedown=function onmousedown(event){me._onMouseDown(event);};var ontouchstart=function ontouchstart(event){me._onTouchStart(event);};var onmousewheel=function onmousewheel(event){me._onWheel(event);};var ontooltip=function ontooltip(event){me._onTooltip(event);};// TODO: these events are never cleaned up... can give a 'memory leakage'
	util.addEventListener(this.frame.canvas,'keydown',onkeydown);util.addEventListener(this.frame.canvas,'mousedown',onmousedown);util.addEventListener(this.frame.canvas,'touchstart',ontouchstart);util.addEventListener(this.frame.canvas,'mousewheel',onmousewheel);util.addEventListener(this.frame.canvas,'mousemove',ontooltip);// add the new graph to the container element
	this.containerElement.appendChild(this.frame);};/**
	   * Set a new size for the graph
	   *
	   * @param {string} width  Width in pixels or percentage (for example '800px'
	   *                        or '50%')
	   * @param {string} height Height in pixels or percentage  (for example '400px'
	   *                        or '30%')
	   */Graph3d.prototype.setSize=function(width,height){this.frame.style.width=width;this.frame.style.height=height;this._resizeCanvas();};/**
	   * Resize the canvas to the current size of the frame
	   */Graph3d.prototype._resizeCanvas=function(){this.frame.canvas.style.width='100%';this.frame.canvas.style.height='100%';this.frame.canvas.width=this.frame.canvas.clientWidth;this.frame.canvas.height=this.frame.canvas.clientHeight;// adjust with for margin
	this.frame.filter.style.width=this.frame.canvas.clientWidth-2*10+'px';};/**
	   * Start animation
	   */Graph3d.prototype.animationStart=function(){if(!this.frame.filter||!this.frame.filter.slider)throw new Error('No animation available');this.frame.filter.slider.play();};/**
	   * Stop animation
	   */Graph3d.prototype.animationStop=function(){if(!this.frame.filter||!this.frame.filter.slider)return;this.frame.filter.slider.stop();};/**
	   * Resize the center position based on the current values in this.xCenter
	   * and this.yCenter (which are strings with a percentage or a value
	   * in pixels). The center positions are the variables this.currentXCenter
	   * and this.currentYCenter
	   */Graph3d.prototype._resizeCenter=function(){// calculate the horizontal center position
	if(this.xCenter.charAt(this.xCenter.length-1)==='%'){this.currentXCenter=parseFloat(this.xCenter)/100*this.frame.canvas.clientWidth;}else{this.currentXCenter=parseFloat(this.xCenter);// supposed to be in px
	}// calculate the vertical center position
	if(this.yCenter.charAt(this.yCenter.length-1)==='%'){this.currentYCenter=parseFloat(this.yCenter)/100*(this.frame.canvas.clientHeight-this.frame.filter.clientHeight);}else{this.currentYCenter=parseFloat(this.yCenter);// supposed to be in px
	}};/**
	   * Retrieve the current camera rotation
	   *
	   * @returns {object} An object with parameters horizontal, vertical, and
	   *                   distance
	   */Graph3d.prototype.getCameraPosition=function(){var pos=this.camera.getArmRotation();pos.distance=this.camera.getArmLength();return pos;};/**
	   * Load data into the 3D Graph
	   */Graph3d.prototype._readData=function(data){// read the data
	this._dataInitialize(data,this.style);if(this.dataFilter){// apply filtering
	this.dataPoints=this.dataFilter._getDataPoints();}else{// no filtering. load all data
	this.dataPoints=this._getDataPoints(this.dataTable);}// draw the filter
	this._redrawFilter();};/**
	   * Replace the dataset of the Graph3d
	   *
	   * @param {Array | DataSet | DataView} data
	   */Graph3d.prototype.setData=function(data){this._readData(data);this.redraw();// start animation when option is true
	if(this.animationAutoStart&&this.dataFilter){this.animationStart();}};/**
	   * Update the options. Options will be merged with current options
	   *
	   * @param {Object} options
	   */Graph3d.prototype.setOptions=function(options){var cameraPosition=undefined;this.animationStop();Settings.setOptions(options,this);this.setPointDrawingMethod();this.setSize(this.width,this.height);// re-load the data
	if(this.dataTable){this.setData(this.dataTable);}// start animation when option is true
	if(this.animationAutoStart&&this.dataFilter){this.animationStart();}};/**
	   * Determine which point drawing method to use for the current graph style.
	   */Graph3d.prototype.setPointDrawingMethod=function(){var method=undefined;switch(this.style){case Graph3d.STYLE.BAR:method=Graph3d.prototype._redrawBarGraphPoint;break;case Graph3d.STYLE.BARCOLOR:method=Graph3d.prototype._redrawBarColorGraphPoint;break;case Graph3d.STYLE.BARSIZE:method=Graph3d.prototype._redrawBarSizeGraphPoint;break;case Graph3d.STYLE.DOT:method=Graph3d.prototype._redrawDotGraphPoint;break;case Graph3d.STYLE.DOTLINE:method=Graph3d.prototype._redrawDotLineGraphPoint;break;case Graph3d.STYLE.DOTCOLOR:method=Graph3d.prototype._redrawDotColorGraphPoint;break;case Graph3d.STYLE.DOTSIZE:method=Graph3d.prototype._redrawDotSizeGraphPoint;break;case Graph3d.STYLE.SURFACE:method=Graph3d.prototype._redrawSurfaceGraphPoint;break;case Graph3d.STYLE.GRID:method=Graph3d.prototype._redrawGridGraphPoint;break;case Graph3d.STYLE.LINE:method=Graph3d.prototype._redrawLineGraphPoint;break;default:throw new Error('Can not determine point drawing method '+'for graph style \''+this.style+'\'');break;}this._pointDrawingMethod=method;};/**
	   * Redraw the Graph.
	   */Graph3d.prototype.redraw=function(){if(this.dataPoints===undefined){throw new Error('Graph data not initialized');}this._resizeCanvas();this._resizeCenter();this._redrawSlider();this._redrawClear();this._redrawAxis();this._redrawDataGraph();this._redrawInfo();this._redrawLegend();};/**
	   * Get drawing context without exposing canvas
	   */Graph3d.prototype._getContext=function(){var canvas=this.frame.canvas;var ctx=canvas.getContext('2d');ctx.lineJoin='round';ctx.lineCap='round';return ctx;};/**
	   * Clear the canvas before redrawing
	   */Graph3d.prototype._redrawClear=function(){var canvas=this.frame.canvas;var ctx=canvas.getContext('2d');ctx.clearRect(0,0,canvas.width,canvas.height);};Graph3d.prototype._dotSize=function(){return this.frame.clientWidth*this.dotSizeRatio;};/**
	   * Get legend width 
	   */Graph3d.prototype._getLegendWidth=function(){var width;if(this.style===Graph3d.STYLE.DOTSIZE){var dotSize=this._dotSize();width=dotSize/2+dotSize*2;}else if(this.style===Graph3d.STYLE.BARSIZE){width=this.xBarWidth;}else{width=20;}return width;};/**
	   * Redraw the legend based on size, dot color, or surface height 
	   */Graph3d.prototype._redrawLegend=function(){//Return without drawing anything, if no legend is specified 
	if(this.showLegend!==true){return;}// Do not draw legend when graph style does not support
	if(this.style===Graph3d.STYLE.LINE||this.style===Graph3d.STYLE.BARSIZE//TODO add legend support for BARSIZE 
	){return;}// Legend types - size and color. Determine if size legend.  
	var isSizeLegend=this.style===Graph3d.STYLE.BARSIZE||this.style===Graph3d.STYLE.DOTSIZE;// Legend is either tracking z values or style values. This flag if false means use z values. 
	var isValueLegend=this.style===Graph3d.STYLE.DOTSIZE||this.style===Graph3d.STYLE.DOTCOLOR||this.style===Graph3d.STYLE.BARCOLOR;var height=Math.max(this.frame.clientHeight*0.25,100);var top=this.margin;var width=this._getLegendWidth();// px - overwritten by size legend  
	var right=this.frame.clientWidth-this.margin;var left=right-width;var bottom=top+height;var ctx=this._getContext();ctx.lineWidth=1;ctx.font='14px arial';// TODO: put in options
	if(isSizeLegend===false){// draw the color bar
	var ymin=0;var ymax=height;// Todo: make height customizable
	var y;for(y=ymin;y<ymax;y++){var f=(y-ymin)/(ymax-ymin);var hue=f*240;var color=this._hsv2rgb(hue,1,1);ctx.strokeStyle=color;ctx.beginPath();ctx.moveTo(left,top+y);ctx.lineTo(right,top+y);ctx.stroke();}ctx.strokeStyle=this.axisColor;ctx.strokeRect(left,top,width,height);}else{// draw the size legend box 
	var widthMin;if(this.style===Graph3d.STYLE.DOTSIZE){var dotSize=this._dotSize();widthMin=dotSize/2;// px
	}else if(this.style===Graph3d.STYLE.BARSIZE){//widthMin = this.xBarWidth * 0.2 this is wrong - barwidth measures in terms of xvalues 
	}ctx.strokeStyle=this.axisColor;ctx.fillStyle=this.dataColor.fill;ctx.beginPath();ctx.moveTo(left,top);ctx.lineTo(right,top);ctx.lineTo(right-width+widthMin,bottom);ctx.lineTo(left,bottom);ctx.closePath();ctx.fill();ctx.stroke();}// print value text along the legend edge 
	var gridLineLen=5;// px
	var legendMin=isValueLegend?this.valueRange.min:this.zRange.min;var legendMax=isValueLegend?this.valueRange.max:this.zRange.max;var step=new StepNumber(legendMin,legendMax,(legendMax-legendMin)/5,true);step.start(true);var y;var from;var to;while(!step.end()){y=bottom-(step.getCurrent()-legendMin)/(legendMax-legendMin)*height;from=new Point2d(left-gridLineLen,y);to=new Point2d(left,y);this._line(ctx,from,to);ctx.textAlign='right';ctx.textBaseline='middle';ctx.fillStyle=this.axisColor;ctx.fillText(step.getCurrent(),left-2*gridLineLen,y);step.next();}ctx.textAlign='right';ctx.textBaseline='top';var label=this.legendLabel;ctx.fillText(label,right,bottom+this.margin);};/**
	   * Redraw the filter
	   */Graph3d.prototype._redrawFilter=function(){this.frame.filter.innerHTML='';if(this.dataFilter){var options={'visible':this.showAnimationControls};var slider=new Slider(this.frame.filter,options);this.frame.filter.slider=slider;// TODO: css here is not nice here...
	this.frame.filter.style.padding='10px';//this.frame.filter.style.backgroundColor = '#EFEFEF';
	slider.setValues(this.dataFilter.values);slider.setPlayInterval(this.animationInterval);// create an event handler
	var me=this;var onchange=function onchange(){var index=slider.getIndex();me.dataFilter.selectValue(index);me.dataPoints=me.dataFilter._getDataPoints();me.redraw();};slider.setOnChangeCallback(onchange);}else{this.frame.filter.slider=undefined;}};/**
	   * Redraw the slider
	   */Graph3d.prototype._redrawSlider=function(){if(this.frame.filter.slider!==undefined){this.frame.filter.slider.redraw();}};/**
	   * Redraw common information
	   */Graph3d.prototype._redrawInfo=function(){if(this.dataFilter){var ctx=this._getContext();ctx.font='14px arial';// TODO: put in options
	ctx.lineStyle='gray';ctx.fillStyle='gray';ctx.textAlign='left';ctx.textBaseline='top';var x=this.margin;var y=this.margin;ctx.fillText(this.dataFilter.getLabel()+': '+this.dataFilter.getSelectedValue(),x,y);}};/**
	   * Draw a line between 2d points 'from' and 'to'.
	   *
	   * If stroke style specified, set that as well.
	   */Graph3d.prototype._line=function(ctx,from,to,strokeStyle){if(strokeStyle!==undefined){ctx.strokeStyle=strokeStyle;}ctx.beginPath();ctx.moveTo(from.x,from.y);ctx.lineTo(to.x,to.y);ctx.stroke();};Graph3d.prototype.drawAxisLabelX=function(ctx,point3d,text,armAngle,yMargin){if(yMargin===undefined){yMargin=0;}var point2d=this._convert3Dto2D(point3d);if(Math.cos(armAngle*2)>0){ctx.textAlign='center';ctx.textBaseline='top';point2d.y+=yMargin;}else if(Math.sin(armAngle*2)<0){ctx.textAlign='right';ctx.textBaseline='middle';}else{ctx.textAlign='left';ctx.textBaseline='middle';}ctx.fillStyle=this.axisColor;ctx.fillText(text,point2d.x,point2d.y);};Graph3d.prototype.drawAxisLabelY=function(ctx,point3d,text,armAngle,yMargin){if(yMargin===undefined){yMargin=0;}var point2d=this._convert3Dto2D(point3d);if(Math.cos(armAngle*2)<0){ctx.textAlign='center';ctx.textBaseline='top';point2d.y+=yMargin;}else if(Math.sin(armAngle*2)>0){ctx.textAlign='right';ctx.textBaseline='middle';}else{ctx.textAlign='left';ctx.textBaseline='middle';}ctx.fillStyle=this.axisColor;ctx.fillText(text,point2d.x,point2d.y);};Graph3d.prototype.drawAxisLabelZ=function(ctx,point3d,text,offset){if(offset===undefined){offset=0;}var point2d=this._convert3Dto2D(point3d);ctx.textAlign='right';ctx.textBaseline='middle';ctx.fillStyle=this.axisColor;ctx.fillText(text,point2d.x-offset,point2d.y);};/**


	  /**
	   * Draw a line between 2d points 'from' and 'to'.
	   *
	   * If stroke style specified, set that as well.
	   */Graph3d.prototype._line3d=function(ctx,from,to,strokeStyle){var from2d=this._convert3Dto2D(from);var to2d=this._convert3Dto2D(to);this._line(ctx,from2d,to2d,strokeStyle);};/**
	   * Redraw the axis
	   */Graph3d.prototype._redrawAxis=function(){var ctx=this._getContext(),from,to,step,prettyStep,text,xText,yText,zText,offset,xOffset,yOffset;// TODO: get the actual rendered style of the containerElement
	//ctx.font = this.containerElement.style.font;
	ctx.font=24/this.camera.getArmLength()+'px arial';// calculate the length for the short grid lines
	var gridLenX=0.025/this.scale.x;var gridLenY=0.025/this.scale.y;var textMargin=5/this.camera.getArmLength();// px
	var armAngle=this.camera.getArmRotation().horizontal;var armVector=new Point2d(Math.cos(armAngle),Math.sin(armAngle));var xRange=this.xRange;var yRange=this.yRange;var zRange=this.zRange;// draw x-grid lines
	ctx.lineWidth=1;prettyStep=this.defaultXStep===undefined;step=new StepNumber(xRange.min,xRange.max,this.xStep,prettyStep);step.start(true);while(!step.end()){var x=step.getCurrent();if(this.showGrid){from=new Point3d(x,yRange.min,zRange.min);to=new Point3d(x,yRange.max,zRange.min);this._line3d(ctx,from,to,this.gridColor);}else{from=new Point3d(x,yRange.min,zRange.min);to=new Point3d(x,yRange.min+gridLenX,zRange.min);this._line3d(ctx,from,to,this.axisColor);from=new Point3d(x,yRange.max,zRange.min);to=new Point3d(x,yRange.max-gridLenX,zRange.min);this._line3d(ctx,from,to,this.axisColor);}yText=armVector.x>0?yRange.min:yRange.max;var point3d=new Point3d(x,yText,zRange.min);var msg='  '+this.xValueLabel(x)+'  ';this.drawAxisLabelX(ctx,point3d,msg,armAngle,textMargin);step.next();}// draw y-grid lines
	ctx.lineWidth=1;prettyStep=this.defaultYStep===undefined;step=new StepNumber(yRange.min,yRange.max,this.yStep,prettyStep);step.start(true);while(!step.end()){var y=step.getCurrent();if(this.showGrid){from=new Point3d(xRange.min,y,zRange.min);to=new Point3d(xRange.max,y,zRange.min);this._line3d(ctx,from,to,this.gridColor);}else{from=new Point3d(xRange.min,y,zRange.min);to=new Point3d(xRange.min+gridLenY,y,zRange.min);this._line3d(ctx,from,to,this.axisColor);from=new Point3d(xRange.max,y,zRange.min);to=new Point3d(xRange.max-gridLenY,y,zRange.min);this._line3d(ctx,from,to,this.axisColor);}xText=armVector.y>0?xRange.min:xRange.max;point3d=new Point3d(xText,y,zRange.min);var msg='  '+this.yValueLabel(y)+'  ';this.drawAxisLabelY(ctx,point3d,msg,armAngle,textMargin);step.next();}// draw z-grid lines and axis
	ctx.lineWidth=1;prettyStep=this.defaultZStep===undefined;step=new StepNumber(zRange.min,zRange.max,this.zStep,prettyStep);step.start(true);xText=armVector.x>0?xRange.min:xRange.max;yText=armVector.y<0?yRange.min:yRange.max;while(!step.end()){var z=step.getCurrent();// TODO: make z-grid lines really 3d?
	var from3d=new Point3d(xText,yText,z);var from2d=this._convert3Dto2D(from3d);to=new Point2d(from2d.x-textMargin,from2d.y);this._line(ctx,from2d,to,this.axisColor);var msg=this.zValueLabel(z)+' ';this.drawAxisLabelZ(ctx,from3d,msg,5);step.next();}ctx.lineWidth=1;from=new Point3d(xText,yText,zRange.min);to=new Point3d(xText,yText,zRange.max);this._line3d(ctx,from,to,this.axisColor);// draw x-axis
	var xMin2d;var xMax2d;ctx.lineWidth=1;// line at yMin
	xMin2d=new Point3d(xRange.min,yRange.min,zRange.min);xMax2d=new Point3d(xRange.max,yRange.min,zRange.min);this._line3d(ctx,xMin2d,xMax2d,this.axisColor);// line at ymax
	xMin2d=new Point3d(xRange.min,yRange.max,zRange.min);xMax2d=new Point3d(xRange.max,yRange.max,zRange.min);this._line3d(ctx,xMin2d,xMax2d,this.axisColor);// draw y-axis
	ctx.lineWidth=1;// line at xMin
	from=new Point3d(xRange.min,yRange.min,zRange.min);to=new Point3d(xRange.min,yRange.max,zRange.min);this._line3d(ctx,from,to,this.axisColor);// line at xMax
	from=new Point3d(xRange.max,yRange.min,zRange.min);to=new Point3d(xRange.max,yRange.max,zRange.min);this._line3d(ctx,from,to,this.axisColor);// draw x-label
	var xLabel=this.xLabel;if(xLabel.length>0){yOffset=0.1/this.scale.y;xText=xRange.center()/2;yText=armVector.x>0?yRange.min-yOffset:yRange.max+yOffset;text=new Point3d(xText,yText,zRange.min);this.drawAxisLabelX(ctx,text,xLabel,armAngle);}// draw y-label
	var yLabel=this.yLabel;if(yLabel.length>0){xOffset=0.1/this.scale.x;xText=armVector.y>0?xRange.min-xOffset:xRange.max+xOffset;yText=yRange.center()/2;text=new Point3d(xText,yText,zRange.min);this.drawAxisLabelY(ctx,text,yLabel,armAngle);}// draw z-label
	var zLabel=this.zLabel;if(zLabel.length>0){offset=30;// pixels.  // TODO: relate to the max width of the values on the z axis?
	xText=armVector.x>0?xRange.min:xRange.max;yText=armVector.y<0?yRange.min:yRange.max;zText=zRange.center()/2;text=new Point3d(xText,yText,zText);this.drawAxisLabelZ(ctx,text,zLabel,offset);}};/**
	   * Calculate the color based on the given value.
	   * @param {Number} H   Hue, a value be between 0 and 360
	   * @param {Number} S   Saturation, a value between 0 and 1
	   * @param {Number} V   Value, a value between 0 and 1
	   */Graph3d.prototype._hsv2rgb=function(H,S,V){var R,G,B,C,Hi,X;C=V*S;Hi=Math.floor(H/60);// hi = 0,1,2,3,4,5
	X=C*(1-Math.abs(H/60%2-1));switch(Hi){case 0:R=C;G=X;B=0;break;case 1:R=X;G=C;B=0;break;case 2:R=0;G=C;B=X;break;case 3:R=0;G=X;B=C;break;case 4:R=X;G=0;B=C;break;case 5:R=C;G=0;B=X;break;default:R=0;G=0;B=0;break;}return'RGB('+parseInt(R*255)+','+parseInt(G*255)+','+parseInt(B*255)+')';};Graph3d.prototype._getStrokeWidth=function(point){if(point!==undefined){if(this.showPerspective){return 1/-point.trans.z*this.dataColor.strokeWidth;}else{return-(this.eye.z/this.camera.getArmLength())*this.dataColor.strokeWidth;}}return this.dataColor.strokeWidth;};// -----------------------------------------------------------------------------
	// Drawing primitives for the graphs
	// -----------------------------------------------------------------------------
	/**
	   * Draw a bar element in the view with the given properties.
	   */Graph3d.prototype._redrawBar=function(ctx,point,xWidth,yWidth,color,borderColor){var i,j,surface;// calculate all corner points
	var me=this;var point3d=point.point;var zMin=this.zRange.min;var top=[{point:new Point3d(point3d.x-xWidth,point3d.y-yWidth,point3d.z)},{point:new Point3d(point3d.x+xWidth,point3d.y-yWidth,point3d.z)},{point:new Point3d(point3d.x+xWidth,point3d.y+yWidth,point3d.z)},{point:new Point3d(point3d.x-xWidth,point3d.y+yWidth,point3d.z)}];var bottom=[{point:new Point3d(point3d.x-xWidth,point3d.y-yWidth,zMin)},{point:new Point3d(point3d.x+xWidth,point3d.y-yWidth,zMin)},{point:new Point3d(point3d.x+xWidth,point3d.y+yWidth,zMin)},{point:new Point3d(point3d.x-xWidth,point3d.y+yWidth,zMin)}];// calculate screen location of the points
	top.forEach(function(obj){obj.screen=me._convert3Dto2D(obj.point);});bottom.forEach(function(obj){obj.screen=me._convert3Dto2D(obj.point);});// create five sides, calculate both corner points and center points
	var surfaces=[{corners:top,center:Point3d.avg(bottom[0].point,bottom[2].point)},{corners:[top[0],top[1],bottom[1],bottom[0]],center:Point3d.avg(bottom[1].point,bottom[0].point)},{corners:[top[1],top[2],bottom[2],bottom[1]],center:Point3d.avg(bottom[2].point,bottom[1].point)},{corners:[top[2],top[3],bottom[3],bottom[2]],center:Point3d.avg(bottom[3].point,bottom[2].point)},{corners:[top[3],top[0],bottom[0],bottom[3]],center:Point3d.avg(bottom[0].point,bottom[3].point)}];point.surfaces=surfaces;// calculate the distance of each of the surface centers to the camera
	for(j=0;j<surfaces.length;j++){surface=surfaces[j];var transCenter=this._convertPointToTranslation(surface.center);surface.dist=this.showPerspective?transCenter.length():-transCenter.z;// TODO: this dept calculation doesn't work 100% of the cases due to perspective,
	//     but the current solution is fast/simple and works in 99.9% of all cases
	//     the issue is visible in example 14, with graph.setCameraPosition({horizontal: 2.97, vertical: 0.5, distance: 0.9})
	}// order the surfaces by their (translated) depth
	surfaces.sort(function(a,b){var diff=b.dist-a.dist;if(diff)return diff;// if equal depth, sort the top surface last
	if(a.corners===top)return 1;if(b.corners===top)return-1;// both are equal
	return 0;});// draw the ordered surfaces
	ctx.lineWidth=this._getStrokeWidth(point);ctx.strokeStyle=borderColor;ctx.fillStyle=color;// NOTE: we start at j=2 instead of j=0 as we don't need to draw the two surfaces at the backside
	for(j=2;j<surfaces.length;j++){surface=surfaces[j];this._polygon(ctx,surface.corners);}};/**
	   * Draw a polygon using the passed points and fill it with the passed style and stroke.
	   *
	   * @param points      an array of points. 
	   * @param fillStyle   optional; the fill style to set
	   * @param strokeStyle optional; the stroke style to set
	   */Graph3d.prototype._polygon=function(ctx,points,fillStyle,strokeStyle){if(points.length<2){return;}if(fillStyle!==undefined){ctx.fillStyle=fillStyle;}if(strokeStyle!==undefined){ctx.strokeStyle=strokeStyle;}ctx.beginPath();ctx.moveTo(points[0].screen.x,points[0].screen.y);for(var i=1;i<points.length;++i){var point=points[i];ctx.lineTo(point.screen.x,point.screen.y);}ctx.closePath();ctx.fill();ctx.stroke();// TODO: only draw stroke when strokeWidth > 0
	};/**
	   * @param size optional; if not specified use value from 'this._dotSize()`
	   */Graph3d.prototype._drawCircle=function(ctx,point,color,borderColor,size){var radius=this._calcRadius(point,size);ctx.lineWidth=this._getStrokeWidth(point);ctx.strokeStyle=borderColor;ctx.fillStyle=color;ctx.beginPath();ctx.arc(point.screen.x,point.screen.y,radius,0,Math.PI*2,true);ctx.fill();ctx.stroke();};/**
	   * Determine the colors for the 'regular' graph styles.
	   */Graph3d.prototype._getColorsRegular=function(point){// calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	var hue=(1-(point.point.z-this.zRange.min)*this.scale.z/this.verticalRatio)*240;var color=this._hsv2rgb(hue,1,1);var borderColor=this._hsv2rgb(hue,1,0.8);return{fill:color,border:borderColor};};/**
	   * Get the colors for the 'color' graph styles.
	   * These styles are currently: 'bar-color' and 'dot-color'
	   */Graph3d.prototype._getColorsColor=function(point){// calculate the color based on the value
	var hue=(1-(point.point.value-this.valueRange.min)*this.scale.value)*240;var color=this._hsv2rgb(hue,1,1);var borderColor=this._hsv2rgb(hue,1,0.8);return{fill:color,border:borderColor};};/**
	   * Get the colors for the 'size' graph styles.
	   * These styles are currently: 'bar-size' and 'dot-size'
	   */Graph3d.prototype._getColorsSize=function(){return{fill:this.dataColor.fill,border:this.dataColor.stroke};};/**
	   * Determine the size of a point on-screen, as determined by the
	   * distance to the camera.
	   *
	   * @param size the size that needs to be translated to screen coordinates.
	   *             optional; if not passed, use the default point size.
	   */Graph3d.prototype._calcRadius=function(point,size){if(size===undefined){size=this._dotSize();}var radius;if(this.showPerspective){radius=size/-point.trans.z;}else{radius=size*-(this.eye.z/this.camera.getArmLength());}if(radius<0){radius=0;}return radius;};// -----------------------------------------------------------------------------
	// Methods for drawing points per graph style.
	// -----------------------------------------------------------------------------
	/**
	   * Draw single datapoint for graph style 'bar'.
	   */Graph3d.prototype._redrawBarGraphPoint=function(ctx,point){var xWidth=this.xBarWidth/2;var yWidth=this.yBarWidth/2;var colors=this._getColorsRegular(point);this._redrawBar(ctx,point,xWidth,yWidth,colors.fill,colors.border);};/**
	   * Draw single datapoint for graph style 'bar-color'.
	   */Graph3d.prototype._redrawBarColorGraphPoint=function(ctx,point){var xWidth=this.xBarWidth/2;var yWidth=this.yBarWidth/2;var colors=this._getColorsColor(point);this._redrawBar(ctx,point,xWidth,yWidth,colors.fill,colors.border);};/**
	   * Draw single datapoint for graph style 'bar-size'.
	   */Graph3d.prototype._redrawBarSizeGraphPoint=function(ctx,point){// calculate size for the bar
	var fraction=(point.point.value-this.valueRange.min)/this.valueRange.range();var xWidth=this.xBarWidth/2*(fraction*0.8+0.2);var yWidth=this.yBarWidth/2*(fraction*0.8+0.2);var colors=this._getColorsSize();this._redrawBar(ctx,point,xWidth,yWidth,colors.fill,colors.border);};/**
	   * Draw single datapoint for graph style 'dot'.
	   */Graph3d.prototype._redrawDotGraphPoint=function(ctx,point){var colors=this._getColorsRegular(point);this._drawCircle(ctx,point,colors.fill,colors.border);};/**
	   * Draw single datapoint for graph style 'dot-line'.
	   */Graph3d.prototype._redrawDotLineGraphPoint=function(ctx,point){// draw a vertical line from the XY-plane to the graph value
	var from=this._convert3Dto2D(point.bottom);ctx.lineWidth=1;this._line(ctx,from,point.screen,this.gridColor);this._redrawDotGraphPoint(ctx,point);};/**
	   * Draw single datapoint for graph style 'dot-color'.
	   */Graph3d.prototype._redrawDotColorGraphPoint=function(ctx,point){var colors=this._getColorsColor(point);this._drawCircle(ctx,point,colors.fill,colors.border);};/**
	   * Draw single datapoint for graph style 'dot-size'.
	   */Graph3d.prototype._redrawDotSizeGraphPoint=function(ctx,point){var dotSize=this._dotSize();var fraction=(point.point.value-this.valueRange.min)/this.valueRange.range();var size=dotSize/2+2*dotSize*fraction;var colors=this._getColorsSize();this._drawCircle(ctx,point,colors.fill,colors.border,size);};/**
	   * Draw single datapoint for graph style 'surface'.
	   */Graph3d.prototype._redrawSurfaceGraphPoint=function(ctx,point){var right=point.pointRight;var top=point.pointTop;var cross=point.pointCross;if(point===undefined||right===undefined||top===undefined||cross===undefined){return;}var topSideVisible=true;var fillStyle;var strokeStyle;var lineWidth;if(this.showGrayBottom||this.showShadow){// calculate the cross product of the two vectors from center
	// to left and right, in order to know whether we are looking at the
	// bottom or at the top side. We can also use the cross product
	// for calculating light intensity
	var aDiff=Point3d.subtract(cross.trans,point.trans);var bDiff=Point3d.subtract(top.trans,right.trans);var crossproduct=Point3d.crossProduct(aDiff,bDiff);var len=crossproduct.length();// FIXME: there is a bug with determining the surface side (shadow or colored)
	topSideVisible=crossproduct.z>0;}if(topSideVisible){// calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	var zAvg=(point.point.z+right.point.z+top.point.z+cross.point.z)/4;var h=(1-(zAvg-this.zRange.min)*this.scale.z/this.verticalRatio)*240;var s=1;// saturation
	var v;if(this.showShadow){v=Math.min(1+crossproduct.x/len/2,1);// value. TODO: scale
	fillStyle=this._hsv2rgb(h,s,v);strokeStyle=fillStyle;}else{v=1;fillStyle=this._hsv2rgb(h,s,v);strokeStyle=this.axisColor;// TODO: should be customizable
	}}else{fillStyle='gray';strokeStyle=this.axisColor;}ctx.lineWidth=this._getStrokeWidth(point);// TODO: only draw stroke when strokeWidth > 0
	var points=[point,right,cross,top];this._polygon(ctx,points,fillStyle,strokeStyle);};/**
	   * Helper method for _redrawGridGraphPoint()
	   */Graph3d.prototype._drawGridLine=function(ctx,from,to){if(from===undefined||to===undefined){return;}// calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	var zAvg=(from.point.z+to.point.z)/2;var h=(1-(zAvg-this.zRange.min)*this.scale.z/this.verticalRatio)*240;ctx.lineWidth=this._getStrokeWidth(from)*2;ctx.strokeStyle=this._hsv2rgb(h,1,1);this._line(ctx,from.screen,to.screen);};/**
	   * Draw single datapoint for graph style 'Grid'.
	   */Graph3d.prototype._redrawGridGraphPoint=function(ctx,point){this._drawGridLine(ctx,point,point.pointRight);this._drawGridLine(ctx,point,point.pointTop);};/**
	   * Draw single datapoint for graph style 'line'.
	   */Graph3d.prototype._redrawLineGraphPoint=function(ctx,point){if(point.pointNext===undefined){return;}ctx.lineWidth=this._getStrokeWidth(point);ctx.strokeStyle=this.dataColor.stroke;this._line(ctx,point.screen,point.pointNext.screen);};/**
	   * Draw all datapoints for currently selected graph style.
	   *
	   */Graph3d.prototype._redrawDataGraph=function(){var ctx=this._getContext();var i;if(this.dataPoints===undefined||this.dataPoints.length<=0)return;// TODO: throw exception?
	this._calcTranslations(this.dataPoints);for(i=0;i<this.dataPoints.length;i++){var point=this.dataPoints[i];// Using call() ensures that the correct context is used
	this._pointDrawingMethod.call(this,ctx,point);}};// -----------------------------------------------------------------------------
	// End methods for drawing points per graph style.
	// -----------------------------------------------------------------------------
	/**
	   * Start a moving operation inside the provided parent element
	   * @param {Event}     event     The event that occurred (required for
	   *                  retrieving the  mouse position)
	   */Graph3d.prototype._onMouseDown=function(event){event=event||window.event;// check if mouse is still down (may be up when focus is lost for example
	// in an iframe)
	if(this.leftButtonDown){this._onMouseUp(event);}// only react on left mouse button down
	this.leftButtonDown=event.which?event.which===1:event.button===1;if(!this.leftButtonDown&&!this.touchDown)return;// get mouse position (different code for IE and all other browsers)
	this.startMouseX=getMouseX(event);this.startMouseY=getMouseY(event);this.startStart=new Date(this.start);this.startEnd=new Date(this.end);this.startArmRotation=this.camera.getArmRotation();this.frame.style.cursor='move';// add event listeners to handle moving the contents
	// we store the function onmousemove and onmouseup in the graph, so we can
	// remove the eventlisteners lateron in the function mouseUp()
	var me=this;this.onmousemove=function(event){me._onMouseMove(event);};this.onmouseup=function(event){me._onMouseUp(event);};util.addEventListener(document,'mousemove',me.onmousemove);util.addEventListener(document,'mouseup',me.onmouseup);util.preventDefault(event);};/**
	   * Perform moving operating.
	   * This function activated from within the funcion Graph.mouseDown().
	   * @param {Event}   event  Well, eehh, the event
	   */Graph3d.prototype._onMouseMove=function(event){event=event||window.event;// calculate change in mouse position
	var diffX=parseFloat(getMouseX(event))-this.startMouseX;var diffY=parseFloat(getMouseY(event))-this.startMouseY;var horizontalNew=this.startArmRotation.horizontal+diffX/200;var verticalNew=this.startArmRotation.vertical+diffY/200;var snapAngle=4;// degrees
	var snapValue=Math.sin(snapAngle/360*2*Math.PI);// snap horizontally to nice angles at 0pi, 0.5pi, 1pi, 1.5pi, etc...
	// the -0.001 is to take care that the vertical axis is always drawn at the left front corner
	if(Math.abs(Math.sin(horizontalNew))<snapValue){horizontalNew=Math.round(horizontalNew/Math.PI)*Math.PI-0.001;}if(Math.abs(Math.cos(horizontalNew))<snapValue){horizontalNew=(Math.round(horizontalNew/Math.PI-0.5)+0.5)*Math.PI-0.001;}// snap vertically to nice angles
	if(Math.abs(Math.sin(verticalNew))<snapValue){verticalNew=Math.round(verticalNew/Math.PI)*Math.PI;}if(Math.abs(Math.cos(verticalNew))<snapValue){verticalNew=(Math.round(verticalNew/Math.PI-0.5)+0.5)*Math.PI;}this.camera.setArmRotation(horizontalNew,verticalNew);this.redraw();// fire a cameraPositionChange event
	var parameters=this.getCameraPosition();this.emit('cameraPositionChange',parameters);util.preventDefault(event);};/**
	   * Stop moving operating.
	   * This function activated from within the funcion Graph.mouseDown().
	   * @param {event}  event   The event
	   */Graph3d.prototype._onMouseUp=function(event){this.frame.style.cursor='auto';this.leftButtonDown=false;// remove event listeners here
	util.removeEventListener(document,'mousemove',this.onmousemove);util.removeEventListener(document,'mouseup',this.onmouseup);util.preventDefault(event);};/**
	   * After having moved the mouse, a tooltip should pop up when the mouse is resting on a data point
	   * @param {Event}  event   A mouse move event
	   */Graph3d.prototype._onTooltip=function(event){var delay=300;// ms
	var boundingRect=this.frame.getBoundingClientRect();var mouseX=getMouseX(event)-boundingRect.left;var mouseY=getMouseY(event)-boundingRect.top;if(!this.showTooltip){return;}if(this.tooltipTimeout){clearTimeout(this.tooltipTimeout);}// (delayed) display of a tooltip only if no mouse button is down
	if(this.leftButtonDown){this._hideTooltip();return;}if(this.tooltip&&this.tooltip.dataPoint){// tooltip is currently visible
	var dataPoint=this._dataPointFromXY(mouseX,mouseY);if(dataPoint!==this.tooltip.dataPoint){// datapoint changed
	if(dataPoint){this._showTooltip(dataPoint);}else{this._hideTooltip();}}}else{// tooltip is currently not visible
	var me=this;this.tooltipTimeout=setTimeout(function(){me.tooltipTimeout=null;// show a tooltip if we have a data point
	var dataPoint=me._dataPointFromXY(mouseX,mouseY);if(dataPoint){me._showTooltip(dataPoint);}},delay);}};/**
	   * Event handler for touchstart event on mobile devices
	   */Graph3d.prototype._onTouchStart=function(event){this.touchDown=true;var me=this;this.ontouchmove=function(event){me._onTouchMove(event);};this.ontouchend=function(event){me._onTouchEnd(event);};util.addEventListener(document,'touchmove',me.ontouchmove);util.addEventListener(document,'touchend',me.ontouchend);this._onMouseDown(event);};/**
	   * Event handler for touchmove event on mobile devices
	   */Graph3d.prototype._onTouchMove=function(event){this._onMouseMove(event);};/**
	   * Event handler for touchend event on mobile devices
	   */Graph3d.prototype._onTouchEnd=function(event){this.touchDown=false;util.removeEventListener(document,'touchmove',this.ontouchmove);util.removeEventListener(document,'touchend',this.ontouchend);this._onMouseUp(event);};/**
	   * Event handler for mouse wheel event, used to zoom the graph
	   * Code from http://adomas.org/javascript-mouse-wheel/
	   * @param {event}  event   The event
	   */Graph3d.prototype._onWheel=function(event){if(!event)/* For IE. */event=window.event;// retrieve delta
	var delta=0;if(event.wheelDelta){/* IE/Opera. */delta=event.wheelDelta/120;}else if(event.detail){/* Mozilla case. */// In Mozilla, sign of delta is different than in IE.
	// Also, delta is multiple of 3.
	delta=-event.detail/3;}// If delta is nonzero, handle it.
	// Basically, delta is now positive if wheel was scrolled up,
	// and negative, if wheel was scrolled down.
	if(delta){var oldLength=this.camera.getArmLength();var newLength=oldLength*(1-delta/10);this.camera.setArmLength(newLength);this.redraw();this._hideTooltip();}// fire a cameraPositionChange event
	var parameters=this.getCameraPosition();this.emit('cameraPositionChange',parameters);// Prevent default actions caused by mouse wheel.
	// That might be ugly, but we handle scrolls somehow
	// anyway, so don't bother here..
	util.preventDefault(event);};/**
	   * Test whether a point lies inside given 2D triangle
	   *
	   * @param   {Point2d}   point
	   * @param   {Point2d[]} triangle
	   * @returns {boolean}   true if given point lies inside or on the edge of the
	   *                      triangle, false otherwise
	   * @private
	   */Graph3d.prototype._insideTriangle=function(point,triangle){var a=triangle[0],b=triangle[1],c=triangle[2];function sign(x){return x>0?1:x<0?-1:0;}var as=sign((b.x-a.x)*(point.y-a.y)-(b.y-a.y)*(point.x-a.x));var bs=sign((c.x-b.x)*(point.y-b.y)-(c.y-b.y)*(point.x-b.x));var cs=sign((a.x-c.x)*(point.y-c.y)-(a.y-c.y)*(point.x-c.x));// each of the three signs must be either equal to each other or zero
	return(as==0||bs==0||as==bs)&&(bs==0||cs==0||bs==cs)&&(as==0||cs==0||as==cs);};/**
	   * Find a data point close to given screen position (x, y)
	   *
	   * @param   {Number} x
	   * @param   {Number} y
	   * @returns {Object | null} The closest data point or null if not close to any
	   *                          data point
	   * @private
	   */Graph3d.prototype._dataPointFromXY=function(x,y){var i,distMax=100,// px
	dataPoint=null,closestDataPoint=null,closestDist=null,center=new Point2d(x,y);if(this.style===Graph3d.STYLE.BAR||this.style===Graph3d.STYLE.BARCOLOR||this.style===Graph3d.STYLE.BARSIZE){// the data points are ordered from far away to closest
	for(i=this.dataPoints.length-1;i>=0;i--){dataPoint=this.dataPoints[i];var surfaces=dataPoint.surfaces;if(surfaces){for(var s=surfaces.length-1;s>=0;s--){// split each surface in two triangles, and see if the center point is inside one of these
	var surface=surfaces[s];var corners=surface.corners;var triangle1=[corners[0].screen,corners[1].screen,corners[2].screen];var triangle2=[corners[2].screen,corners[3].screen,corners[0].screen];if(this._insideTriangle(center,triangle1)||this._insideTriangle(center,triangle2)){// return immediately at the first hit
	return dataPoint;}}}}}else{// find the closest data point, using distance to the center of the point on 2d screen
	for(i=0;i<this.dataPoints.length;i++){dataPoint=this.dataPoints[i];var point=dataPoint.screen;if(point){var distX=Math.abs(x-point.x);var distY=Math.abs(y-point.y);var dist=Math.sqrt(distX*distX+distY*distY);if((closestDist===null||dist<closestDist)&&dist<distMax){closestDist=dist;closestDataPoint=dataPoint;}}}}return closestDataPoint;};/**
	   * Display a tooltip for given data point
	   * @param {Object} dataPoint
	   * @private
	   */Graph3d.prototype._showTooltip=function(dataPoint){var content,line,dot;if(!this.tooltip){content=document.createElement('div');content.style.position='absolute';content.style.padding='10px';content.style.border='1px solid #4d4d4d';content.style.color='#1a1a1a';content.style.background='rgba(255,255,255,0.7)';content.style.borderRadius='2px';content.style.boxShadow='5px 5px 10px rgba(128,128,128,0.5)';line=document.createElement('div');line.style.position='absolute';line.style.height='40px';line.style.width='0';line.style.borderLeft='1px solid #4d4d4d';dot=document.createElement('div');dot.style.position='absolute';dot.style.height='0';dot.style.width='0';dot.style.border='5px solid #4d4d4d';dot.style.borderRadius='5px';this.tooltip={dataPoint:null,dom:{content:content,line:line,dot:dot}};}else{content=this.tooltip.dom.content;line=this.tooltip.dom.line;dot=this.tooltip.dom.dot;}this._hideTooltip();this.tooltip.dataPoint=dataPoint;if(typeof this.showTooltip==='function'){content.innerHTML=this.showTooltip(dataPoint.point);}else{content.innerHTML='<table>'+'<tr><td>'+this.xLabel+':</td><td>'+dataPoint.point.x+'</td></tr>'+'<tr><td>'+this.yLabel+':</td><td>'+dataPoint.point.y+'</td></tr>'+'<tr><td>'+this.zLabel+':</td><td>'+dataPoint.point.z+'</td></tr>'+'</table>';}content.style.left='0';content.style.top='0';this.frame.appendChild(content);this.frame.appendChild(line);this.frame.appendChild(dot);// calculate sizes
	var contentWidth=content.offsetWidth;var contentHeight=content.offsetHeight;var lineHeight=line.offsetHeight;var dotWidth=dot.offsetWidth;var dotHeight=dot.offsetHeight;var left=dataPoint.screen.x-contentWidth/2;left=Math.min(Math.max(left,10),this.frame.clientWidth-10-contentWidth);line.style.left=dataPoint.screen.x+'px';line.style.top=dataPoint.screen.y-lineHeight+'px';content.style.left=left+'px';content.style.top=dataPoint.screen.y-lineHeight-contentHeight+'px';dot.style.left=dataPoint.screen.x-dotWidth/2+'px';dot.style.top=dataPoint.screen.y-dotHeight/2+'px';};/**
	   * Hide the tooltip when displayed
	   * @private
	   */Graph3d.prototype._hideTooltip=function(){if(this.tooltip){this.tooltip.dataPoint=null;for(var prop in this.tooltip.dom){if(this.tooltip.dom.hasOwnProperty(prop)){var elem=this.tooltip.dom[prop];if(elem&&elem.parentNode){elem.parentNode.removeChild(elem);}}}}};/**--------------------------------------------------------------------------**//**
	   * Get the horizontal mouse position from a mouse event
	   *
	   * @param   {Event}  event
	   * @returns {Number} mouse x
	   */function getMouseX(event){if('clientX'in event)return event.clientX;return event.targetTouches[0]&&event.targetTouches[0].clientX||0;}/**
	   * Get the vertical mouse position from a mouse event
	   *
	   * @param   {Event}  event
	   * @returns {Number} mouse y
	   */function getMouseY(event){if('clientY'in event)return event.clientY;return event.targetTouches[0]&&event.targetTouches[0].clientY||0;}// -----------------------------------------------------------------------------
	//  Public methods for specific settings
	// -----------------------------------------------------------------------------
	/**
	   * Set the rotation and distance of the camera
	   *
	   * @param {Object}  pos            An object with the camera position
	   * @param {?Number} pos.horizontal The horizontal rotation, between 0 and 2*PI.
	   *                                 Optional, can be left undefined.
	   * @param {?Number} pos.vertical   The vertical rotation, between 0 and 0.5*PI.
	   *                                 if vertical=0.5*PI, the graph is shown from
	   *                                 the top. Optional, can be left undefined.
	   * @param {?Number} pos.distance   The (normalized) distance of the camera to the
	   *                                 center of the graph, a value between 0.71 and
	   *                                 5.0. Optional, can be left undefined.
	   */Graph3d.prototype.setCameraPosition=function(pos){Settings.setCameraPosition(pos,this);this.redraw();};// -----------------------------------------------------------------------------
	//  End public methods for specific settings
	// -----------------------------------------------------------------------------
	module.exports=Graph3d;/***/},/* 13 *//***/function(module,exports){/**
	   * Expose `Emitter`.
	   */module.exports=Emitter;/**
	   * Initialize a new `Emitter`.
	   *
	   * @api public
	   */function Emitter(obj){if(obj)return mixin(obj);};/**
	   * Mixin the emitter properties.
	   *
	   * @param {Object} obj
	   * @return {Object}
	   * @api private
	   */function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key];}return obj;}/**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[event]=this._callbacks[event]||[]).push(fn);return this;};/**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */Emitter.prototype.once=function(event,fn){var self=this;this._callbacks=this._callbacks||{};function on(){self.off(event,on);fn.apply(this,arguments);}on.fn=fn;this.on(event,on);return this;};/**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   * @return {Emitter}
	   * @api public
	   */Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};// all
	if(0==arguments.length){this._callbacks={};return this;}// specific event
	var callbacks=this._callbacks[event];if(!callbacks)return this;// remove all handlers
	if(1==arguments.length){delete this._callbacks[event];return this;}// remove specific handler
	var cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break;}}return this;};/**
	   * Emit `event` with the given args.
	   *
	   * @param {String} event
	   * @param {Mixed} ...
	   * @return {Emitter}
	   */Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args);}}return this;};/**
	   * Return array of callbacks for `event`.
	   *
	   * @param {String} event
	   * @return {Array}
	   * @api public
	   */Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[event]||[];};/**
	   * Check if this emitter has `event` handlers.
	   *
	   * @param {String} event
	   * @return {Boolean}
	   * @api public
	   */Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length;};/***/},/* 14 *//***/function(module,exports){"use strict";/**
	   * @prototype Point3d
	   * @param {Number} [x]
	   * @param {Number} [y]
	   * @param {Number} [z]
	   */function Point3d(x,y,z){this.x=x!==undefined?x:0;this.y=y!==undefined?y:0;this.z=z!==undefined?z:0;};/**
	   * Subtract the two provided points, returns a-b
	   * @param {Point3d} a
	   * @param {Point3d} b
	   * @return {Point3d} a-b
	   */Point3d.subtract=function(a,b){var sub=new Point3d();sub.x=a.x-b.x;sub.y=a.y-b.y;sub.z=a.z-b.z;return sub;};/**
	   * Add the two provided points, returns a+b
	   * @param {Point3d} a
	   * @param {Point3d} b
	   * @return {Point3d} a+b
	   */Point3d.add=function(a,b){var sum=new Point3d();sum.x=a.x+b.x;sum.y=a.y+b.y;sum.z=a.z+b.z;return sum;};/**
	   * Calculate the average of two 3d points
	   * @param {Point3d} a
	   * @param {Point3d} b
	   * @return {Point3d} The average, (a+b)/2
	   */Point3d.avg=function(a,b){return new Point3d((a.x+b.x)/2,(a.y+b.y)/2,(a.z+b.z)/2);};/**
	   * Calculate the cross product of the two provided points, returns axb
	   * Documentation: http://en.wikipedia.org/wiki/Cross_product
	   * @param {Point3d} a
	   * @param {Point3d} b
	   * @return {Point3d} cross product axb
	   */Point3d.crossProduct=function(a,b){var crossproduct=new Point3d();crossproduct.x=a.y*b.z-a.z*b.y;crossproduct.y=a.z*b.x-a.x*b.z;crossproduct.z=a.x*b.y-a.y*b.x;return crossproduct;};/**
	   * Rtrieve the length of the vector (or the distance from this point to the origin
	   * @return {Number}  length
	   */Point3d.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);};module.exports=Point3d;/***/},/* 15 *//***/function(module,exports){"use strict";/**
	   * @prototype Point2d
	   * @param {Number} [x]
	   * @param {Number} [y]
	   */function Point2d(x,y){this.x=x!==undefined?x:0;this.y=y!==undefined?y:0;}module.exports=Point2d;/***/},/* 16 *//***/function(module,exports,__webpack_require__){'use strict';var Point3d=__webpack_require__(14);/**
	   * @class Camera
	   * The camera is mounted on a (virtual) camera arm. The camera arm can rotate
	   * The camera is always looking in the direction of the origin of the arm.
	   * This way, the camera always rotates around one fixed point, the location
	   * of the camera arm.
	   *
	   * Documentation:
	   *   http://en.wikipedia.org/wiki/3D_projection
	   */function Camera(){this.armLocation=new Point3d();this.armRotation={};this.armRotation.horizontal=0;this.armRotation.vertical=0;this.armLength=1.7;this.cameraLocation=new Point3d();this.cameraRotation=new Point3d(0.5*Math.PI,0,0);this.calculateCameraOrientation();}/**
	   * Set the location (origin) of the arm
	   * @param {Number} x  Normalized value of x
	   * @param {Number} y  Normalized value of y
	   * @param {Number} z  Normalized value of z
	   */Camera.prototype.setArmLocation=function(x,y,z){this.armLocation.x=x;this.armLocation.y=y;this.armLocation.z=z;this.calculateCameraOrientation();};/**
	   * Set the rotation of the camera arm
	   * @param {Number} horizontal   The horizontal rotation, between 0 and 2*PI.
	   *                Optional, can be left undefined.
	   * @param {Number} vertical   The vertical rotation, between 0 and 0.5*PI
	   *                if vertical=0.5*PI, the graph is shown from the
	   *                top. Optional, can be left undefined.
	   */Camera.prototype.setArmRotation=function(horizontal,vertical){if(horizontal!==undefined){this.armRotation.horizontal=horizontal;}if(vertical!==undefined){this.armRotation.vertical=vertical;if(this.armRotation.vertical<0)this.armRotation.vertical=0;if(this.armRotation.vertical>0.5*Math.PI)this.armRotation.vertical=0.5*Math.PI;}if(horizontal!==undefined||vertical!==undefined){this.calculateCameraOrientation();}};/**
	   * Retrieve the current arm rotation
	   * @return {object}   An object with parameters horizontal and vertical
	   */Camera.prototype.getArmRotation=function(){var rot={};rot.horizontal=this.armRotation.horizontal;rot.vertical=this.armRotation.vertical;return rot;};/**
	   * Set the (normalized) length of the camera arm.
	   * @param {Number} length A length between 0.71 and 5.0
	   */Camera.prototype.setArmLength=function(length){if(length===undefined)return;this.armLength=length;// Radius must be larger than the corner of the graph,
	// which has a distance of sqrt(0.5^2+0.5^2) = 0.71 from the center of the
	// graph
	if(this.armLength<0.71)this.armLength=0.71;if(this.armLength>5.0)this.armLength=5.0;this.calculateCameraOrientation();};/**
	   * Retrieve the arm length
	   * @return {Number} length
	   */Camera.prototype.getArmLength=function(){return this.armLength;};/**
	   * Retrieve the camera location
	   * @return {Point3d} cameraLocation
	   */Camera.prototype.getCameraLocation=function(){return this.cameraLocation;};/**
	   * Retrieve the camera rotation
	   * @return {Point3d} cameraRotation
	   */Camera.prototype.getCameraRotation=function(){return this.cameraRotation;};/**
	   * Calculate the location and rotation of the camera based on the
	   * position and orientation of the camera arm
	   */Camera.prototype.calculateCameraOrientation=function(){// calculate location of the camera
	this.cameraLocation.x=this.armLocation.x-this.armLength*Math.sin(this.armRotation.horizontal)*Math.cos(this.armRotation.vertical);this.cameraLocation.y=this.armLocation.y-this.armLength*Math.cos(this.armRotation.horizontal)*Math.cos(this.armRotation.vertical);this.cameraLocation.z=this.armLocation.z+this.armLength*Math.sin(this.armRotation.vertical);// calculate rotation of the camera
	this.cameraRotation.x=Math.PI/2-this.armRotation.vertical;this.cameraRotation.y=0;this.cameraRotation.z=-this.armRotation.horizontal;};module.exports=Camera;/***/},/* 17 *//***/function(module,exports,__webpack_require__){'use strict';var DataView=__webpack_require__(11);/**
	   * @class Filter
	   *
	   * @param {DataSet} data The google data table
	   * @param {Number}  column             The index of the column to be filtered
	   * @param {Graph} graph           The graph
	   */function Filter(data,column,graph){this.data=data;this.column=column;this.graph=graph;// the parent graph
	this.index=undefined;this.value=undefined;// read all distinct values and select the first one
	this.values=graph.getDistinctValues(data.get(),this.column);// sort both numeric and string values correctly
	this.values.sort(function(a,b){return a>b?1:a<b?-1:0;});if(this.values.length>0){this.selectValue(0);}// create an array with the filtered datapoints. this will be loaded afterwards
	this.dataPoints=[];this.loaded=false;this.onLoadCallback=undefined;if(graph.animationPreload){this.loaded=false;this.loadInBackground();}else{this.loaded=true;}};/**
	   * Return the label
	   * @return {string} label
	   */Filter.prototype.isLoaded=function(){return this.loaded;};/**
	   * Return the loaded progress
	   * @return {Number} percentage between 0 and 100
	   */Filter.prototype.getLoadedProgress=function(){var len=this.values.length;var i=0;while(this.dataPoints[i]){i++;}return Math.round(i/len*100);};/**
	   * Return the label
	   * @return {string} label
	   */Filter.prototype.getLabel=function(){return this.graph.filterLabel;};/**
	   * Return the columnIndex of the filter
	   * @return {Number} columnIndex
	   */Filter.prototype.getColumn=function(){return this.column;};/**
	   * Return the currently selected value. Returns undefined if there is no selection
	   * @return {*} value
	   */Filter.prototype.getSelectedValue=function(){if(this.index===undefined)return undefined;return this.values[this.index];};/**
	   * Retrieve all values of the filter
	   * @return {Array} values
	   */Filter.prototype.getValues=function(){return this.values;};/**
	   * Retrieve one value of the filter
	   * @param {Number}  index
	   * @return {*} value
	   */Filter.prototype.getValue=function(index){if(index>=this.values.length)throw new Error('Index out of range');return this.values[index];};/**
	   * Retrieve the (filtered) dataPoints for the currently selected filter index
	   * @param {Number} [index] (optional)
	   * @return {Array} dataPoints
	   */Filter.prototype._getDataPoints=function(index){if(index===undefined)index=this.index;if(index===undefined)return[];var dataPoints;if(this.dataPoints[index]){dataPoints=this.dataPoints[index];}else{var f={};f.column=this.column;f.value=this.values[index];var dataView=new DataView(this.data,{filter:function filter(item){return item[f.column]==f.value;}}).get();dataPoints=this.graph._getDataPoints(dataView);this.dataPoints[index]=dataPoints;}return dataPoints;};/**
	   * Set a callback function when the filter is fully loaded.
	   */Filter.prototype.setOnLoadCallback=function(callback){this.onLoadCallback=callback;};/**
	   * Add a value to the list with available values for this filter
	   * No double entries will be created.
	   * @param {Number} index
	   */Filter.prototype.selectValue=function(index){if(index>=this.values.length)throw new Error('Index out of range');this.index=index;this.value=this.values[index];};/**
	   * Load all filtered rows in the background one by one
	   * Start this method without providing an index!
	   */Filter.prototype.loadInBackground=function(index){if(index===undefined)index=0;var frame=this.graph.frame;if(index<this.values.length){var dataPointsTemp=this._getDataPoints(index);//this.graph.redrawInfo(); // TODO: not neat
	// create a progress box
	if(frame.progress===undefined){frame.progress=document.createElement('DIV');frame.progress.style.position='absolute';frame.progress.style.color='gray';frame.appendChild(frame.progress);}var progress=this.getLoadedProgress();frame.progress.innerHTML='Loading animation... '+progress+'%';// TODO: this is no nice solution...
	frame.progress.style.bottom=60+'px';// TODO: use height of slider
	frame.progress.style.left=10+'px';var me=this;setTimeout(function(){me.loadInBackground(index+1);},10);this.loaded=false;}else{this.loaded=true;// remove the progress box
	if(frame.progress!==undefined){frame.removeChild(frame.progress);frame.progress=undefined;}if(this.onLoadCallback)this.onLoadCallback();}};module.exports=Filter;/***/},/* 18 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);/**
	   * @constructor Slider
	   *
	   * An html slider control with start/stop/prev/next buttons
	   * @param {Element} container  The element where the slider will be created
	   * @param {Object} options   Available options:
	   *                 {boolean} visible   If true (default) the
	   *                           slider is visible.
	   */function Slider(container,options){if(container===undefined){throw new Error('No container element defined');}this.container=container;this.visible=options&&options.visible!=undefined?options.visible:true;if(this.visible){this.frame=document.createElement('DIV');//this.frame.style.backgroundColor = '#E5E5E5';
	this.frame.style.width='100%';this.frame.style.position='relative';this.container.appendChild(this.frame);this.frame.prev=document.createElement('INPUT');this.frame.prev.type='BUTTON';this.frame.prev.value='Prev';this.frame.appendChild(this.frame.prev);this.frame.play=document.createElement('INPUT');this.frame.play.type='BUTTON';this.frame.play.value='Play';this.frame.appendChild(this.frame.play);this.frame.next=document.createElement('INPUT');this.frame.next.type='BUTTON';this.frame.next.value='Next';this.frame.appendChild(this.frame.next);this.frame.bar=document.createElement('INPUT');this.frame.bar.type='BUTTON';this.frame.bar.style.position='absolute';this.frame.bar.style.border='1px solid red';this.frame.bar.style.width='100px';this.frame.bar.style.height='6px';this.frame.bar.style.borderRadius='2px';this.frame.bar.style.MozBorderRadius='2px';this.frame.bar.style.border='1px solid #7F7F7F';this.frame.bar.style.backgroundColor='#E5E5E5';this.frame.appendChild(this.frame.bar);this.frame.slide=document.createElement('INPUT');this.frame.slide.type='BUTTON';this.frame.slide.style.margin='0px';this.frame.slide.value=' ';this.frame.slide.style.position='relative';this.frame.slide.style.left='-100px';this.frame.appendChild(this.frame.slide);// create events
	var me=this;this.frame.slide.onmousedown=function(event){me._onMouseDown(event);};this.frame.prev.onclick=function(event){me.prev(event);};this.frame.play.onclick=function(event){me.togglePlay(event);};this.frame.next.onclick=function(event){me.next(event);};}this.onChangeCallback=undefined;this.values=[];this.index=undefined;this.playTimeout=undefined;this.playInterval=1000;// milliseconds
	this.playLoop=true;}/**
	   * Select the previous index
	   */Slider.prototype.prev=function(){var index=this.getIndex();if(index>0){index--;this.setIndex(index);}};/**
	   * Select the next index
	   */Slider.prototype.next=function(){var index=this.getIndex();if(index<this.values.length-1){index++;this.setIndex(index);}};/**
	   * Select the next index
	   */Slider.prototype.playNext=function(){var start=new Date();var index=this.getIndex();if(index<this.values.length-1){index++;this.setIndex(index);}else if(this.playLoop){// jump to the start
	index=0;this.setIndex(index);}var end=new Date();var diff=end-start;// calculate how much time it to to set the index and to execute the callback
	// function.
	var interval=Math.max(this.playInterval-diff,0);// document.title = diff // TODO: cleanup
	var me=this;this.playTimeout=setTimeout(function(){me.playNext();},interval);};/**
	   * Toggle start or stop playing
	   */Slider.prototype.togglePlay=function(){if(this.playTimeout===undefined){this.play();}else{this.stop();}};/**
	   * Start playing
	   */Slider.prototype.play=function(){// Test whether already playing
	if(this.playTimeout)return;this.playNext();if(this.frame){this.frame.play.value='Stop';}};/**
	   * Stop playing
	   */Slider.prototype.stop=function(){clearInterval(this.playTimeout);this.playTimeout=undefined;if(this.frame){this.frame.play.value='Play';}};/**
	   * Set a callback function which will be triggered when the value of the
	   * slider bar has changed.
	   */Slider.prototype.setOnChangeCallback=function(callback){this.onChangeCallback=callback;};/**
	   * Set the interval for playing the list
	   * @param {Number} interval   The interval in milliseconds
	   */Slider.prototype.setPlayInterval=function(interval){this.playInterval=interval;};/**
	   * Retrieve the current play interval
	   * @return {Number} interval   The interval in milliseconds
	   */Slider.prototype.getPlayInterval=function(interval){return this.playInterval;};/**
	   * Set looping on or off
	   * @pararm {boolean} doLoop  If true, the slider will jump to the start when
	   *               the end is passed, and will jump to the end
	   *               when the start is passed.
	   */Slider.prototype.setPlayLoop=function(doLoop){this.playLoop=doLoop;};/**
	   * Execute the onchange callback function
	   */Slider.prototype.onChange=function(){if(this.onChangeCallback!==undefined){this.onChangeCallback();}};/**
	   * redraw the slider on the correct place
	   */Slider.prototype.redraw=function(){if(this.frame){// resize the bar
	this.frame.bar.style.top=this.frame.clientHeight/2-this.frame.bar.offsetHeight/2+'px';this.frame.bar.style.width=this.frame.clientWidth-this.frame.prev.clientWidth-this.frame.play.clientWidth-this.frame.next.clientWidth-30+'px';// position the slider button
	var left=this.indexToLeft(this.index);this.frame.slide.style.left=left+'px';}};/**
	   * Set the list with values for the slider
	   * @param {Array} values   A javascript array with values (any type)
	   */Slider.prototype.setValues=function(values){this.values=values;if(this.values.length>0)this.setIndex(0);else this.index=undefined;};/**
	   * Select a value by its index
	   * @param {Number} index
	   */Slider.prototype.setIndex=function(index){if(index<this.values.length){this.index=index;this.redraw();this.onChange();}else{throw new Error('Index out of range');}};/**
	   * retrieve the index of the currently selected vaue
	   * @return {Number} index
	   */Slider.prototype.getIndex=function(){return this.index;};/**
	   * retrieve the currently selected value
	   * @return {*} value
	   */Slider.prototype.get=function(){return this.values[this.index];};Slider.prototype._onMouseDown=function(event){// only react on left mouse button down
	var leftButtonDown=event.which?event.which===1:event.button===1;if(!leftButtonDown)return;this.startClientX=event.clientX;this.startSlideX=parseFloat(this.frame.slide.style.left);this.frame.style.cursor='move';// add event listeners to handle moving the contents
	// we store the function onmousemove and onmouseup in the graph, so we can
	// remove the eventlisteners lateron in the function mouseUp()
	var me=this;this.onmousemove=function(event){me._onMouseMove(event);};this.onmouseup=function(event){me._onMouseUp(event);};util.addEventListener(document,'mousemove',this.onmousemove);util.addEventListener(document,'mouseup',this.onmouseup);util.preventDefault(event);};Slider.prototype.leftToIndex=function(left){var width=parseFloat(this.frame.bar.style.width)-this.frame.slide.clientWidth-10;var x=left-3;var index=Math.round(x/width*(this.values.length-1));if(index<0)index=0;if(index>this.values.length-1)index=this.values.length-1;return index;};Slider.prototype.indexToLeft=function(index){var width=parseFloat(this.frame.bar.style.width)-this.frame.slide.clientWidth-10;var x=index/(this.values.length-1)*width;var left=x+3;return left;};Slider.prototype._onMouseMove=function(event){var diff=event.clientX-this.startClientX;var x=this.startSlideX+diff;var index=this.leftToIndex(x);this.setIndex(index);util.preventDefault();};Slider.prototype._onMouseUp=function(event){this.frame.style.cursor='auto';// remove event listeners
	util.removeEventListener(document,'mousemove',this.onmousemove);util.removeEventListener(document,'mouseup',this.onmouseup);util.preventDefault();};module.exports=Slider;/***/},/* 19 *//***/function(module,exports){'use strict';/**
	   * @prototype StepNumber
	   * The class StepNumber is an iterator for Numbers. You provide a start and end
	   * value, and a best step size. StepNumber itself rounds to fixed values and
	   * a finds the step that best fits the provided step.
	   *
	   * If prettyStep is true, the step size is chosen as close as possible to the
	   * provided step, but being a round value like 1, 2, 5, 10, 20, 50, ....
	   *
	   * Example usage:
	   *   var step = new StepNumber(0, 10, 2.5, true);
	   *   step.start();
	   *   while (!step.end()) {
	   *   alert(step.getCurrent());
	   *   step.next();
	   *   }
	   *
	   * Version: 1.0
	   *
	   * @param {Number} start     The start value
	   * @param {Number} end     The end value
	   * @param {Number} step    Optional. Step size. Must be a positive value.
	   * @param {boolean} prettyStep Optional. If true, the step size is rounded
	   *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	   */function StepNumber(start,end,step,prettyStep){// set default values
	this._start=0;this._end=0;this._step=1;this.prettyStep=true;this.precision=5;this._current=0;this.setRange(start,end,step,prettyStep);};/**
	   * Check for input values, to prevent disasters from happening
	   *
	   * Source: http://stackoverflow.com/a/1830844
	   */StepNumber.prototype.isNumeric=function(n){return!isNaN(parseFloat(n))&&isFinite(n);};/**
	   * Set a new range: start, end and step.
	   *
	   * @param {Number} start     The start value
	   * @param {Number} end     The end value
	   * @param {Number} step    Optional. Step size. Must be a positive value.
	   * @param {boolean} prettyStep Optional. If true, the step size is rounded
	   *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	   */StepNumber.prototype.setRange=function(start,end,step,prettyStep){if(!this.isNumeric(start)){throw new Error('Parameter \'start\' is not numeric; value: '+start);}if(!this.isNumeric(end)){throw new Error('Parameter \'end\' is not numeric; value: '+start);}if(!this.isNumeric(step)){throw new Error('Parameter \'step\' is not numeric; value: '+start);}this._start=start?start:0;this._end=end?end:0;this.setStep(step,prettyStep);};/**
	   * Set a new step size
	   * @param {Number} step    New step size. Must be a positive value
	   * @param {boolean} prettyStep Optional. If true, the provided step is rounded
	   *               to a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	   */StepNumber.prototype.setStep=function(step,prettyStep){if(step===undefined||step<=0)return;if(prettyStep!==undefined)this.prettyStep=prettyStep;if(this.prettyStep===true)this._step=StepNumber.calculatePrettyStep(step);else this._step=step;};/**
	   * Calculate a nice step size, closest to the desired step size.
	   * Returns a value in one of the ranges 1*10^n, 2*10^n, or 5*10^n, where n is an
	   * integer Number. For example 1, 2, 5, 10, 20, 50, etc...
	   * @param {Number}  step  Desired step size
	   * @return {Number}     Nice step size
	   */StepNumber.calculatePrettyStep=function(step){var log10=function log10(x){return Math.log(x)/Math.LN10;};// try three steps (multiple of 1, 2, or 5
	var step1=Math.pow(10,Math.round(log10(step))),step2=2*Math.pow(10,Math.round(log10(step/2))),step5=5*Math.pow(10,Math.round(log10(step/5)));// choose the best step (closest to minimum step)
	var prettyStep=step1;if(Math.abs(step2-step)<=Math.abs(prettyStep-step))prettyStep=step2;if(Math.abs(step5-step)<=Math.abs(prettyStep-step))prettyStep=step5;// for safety
	if(prettyStep<=0){prettyStep=1;}return prettyStep;};/**
	   * returns the current value of the step
	   * @return {Number} current value
	   */StepNumber.prototype.getCurrent=function(){return parseFloat(this._current.toPrecision(this.precision));};/**
	   * returns the current step size
	   * @return {Number} current step size
	   */StepNumber.prototype.getStep=function(){return this._step;};/**
	   * Set the current to its starting value.
	   *
	   * By default, this will be the largest value smaller than start, which
	   * is a multiple of the step size.
	   *
	   * Parameters checkFirst is optional, default false.
	   * If set to true, move the current value one step if smaller than start.
	   */StepNumber.prototype.start=function(checkFirst){if(checkFirst===undefined){checkFirst=false;}this._current=this._start-this._start%this._step;if(checkFirst){if(this.getCurrent()<this._start){this.next();}}};/**
	   * Do a step, add the step size to the current value
	   */StepNumber.prototype.next=function(){this._current+=this._step;};/**
	   * Returns true whether the end is reached
	   * @return {boolean}  True if the current value has passed the end value.
	   */StepNumber.prototype.end=function(){return this._current>this._end;};module.exports=StepNumber;/***/},/* 20 *//***/function(module,exports){'use strict';/**
	   * @prototype Range
	   *
	   * Helper class to make working with related min and max values easier.
	   *
	   * The range is inclusive; a given value is considered part of the range if:
	   *
	   *    this.min <= value <= this.max
	   */function Range(){this.min=undefined;this.max=undefined;}/**
	   * Adjust the range so that the passed value fits in it.
	   *
	   * If the value is outside of the current extremes, adjust
	   * the min or max so that the value is within the range.
	   *
	   * @param {number} value Numeric value to fit in range
	   */Range.prototype.adjust=function(value){if(value===undefined)return;if(this.min===undefined||this.min>value){this.min=value;}if(this.max===undefined||this.max<value){this.max=value;}};/**
	   * Adjust the current range so that the passed range fits in it.
	   *
	   * @param {Range} range Range instance to fit in current instance
	   */Range.prototype.combine=function(range){this.add(range.min);this.add(range.max);};/**
	   * Expand the range by the given value
	   *
	   * min will be lowered by given value;
	   * max will be raised by given value
	   *
	   * Shrinking by passing a negative value is allowed.
	   *
	   * @param {number} val Amount by which to expand or shrink current range with
	   */Range.prototype.expand=function(val){if(val===undefined){return;}var newMin=this.min-val;var newMax=this.max+val;// Note that following allows newMin === newMax.
	// This should be OK, since method expand() allows this also.
	if(newMin>newMax){throw new Error('Passed expansion value makes range invalid');}this.min=newMin;this.max=newMax;};/**
	   * Determine the full range width of current instance.
	   *
	   * @returns {num} The calculated width of this range
	   */Range.prototype.range=function(){return this.max-this.min;};/**
	   * Determine the central point of current instance.
	   *
	   * @returns {number} the value in the middle of min and max
	   */Range.prototype.center=function(){return(this.min+this.max)/2;};module.exports=Range;/***/},/* 21 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};////////////////////////////////////////////////////////////////////////////////
	// This modules handles the options for Graph3d.
	//
	////////////////////////////////////////////////////////////////////////////////
	var Camera=__webpack_require__(16);var Point3d=__webpack_require__(14);// enumerate the available styles
	var STYLE={BAR:0,BARCOLOR:1,BARSIZE:2,DOT:3,DOTLINE:4,DOTCOLOR:5,DOTSIZE:6,GRID:7,LINE:8,SURFACE:9};// The string representations of the styles
	var STYLENAME={'dot':STYLE.DOT,'dot-line':STYLE.DOTLINE,'dot-color':STYLE.DOTCOLOR,'dot-size':STYLE.DOTSIZE,'line':STYLE.LINE,'grid':STYLE.GRID,'surface':STYLE.SURFACE,'bar':STYLE.BAR,'bar-color':STYLE.BARCOLOR,'bar-size':STYLE.BARSIZE};/**
	   * Field names in the options hash which are of relevance to the user.
	   *
	   * Specifically, these are the fields which require no special handling,
	   * and can be directly copied over.
	   */var OPTIONKEYS=['width','height','filterLabel','legendLabel','xLabel','yLabel','zLabel','xValueLabel','yValueLabel','zValueLabel','showGrid','showPerspective','showShadow','keepAspectRatio','verticalRatio','dotSizeRatio','showAnimationControls','animationInterval','animationPreload','animationAutoStart','axisColor','gridColor','xCenter','yCenter'];/**
	   * Field names in the options hash which are of relevance to the user.
	   *
	   * Same as OPTIONKEYS, but internally these fields are stored with 
	   * prefix 'default' in the name.
	   */var PREFIXEDOPTIONKEYS=['xBarWidth','yBarWidth','valueMin','valueMax','xMin','xMax','xStep','yMin','yMax','yStep','zMin','zMax','zStep'];// Placeholder for DEFAULTS reference
	var DEFAULTS=undefined;/**
	   * Check if given hash is empty.
	   *
	   * Source: http://stackoverflow.com/a/679937
	   */function isEmpty(obj){for(var prop in obj){if(obj.hasOwnProperty(prop))return false;}return true;}/**
	   * Make first letter of parameter upper case.
	   *
	   * Source: http://stackoverflow.com/a/1026087
	   */function capitalize(str){if(str===undefined||str===""){return str;}return str.charAt(0).toUpperCase()+str.slice(1);}/**
	   * Add a prefix to a field name, taking style guide into account
	   */function prefixFieldName(prefix,fieldName){if(prefix===undefined||prefix===""){return fieldName;}return prefix+capitalize(fieldName);}/**
	   * Forcibly copy fields from src to dst in a controlled manner.
	   *
	   * A given field in dst will always be overwitten. If this field
	   * is undefined or not present in src, the field in dst will 
	   * be explicitly set to undefined.
	   * 
	   * The intention here is to be able to reset all option fields.
	   * 
	   * Only the fields mentioned in array 'fields' will be handled.
	   *
	   * @param fields array with names of fields to copy
	   * @param prefix optional; prefix to use for the target fields.
	   */function forceCopy(src,dst,fields,prefix){var srcKey;var dstKey;for(var i in fields){srcKey=fields[i];dstKey=prefixFieldName(prefix,srcKey);dst[dstKey]=src[srcKey];}}/**
	   * Copy fields from src to dst in a safe and controlled manner.
	   *
	   * Only the fields mentioned in array 'fields' will be copied over,
	   * and only if these are actually defined.
	   *
	   * @param fields array with names of fields to copy
	   * @param prefix optional; prefix to use for the target fields.
	   */function safeCopy(src,dst,fields,prefix){var srcKey;var dstKey;for(var i in fields){srcKey=fields[i];if(src[srcKey]===undefined)continue;dstKey=prefixFieldName(prefix,srcKey);dst[dstKey]=src[srcKey];}}/**
	   * Initialize dst with the values in src.
	   *
	   * src is the hash with the default values. 
	   * A reference DEFAULTS to this hash is stored locally for 
	   * further handling.
	   *
	   * For now, dst is assumed to be a Graph3d instance.
	   */function setDefaults(src,dst){if(src===undefined||isEmpty(src)){throw new Error('No DEFAULTS passed');}if(dst===undefined){throw new Error('No dst passed');}// Remember defaults for future reference
	DEFAULTS=src;// Handle the defaults which can be simply copied over
	forceCopy(src,dst,OPTIONKEYS);forceCopy(src,dst,PREFIXEDOPTIONKEYS,'default');// Handle the more complex ('special') fields
	setSpecialSettings(src,dst);// Following are internal fields, not part of the user settings
	dst.margin=10;// px
	dst.showGrayBottom=false;// TODO: this does not work correctly
	dst.showTooltip=false;dst.eye=new Point3d(0,0,-1);// TODO: set eye.z about 3/4 of the width of the window?
	}function setOptions(options,dst){if(options===undefined){return;}if(dst===undefined){throw new Error('No dst passed');}if(DEFAULTS===undefined||isEmpty(DEFAULTS)){throw new Error('DEFAULTS not set for module Settings');}// Handle the parameters which can be simply copied over
	safeCopy(options,dst,OPTIONKEYS);safeCopy(options,dst,PREFIXEDOPTIONKEYS,'default');// Handle the more complex ('special') fields
	setSpecialSettings(options,dst);}/**
	   * Special handling for certain parameters
	   *
	   * 'Special' here means: setting requires more than a simple copy
	   */function setSpecialSettings(src,dst){if(src.backgroundColor!==undefined){setBackgroundColor(src.backgroundColor,dst);}setDataColor(src.dataColor,dst);setStyle(src.style,dst);setShowLegend(src.showLegend,dst);setCameraPosition(src.cameraPosition,dst);// As special fields go, this is an easy one; just a translation of the name.
	// Can't use this.tooltip directly, because that field exists internally
	if(src.tooltip!==undefined){dst.showTooltip=src.tooltip;}}/**
	   * Set the value of setting 'showLegend'
	   *
	   * This depends on the value of the style fields, so it must be called
	   * after the style field has been initialized.
	   */function setShowLegend(showLegend,dst){if(showLegend===undefined){// If the default was auto, make a choice for this field
	var isAutoByDefault=DEFAULTS.showLegend===undefined;if(isAutoByDefault){// these styles default to having legends
	var isLegendGraphStyle=dst.style===STYLE.DOTCOLOR||dst.style===STYLE.DOTSIZE;dst.showLegend=isLegendGraphStyle;}else{// Leave current value as is
	}}else{dst.showLegend=showLegend;}}/**
	   * Retrieve the style index from given styleName
	   * @param {string} styleName  Style name such as 'dot', 'grid', 'dot-line'
	   * @return {Number} styleNumber Enumeration value representing the style, or -1
	   *                when not found
	   */function getStyleNumberByName(styleName){var number=STYLENAME[styleName];if(number===undefined){return-1;}return number;}/**
	   * Check if given number is a valid style number.
	   *
	   * @return true if valid, false otherwise
	   */function checkStyleNumber(style){var valid=false;for(var n in STYLE){if(STYLE[n]===style){valid=true;break;}}return valid;}function setStyle(style,dst){if(style===undefined){return;// Nothing to do
	}var styleNumber;if(typeof style==='string'){styleNumber=getStyleNumberByName(style);if(styleNumber===-1){throw new Error('Style \''+style+'\' is invalid');}}else{// Do a pedantic check on style number value
	if(!checkStyleNumber(style)){throw new Error('Style \''+style+'\' is invalid');}styleNumber=style;}dst.style=styleNumber;}/**
	   * Set the background styling for the graph
	   * @param {string | {fill: string, stroke: string, strokeWidth: string}} backgroundColor
	   */function setBackgroundColor(backgroundColor,dst){var fill='white';var stroke='gray';var strokeWidth=1;if(typeof backgroundColor==='string'){fill=backgroundColor;stroke='none';strokeWidth=0;}else if((typeof backgroundColor==='undefined'?'undefined':_typeof(backgroundColor))==='object'){if(backgroundColor.fill!==undefined)fill=backgroundColor.fill;if(backgroundColor.stroke!==undefined)stroke=backgroundColor.stroke;if(backgroundColor.strokeWidth!==undefined)strokeWidth=backgroundColor.strokeWidth;}else{throw new Error('Unsupported type of backgroundColor');}dst.frame.style.backgroundColor=fill;dst.frame.style.borderColor=stroke;dst.frame.style.borderWidth=strokeWidth+'px';dst.frame.style.borderStyle='solid';}function setDataColor(dataColor,dst){if(dataColor===undefined){return;// Nothing to do
	}if(dst.dataColor===undefined){dst.dataColor={};}if(typeof dataColor==='string'){dst.dataColor.fill=dataColor;dst.dataColor.stroke=dataColor;}else{if(dataColor.fill){dst.dataColor.fill=dataColor.fill;}if(dataColor.stroke){dst.dataColor.stroke=dataColor.stroke;}if(dataColor.strokeWidth!==undefined){dst.dataColor.strokeWidth=dataColor.strokeWidth;}}}function setCameraPosition(cameraPosition,dst){var camPos=cameraPosition;if(camPos===undefined){return;}if(dst.camera===undefined){dst.camera=new Camera();}dst.camera.setArmRotation(camPos.horizontal,camPos.vertical);dst.camera.setArmLength(camPos.distance);}module.exports.STYLE=STYLE;module.exports.setDefaults=setDefaults;module.exports.setOptions=setOptions;module.exports.setCameraPosition=setCameraPosition;/***/},/* 22 *//***/function(module,exports,__webpack_require__){'use strict';// Only load hammer.js when in a browser environment
	// (loading hammer.js in a node.js environment gives errors)
	if(typeof window!=='undefined'){var propagating=__webpack_require__(23);var Hammer=window['Hammer']||__webpack_require__(24);module.exports=propagating(Hammer,{preventDefault:'mouse'});}else{module.exports=function(){throw Error('hammer.js is only available in a browser, not in node.js.');};}/***/},/* 23 *//***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;'use strict';(function(factory){if(true){// AMD. Register as an anonymous module.
	!(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_FACTORY__=factory,__WEBPACK_AMD_DEFINE_RESULT__=typeof __WEBPACK_AMD_DEFINE_FACTORY__==='function'?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else if((typeof exports==='undefined'?'undefined':_typeof2(exports))==='object'){// Node. Does not work with strict CommonJS, but
	// only CommonJS-like environments that support module.exports,
	// like Node.
	module.exports=factory();}else{// Browser globals (root is window)
	window.propagating=factory();}})(function(){var _firstTarget=null;// singleton, will contain the target element where the touch event started
	/**
	     * Extend an Hammer.js instance with event propagation.
	     *
	     * Features:
	     * - Events emitted by hammer will propagate in order from child to parent
	     *   elements.
	     * - Events are extended with a function `event.stopPropagation()` to stop
	     *   propagation to parent elements.
	     * - An option `preventDefault` to stop all default browser behavior.
	     *
	     * Usage:
	     *   var hammer = propagatingHammer(new Hammer(element));
	     *   var hammer = propagatingHammer(new Hammer(element), {preventDefault: true});
	     *
	     * @param {Hammer.Manager} hammer   An hammer instance.
	     * @param {Object} [options]        Available options:
	     *                                  - `preventDefault: true | false | 'mouse' | 'touch' | 'pen'`.
	     *                                    Enforce preventing the default browser behavior.
	     *                                    Cannot be set to `false`.
	     * @return {Hammer.Manager} Returns the same hammer instance with extended
	     *                          functionality
	     */return function propagating(hammer,options){var _options=options||{preventDefault:false};if(hammer.Manager){// This looks like the Hammer constructor.
	// Overload the constructors with our own.
	var Hammer=hammer;var PropagatingHammer=function PropagatingHammer(element,options){var o=Object.create(_options);if(options)Hammer.assign(o,options);return propagating(new Hammer(element,o),o);};Hammer.assign(PropagatingHammer,Hammer);PropagatingHammer.Manager=function(element,options){var o=Object.create(_options);if(options)Hammer.assign(o,options);return propagating(new Hammer.Manager(element,o),o);};return PropagatingHammer;}// create a wrapper object which will override the functions
	// `on`, `off`, `destroy`, and `emit` of the hammer instance
	var wrapper=Object.create(hammer);// attach to DOM element
	var element=hammer.element;if(!element.hammer)element.hammer=[];element.hammer.push(wrapper);// register an event to catch the start of a gesture and store the
	// target in a singleton
	hammer.on('hammer.input',function(event){if(_options.preventDefault===true||_options.preventDefault===event.pointerType){event.preventDefault();}if(event.isFirst){_firstTarget=event.target;}});/** @type {Object.<String, Array.<function>>} */wrapper._handlers={};/**
	       * Register a handler for one or multiple events
	       * @param {String} events    A space separated string with events
	       * @param {function} handler A callback function, called as handler(event)
	       * @returns {Hammer.Manager} Returns the hammer instance
	       */wrapper.on=function(events,handler){// register the handler
	split(events).forEach(function(event){var _handlers=wrapper._handlers[event];if(!_handlers){wrapper._handlers[event]=_handlers=[];// register the static, propagated handler
	hammer.on(event,propagatedHandler);}_handlers.push(handler);});return wrapper;};/**
	       * Unregister a handler for one or multiple events
	       * @param {String} events      A space separated string with events
	       * @param {function} [handler] Optional. The registered handler. If not
	       *                             provided, all handlers for given events
	       *                             are removed.
	       * @returns {Hammer.Manager}   Returns the hammer instance
	       */wrapper.off=function(events,handler){// unregister the handler
	split(events).forEach(function(event){var _handlers=wrapper._handlers[event];if(_handlers){_handlers=handler?_handlers.filter(function(h){return h!==handler;}):[];if(_handlers.length>0){wrapper._handlers[event]=_handlers;}else{// remove static, propagated handler
	hammer.off(event,propagatedHandler);delete wrapper._handlers[event];}}});return wrapper;};/**
	       * Emit to the event listeners
	       * @param {string} eventType
	       * @param {Event} event
	       */wrapper.emit=function(eventType,event){_firstTarget=event.target;hammer.emit(eventType,event);};wrapper.destroy=function(){// Detach from DOM element
	var hammers=hammer.element.hammer;var idx=hammers.indexOf(wrapper);if(idx!==-1)hammers.splice(idx,1);if(!hammers.length)delete hammer.element.hammer;// clear all handlers
	wrapper._handlers={};// call original hammer destroy
	hammer.destroy();};// split a string with space separated words
	function split(events){return events.match(/[^ ]+/g);}/**
	       * A static event handler, applying event propagation.
	       * @param {Object} event
	       */function propagatedHandler(event){// let only a single hammer instance handle this event
	if(event.type!=='hammer.input'){// it is possible that the same srcEvent is used with multiple hammer events,
	// we keep track on which events are handled in an object _handled
	if(!event.srcEvent._handled){event.srcEvent._handled={};}if(event.srcEvent._handled[event.type]){return;}else{event.srcEvent._handled[event.type]=true;}}// attach a stopPropagation function to the event
	var stopped=false;event.stopPropagation=function(){stopped=true;};//wrap the srcEvent's stopPropagation to also stop hammer propagation:
	var srcStop=event.srcEvent.stopPropagation.bind(event.srcEvent);if(typeof srcStop=="function"){event.srcEvent.stopPropagation=function(){srcStop();event.stopPropagation();};}// attach firstTarget property to the event
	event.firstTarget=_firstTarget;// propagate over all elements (until stopped)
	var elem=_firstTarget;while(elem&&!stopped){var elemHammer=elem.hammer;if(elemHammer){var _handlers;for(var k=0;k<elemHammer.length;k++){_handlers=elemHammer[k]._handlers[event.type];if(_handlers)for(var i=0;i<_handlers.length&&!stopped;i++){_handlers[i](event);}}}elem=elem.parentNode;}}return wrapper;};});/***/},/* 24 *//***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22
	   * http://hammerjs.github.io/
	   *
	   * Copyright (c) 2016 Jorik Tangelder;
	   * Licensed under the MIT license */(function(window,document,exportName,undefined){'use strict';var VENDOR_PREFIXES=['','webkit','Moz','MS','ms','o'];var TEST_ELEMENT=document.createElement('div');var TYPE_FUNCTION='function';var round=Math.round;var abs=Math.abs;var now=Date.now;/**
	   * set a timeout with a given scope
	   * @param {Function} fn
	   * @param {Number} timeout
	   * @param {Object} context
	   * @returns {number}
	   */function setTimeoutContext(fn,timeout,context){return setTimeout(bindFn(fn,context),timeout);}/**
	   * if the argument is an array, we want to execute the fn on each entry
	   * if it aint an array we don't want to do a thing.
	   * this is used by all the methods that accept a single and array argument.
	   * @param {*|Array} arg
	   * @param {String} fn
	   * @param {Object} [context]
	   * @returns {Boolean}
	   */function invokeArrayArg(arg,fn,context){if(Array.isArray(arg)){each(arg,context[fn],context);return true;}return false;}/**
	   * walk objects and arrays
	   * @param {Object} obj
	   * @param {Function} iterator
	   * @param {Object} context
	   */function each(obj,iterator,context){var i;if(!obj){return;}if(obj.forEach){obj.forEach(iterator,context);}else if(obj.length!==undefined){i=0;while(i<obj.length){iterator.call(context,obj[i],i,obj);i++;}}else{for(i in obj){obj.hasOwnProperty(i)&&iterator.call(context,obj[i],i,obj);}}}/**
	   * wrap a method with a deprecation warning and stack trace
	   * @param {Function} method
	   * @param {String} name
	   * @param {String} message
	   * @returns {Function} A new function wrapping the supplied method.
	   */function deprecate(method,name,message){var deprecationMessage='DEPRECATED METHOD: '+name+'\n'+message+' AT \n';return function(){var e=new Error('get-stack-trace');var stack=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,'').replace(/^\s+at\s+/gm,'').replace(/^Object.<anonymous>\s*\(/gm,'{anonymous}()@'):'Unknown Stack Trace';var log=window.console&&(window.console.warn||window.console.log);if(log){log.call(window.console,deprecationMessage,stack);}return method.apply(this,arguments);};}/**
	   * extend object.
	   * means that properties in dest will be overwritten by the ones in src.
	   * @param {Object} target
	   * @param {...Object} objects_to_assign
	   * @returns {Object} target
	   */var assign;if(typeof Object.assign!=='function'){assign=function assign(target){if(target===undefined||target===null){throw new TypeError('Cannot convert undefined or null to object');}var output=Object(target);for(var index=1;index<arguments.length;index++){var source=arguments[index];if(source!==undefined&&source!==null){for(var nextKey in source){if(source.hasOwnProperty(nextKey)){output[nextKey]=source[nextKey];}}}}return output;};}else{assign=Object.assign;}/**
	   * extend object.
	   * means that properties in dest will be overwritten by the ones in src.
	   * @param {Object} dest
	   * @param {Object} src
	   * @param {Boolean} [merge=false]
	   * @returns {Object} dest
	   */var extend=deprecate(function extend(dest,src,merge){var keys=Object.keys(src);var i=0;while(i<keys.length){if(!merge||merge&&dest[keys[i]]===undefined){dest[keys[i]]=src[keys[i]];}i++;}return dest;},'extend','Use `assign`.');/**
	   * merge the values from src in the dest.
	   * means that properties that exist in dest will not be overwritten by src
	   * @param {Object} dest
	   * @param {Object} src
	   * @returns {Object} dest
	   */var merge=deprecate(function merge(dest,src){return extend(dest,src,true);},'merge','Use `assign`.');/**
	   * simple class inheritance
	   * @param {Function} child
	   * @param {Function} base
	   * @param {Object} [properties]
	   */function inherit(child,base,properties){var baseP=base.prototype,childP;childP=child.prototype=Object.create(baseP);childP.constructor=child;childP._super=baseP;if(properties){assign(childP,properties);}}/**
	   * simple function bind
	   * @param {Function} fn
	   * @param {Object} context
	   * @returns {Function}
	   */function bindFn(fn,context){return function boundFn(){return fn.apply(context,arguments);};}/**
	   * let a boolean value also be a function that must return a boolean
	   * this first item in args will be used as the context
	   * @param {Boolean|Function} val
	   * @param {Array} [args]
	   * @returns {Boolean}
	   */function boolOrFn(val,args){if((typeof val==='undefined'?'undefined':_typeof2(val))==TYPE_FUNCTION){return val.apply(args?args[0]||undefined:undefined,args);}return val;}/**
	   * use the val2 when val1 is undefined
	   * @param {*} val1
	   * @param {*} val2
	   * @returns {*}
	   */function ifUndefined(val1,val2){return val1===undefined?val2:val1;}/**
	   * addEventListener with multiple events at once
	   * @param {EventTarget} target
	   * @param {String} types
	   * @param {Function} handler
	   */function addEventListeners(target,types,handler){each(splitStr(types),function(type){target.addEventListener(type,handler,false);});}/**
	   * removeEventListener with multiple events at once
	   * @param {EventTarget} target
	   * @param {String} types
	   * @param {Function} handler
	   */function removeEventListeners(target,types,handler){each(splitStr(types),function(type){target.removeEventListener(type,handler,false);});}/**
	   * find if a node is in the given parent
	   * @method hasParent
	   * @param {HTMLElement} node
	   * @param {HTMLElement} parent
	   * @return {Boolean} found
	   */function hasParent(node,parent){while(node){if(node==parent){return true;}node=node.parentNode;}return false;}/**
	   * small indexOf wrapper
	   * @param {String} str
	   * @param {String} find
	   * @returns {Boolean} found
	   */function inStr(str,find){return str.indexOf(find)>-1;}/**
	   * split string on whitespace
	   * @param {String} str
	   * @returns {Array} words
	   */function splitStr(str){return str.trim().split(/\s+/g);}/**
	   * find if a array contains the object using indexOf or a simple polyFill
	   * @param {Array} src
	   * @param {String} find
	   * @param {String} [findByKey]
	   * @return {Boolean|Number} false when not found, or the index
	   */function inArray(src,find,findByKey){if(src.indexOf&&!findByKey){return src.indexOf(find);}else{var i=0;while(i<src.length){if(findByKey&&src[i][findByKey]==find||!findByKey&&src[i]===find){return i;}i++;}return-1;}}/**
	   * convert array-like objects to real arrays
	   * @param {Object} obj
	   * @returns {Array}
	   */function toArray(obj){return Array.prototype.slice.call(obj,0);}/**
	   * unique array with objects based on a key (like 'id') or just by the array's value
	   * @param {Array} src [{id:1},{id:2},{id:1}]
	   * @param {String} [key]
	   * @param {Boolean} [sort=False]
	   * @returns {Array} [{id:1},{id:2}]
	   */function uniqueArray(src,key,sort){var results=[];var values=[];var i=0;while(i<src.length){var val=key?src[i][key]:src[i];if(inArray(values,val)<0){results.push(src[i]);}values[i]=val;i++;}if(sort){if(!key){results=results.sort();}else{results=results.sort(function sortUniqueArray(a,b){return a[key]>b[key];});}}return results;}/**
	   * get the prefixed property
	   * @param {Object} obj
	   * @param {String} property
	   * @returns {String|Undefined} prefixed
	   */function prefixed(obj,property){var prefix,prop;var camelProp=property[0].toUpperCase()+property.slice(1);var i=0;while(i<VENDOR_PREFIXES.length){prefix=VENDOR_PREFIXES[i];prop=prefix?prefix+camelProp:property;if(prop in obj){return prop;}i++;}return undefined;}/**
	   * get a unique id
	   * @returns {number} uniqueId
	   */var _uniqueId=1;function uniqueId(){return _uniqueId++;}/**
	   * get the window object of an element
	   * @param {HTMLElement} element
	   * @returns {DocumentView|Window}
	   */function getWindowForElement(element){var doc=element.ownerDocument||element;return doc.defaultView||doc.parentWindow||window;}var MOBILE_REGEX=/mobile|tablet|ip(ad|hone|od)|android/i;var SUPPORT_TOUCH='ontouchstart'in window;var SUPPORT_POINTER_EVENTS=prefixed(window,'PointerEvent')!==undefined;var SUPPORT_ONLY_TOUCH=SUPPORT_TOUCH&&MOBILE_REGEX.test(navigator.userAgent);var INPUT_TYPE_TOUCH='touch';var INPUT_TYPE_PEN='pen';var INPUT_TYPE_MOUSE='mouse';var INPUT_TYPE_KINECT='kinect';var COMPUTE_INTERVAL=25;var INPUT_START=1;var INPUT_MOVE=2;var INPUT_END=4;var INPUT_CANCEL=8;var DIRECTION_NONE=1;var DIRECTION_LEFT=2;var DIRECTION_RIGHT=4;var DIRECTION_UP=8;var DIRECTION_DOWN=16;var DIRECTION_HORIZONTAL=DIRECTION_LEFT|DIRECTION_RIGHT;var DIRECTION_VERTICAL=DIRECTION_UP|DIRECTION_DOWN;var DIRECTION_ALL=DIRECTION_HORIZONTAL|DIRECTION_VERTICAL;var PROPS_XY=['x','y'];var PROPS_CLIENT_XY=['clientX','clientY'];/**
	   * create new input type manager
	   * @param {Manager} manager
	   * @param {Function} callback
	   * @returns {Input}
	   * @constructor
	   */function Input(manager,callback){var self=this;this.manager=manager;this.callback=callback;this.element=manager.element;this.target=manager.options.inputTarget;// smaller wrapper around the handler, for the scope and the enabled state of the manager,
	// so when disabled the input events are completely bypassed.
	this.domHandler=function(ev){if(boolOrFn(manager.options.enable,[manager])){self.handler(ev);}};this.init();}Input.prototype={/**
	       * should handle the inputEvent data and trigger the callback
	       * @virtual
	       */handler:function handler(){},/**
	       * bind the events
	       */init:function init(){this.evEl&&addEventListeners(this.element,this.evEl,this.domHandler);this.evTarget&&addEventListeners(this.target,this.evTarget,this.domHandler);this.evWin&&addEventListeners(getWindowForElement(this.element),this.evWin,this.domHandler);},/**
	       * unbind the events
	       */destroy:function destroy(){this.evEl&&removeEventListeners(this.element,this.evEl,this.domHandler);this.evTarget&&removeEventListeners(this.target,this.evTarget,this.domHandler);this.evWin&&removeEventListeners(getWindowForElement(this.element),this.evWin,this.domHandler);}};/**
	   * create new input type manager
	   * called by the Manager constructor
	   * @param {Hammer} manager
	   * @returns {Input}
	   */function createInputInstance(manager){var Type;var inputClass=manager.options.inputClass;if(inputClass){Type=inputClass;}else if(SUPPORT_POINTER_EVENTS){Type=PointerEventInput;}else if(SUPPORT_ONLY_TOUCH){Type=TouchInput;}else if(!SUPPORT_TOUCH){Type=MouseInput;}else{Type=TouchMouseInput;}return new Type(manager,inputHandler);}/**
	   * handle input events
	   * @param {Manager} manager
	   * @param {String} eventType
	   * @param {Object} input
	   */function inputHandler(manager,eventType,input){var pointersLen=input.pointers.length;var changedPointersLen=input.changedPointers.length;var isFirst=eventType&INPUT_START&&pointersLen-changedPointersLen===0;var isFinal=eventType&(INPUT_END|INPUT_CANCEL)&&pointersLen-changedPointersLen===0;input.isFirst=!!isFirst;input.isFinal=!!isFinal;if(isFirst){manager.session={};}// source event is the normalized value of the domEvents
	// like 'touchstart, mouseup, pointerdown'
	input.eventType=eventType;// compute scale, rotation etc
	computeInputData(manager,input);// emit secret event
	manager.emit('hammer.input',input);manager.recognize(input);manager.session.prevInput=input;}/**
	   * extend the data with some usable properties like scale, rotate, velocity etc
	   * @param {Object} manager
	   * @param {Object} input
	   */function computeInputData(manager,input){var session=manager.session;var pointers=input.pointers;var pointersLength=pointers.length;// store the first input to calculate the distance and direction
	if(!session.firstInput){session.firstInput=simpleCloneInputData(input);}// to compute scale and rotation we need to store the multiple touches
	if(pointersLength>1&&!session.firstMultiple){session.firstMultiple=simpleCloneInputData(input);}else if(pointersLength===1){session.firstMultiple=false;}var firstInput=session.firstInput;var firstMultiple=session.firstMultiple;var offsetCenter=firstMultiple?firstMultiple.center:firstInput.center;var center=input.center=getCenter(pointers);input.timeStamp=now();input.deltaTime=input.timeStamp-firstInput.timeStamp;input.angle=getAngle(offsetCenter,center);input.distance=getDistance(offsetCenter,center);computeDeltaXY(session,input);input.offsetDirection=getDirection(input.deltaX,input.deltaY);var overallVelocity=getVelocity(input.deltaTime,input.deltaX,input.deltaY);input.overallVelocityX=overallVelocity.x;input.overallVelocityY=overallVelocity.y;input.overallVelocity=abs(overallVelocity.x)>abs(overallVelocity.y)?overallVelocity.x:overallVelocity.y;input.scale=firstMultiple?getScale(firstMultiple.pointers,pointers):1;input.rotation=firstMultiple?getRotation(firstMultiple.pointers,pointers):0;input.maxPointers=!session.prevInput?input.pointers.length:input.pointers.length>session.prevInput.maxPointers?input.pointers.length:session.prevInput.maxPointers;computeIntervalInputData(session,input);// find the correct target
	var target=manager.element;if(hasParent(input.srcEvent.target,target)){target=input.srcEvent.target;}input.target=target;}function computeDeltaXY(session,input){var center=input.center;var offset=session.offsetDelta||{};var prevDelta=session.prevDelta||{};var prevInput=session.prevInput||{};if(input.eventType===INPUT_START||prevInput.eventType===INPUT_END){prevDelta=session.prevDelta={x:prevInput.deltaX||0,y:prevInput.deltaY||0};offset=session.offsetDelta={x:center.x,y:center.y};}input.deltaX=prevDelta.x+(center.x-offset.x);input.deltaY=prevDelta.y+(center.y-offset.y);}/**
	   * velocity is calculated every x ms
	   * @param {Object} session
	   * @param {Object} input
	   */function computeIntervalInputData(session,input){var last=session.lastInterval||input,deltaTime=input.timeStamp-last.timeStamp,velocity,velocityX,velocityY,direction;if(input.eventType!=INPUT_CANCEL&&(deltaTime>COMPUTE_INTERVAL||last.velocity===undefined)){var deltaX=input.deltaX-last.deltaX;var deltaY=input.deltaY-last.deltaY;var v=getVelocity(deltaTime,deltaX,deltaY);velocityX=v.x;velocityY=v.y;velocity=abs(v.x)>abs(v.y)?v.x:v.y;direction=getDirection(deltaX,deltaY);session.lastInterval=input;}else{// use latest velocity info if it doesn't overtake a minimum period
	velocity=last.velocity;velocityX=last.velocityX;velocityY=last.velocityY;direction=last.direction;}input.velocity=velocity;input.velocityX=velocityX;input.velocityY=velocityY;input.direction=direction;}/**
	   * create a simple clone from the input used for storage of firstInput and firstMultiple
	   * @param {Object} input
	   * @returns {Object} clonedInputData
	   */function simpleCloneInputData(input){// make a simple copy of the pointers because we will get a reference if we don't
	// we only need clientXY for the calculations
	var pointers=[];var i=0;while(i<input.pointers.length){pointers[i]={clientX:round(input.pointers[i].clientX),clientY:round(input.pointers[i].clientY)};i++;}return{timeStamp:now(),pointers:pointers,center:getCenter(pointers),deltaX:input.deltaX,deltaY:input.deltaY};}/**
	   * get the center of all the pointers
	   * @param {Array} pointers
	   * @return {Object} center contains `x` and `y` properties
	   */function getCenter(pointers){var pointersLength=pointers.length;// no need to loop when only one touch
	if(pointersLength===1){return{x:round(pointers[0].clientX),y:round(pointers[0].clientY)};}var x=0,y=0,i=0;while(i<pointersLength){x+=pointers[i].clientX;y+=pointers[i].clientY;i++;}return{x:round(x/pointersLength),y:round(y/pointersLength)};}/**
	   * calculate the velocity between two points. unit is in px per ms.
	   * @param {Number} deltaTime
	   * @param {Number} x
	   * @param {Number} y
	   * @return {Object} velocity `x` and `y`
	   */function getVelocity(deltaTime,x,y){return{x:x/deltaTime||0,y:y/deltaTime||0};}/**
	   * get the direction between two points
	   * @param {Number} x
	   * @param {Number} y
	   * @return {Number} direction
	   */function getDirection(x,y){if(x===y){return DIRECTION_NONE;}if(abs(x)>=abs(y)){return x<0?DIRECTION_LEFT:DIRECTION_RIGHT;}return y<0?DIRECTION_UP:DIRECTION_DOWN;}/**
	   * calculate the absolute distance between two points
	   * @param {Object} p1 {x, y}
	   * @param {Object} p2 {x, y}
	   * @param {Array} [props] containing x and y keys
	   * @return {Number} distance
	   */function getDistance(p1,p2,props){if(!props){props=PROPS_XY;}var x=p2[props[0]]-p1[props[0]],y=p2[props[1]]-p1[props[1]];return Math.sqrt(x*x+y*y);}/**
	   * calculate the angle between two coordinates
	   * @param {Object} p1
	   * @param {Object} p2
	   * @param {Array} [props] containing x and y keys
	   * @return {Number} angle
	   */function getAngle(p1,p2,props){if(!props){props=PROPS_XY;}var x=p2[props[0]]-p1[props[0]],y=p2[props[1]]-p1[props[1]];return Math.atan2(y,x)*180/Math.PI;}/**
	   * calculate the rotation degrees between two pointersets
	   * @param {Array} start array of pointers
	   * @param {Array} end array of pointers
	   * @return {Number} rotation
	   */function getRotation(start,end){return getAngle(end[1],end[0],PROPS_CLIENT_XY)+getAngle(start[1],start[0],PROPS_CLIENT_XY);}/**
	   * calculate the scale factor between two pointersets
	   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	   * @param {Array} start array of pointers
	   * @param {Array} end array of pointers
	   * @return {Number} scale
	   */function getScale(start,end){return getDistance(end[0],end[1],PROPS_CLIENT_XY)/getDistance(start[0],start[1],PROPS_CLIENT_XY);}var MOUSE_INPUT_MAP={mousedown:INPUT_START,mousemove:INPUT_MOVE,mouseup:INPUT_END};var MOUSE_ELEMENT_EVENTS='mousedown';var MOUSE_WINDOW_EVENTS='mousemove mouseup';/**
	   * Mouse events input
	   * @constructor
	   * @extends Input
	   */function MouseInput(){this.evEl=MOUSE_ELEMENT_EVENTS;this.evWin=MOUSE_WINDOW_EVENTS;this.pressed=false;// mousedown state
	Input.apply(this,arguments);}inherit(MouseInput,Input,{/**
	       * handle mouse events
	       * @param {Object} ev
	       */handler:function MEhandler(ev){var eventType=MOUSE_INPUT_MAP[ev.type];// on start we want to have the left mouse button down
	if(eventType&INPUT_START&&ev.button===0){this.pressed=true;}if(eventType&INPUT_MOVE&&ev.which!==1){eventType=INPUT_END;}// mouse must be down
	if(!this.pressed){return;}if(eventType&INPUT_END){this.pressed=false;}this.callback(this.manager,eventType,{pointers:[ev],changedPointers:[ev],pointerType:INPUT_TYPE_MOUSE,srcEvent:ev});}});var POINTER_INPUT_MAP={pointerdown:INPUT_START,pointermove:INPUT_MOVE,pointerup:INPUT_END,pointercancel:INPUT_CANCEL,pointerout:INPUT_CANCEL};// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM={2:INPUT_TYPE_TOUCH,3:INPUT_TYPE_PEN,4:INPUT_TYPE_MOUSE,5:INPUT_TYPE_KINECT// see https://twitter.com/jacobrossi/status/480596438489890816
	};var POINTER_ELEMENT_EVENTS='pointerdown';var POINTER_WINDOW_EVENTS='pointermove pointerup pointercancel';// IE10 has prefixed support, and case-sensitive
	if(window.MSPointerEvent&&!window.PointerEvent){POINTER_ELEMENT_EVENTS='MSPointerDown';POINTER_WINDOW_EVENTS='MSPointerMove MSPointerUp MSPointerCancel';}/**
	   * Pointer events input
	   * @constructor
	   * @extends Input
	   */function PointerEventInput(){this.evEl=POINTER_ELEMENT_EVENTS;this.evWin=POINTER_WINDOW_EVENTS;Input.apply(this,arguments);this.store=this.manager.session.pointerEvents=[];}inherit(PointerEventInput,Input,{/**
	       * handle mouse events
	       * @param {Object} ev
	       */handler:function PEhandler(ev){var store=this.store;var removePointer=false;var eventTypeNormalized=ev.type.toLowerCase().replace('ms','');var eventType=POINTER_INPUT_MAP[eventTypeNormalized];var pointerType=IE10_POINTER_TYPE_ENUM[ev.pointerType]||ev.pointerType;var isTouch=pointerType==INPUT_TYPE_TOUCH;// get index of the event in the store
	var storeIndex=inArray(store,ev.pointerId,'pointerId');// start and mouse must be down
	if(eventType&INPUT_START&&(ev.button===0||isTouch)){if(storeIndex<0){store.push(ev);storeIndex=store.length-1;}}else if(eventType&(INPUT_END|INPUT_CANCEL)){removePointer=true;}// it not found, so the pointer hasn't been down (so it's probably a hover)
	if(storeIndex<0){return;}// update the event in the store
	store[storeIndex]=ev;this.callback(this.manager,eventType,{pointers:store,changedPointers:[ev],pointerType:pointerType,srcEvent:ev});if(removePointer){// remove from the store
	store.splice(storeIndex,1);}}});var SINGLE_TOUCH_INPUT_MAP={touchstart:INPUT_START,touchmove:INPUT_MOVE,touchend:INPUT_END,touchcancel:INPUT_CANCEL};var SINGLE_TOUCH_TARGET_EVENTS='touchstart';var SINGLE_TOUCH_WINDOW_EVENTS='touchstart touchmove touchend touchcancel';/**
	   * Touch events input
	   * @constructor
	   * @extends Input
	   */function SingleTouchInput(){this.evTarget=SINGLE_TOUCH_TARGET_EVENTS;this.evWin=SINGLE_TOUCH_WINDOW_EVENTS;this.started=false;Input.apply(this,arguments);}inherit(SingleTouchInput,Input,{handler:function TEhandler(ev){var type=SINGLE_TOUCH_INPUT_MAP[ev.type];// should we handle the touch events?
	if(type===INPUT_START){this.started=true;}if(!this.started){return;}var touches=normalizeSingleTouches.call(this,ev,type);// when done, reset the started state
	if(type&(INPUT_END|INPUT_CANCEL)&&touches[0].length-touches[1].length===0){this.started=false;}this.callback(this.manager,type,{pointers:touches[0],changedPointers:touches[1],pointerType:INPUT_TYPE_TOUCH,srcEvent:ev});}});/**
	   * @this {TouchInput}
	   * @param {Object} ev
	   * @param {Number} type flag
	   * @returns {undefined|Array} [all, changed]
	   */function normalizeSingleTouches(ev,type){var all=toArray(ev.touches);var changed=toArray(ev.changedTouches);if(type&(INPUT_END|INPUT_CANCEL)){all=uniqueArray(all.concat(changed),'identifier',true);}return[all,changed];}var TOUCH_INPUT_MAP={touchstart:INPUT_START,touchmove:INPUT_MOVE,touchend:INPUT_END,touchcancel:INPUT_CANCEL};var TOUCH_TARGET_EVENTS='touchstart touchmove touchend touchcancel';/**
	   * Multi-user touch events input
	   * @constructor
	   * @extends Input
	   */function TouchInput(){this.evTarget=TOUCH_TARGET_EVENTS;this.targetIds={};Input.apply(this,arguments);}inherit(TouchInput,Input,{handler:function MTEhandler(ev){var type=TOUCH_INPUT_MAP[ev.type];var touches=getTouches.call(this,ev,type);if(!touches){return;}this.callback(this.manager,type,{pointers:touches[0],changedPointers:touches[1],pointerType:INPUT_TYPE_TOUCH,srcEvent:ev});}});/**
	   * @this {TouchInput}
	   * @param {Object} ev
	   * @param {Number} type flag
	   * @returns {undefined|Array} [all, changed]
	   */function getTouches(ev,type){var allTouches=toArray(ev.touches);var targetIds=this.targetIds;// when there is only one touch, the process can be simplified
	if(type&(INPUT_START|INPUT_MOVE)&&allTouches.length===1){targetIds[allTouches[0].identifier]=true;return[allTouches,allTouches];}var i,targetTouches,changedTouches=toArray(ev.changedTouches),changedTargetTouches=[],target=this.target;// get target touches from touches
	targetTouches=allTouches.filter(function(touch){return hasParent(touch.target,target);});// collect touches
	if(type===INPUT_START){i=0;while(i<targetTouches.length){targetIds[targetTouches[i].identifier]=true;i++;}}// filter changed touches to only contain touches that exist in the collected target ids
	i=0;while(i<changedTouches.length){if(targetIds[changedTouches[i].identifier]){changedTargetTouches.push(changedTouches[i]);}// cleanup removed touches
	if(type&(INPUT_END|INPUT_CANCEL)){delete targetIds[changedTouches[i].identifier];}i++;}if(!changedTargetTouches.length){return;}return[// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	uniqueArray(targetTouches.concat(changedTargetTouches),'identifier',true),changedTargetTouches];}/**
	   * Combined touch and mouse input
	   *
	   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	   * This because touch devices also emit mouse events while doing a touch.
	   *
	   * @constructor
	   * @extends Input
	   */var DEDUP_TIMEOUT=2500;var DEDUP_DISTANCE=25;function TouchMouseInput(){Input.apply(this,arguments);var handler=bindFn(this.handler,this);this.touch=new TouchInput(this.manager,handler);this.mouse=new MouseInput(this.manager,handler);this.primaryTouch=null;this.lastTouches=[];}inherit(TouchMouseInput,Input,{/**
	       * handle mouse and touch events
	       * @param {Hammer} manager
	       * @param {String} inputEvent
	       * @param {Object} inputData
	       */handler:function TMEhandler(manager,inputEvent,inputData){var isTouch=inputData.pointerType==INPUT_TYPE_TOUCH,isMouse=inputData.pointerType==INPUT_TYPE_MOUSE;if(isMouse&&inputData.sourceCapabilities&&inputData.sourceCapabilities.firesTouchEvents){return;}// when we're in a touch event, record touches to  de-dupe synthetic mouse event
	if(isTouch){recordTouches.call(this,inputEvent,inputData);}else if(isMouse&&isSyntheticEvent.call(this,inputData)){return;}this.callback(manager,inputEvent,inputData);},/**
	       * remove the event listeners
	       */destroy:function destroy(){this.touch.destroy();this.mouse.destroy();}});function recordTouches(eventType,eventData){if(eventType&INPUT_START){this.primaryTouch=eventData.changedPointers[0].identifier;setLastTouch.call(this,eventData);}else if(eventType&(INPUT_END|INPUT_CANCEL)){setLastTouch.call(this,eventData);}}function setLastTouch(eventData){var touch=eventData.changedPointers[0];if(touch.identifier===this.primaryTouch){var lastTouch={x:touch.clientX,y:touch.clientY};this.lastTouches.push(lastTouch);var lts=this.lastTouches;var removeLastTouch=function removeLastTouch(){var i=lts.indexOf(lastTouch);if(i>-1){lts.splice(i,1);}};setTimeout(removeLastTouch,DEDUP_TIMEOUT);}}function isSyntheticEvent(eventData){var x=eventData.srcEvent.clientX,y=eventData.srcEvent.clientY;for(var i=0;i<this.lastTouches.length;i++){var t=this.lastTouches[i];var dx=Math.abs(x-t.x),dy=Math.abs(y-t.y);if(dx<=DEDUP_DISTANCE&&dy<=DEDUP_DISTANCE){return true;}}return false;}var PREFIXED_TOUCH_ACTION=prefixed(TEST_ELEMENT.style,'touchAction');var NATIVE_TOUCH_ACTION=PREFIXED_TOUCH_ACTION!==undefined;// magical touchAction value
	var TOUCH_ACTION_COMPUTE='compute';var TOUCH_ACTION_AUTO='auto';var TOUCH_ACTION_MANIPULATION='manipulation';// not implemented
	var TOUCH_ACTION_NONE='none';var TOUCH_ACTION_PAN_X='pan-x';var TOUCH_ACTION_PAN_Y='pan-y';var TOUCH_ACTION_MAP=getTouchActionProps();/**
	   * Touch Action
	   * sets the touchAction property or uses the js alternative
	   * @param {Manager} manager
	   * @param {String} value
	   * @constructor
	   */function TouchAction(manager,value){this.manager=manager;this.set(value);}TouchAction.prototype={/**
	       * set the touchAction value on the element or enable the polyfill
	       * @param {String} value
	       */set:function set(value){// find out the touch-action by the event handlers
	if(value==TOUCH_ACTION_COMPUTE){value=this.compute();}if(NATIVE_TOUCH_ACTION&&this.manager.element.style&&TOUCH_ACTION_MAP[value]){this.manager.element.style[PREFIXED_TOUCH_ACTION]=value;}this.actions=value.toLowerCase().trim();},/**
	       * just re-set the touchAction value
	       */update:function update(){this.set(this.manager.options.touchAction);},/**
	       * compute the value for the touchAction property based on the recognizer's settings
	       * @returns {String} value
	       */compute:function compute(){var actions=[];each(this.manager.recognizers,function(recognizer){if(boolOrFn(recognizer.options.enable,[recognizer])){actions=actions.concat(recognizer.getTouchAction());}});return cleanTouchActions(actions.join(' '));},/**
	       * this method is called on each input cycle and provides the preventing of the browser behavior
	       * @param {Object} input
	       */preventDefaults:function preventDefaults(input){var srcEvent=input.srcEvent;var direction=input.offsetDirection;// if the touch action did prevented once this session
	if(this.manager.session.prevented){srcEvent.preventDefault();return;}var actions=this.actions;var hasNone=inStr(actions,TOUCH_ACTION_NONE)&&!TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];var hasPanY=inStr(actions,TOUCH_ACTION_PAN_Y)&&!TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];var hasPanX=inStr(actions,TOUCH_ACTION_PAN_X)&&!TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];if(hasNone){//do not prevent defaults if this is a tap gesture
	var isTapPointer=input.pointers.length===1;var isTapMovement=input.distance<2;var isTapTouchTime=input.deltaTime<250;if(isTapPointer&&isTapMovement&&isTapTouchTime){return;}}if(hasPanX&&hasPanY){// `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
	return;}if(hasNone||hasPanY&&direction&DIRECTION_HORIZONTAL||hasPanX&&direction&DIRECTION_VERTICAL){return this.preventSrc(srcEvent);}},/**
	       * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	       * @param {Object} srcEvent
	       */preventSrc:function preventSrc(srcEvent){this.manager.session.prevented=true;srcEvent.preventDefault();}};/**
	   * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	   * @param {String} actions
	   * @returns {*}
	   */function cleanTouchActions(actions){// none
	if(inStr(actions,TOUCH_ACTION_NONE)){return TOUCH_ACTION_NONE;}var hasPanX=inStr(actions,TOUCH_ACTION_PAN_X);var hasPanY=inStr(actions,TOUCH_ACTION_PAN_Y);// if both pan-x and pan-y are set (different recognizers
	// for different directions, e.g. horizontal pan but vertical swipe?)
	// we need none (as otherwise with pan-x pan-y combined none of these
	// recognizers will work, since the browser would handle all panning
	if(hasPanX&&hasPanY){return TOUCH_ACTION_NONE;}// pan-x OR pan-y
	if(hasPanX||hasPanY){return hasPanX?TOUCH_ACTION_PAN_X:TOUCH_ACTION_PAN_Y;}// manipulation
	if(inStr(actions,TOUCH_ACTION_MANIPULATION)){return TOUCH_ACTION_MANIPULATION;}return TOUCH_ACTION_AUTO;}function getTouchActionProps(){if(!NATIVE_TOUCH_ACTION){return false;}var touchMap={};var cssSupports=window.CSS&&window.CSS.supports;['auto','manipulation','pan-y','pan-x','pan-x pan-y','none'].forEach(function(val){// If css.supports is not supported but there is native touch-action assume it supports
	// all values. This is the case for IE 10 and 11.
	touchMap[val]=cssSupports?window.CSS.supports('touch-action',val):true;});return touchMap;}/**
	   * Recognizer flow explained; *
	   * All recognizers have the initial state of POSSIBLE when a input session starts.
	   * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	   * Example session for mouse-input: mousedown -> mousemove -> mouseup
	   *
	   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	   * which determines with state it should be.
	   *
	   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	   * POSSIBLE to give it another change on the next cycle.
	   *
	   *               Possible
	   *                  |
	   *            +-----+---------------+
	   *            |                     |
	   *      +-----+-----+               |
	   *      |           |               |
	   *   Failed      Cancelled          |
	   *                          +-------+------+
	   *                          |              |
	   *                      Recognized       Began
	   *                                         |
	   *                                      Changed
	   *                                         |
	   *                                  Ended/Recognized
	   */var STATE_POSSIBLE=1;var STATE_BEGAN=2;var STATE_CHANGED=4;var STATE_ENDED=8;var STATE_RECOGNIZED=STATE_ENDED;var STATE_CANCELLED=16;var STATE_FAILED=32;/**
	   * Recognizer
	   * Every recognizer needs to extend from this class.
	   * @constructor
	   * @param {Object} options
	   */function Recognizer(options){this.options=assign({},this.defaults,options||{});this.id=uniqueId();this.manager=null;// default is enable true
	this.options.enable=ifUndefined(this.options.enable,true);this.state=STATE_POSSIBLE;this.simultaneous={};this.requireFail=[];}Recognizer.prototype={/**
	       * @virtual
	       * @type {Object}
	       */defaults:{},/**
	       * set options
	       * @param {Object} options
	       * @return {Recognizer}
	       */set:function set(options){assign(this.options,options);// also update the touchAction, in case something changed about the directions/enabled state
	this.manager&&this.manager.touchAction.update();return this;},/**
	       * recognize simultaneous with an other recognizer.
	       * @param {Recognizer} otherRecognizer
	       * @returns {Recognizer} this
	       */recognizeWith:function recognizeWith(otherRecognizer){if(invokeArrayArg(otherRecognizer,'recognizeWith',this)){return this;}var simultaneous=this.simultaneous;otherRecognizer=getRecognizerByNameIfManager(otherRecognizer,this);if(!simultaneous[otherRecognizer.id]){simultaneous[otherRecognizer.id]=otherRecognizer;otherRecognizer.recognizeWith(this);}return this;},/**
	       * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	       * @param {Recognizer} otherRecognizer
	       * @returns {Recognizer} this
	       */dropRecognizeWith:function dropRecognizeWith(otherRecognizer){if(invokeArrayArg(otherRecognizer,'dropRecognizeWith',this)){return this;}otherRecognizer=getRecognizerByNameIfManager(otherRecognizer,this);delete this.simultaneous[otherRecognizer.id];return this;},/**
	       * recognizer can only run when an other is failing
	       * @param {Recognizer} otherRecognizer
	       * @returns {Recognizer} this
	       */requireFailure:function requireFailure(otherRecognizer){if(invokeArrayArg(otherRecognizer,'requireFailure',this)){return this;}var requireFail=this.requireFail;otherRecognizer=getRecognizerByNameIfManager(otherRecognizer,this);if(inArray(requireFail,otherRecognizer)===-1){requireFail.push(otherRecognizer);otherRecognizer.requireFailure(this);}return this;},/**
	       * drop the requireFailure link. it does not remove the link on the other recognizer.
	       * @param {Recognizer} otherRecognizer
	       * @returns {Recognizer} this
	       */dropRequireFailure:function dropRequireFailure(otherRecognizer){if(invokeArrayArg(otherRecognizer,'dropRequireFailure',this)){return this;}otherRecognizer=getRecognizerByNameIfManager(otherRecognizer,this);var index=inArray(this.requireFail,otherRecognizer);if(index>-1){this.requireFail.splice(index,1);}return this;},/**
	       * has require failures boolean
	       * @returns {boolean}
	       */hasRequireFailures:function hasRequireFailures(){return this.requireFail.length>0;},/**
	       * if the recognizer can recognize simultaneous with an other recognizer
	       * @param {Recognizer} otherRecognizer
	       * @returns {Boolean}
	       */canRecognizeWith:function canRecognizeWith(otherRecognizer){return!!this.simultaneous[otherRecognizer.id];},/**
	       * You should use `tryEmit` instead of `emit` directly to check
	       * that all the needed recognizers has failed before emitting.
	       * @param {Object} input
	       */emit:function emit(input){var self=this;var state=this.state;function emit(event){self.manager.emit(event,input);}// 'panstart' and 'panmove'
	if(state<STATE_ENDED){emit(self.options.event+stateStr(state));}emit(self.options.event);// simple 'eventName' events
	if(input.additionalEvent){// additional event(panleft, panright, pinchin, pinchout...)
	emit(input.additionalEvent);}// panend and pancancel
	if(state>=STATE_ENDED){emit(self.options.event+stateStr(state));}},/**
	       * Check that all the require failure recognizers has failed,
	       * if true, it emits a gesture event,
	       * otherwise, setup the state to FAILED.
	       * @param {Object} input
	       */tryEmit:function tryEmit(input){if(this.canEmit()){return this.emit(input);}// it's failing anyway
	this.state=STATE_FAILED;},/**
	       * can we emit?
	       * @returns {boolean}
	       */canEmit:function canEmit(){var i=0;while(i<this.requireFail.length){if(!(this.requireFail[i].state&(STATE_FAILED|STATE_POSSIBLE))){return false;}i++;}return true;},/**
	       * update the recognizer
	       * @param {Object} inputData
	       */recognize:function recognize(inputData){// make a new copy of the inputData
	// so we can change the inputData without messing up the other recognizers
	var inputDataClone=assign({},inputData);// is is enabled and allow recognizing?
	if(!boolOrFn(this.options.enable,[this,inputDataClone])){this.reset();this.state=STATE_FAILED;return;}// reset when we've reached the end
	if(this.state&(STATE_RECOGNIZED|STATE_CANCELLED|STATE_FAILED)){this.state=STATE_POSSIBLE;}this.state=this.process(inputDataClone);// the recognizer has recognized a gesture
	// so trigger an event
	if(this.state&(STATE_BEGAN|STATE_CHANGED|STATE_ENDED|STATE_CANCELLED)){this.tryEmit(inputDataClone);}},/**
	       * return the state of the recognizer
	       * the actual recognizing happens in this method
	       * @virtual
	       * @param {Object} inputData
	       * @returns {Const} STATE
	       */process:function process(inputData){},// jshint ignore:line
	/**
	       * return the preferred touch-action
	       * @virtual
	       * @returns {Array}
	       */getTouchAction:function getTouchAction(){},/**
	       * called when the gesture isn't allowed to recognize
	       * like when another is being recognized or it is disabled
	       * @virtual
	       */reset:function reset(){}};/**
	   * get a usable string, used as event postfix
	   * @param {Const} state
	   * @returns {String} state
	   */function stateStr(state){if(state&STATE_CANCELLED){return'cancel';}else if(state&STATE_ENDED){return'end';}else if(state&STATE_CHANGED){return'move';}else if(state&STATE_BEGAN){return'start';}return'';}/**
	   * direction cons to string
	   * @param {Const} direction
	   * @returns {String}
	   */function directionStr(direction){if(direction==DIRECTION_DOWN){return'down';}else if(direction==DIRECTION_UP){return'up';}else if(direction==DIRECTION_LEFT){return'left';}else if(direction==DIRECTION_RIGHT){return'right';}return'';}/**
	   * get a recognizer by name if it is bound to a manager
	   * @param {Recognizer|String} otherRecognizer
	   * @param {Recognizer} recognizer
	   * @returns {Recognizer}
	   */function getRecognizerByNameIfManager(otherRecognizer,recognizer){var manager=recognizer.manager;if(manager){return manager.get(otherRecognizer);}return otherRecognizer;}/**
	   * This recognizer is just used as a base for the simple attribute recognizers.
	   * @constructor
	   * @extends Recognizer
	   */function AttrRecognizer(){Recognizer.apply(this,arguments);}inherit(AttrRecognizer,Recognizer,{/**
	       * @namespace
	       * @memberof AttrRecognizer
	       */defaults:{/**
	           * @type {Number}
	           * @default 1
	           */pointers:1},/**
	       * Used to check if it the recognizer receives valid input, like input.distance > 10.
	       * @memberof AttrRecognizer
	       * @param {Object} input
	       * @returns {Boolean} recognized
	       */attrTest:function attrTest(input){var optionPointers=this.options.pointers;return optionPointers===0||input.pointers.length===optionPointers;},/**
	       * Process the input and return the state for the recognizer
	       * @memberof AttrRecognizer
	       * @param {Object} input
	       * @returns {*} State
	       */process:function process(input){var state=this.state;var eventType=input.eventType;var isRecognized=state&(STATE_BEGAN|STATE_CHANGED);var isValid=this.attrTest(input);// on cancel input and we've recognized before, return STATE_CANCELLED
	if(isRecognized&&(eventType&INPUT_CANCEL||!isValid)){return state|STATE_CANCELLED;}else if(isRecognized||isValid){if(eventType&INPUT_END){return state|STATE_ENDED;}else if(!(state&STATE_BEGAN)){return STATE_BEGAN;}return state|STATE_CHANGED;}return STATE_FAILED;}});/**
	   * Pan
	   * Recognized when the pointer is down and moved in the allowed direction.
	   * @constructor
	   * @extends AttrRecognizer
	   */function PanRecognizer(){AttrRecognizer.apply(this,arguments);this.pX=null;this.pY=null;}inherit(PanRecognizer,AttrRecognizer,{/**
	       * @namespace
	       * @memberof PanRecognizer
	       */defaults:{event:'pan',threshold:10,pointers:1,direction:DIRECTION_ALL},getTouchAction:function getTouchAction(){var direction=this.options.direction;var actions=[];if(direction&DIRECTION_HORIZONTAL){actions.push(TOUCH_ACTION_PAN_Y);}if(direction&DIRECTION_VERTICAL){actions.push(TOUCH_ACTION_PAN_X);}return actions;},directionTest:function directionTest(input){var options=this.options;var hasMoved=true;var distance=input.distance;var direction=input.direction;var x=input.deltaX;var y=input.deltaY;// lock to axis?
	if(!(direction&options.direction)){if(options.direction&DIRECTION_HORIZONTAL){direction=x===0?DIRECTION_NONE:x<0?DIRECTION_LEFT:DIRECTION_RIGHT;hasMoved=x!=this.pX;distance=Math.abs(input.deltaX);}else{direction=y===0?DIRECTION_NONE:y<0?DIRECTION_UP:DIRECTION_DOWN;hasMoved=y!=this.pY;distance=Math.abs(input.deltaY);}}input.direction=direction;return hasMoved&&distance>options.threshold&&direction&options.direction;},attrTest:function attrTest(input){return AttrRecognizer.prototype.attrTest.call(this,input)&&(this.state&STATE_BEGAN||!(this.state&STATE_BEGAN)&&this.directionTest(input));},emit:function emit(input){this.pX=input.deltaX;this.pY=input.deltaY;var direction=directionStr(input.direction);if(direction){input.additionalEvent=this.options.event+direction;}this._super.emit.call(this,input);}});/**
	   * Pinch
	   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	   * @constructor
	   * @extends AttrRecognizer
	   */function PinchRecognizer(){AttrRecognizer.apply(this,arguments);}inherit(PinchRecognizer,AttrRecognizer,{/**
	       * @namespace
	       * @memberof PinchRecognizer
	       */defaults:{event:'pinch',threshold:0,pointers:2},getTouchAction:function getTouchAction(){return[TOUCH_ACTION_NONE];},attrTest:function attrTest(input){return this._super.attrTest.call(this,input)&&(Math.abs(input.scale-1)>this.options.threshold||this.state&STATE_BEGAN);},emit:function emit(input){if(input.scale!==1){var inOut=input.scale<1?'in':'out';input.additionalEvent=this.options.event+inOut;}this._super.emit.call(this,input);}});/**
	   * Press
	   * Recognized when the pointer is down for x ms without any movement.
	   * @constructor
	   * @extends Recognizer
	   */function PressRecognizer(){Recognizer.apply(this,arguments);this._timer=null;this._input=null;}inherit(PressRecognizer,Recognizer,{/**
	       * @namespace
	       * @memberof PressRecognizer
	       */defaults:{event:'press',pointers:1,time:251,// minimal time of the pointer to be pressed
	threshold:9// a minimal movement is ok, but keep it low
	},getTouchAction:function getTouchAction(){return[TOUCH_ACTION_AUTO];},process:function process(input){var options=this.options;var validPointers=input.pointers.length===options.pointers;var validMovement=input.distance<options.threshold;var validTime=input.deltaTime>options.time;this._input=input;// we only allow little movement
	// and we've reached an end event, so a tap is possible
	if(!validMovement||!validPointers||input.eventType&(INPUT_END|INPUT_CANCEL)&&!validTime){this.reset();}else if(input.eventType&INPUT_START){this.reset();this._timer=setTimeoutContext(function(){this.state=STATE_RECOGNIZED;this.tryEmit();},options.time,this);}else if(input.eventType&INPUT_END){return STATE_RECOGNIZED;}return STATE_FAILED;},reset:function reset(){clearTimeout(this._timer);},emit:function emit(input){if(this.state!==STATE_RECOGNIZED){return;}if(input&&input.eventType&INPUT_END){this.manager.emit(this.options.event+'up',input);}else{this._input.timeStamp=now();this.manager.emit(this.options.event,this._input);}}});/**
	   * Rotate
	   * Recognized when two or more pointer are moving in a circular motion.
	   * @constructor
	   * @extends AttrRecognizer
	   */function RotateRecognizer(){AttrRecognizer.apply(this,arguments);}inherit(RotateRecognizer,AttrRecognizer,{/**
	       * @namespace
	       * @memberof RotateRecognizer
	       */defaults:{event:'rotate',threshold:0,pointers:2},getTouchAction:function getTouchAction(){return[TOUCH_ACTION_NONE];},attrTest:function attrTest(input){return this._super.attrTest.call(this,input)&&(Math.abs(input.rotation)>this.options.threshold||this.state&STATE_BEGAN);}});/**
	   * Swipe
	   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	   * @constructor
	   * @extends AttrRecognizer
	   */function SwipeRecognizer(){AttrRecognizer.apply(this,arguments);}inherit(SwipeRecognizer,AttrRecognizer,{/**
	       * @namespace
	       * @memberof SwipeRecognizer
	       */defaults:{event:'swipe',threshold:10,velocity:0.3,direction:DIRECTION_HORIZONTAL|DIRECTION_VERTICAL,pointers:1},getTouchAction:function getTouchAction(){return PanRecognizer.prototype.getTouchAction.call(this);},attrTest:function attrTest(input){var direction=this.options.direction;var velocity;if(direction&(DIRECTION_HORIZONTAL|DIRECTION_VERTICAL)){velocity=input.overallVelocity;}else if(direction&DIRECTION_HORIZONTAL){velocity=input.overallVelocityX;}else if(direction&DIRECTION_VERTICAL){velocity=input.overallVelocityY;}return this._super.attrTest.call(this,input)&&direction&input.offsetDirection&&input.distance>this.options.threshold&&input.maxPointers==this.options.pointers&&abs(velocity)>this.options.velocity&&input.eventType&INPUT_END;},emit:function emit(input){var direction=directionStr(input.offsetDirection);if(direction){this.manager.emit(this.options.event+direction,input);}this.manager.emit(this.options.event,input);}});/**
	   * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	   * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	   * a single tap.
	   *
	   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	   * multi-taps being recognized.
	   * @constructor
	   * @extends Recognizer
	   */function TapRecognizer(){Recognizer.apply(this,arguments);// previous time and center,
	// used for tap counting
	this.pTime=false;this.pCenter=false;this._timer=null;this._input=null;this.count=0;}inherit(TapRecognizer,Recognizer,{/**
	       * @namespace
	       * @memberof PinchRecognizer
	       */defaults:{event:'tap',pointers:1,taps:1,interval:300,// max time between the multi-tap taps
	time:250,// max time of the pointer to be down (like finger on the screen)
	threshold:9,// a minimal movement is ok, but keep it low
	posThreshold:10// a multi-tap can be a bit off the initial position
	},getTouchAction:function getTouchAction(){return[TOUCH_ACTION_MANIPULATION];},process:function process(input){var options=this.options;var validPointers=input.pointers.length===options.pointers;var validMovement=input.distance<options.threshold;var validTouchTime=input.deltaTime<options.time;this.reset();if(input.eventType&INPUT_START&&this.count===0){return this.failTimeout();}// we only allow little movement
	// and we've reached an end event, so a tap is possible
	if(validMovement&&validTouchTime&&validPointers){if(input.eventType!=INPUT_END){return this.failTimeout();}var validInterval=this.pTime?input.timeStamp-this.pTime<options.interval:true;var validMultiTap=!this.pCenter||getDistance(this.pCenter,input.center)<options.posThreshold;this.pTime=input.timeStamp;this.pCenter=input.center;if(!validMultiTap||!validInterval){this.count=1;}else{this.count+=1;}this._input=input;// if tap count matches we have recognized it,
	// else it has began recognizing...
	var tapCount=this.count%options.taps;if(tapCount===0){// no failing requirements, immediately trigger the tap event
	// or wait as long as the multitap interval to trigger
	if(!this.hasRequireFailures()){return STATE_RECOGNIZED;}else{this._timer=setTimeoutContext(function(){this.state=STATE_RECOGNIZED;this.tryEmit();},options.interval,this);return STATE_BEGAN;}}}return STATE_FAILED;},failTimeout:function failTimeout(){this._timer=setTimeoutContext(function(){this.state=STATE_FAILED;},this.options.interval,this);return STATE_FAILED;},reset:function reset(){clearTimeout(this._timer);},emit:function emit(){if(this.state==STATE_RECOGNIZED){this._input.tapCount=this.count;this.manager.emit(this.options.event,this._input);}}});/**
	   * Simple way to create a manager with a default set of recognizers.
	   * @param {HTMLElement} element
	   * @param {Object} [options]
	   * @constructor
	   */function Hammer(element,options){options=options||{};options.recognizers=ifUndefined(options.recognizers,Hammer.defaults.preset);return new Manager(element,options);}/**
	   * @const {string}
	   */Hammer.VERSION='2.0.7';/**
	   * default settings
	   * @namespace
	   */Hammer.defaults={/**
	       * set if DOM events are being triggered.
	       * But this is slower and unused by simple implementations, so disabled by default.
	       * @type {Boolean}
	       * @default false
	       */domEvents:false,/**
	       * The value for the touchAction property/fallback.
	       * When set to `compute` it will magically set the correct value based on the added recognizers.
	       * @type {String}
	       * @default compute
	       */touchAction:TOUCH_ACTION_COMPUTE,/**
	       * @type {Boolean}
	       * @default true
	       */enable:true,/**
	       * EXPERIMENTAL FEATURE -- can be removed/changed
	       * Change the parent input target element.
	       * If Null, then it is being set the to main element.
	       * @type {Null|EventTarget}
	       * @default null
	       */inputTarget:null,/**
	       * force an input class
	       * @type {Null|Function}
	       * @default null
	       */inputClass:null,/**
	       * Default recognizer setup when calling `Hammer()`
	       * When creating a new Manager these will be skipped.
	       * @type {Array}
	       */preset:[// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	[RotateRecognizer,{enable:false}],[PinchRecognizer,{enable:false},['rotate']],[SwipeRecognizer,{direction:DIRECTION_HORIZONTAL}],[PanRecognizer,{direction:DIRECTION_HORIZONTAL},['swipe']],[TapRecognizer],[TapRecognizer,{event:'doubletap',taps:2},['tap']],[PressRecognizer]],/**
	       * Some CSS properties can be used to improve the working of Hammer.
	       * Add them to this method and they will be set when creating a new Manager.
	       * @namespace
	       */cssProps:{/**
	           * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	           * @type {String}
	           * @default 'none'
	           */userSelect:'none',/**
	           * Disable the Windows Phone grippers when pressing an element.
	           * @type {String}
	           * @default 'none'
	           */touchSelect:'none',/**
	           * Disables the default callout shown when you touch and hold a touch target.
	           * On iOS, when you touch and hold a touch target such as a link, Safari displays
	           * a callout containing information about the link. This property allows you to disable that callout.
	           * @type {String}
	           * @default 'none'
	           */touchCallout:'none',/**
	           * Specifies whether zooming is enabled. Used by IE10>
	           * @type {String}
	           * @default 'none'
	           */contentZooming:'none',/**
	           * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	           * @type {String}
	           * @default 'none'
	           */userDrag:'none',/**
	           * Overrides the highlight color shown when the user taps a link or a JavaScript
	           * clickable element in iOS. This property obeys the alpha value, if specified.
	           * @type {String}
	           * @default 'rgba(0,0,0,0)'
	           */tapHighlightColor:'rgba(0,0,0,0)'}};var STOP=1;var FORCED_STOP=2;/**
	   * Manager
	   * @param {HTMLElement} element
	   * @param {Object} [options]
	   * @constructor
	   */function Manager(element,options){this.options=assign({},Hammer.defaults,options||{});this.options.inputTarget=this.options.inputTarget||element;this.handlers={};this.session={};this.recognizers=[];this.oldCssProps={};this.element=element;this.input=createInputInstance(this);this.touchAction=new TouchAction(this,this.options.touchAction);toggleCssProps(this,true);each(this.options.recognizers,function(item){var recognizer=this.add(new item[0](item[1]));item[2]&&recognizer.recognizeWith(item[2]);item[3]&&recognizer.requireFailure(item[3]);},this);}Manager.prototype={/**
	       * set options
	       * @param {Object} options
	       * @returns {Manager}
	       */set:function set(options){assign(this.options,options);// Options that need a little more setup
	if(options.touchAction){this.touchAction.update();}if(options.inputTarget){// Clean up existing event listeners and reinitialize
	this.input.destroy();this.input.target=options.inputTarget;this.input.init();}return this;},/**
	       * stop recognizing for this session.
	       * This session will be discarded, when a new [input]start event is fired.
	       * When forced, the recognizer cycle is stopped immediately.
	       * @param {Boolean} [force]
	       */stop:function stop(force){this.session.stopped=force?FORCED_STOP:STOP;},/**
	       * run the recognizers!
	       * called by the inputHandler function on every movement of the pointers (touches)
	       * it walks through all the recognizers and tries to detect the gesture that is being made
	       * @param {Object} inputData
	       */recognize:function recognize(inputData){var session=this.session;if(session.stopped){return;}// run the touch-action polyfill
	this.touchAction.preventDefaults(inputData);var recognizer;var recognizers=this.recognizers;// this holds the recognizer that is being recognized.
	// so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	// if no recognizer is detecting a thing, it is set to `null`
	var curRecognizer=session.curRecognizer;// reset when the last recognizer is recognized
	// or when we're in a new session
	if(!curRecognizer||curRecognizer&&curRecognizer.state&STATE_RECOGNIZED){curRecognizer=session.curRecognizer=null;}var i=0;while(i<recognizers.length){recognizer=recognizers[i];// find out if we are allowed try to recognize the input for this one.
	// 1.   allow if the session is NOT forced stopped (see the .stop() method)
	// 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	//      that is being recognized.
	// 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	//      this can be setup with the `recognizeWith()` method on the recognizer.
	if(session.stopped!==FORCED_STOP&&(// 1
	!curRecognizer||recognizer==curRecognizer||// 2
	recognizer.canRecognizeWith(curRecognizer))){// 3
	recognizer.recognize(inputData);}else{recognizer.reset();}// if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	// current active recognizer. but only if we don't already have an active recognizer
	if(!curRecognizer&&recognizer.state&(STATE_BEGAN|STATE_CHANGED|STATE_ENDED)){curRecognizer=session.curRecognizer=recognizer;}i++;}},/**
	       * get a recognizer by its event name.
	       * @param {Recognizer|String} recognizer
	       * @returns {Recognizer|Null}
	       */get:function get(recognizer){if(recognizer instanceof Recognizer){return recognizer;}var recognizers=this.recognizers;for(var i=0;i<recognizers.length;i++){if(recognizers[i].options.event==recognizer){return recognizers[i];}}return null;},/**
	       * add a recognizer to the manager
	       * existing recognizers with the same event name will be removed
	       * @param {Recognizer} recognizer
	       * @returns {Recognizer|Manager}
	       */add:function add(recognizer){if(invokeArrayArg(recognizer,'add',this)){return this;}// remove existing
	var existing=this.get(recognizer.options.event);if(existing){this.remove(existing);}this.recognizers.push(recognizer);recognizer.manager=this;this.touchAction.update();return recognizer;},/**
	       * remove a recognizer by name or instance
	       * @param {Recognizer|String} recognizer
	       * @returns {Manager}
	       */remove:function remove(recognizer){if(invokeArrayArg(recognizer,'remove',this)){return this;}recognizer=this.get(recognizer);// let's make sure this recognizer exists
	if(recognizer){var recognizers=this.recognizers;var index=inArray(recognizers,recognizer);if(index!==-1){recognizers.splice(index,1);this.touchAction.update();}}return this;},/**
	       * bind event
	       * @param {String} events
	       * @param {Function} handler
	       * @returns {EventEmitter} this
	       */on:function on(events,handler){if(events===undefined){return;}if(handler===undefined){return;}var handlers=this.handlers;each(splitStr(events),function(event){handlers[event]=handlers[event]||[];handlers[event].push(handler);});return this;},/**
	       * unbind event, leave emit blank to remove all handlers
	       * @param {String} events
	       * @param {Function} [handler]
	       * @returns {EventEmitter} this
	       */off:function off(events,handler){if(events===undefined){return;}var handlers=this.handlers;each(splitStr(events),function(event){if(!handler){delete handlers[event];}else{handlers[event]&&handlers[event].splice(inArray(handlers[event],handler),1);}});return this;},/**
	       * emit event to the listeners
	       * @param {String} event
	       * @param {Object} data
	       */emit:function emit(event,data){// we also want to trigger dom events
	if(this.options.domEvents){triggerDomEvent(event,data);}// no handlers, so skip it all
	var handlers=this.handlers[event]&&this.handlers[event].slice();if(!handlers||!handlers.length){return;}data.type=event;data.preventDefault=function(){data.srcEvent.preventDefault();};var i=0;while(i<handlers.length){handlers[i](data);i++;}},/**
	       * destroy the manager and unbinds all events
	       * it doesn't unbind dom events, that is the user own responsibility
	       */destroy:function destroy(){this.element&&toggleCssProps(this,false);this.handlers={};this.session={};this.input.destroy();this.element=null;}};/**
	   * add/remove the css properties as defined in manager.options.cssProps
	   * @param {Manager} manager
	   * @param {Boolean} add
	   */function toggleCssProps(manager,add){var element=manager.element;if(!element.style){return;}var prop;each(manager.options.cssProps,function(value,name){prop=prefixed(element.style,name);if(add){manager.oldCssProps[prop]=element.style[prop];element.style[prop]=value;}else{element.style[prop]=manager.oldCssProps[prop]||'';}});if(!add){manager.oldCssProps={};}}/**
	   * trigger dom event
	   * @param {String} event
	   * @param {Object} data
	   */function triggerDomEvent(event,data){var gestureEvent=document.createEvent('Event');gestureEvent.initEvent(event,true,true);gestureEvent.gesture=data;data.target.dispatchEvent(gestureEvent);}assign(Hammer,{INPUT_START:INPUT_START,INPUT_MOVE:INPUT_MOVE,INPUT_END:INPUT_END,INPUT_CANCEL:INPUT_CANCEL,STATE_POSSIBLE:STATE_POSSIBLE,STATE_BEGAN:STATE_BEGAN,STATE_CHANGED:STATE_CHANGED,STATE_ENDED:STATE_ENDED,STATE_RECOGNIZED:STATE_RECOGNIZED,STATE_CANCELLED:STATE_CANCELLED,STATE_FAILED:STATE_FAILED,DIRECTION_NONE:DIRECTION_NONE,DIRECTION_LEFT:DIRECTION_LEFT,DIRECTION_RIGHT:DIRECTION_RIGHT,DIRECTION_UP:DIRECTION_UP,DIRECTION_DOWN:DIRECTION_DOWN,DIRECTION_HORIZONTAL:DIRECTION_HORIZONTAL,DIRECTION_VERTICAL:DIRECTION_VERTICAL,DIRECTION_ALL:DIRECTION_ALL,Manager:Manager,Input:Input,TouchAction:TouchAction,TouchInput:TouchInput,MouseInput:MouseInput,PointerEventInput:PointerEventInput,TouchMouseInput:TouchMouseInput,SingleTouchInput:SingleTouchInput,Recognizer:Recognizer,AttrRecognizer:AttrRecognizer,Tap:TapRecognizer,Pan:PanRecognizer,Swipe:SwipeRecognizer,Pinch:PinchRecognizer,Rotate:RotateRecognizer,Press:PressRecognizer,on:addEventListeners,off:removeEventListeners,each:each,merge:merge,extend:extend,assign:assign,inherit:inherit,bindFn:bindFn,prefixed:prefixed});// this prevents errors when Hammer is loaded in the presence of an AMD
	//  style loader but by script tag, not by the loader.
	var freeGlobal=typeof window!=='undefined'?window:typeof self!=='undefined'?self:{};// jshint ignore:line
	freeGlobal.Hammer=Hammer;if(true){!(__WEBPACK_AMD_DEFINE_RESULT__=function(){return Hammer;}.call(exports,__webpack_require__,exports,module),__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else if(typeof module!='undefined'&&module.exports){module.exports=Hammer;}else{window[exportName]=Hammer;}})(window,document,'Hammer');/***/},/* 25 *//***/function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;"use strict";/**
	   * Created by Alex on 11/6/2014.
	   */// https://github.com/umdjs/umd/blob/master/returnExports.js#L40-L60
	// if the module has no dependencies, the above pattern can be simplified to
	(function(root,factory){if(true){// AMD. Register as an anonymous module.
	!(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_FACTORY__=factory,__WEBPACK_AMD_DEFINE_RESULT__=typeof __WEBPACK_AMD_DEFINE_FACTORY__==='function'?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__!==undefined&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__));}else if((typeof exports==='undefined'?'undefined':_typeof2(exports))==='object'){// Node. Does not work with strict CommonJS, but
	// only CommonJS-like environments that support module.exports,
	// like Node.
	module.exports=factory();}else{// Browser globals (root is window)
	root.keycharm=factory();}})(this,function(){function keycharm(options){var preventDefault=options&&options.preventDefault||false;var container=options&&options.container||window;var _exportFunctions={};var _bound={keydown:{},keyup:{}};var _keys={};var i;// a - z
	for(i=97;i<=122;i++){_keys[String.fromCharCode(i)]={code:65+(i-97),shift:false};}// A - Z
	for(i=65;i<=90;i++){_keys[String.fromCharCode(i)]={code:i,shift:true};}// 0 - 9
	for(i=0;i<=9;i++){_keys[''+i]={code:48+i,shift:false};}// F1 - F12
	for(i=1;i<=12;i++){_keys['F'+i]={code:111+i,shift:false};}// num0 - num9
	for(i=0;i<=9;i++){_keys['num'+i]={code:96+i,shift:false};}// numpad misc
	_keys['num*']={code:106,shift:false};_keys['num+']={code:107,shift:false};_keys['num-']={code:109,shift:false};_keys['num/']={code:111,shift:false};_keys['num.']={code:110,shift:false};// arrows
	_keys['left']={code:37,shift:false};_keys['up']={code:38,shift:false};_keys['right']={code:39,shift:false};_keys['down']={code:40,shift:false};// extra keys
	_keys['space']={code:32,shift:false};_keys['enter']={code:13,shift:false};_keys['shift']={code:16,shift:undefined};_keys['esc']={code:27,shift:false};_keys['backspace']={code:8,shift:false};_keys['tab']={code:9,shift:false};_keys['ctrl']={code:17,shift:false};_keys['alt']={code:18,shift:false};_keys['delete']={code:46,shift:false};_keys['pageup']={code:33,shift:false};_keys['pagedown']={code:34,shift:false};// symbols
	_keys['=']={code:187,shift:false};_keys['-']={code:189,shift:false};_keys[']']={code:221,shift:false};_keys['[']={code:219,shift:false};var down=function down(event){handleEvent(event,'keydown');};var up=function up(event){handleEvent(event,'keyup');};// handle the actualy bound key with the event
	var handleEvent=function handleEvent(event,type){if(_bound[type][event.keyCode]!==undefined){var bound=_bound[type][event.keyCode];for(var i=0;i<bound.length;i++){if(bound[i].shift===undefined){bound[i].fn(event);}else if(bound[i].shift==true&&event.shiftKey==true){bound[i].fn(event);}else if(bound[i].shift==false&&event.shiftKey==false){bound[i].fn(event);}}if(preventDefault==true){event.preventDefault();}}};// bind a key to a callback
	_exportFunctions.bind=function(key,callback,type){if(type===undefined){type='keydown';}if(_keys[key]===undefined){throw new Error("unsupported key: "+key);}if(_bound[type][_keys[key].code]===undefined){_bound[type][_keys[key].code]=[];}_bound[type][_keys[key].code].push({fn:callback,shift:_keys[key].shift});};// bind all keys to a call back (demo purposes)
	_exportFunctions.bindAll=function(callback,type){if(type===undefined){type='keydown';}for(var key in _keys){if(_keys.hasOwnProperty(key)){_exportFunctions.bind(key,callback,type);}}};// get the key label from an event
	_exportFunctions.getKey=function(event){for(var key in _keys){if(_keys.hasOwnProperty(key)){if(event.shiftKey==true&&_keys[key].shift==true&&event.keyCode==_keys[key].code){return key;}else if(event.shiftKey==false&&_keys[key].shift==false&&event.keyCode==_keys[key].code){return key;}else if(event.keyCode==_keys[key].code&&key=='shift'){return key;}}}return"unknown key, currently not supported";};// unbind either a specific callback from a key or all of them (by leaving callback undefined)
	_exportFunctions.unbind=function(key,callback,type){if(type===undefined){type='keydown';}if(_keys[key]===undefined){throw new Error("unsupported key: "+key);}if(callback!==undefined){var newBindings=[];var bound=_bound[type][_keys[key].code];if(bound!==undefined){for(var i=0;i<bound.length;i++){if(!(bound[i].fn==callback&&bound[i].shift==_keys[key].shift)){newBindings.push(_bound[type][_keys[key].code][i]);}}}_bound[type][_keys[key].code]=newBindings;}else{_bound[type][_keys[key].code]=[];}};// reset all bound variables.
	_exportFunctions.reset=function(){_bound={keydown:{},keyup:{}};};// unbind all listeners and reset all variables.
	_exportFunctions.destroy=function(){_bound={keydown:{},keyup:{}};container.removeEventListener('keydown',down,true);container.removeEventListener('keyup',up,true);};// create listeners.
	container.addEventListener('keydown',down,true);container.addEventListener('keyup',up,true);// return the public functions.
	return _exportFunctions;}return keycharm;});/***/},/* 26 *//***/function(module,exports,__webpack_require__){'use strict';// utils
	exports.util=__webpack_require__(1);exports.DOMutil=__webpack_require__(8);// data
	exports.DataSet=__webpack_require__(9);exports.DataView=__webpack_require__(11);exports.Queue=__webpack_require__(10);// Timeline
	exports.Timeline=__webpack_require__(27);exports.Graph2d=__webpack_require__(52);exports.timeline={Core:__webpack_require__(35),DateUtil:__webpack_require__(34),Range:__webpack_require__(32),stack:__webpack_require__(39),TimeStep:__webpack_require__(37),components:{items:{Item:__webpack_require__(41),BackgroundItem:__webpack_require__(45),BoxItem:__webpack_require__(43),PointItem:__webpack_require__(44),RangeItem:__webpack_require__(40)},BackgroundGroup:__webpack_require__(42),Component:__webpack_require__(33),CurrentTime:__webpack_require__(50),CustomTime:__webpack_require__(48),DataAxis:__webpack_require__(54),DataScale:__webpack_require__(55),GraphGroup:__webpack_require__(56),Group:__webpack_require__(38),ItemSet:__webpack_require__(36),Legend:__webpack_require__(60),LineGraph:__webpack_require__(53),TimeAxis:__webpack_require__(46)}};// bundled external libraries
	exports.moment=__webpack_require__(2);exports.Hammer=__webpack_require__(22);exports.keycharm=__webpack_require__(25);/***/},/* 27 *//***/function(module,exports,__webpack_require__){'use strict';var _Configurator=__webpack_require__(28);var _Configurator2=_interopRequireDefault(_Configurator);var _Validator=__webpack_require__(31);var _Validator2=_interopRequireDefault(_Validator);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Emitter=__webpack_require__(13);var Hammer=__webpack_require__(22);var moment=__webpack_require__(2);var util=__webpack_require__(1);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var Range=__webpack_require__(32);var Core=__webpack_require__(35);var TimeAxis=__webpack_require__(46);var CurrentTime=__webpack_require__(50);var CustomTime=__webpack_require__(48);var ItemSet=__webpack_require__(36);var printStyle=__webpack_require__(31).printStyle;var allOptions=__webpack_require__(51).allOptions;var configureOptions=__webpack_require__(51).configureOptions;/**
	   * Create a timeline visualization
	   * @param {HTMLElement} container
	   * @param {vis.DataSet | vis.DataView | Array} [items]
	   * @param {vis.DataSet | vis.DataView | Array} [groups]
	   * @param {Object} [options]  See Timeline.setOptions for the available options.
	   * @constructor
	   * @extends Core
	   */function Timeline(container,items,groups,options){if(!(this instanceof Timeline)){throw new SyntaxError('Constructor must be called with the new operator');}// if the third element is options, the forth is groups (optionally);
	if(!(Array.isArray(groups)||groups instanceof DataSet||groups instanceof DataView)&&groups instanceof Object){var forthArgument=options;options=groups;groups=forthArgument;}var me=this;this.defaultOptions={start:null,end:null,autoResize:true,orientation:{axis:'bottom',// axis orientation: 'bottom', 'top', or 'both'
	item:'bottom'// not relevant
	},moment:moment,width:null,height:null,maxHeight:null,minHeight:null};this.options=util.deepExtend({},this.defaultOptions);// Create the DOM, props, and emitter
	this._create(container);if(!options||options&&typeof options.rtl=="undefined"){var directionFromDom,domNode=this.dom.root;while(!directionFromDom&&domNode){directionFromDom=window.getComputedStyle(domNode,null).direction;domNode=domNode.parentElement;}this.options.rtl=directionFromDom&&directionFromDom.toLowerCase()=="rtl";}else{this.options.rtl=options.rtl;}// all components listed here will be repainted automatically
	this.components=[];this.body={dom:this.dom,domProps:this.props,emitter:{on:this.on.bind(this),off:this.off.bind(this),emit:this.emit.bind(this)},hiddenDates:[],util:{getScale:function getScale(){return me.timeAxis.step.scale;},getStep:function getStep(){return me.timeAxis.step.step;},toScreen:me._toScreen.bind(me),toGlobalScreen:me._toGlobalScreen.bind(me),// this refers to the root.width
	toTime:me._toTime.bind(me),toGlobalTime:me._toGlobalTime.bind(me)}};// range
	this.range=new Range(this.body,this.options);this.components.push(this.range);this.body.range=this.range;// time axis
	this.timeAxis=new TimeAxis(this.body,this.options);this.timeAxis2=null;// used in case of orientation option 'both'
	this.components.push(this.timeAxis);// current time bar
	this.currentTime=new CurrentTime(this.body,this.options);this.components.push(this.currentTime);// item set
	this.itemSet=new ItemSet(this.body,this.options);this.components.push(this.itemSet);this.itemsData=null;// DataSet
	this.groupsData=null;// DataSet
	this.on('tap',function(event){me.emit('click',me.getEventProperties(event));});this.on('doubletap',function(event){me.emit('doubleClick',me.getEventProperties(event));});this.dom.root.oncontextmenu=function(event){me.emit('contextmenu',me.getEventProperties(event));};//Single time autoscale/fit
	this.fitDone=false;this.on('changed',function(){if(this.itemsData==null)return;if(!me.fitDone){me.fitDone=true;if(me.options.start!=undefined||me.options.end!=undefined){if(me.options.start==undefined||me.options.end==undefined){var range=me.getItemRange();}var start=me.options.start!=undefined?me.options.start:range.min;var end=me.options.end!=undefined?me.options.end:range.max;me.setWindow(start,end,{animation:false});}else{me.fit({animation:false});}}});// apply options
	if(options){this.setOptions(options);}// IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
	if(groups){this.setGroups(groups);}// create itemset
	if(items){this.setItems(items);}// draw for the first time
	this._redraw();}// Extend the functionality from Core
	Timeline.prototype=new Core();/**
	   * Load a configurator
	   * @return {Object}
	   * @private
	   */Timeline.prototype._createConfigurator=function(){return new _Configurator2.default(this,this.dom.container,configureOptions);};/**
	   * Force a redraw. The size of all items will be recalculated.
	   * Can be useful to manually redraw when option autoResize=false and the window
	   * has been resized, or when the items CSS has been changed.
	   *
	   * Note: this function will be overridden on construction with a trottled version
	   */Timeline.prototype.redraw=function(){this.itemSet&&this.itemSet.markDirty({refreshItems:true});this._redraw();};Timeline.prototype.setOptions=function(options){// validate options
	var errorFound=_Validator2.default.validate(options,allOptions);if(errorFound===true){console.log('%cErrors have been found in the supplied options object.',printStyle);}Core.prototype.setOptions.call(this,options);if('type'in options){if(options.type!==this.options.type){this.options.type=options.type;// force recreation of all items
	var itemsData=this.itemsData;if(itemsData){var selection=this.getSelection();this.setItems(null);// remove all
	this.setItems(itemsData);// add all
	this.setSelection(selection);// restore selection
	}}}};/**
	   * Set items
	   * @param {vis.DataSet | Array | null} items
	   */Timeline.prototype.setItems=function(items){// convert to type DataSet when needed
	var newDataSet;if(!items){newDataSet=null;}else if(items instanceof DataSet||items instanceof DataView){newDataSet=items;}else{// turn an array into a dataset
	newDataSet=new DataSet(items,{type:{start:'Date',end:'Date'}});}// set items
	this.itemsData=newDataSet;this.itemSet&&this.itemSet.setItems(newDataSet);};/**
	   * Set groups
	   * @param {vis.DataSet | Array} groups
	   */Timeline.prototype.setGroups=function(groups){// convert to type DataSet when needed
	var newDataSet;if(!groups){newDataSet=null;}else if(groups instanceof DataSet||groups instanceof DataView){newDataSet=groups;}else{// turn an array into a dataset
	newDataSet=new DataSet(groups);}this.groupsData=newDataSet;this.itemSet.setGroups(newDataSet);};/**
	   * Set both items and groups in one go
	   * @param {{items: Array | vis.DataSet, groups: Array | vis.DataSet}} data
	   */Timeline.prototype.setData=function(data){if(data&&data.groups){this.setGroups(data.groups);}if(data&&data.items){this.setItems(data.items);}};/**
	   * Set selected items by their id. Replaces the current selection
	   * Unknown id's are silently ignored.
	   * @param {string[] | string} [ids]  An array with zero or more id's of the items to be
	   *                                selected. If ids is an empty array, all items will be
	   *                                unselected.
	   * @param {Object} [options]      Available options:
	   *                                `focus: boolean`
	   *                                    If true, focus will be set to the selected item(s)
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   *                                    Only applicable when option focus is true.
	   */Timeline.prototype.setSelection=function(ids,options){this.itemSet&&this.itemSet.setSelection(ids);if(options&&options.focus){this.focus(ids,options);}};/**
	   * Get the selected items by their id
	   * @return {Array} ids  The ids of the selected items
	   */Timeline.prototype.getSelection=function(){return this.itemSet&&this.itemSet.getSelection()||[];};/**
	   * Adjust the visible window such that the selected item (or multiple items)
	   * are centered on screen.
	   * @param {String | String[]} id     An item id or array with item ids
	   * @param {Object} [options]      Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */Timeline.prototype.focus=function(id,options){if(!this.itemsData||id==undefined)return;var ids=Array.isArray(id)?id:[id];// get the specified item(s)
	var itemsData=this.itemsData.getDataSet().get(ids,{type:{start:'Date',end:'Date'}});// calculate minimum start and maximum end of specified items
	var start=null;var end=null;itemsData.forEach(function(itemData){var s=itemData.start.valueOf();var e='end'in itemData?itemData.end.valueOf():itemData.start.valueOf();if(start===null||s<start){start=s;}if(end===null||e>end){end=e;}});if(start!==null&&end!==null){// calculate the new middle and interval for the window
	var middle=(start+end)/2;var interval=Math.max(this.range.end-this.range.start,(end-start)*1.1);var animation=options&&options.animation!==undefined?options.animation:true;this.range.setRange(middle-interval/2,middle+interval/2,animation);}};/**
	   * Set Timeline window such that it fits all items
	   * @param {Object} [options]  Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */Timeline.prototype.fit=function(options){var animation=options&&options.animation!==undefined?options.animation:true;var range;var dataset=this.itemsData&&this.itemsData.getDataSet();if(dataset.length===1&&dataset.get()[0].end===undefined){// a single item -> don't fit, just show a range around the item from -4 to +3 days
	range=this.getDataRange();this.moveTo(range.min.valueOf(),{animation:animation});}else{// exactly fit the items (plus a small margin)
	range=this.getItemRange();this.range.setRange(range.min,range.max,animation);}};/**
	   * Determine the range of the items, taking into account their actual width
	   * and a margin of 10 pixels on both sides.
	   * @return {{min: Date | null, max: Date | null}}
	   */Timeline.prototype.getItemRange=function(){var _this=this;// get a rough approximation for the range based on the items start and end dates
	var range=this.getDataRange();var min=range.min!==null?range.min.valueOf():null;var max=range.max!==null?range.max.valueOf():null;var minItem=null;var maxItem=null;if(min!=null&&max!=null){var interval;var factor;var lhs;var rhs;var delta;(function(){var getStart=function getStart(item){return util.convert(item.data.start,'Date').valueOf();};var getEnd=function getEnd(item){var end=item.data.end!=undefined?item.data.end:item.data.start;return util.convert(end,'Date').valueOf();};// calculate the date of the left side and right side of the items given
	interval=max-min;// ms
	if(interval<=0){interval=10;}factor=interval/_this.props.center.width;util.forEach(_this.itemSet.items,function(item){item.show();item.repositionX();var start=getStart(item);var end=getEnd(item);if(this.options.rtl){var startSide=start-(item.getWidthRight()+10)*factor;var endSide=end+(item.getWidthLeft()+10)*factor;}else{var startSide=start-(item.getWidthLeft()+10)*factor;var endSide=end+(item.getWidthRight()+10)*factor;}if(startSide<min){min=startSide;minItem=item;}if(endSide>max){max=endSide;maxItem=item;}}.bind(_this));if(minItem&&maxItem){lhs=minItem.getWidthLeft()+10;rhs=maxItem.getWidthRight()+10;delta=_this.props.center.width-lhs-rhs;// px
	if(delta>0){if(_this.options.rtl){min=getStart(minItem)-rhs*interval/delta;// ms
	max=getEnd(maxItem)+lhs*interval/delta;// ms
	}else{min=getStart(minItem)-lhs*interval/delta;// ms
	max=getEnd(maxItem)+rhs*interval/delta;// ms
	}}}})();}return{min:min!=null?new Date(min):null,max:max!=null?new Date(max):null};};/**
	   * Calculate the data range of the items start and end dates
	   * @returns {{min: Date | null, max: Date | null}}
	   */Timeline.prototype.getDataRange=function(){var min=null;var max=null;var dataset=this.itemsData&&this.itemsData.getDataSet();if(dataset){dataset.forEach(function(item){var start=util.convert(item.start,'Date').valueOf();var end=util.convert(item.end!=undefined?item.end:item.start,'Date').valueOf();if(min===null||start<min){min=start;}if(max===null||end>max){max=end;}});}return{min:min!=null?new Date(min):null,max:max!=null?new Date(max):null};};/**
	   * Generate Timeline related information from an event
	   * @param {Event} event
	   * @return {Object} An object with related information, like on which area
	   *                  The event happened, whether clicked on an item, etc.
	   */Timeline.prototype.getEventProperties=function(event){var clientX=event.center?event.center.x:event.clientX;var clientY=event.center?event.center.y:event.clientY;if(this.options.rtl){var x=util.getAbsoluteRight(this.dom.centerContainer)-clientX;}else{var x=clientX-util.getAbsoluteLeft(this.dom.centerContainer);}var y=clientY-util.getAbsoluteTop(this.dom.centerContainer);var item=this.itemSet.itemFromTarget(event);var group=this.itemSet.groupFromTarget(event);var customTime=CustomTime.customTimeFromTarget(event);var snap=this.itemSet.options.snap||null;var scale=this.body.util.getScale();var step=this.body.util.getStep();var time=this._toTime(x);var snappedTime=snap?snap(time,scale,step):time;var element=util.getTarget(event);var what=null;if(item!=null){what='item';}else if(customTime!=null){what='custom-time';}else if(util.hasParent(element,this.timeAxis.dom.foreground)){what='axis';}else if(this.timeAxis2&&util.hasParent(element,this.timeAxis2.dom.foreground)){what='axis';}else if(util.hasParent(element,this.itemSet.dom.labelSet)){what='group-label';}else if(util.hasParent(element,this.currentTime.bar)){what='current-time';}else if(util.hasParent(element,this.dom.center)){what='background';}return{event:event,item:item?item.id:null,group:group?group.groupId:null,what:what,pageX:event.srcEvent?event.srcEvent.pageX:event.pageX,pageY:event.srcEvent?event.srcEvent.pageY:event.pageY,x:x,y:y,time:time,snappedTime:snappedTime};};module.exports=Timeline;/***/},/* 28 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _ColorPicker=__webpack_require__(29);var _ColorPicker2=_interopRequireDefault(_ColorPicker);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);/**
	   * The way this works is for all properties of this.possible options, you can supply the property name in any form to list the options.
	   * Boolean options are recognised as Boolean
	   * Number options should be written as array: [default value, min value, max value, stepsize]
	   * Colors should be written as array: ['color', '#ffffff']
	   * Strings with should be written as array: [option1, option2, option3, ..]
	   *
	   * The options are matched with their counterparts in each of the modules and the values used in the configuration are
	   *
	   * @param parentModule        | the location where parentModule.setOptions() can be called
	   * @param defaultContainer    | the default container of the module
	   * @param configureOptions    | the fully configured and predefined options set found in allOptions.js
	   * @param pixelRatio          | canvas pixel ratio
	   */var Configurator=function(){function Configurator(parentModule,defaultContainer,configureOptions){var pixelRatio=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;_classCallCheck(this,Configurator);this.parent=parentModule;this.changedOptions=[];this.container=defaultContainer;this.allowCreation=false;this.options={};this.initialized=false;this.popupCounter=0;this.defaultOptions={enabled:false,filter:true,container:undefined,showButton:true};util.extend(this.options,this.defaultOptions);this.configureOptions=configureOptions;this.moduleOptions={};this.domElements=[];this.popupDiv={};this.popupLimit=5;this.popupHistory={};this.colorPicker=new _ColorPicker2.default(pixelRatio);this.wrapper=undefined;}/**
	     * refresh all options.
	     * Because all modules parse their options by themselves, we just use their options. We copy them here.
	     *
	     * @param options
	     */_createClass(Configurator,[{key:'setOptions',value:function setOptions(options){if(options!==undefined){// reset the popup history because the indices may have been changed.
	this.popupHistory={};this._removePopup();var enabled=true;if(typeof options==='string'){this.options.filter=options;}else if(options instanceof Array){this.options.filter=options.join();}else if((typeof options==='undefined'?'undefined':_typeof(options))==='object'){if(options.container!==undefined){this.options.container=options.container;}if(options.filter!==undefined){this.options.filter=options.filter;}if(options.showButton!==undefined){this.options.showButton=options.showButton;}if(options.enabled!==undefined){enabled=options.enabled;}}else if(typeof options==='boolean'){this.options.filter=true;enabled=options;}else if(typeof options==='function'){this.options.filter=options;enabled=true;}if(this.options.filter===false){enabled=false;}this.options.enabled=enabled;}this._clean();}},{key:'setModuleOptions',value:function setModuleOptions(moduleOptions){this.moduleOptions=moduleOptions;if(this.options.enabled===true){this._clean();if(this.options.container!==undefined){this.container=this.options.container;}this._create();}}/**
	       * Create all DOM elements
	       * @private
	       */},{key:'_create',value:function _create(){var _this=this;this._clean();this.changedOptions=[];var filter=this.options.filter;var counter=0;var show=false;for(var option in this.configureOptions){if(this.configureOptions.hasOwnProperty(option)){this.allowCreation=false;show=false;if(typeof filter==='function'){show=filter(option,[]);show=show||this._handleObject(this.configureOptions[option],[option],true);}else if(filter===true||filter.indexOf(option)!==-1){show=true;}if(show!==false){this.allowCreation=true;// linebreak between categories
	if(counter>0){this._makeItem([]);}// a header for the category
	this._makeHeader(option);// get the sub options
	this._handleObject(this.configureOptions[option],[option]);}counter++;}}if(this.options.showButton===true){(function(){var generateButton=document.createElement('div');generateButton.className='vis-configuration vis-config-button';generateButton.innerHTML='generate options';generateButton.onclick=function(){_this._printOptions();};generateButton.onmouseover=function(){generateButton.className='vis-configuration vis-config-button hover';};generateButton.onmouseout=function(){generateButton.className='vis-configuration vis-config-button';};_this.optionsContainer=document.createElement('div');_this.optionsContainer.className='vis-configuration vis-config-option-container';_this.domElements.push(_this.optionsContainer);_this.domElements.push(generateButton);})();}this._push();//~ this.colorPicker.insertTo(this.container);
	}/**
	       * draw all DOM elements on the screen
	       * @private
	       */},{key:'_push',value:function _push(){this.wrapper=document.createElement('div');this.wrapper.className='vis-configuration-wrapper';this.container.appendChild(this.wrapper);for(var i=0;i<this.domElements.length;i++){this.wrapper.appendChild(this.domElements[i]);}this._showPopupIfNeeded();}/**
	       * delete all DOM elements
	       * @private
	       */},{key:'_clean',value:function _clean(){for(var i=0;i<this.domElements.length;i++){this.wrapper.removeChild(this.domElements[i]);}if(this.wrapper!==undefined){this.container.removeChild(this.wrapper);this.wrapper=undefined;}this.domElements=[];this._removePopup();}/**
	       * get the value from the actualOptions if it exists
	       * @param {array} path    | where to look for the actual option
	       * @returns {*}
	       * @private
	       */},{key:'_getValue',value:function _getValue(path){var base=this.moduleOptions;for(var i=0;i<path.length;i++){if(base[path[i]]!==undefined){base=base[path[i]];}else{base=undefined;break;}}return base;}/**
	       * all option elements are wrapped in an item
	       * @param path
	       * @param domElements
	       * @private
	       */},{key:'_makeItem',value:function _makeItem(path){var _arguments=arguments,_this2=this;if(this.allowCreation===true){var _len,domElements,_key;var _ret2=function(){var item=document.createElement('div');item.className='vis-configuration vis-config-item vis-config-s'+path.length;for(_len=_arguments.length,domElements=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){domElements[_key-1]=_arguments[_key];}domElements.forEach(function(element){item.appendChild(element);});_this2.domElements.push(item);return{v:_this2.domElements.length};}();if((typeof _ret2==='undefined'?'undefined':_typeof(_ret2))==="object")return _ret2.v;}return 0;}/**
	       * header for major subjects
	       * @param name
	       * @private
	       */},{key:'_makeHeader',value:function _makeHeader(name){var div=document.createElement('div');div.className='vis-configuration vis-config-header';div.innerHTML=name;this._makeItem([],div);}/**
	       * make a label, if it is an object label, it gets different styling.
	       * @param name
	       * @param path
	       * @param objectLabel
	       * @returns {HTMLElement}
	       * @private
	       */},{key:'_makeLabel',value:function _makeLabel(name,path){var objectLabel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var div=document.createElement('div');div.className='vis-configuration vis-config-label vis-config-s'+path.length;if(objectLabel===true){div.innerHTML='<i><b>'+name+':</b></i>';}else{div.innerHTML=name+':';}return div;}/**
	       * make a dropdown list for multiple possible string optoins
	       * @param arr
	       * @param value
	       * @param path
	       * @private
	       */},{key:'_makeDropdown',value:function _makeDropdown(arr,value,path){var select=document.createElement('select');select.className='vis-configuration vis-config-select';var selectedValue=0;if(value!==undefined){if(arr.indexOf(value)!==-1){selectedValue=arr.indexOf(value);}}for(var i=0;i<arr.length;i++){var option=document.createElement('option');option.value=arr[i];if(i===selectedValue){option.selected='selected';}option.innerHTML=arr[i];select.appendChild(option);}var me=this;select.onchange=function(){me._update(this.value,path);};var label=this._makeLabel(path[path.length-1],path);this._makeItem(path,label,select);}/**
	       * make a range object for numeric options
	       * @param arr
	       * @param value
	       * @param path
	       * @private
	       */},{key:'_makeRange',value:function _makeRange(arr,value,path){var defaultValue=arr[0];var min=arr[1];var max=arr[2];var step=arr[3];var range=document.createElement('input');range.className='vis-configuration vis-config-range';try{range.type='range';// not supported on IE9
	range.min=min;range.max=max;}catch(err){}range.step=step;// set up the popup settings in case they are needed.
	var popupString='';var popupValue=0;if(value!==undefined){var factor=1.20;if(value<0&&value*factor<min){range.min=Math.ceil(value*factor);popupValue=range.min;popupString='range increased';}else if(value/factor<min){range.min=Math.ceil(value/factor);popupValue=range.min;popupString='range increased';}if(value*factor>max&&max!==1){range.max=Math.ceil(value*factor);popupValue=range.max;popupString='range increased';}range.value=value;}else{range.value=defaultValue;}var input=document.createElement('input');input.className='vis-configuration vis-config-rangeinput';input.value=range.value;var me=this;range.onchange=function(){input.value=this.value;me._update(Number(this.value),path);};range.oninput=function(){input.value=this.value;};var label=this._makeLabel(path[path.length-1],path);var itemIndex=this._makeItem(path,label,range,input);// if a popup is needed AND it has not been shown for this value, show it.
	if(popupString!==''&&this.popupHistory[itemIndex]!==popupValue){this.popupHistory[itemIndex]=popupValue;this._setupPopup(popupString,itemIndex);}}/**
	       * prepare the popup
	       * @param string
	       * @param index
	       * @private
	       */},{key:'_setupPopup',value:function _setupPopup(string,index){var _this3=this;if(this.initialized===true&&this.allowCreation===true&&this.popupCounter<this.popupLimit){var div=document.createElement("div");div.id="vis-configuration-popup";div.className="vis-configuration-popup";div.innerHTML=string;div.onclick=function(){_this3._removePopup();};this.popupCounter+=1;this.popupDiv={html:div,index:index};}}/**
	       * remove the popup from the dom
	       * @private
	       */},{key:'_removePopup',value:function _removePopup(){if(this.popupDiv.html!==undefined){this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);clearTimeout(this.popupDiv.hideTimeout);clearTimeout(this.popupDiv.deleteTimeout);this.popupDiv={};}}/**
	       * Show the popup if it is needed.
	       * @private
	       */},{key:'_showPopupIfNeeded',value:function _showPopupIfNeeded(){var _this4=this;if(this.popupDiv.html!==undefined){var correspondingElement=this.domElements[this.popupDiv.index];var rect=correspondingElement.getBoundingClientRect();this.popupDiv.html.style.left=rect.left+"px";this.popupDiv.html.style.top=rect.top-30+"px";// 30 is the height;
	document.body.appendChild(this.popupDiv.html);this.popupDiv.hideTimeout=setTimeout(function(){_this4.popupDiv.html.style.opacity=0;},1500);this.popupDiv.deleteTimeout=setTimeout(function(){_this4._removePopup();},1800);}}/**
	       * make a checkbox for boolean options.
	       * @param defaultValue
	       * @param value
	       * @param path
	       * @private
	       */},{key:'_makeCheckbox',value:function _makeCheckbox(defaultValue,value,path){var checkbox=document.createElement('input');checkbox.type='checkbox';checkbox.className='vis-configuration vis-config-checkbox';checkbox.checked=defaultValue;if(value!==undefined){checkbox.checked=value;if(value!==defaultValue){if((typeof defaultValue==='undefined'?'undefined':_typeof(defaultValue))==='object'){if(value!==defaultValue.enabled){this.changedOptions.push({path:path,value:value});}}else{this.changedOptions.push({path:path,value:value});}}}var me=this;checkbox.onchange=function(){me._update(this.checked,path);};var label=this._makeLabel(path[path.length-1],path);this._makeItem(path,label,checkbox);}/**
	       * make a text input field for string options.
	       * @param defaultValue
	       * @param value
	       * @param path
	       * @private
	       */},{key:'_makeTextInput',value:function _makeTextInput(defaultValue,value,path){var checkbox=document.createElement('input');checkbox.type='text';checkbox.className='vis-configuration vis-config-text';checkbox.value=value;if(value!==defaultValue){this.changedOptions.push({path:path,value:value});}var me=this;checkbox.onchange=function(){me._update(this.value,path);};var label=this._makeLabel(path[path.length-1],path);this._makeItem(path,label,checkbox);}/**
	       * make a color field with a color picker for color fields
	       * @param arr
	       * @param value
	       * @param path
	       * @private
	       */},{key:'_makeColorField',value:function _makeColorField(arr,value,path){var _this5=this;var defaultColor=arr[1];var div=document.createElement('div');value=value===undefined?defaultColor:value;if(value!=='none'){div.className='vis-configuration vis-config-colorBlock';div.style.backgroundColor=value;}else{div.className='vis-configuration vis-config-colorBlock none';}value=value===undefined?defaultColor:value;div.onclick=function(){_this5._showColorPicker(value,div,path);};var label=this._makeLabel(path[path.length-1],path);this._makeItem(path,label,div);}/**
	       * used by the color buttons to call the color picker.
	       * @param event
	       * @param value
	       * @param div
	       * @param path
	       * @private
	       */},{key:'_showColorPicker',value:function _showColorPicker(value,div,path){var _this6=this;// clear the callback from this div
	div.onclick=function(){};this.colorPicker.insertTo(div);this.colorPicker.show();this.colorPicker.setColor(value);this.colorPicker.setUpdateCallback(function(color){var colorString='rgba('+color.r+','+color.g+','+color.b+','+color.a+')';div.style.backgroundColor=colorString;_this6._update(colorString,path);});// on close of the colorpicker, restore the callback.
	this.colorPicker.setCloseCallback(function(){div.onclick=function(){_this6._showColorPicker(value,div,path);};});}/**
	       * parse an object and draw the correct items
	       * @param obj
	       * @param path
	       * @private
	       */},{key:'_handleObject',value:function _handleObject(obj){var path=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var checkOnly=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var show=false;var filter=this.options.filter;var visibleInSet=false;for(var subObj in obj){if(obj.hasOwnProperty(subObj)){show=true;var item=obj[subObj];var newPath=util.copyAndExtendArray(path,subObj);if(typeof filter==='function'){show=filter(subObj,path);// if needed we must go deeper into the object.
	if(show===false){if(!(item instanceof Array)&&typeof item!=='string'&&typeof item!=='boolean'&&item instanceof Object){this.allowCreation=false;show=this._handleObject(item,newPath,true);this.allowCreation=checkOnly===false;}}}if(show!==false){visibleInSet=true;var value=this._getValue(newPath);if(item instanceof Array){this._handleArray(item,value,newPath);}else if(typeof item==='string'){this._makeTextInput(item,value,newPath);}else if(typeof item==='boolean'){this._makeCheckbox(item,value,newPath);}else if(item instanceof Object){// collapse the physics options that are not enabled
	var draw=true;if(path.indexOf('physics')!==-1){if(this.moduleOptions.physics.solver!==subObj){draw=false;}}if(draw===true){// initially collapse options with an disabled enabled option.
	if(item.enabled!==undefined){var enabledPath=util.copyAndExtendArray(newPath,'enabled');var enabledValue=this._getValue(enabledPath);if(enabledValue===true){var label=this._makeLabel(subObj,newPath,true);this._makeItem(newPath,label);visibleInSet=this._handleObject(item,newPath)||visibleInSet;}else{this._makeCheckbox(item,enabledValue,newPath);}}else{var _label=this._makeLabel(subObj,newPath,true);this._makeItem(newPath,_label);visibleInSet=this._handleObject(item,newPath)||visibleInSet;}}}else{console.error('dont know how to handle',item,subObj,newPath);}}}}return visibleInSet;}/**
	       * handle the array type of option
	       * @param optionName
	       * @param arr
	       * @param value
	       * @param path
	       * @private
	       */},{key:'_handleArray',value:function _handleArray(arr,value,path){if(typeof arr[0]==='string'&&arr[0]==='color'){this._makeColorField(arr,value,path);if(arr[1]!==value){this.changedOptions.push({path:path,value:value});}}else if(typeof arr[0]==='string'){this._makeDropdown(arr,value,path);if(arr[0]!==value){this.changedOptions.push({path:path,value:value});}}else if(typeof arr[0]==='number'){this._makeRange(arr,value,path);if(arr[0]!==value){this.changedOptions.push({path:path,value:Number(value)});}}}/**
	       * called to update the network with the new settings.
	       * @param value
	       * @param path
	       * @private
	       */},{key:'_update',value:function _update(value,path){var options=this._constructOptions(value,path);if(this.parent.body&&this.parent.body.emitter&&this.parent.body.emitter.emit){this.parent.body.emitter.emit("configChange",options);}this.initialized=true;this.parent.setOptions(options);}},{key:'_constructOptions',value:function _constructOptions(value,path){var optionsObj=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var pointer=optionsObj;// when dropdown boxes can be string or boolean, we typecast it into correct types
	value=value==='true'?true:value;value=value==='false'?false:value;for(var i=0;i<path.length;i++){if(path[i]!=='global'){if(pointer[path[i]]===undefined){pointer[path[i]]={};}if(i!==path.length-1){pointer=pointer[path[i]];}else{pointer[path[i]]=value;}}}return optionsObj;}},{key:'_printOptions',value:function _printOptions(){var options=this.getOptions();this.optionsContainer.innerHTML='<pre>var options = '+JSON.stringify(options,null,2)+'</pre>';}},{key:'getOptions',value:function getOptions(){var options={};for(var i=0;i<this.changedOptions.length;i++){this._constructOptions(this.changedOptions[i].value,this.changedOptions[i].path,options);}return options;}}]);return Configurator;}();exports.default=Configurator;/***/},/* 29 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Hammer=__webpack_require__(22);var hammerUtil=__webpack_require__(30);var util=__webpack_require__(1);var ColorPicker=function(){function ColorPicker(){var pixelRatio=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;_classCallCheck(this,ColorPicker);this.pixelRatio=pixelRatio;this.generated=false;this.centerCoordinates={x:289/2,y:289/2};this.r=289*0.49;this.color={r:255,g:255,b:255,a:1.0};this.hueCircle=undefined;this.initialColor={r:255,g:255,b:255,a:1.0};this.previousColor=undefined;this.applied=false;// bound by
	this.updateCallback=function(){};this.closeCallback=function(){};// create all DOM elements
	this._create();}/**
	     * this inserts the colorPicker into a div from the DOM
	     * @param container
	     */_createClass(ColorPicker,[{key:'insertTo',value:function insertTo(container){if(this.hammer!==undefined){this.hammer.destroy();this.hammer=undefined;}this.container=container;this.container.appendChild(this.frame);this._bindHammer();this._setSize();}/**
	       * the callback is executed on apply and save. Bind it to the application
	       * @param callback
	       */},{key:'setUpdateCallback',value:function setUpdateCallback(callback){if(typeof callback==='function'){this.updateCallback=callback;}else{throw new Error("Function attempted to set as colorPicker update callback is not a function.");}}/**
	       * the callback is executed on apply and save. Bind it to the application
	       * @param callback
	       */},{key:'setCloseCallback',value:function setCloseCallback(callback){if(typeof callback==='function'){this.closeCallback=callback;}else{throw new Error("Function attempted to set as colorPicker closing callback is not a function.");}}},{key:'_isColorString',value:function _isColorString(color){var htmlColors={black:'#000000',navy:'#000080',darkblue:'#00008B',mediumblue:'#0000CD',blue:'#0000FF',darkgreen:'#006400',green:'#008000',teal:'#008080',darkcyan:'#008B8B',deepskyblue:'#00BFFF',darkturquoise:'#00CED1',mediumspringgreen:'#00FA9A',lime:'#00FF00',springgreen:'#00FF7F',aqua:'#00FFFF',cyan:'#00FFFF',midnightblue:'#191970',dodgerblue:'#1E90FF',lightseagreen:'#20B2AA',forestgreen:'#228B22',seagreen:'#2E8B57',darkslategray:'#2F4F4F',limegreen:'#32CD32',mediumseagreen:'#3CB371',turquoise:'#40E0D0',royalblue:'#4169E1',steelblue:'#4682B4',darkslateblue:'#483D8B',mediumturquoise:'#48D1CC',indigo:'#4B0082',darkolivegreen:'#556B2F',cadetblue:'#5F9EA0',cornflowerblue:'#6495ED',mediumaquamarine:'#66CDAA',dimgray:'#696969',slateblue:'#6A5ACD',olivedrab:'#6B8E23',slategray:'#708090',lightslategray:'#778899',mediumslateblue:'#7B68EE',lawngreen:'#7CFC00',chartreuse:'#7FFF00',aquamarine:'#7FFFD4',maroon:'#800000',purple:'#800080',olive:'#808000',gray:'#808080',skyblue:'#87CEEB',lightskyblue:'#87CEFA',blueviolet:'#8A2BE2',darkred:'#8B0000',darkmagenta:'#8B008B',saddlebrown:'#8B4513',darkseagreen:'#8FBC8F',lightgreen:'#90EE90',mediumpurple:'#9370D8',darkviolet:'#9400D3',palegreen:'#98FB98',darkorchid:'#9932CC',yellowgreen:'#9ACD32',sienna:'#A0522D',brown:'#A52A2A',darkgray:'#A9A9A9',lightblue:'#ADD8E6',greenyellow:'#ADFF2F',paleturquoise:'#AFEEEE',lightsteelblue:'#B0C4DE',powderblue:'#B0E0E6',firebrick:'#B22222',darkgoldenrod:'#B8860B',mediumorchid:'#BA55D3',rosybrown:'#BC8F8F',darkkhaki:'#BDB76B',silver:'#C0C0C0',mediumvioletred:'#C71585',indianred:'#CD5C5C',peru:'#CD853F',chocolate:'#D2691E',tan:'#D2B48C',lightgrey:'#D3D3D3',palevioletred:'#D87093',thistle:'#D8BFD8',orchid:'#DA70D6',goldenrod:'#DAA520',crimson:'#DC143C',gainsboro:'#DCDCDC',plum:'#DDA0DD',burlywood:'#DEB887',lightcyan:'#E0FFFF',lavender:'#E6E6FA',darksalmon:'#E9967A',violet:'#EE82EE',palegoldenrod:'#EEE8AA',lightcoral:'#F08080',khaki:'#F0E68C',aliceblue:'#F0F8FF',honeydew:'#F0FFF0',azure:'#F0FFFF',sandybrown:'#F4A460',wheat:'#F5DEB3',beige:'#F5F5DC',whitesmoke:'#F5F5F5',mintcream:'#F5FFFA',ghostwhite:'#F8F8FF',salmon:'#FA8072',antiquewhite:'#FAEBD7',linen:'#FAF0E6',lightgoldenrodyellow:'#FAFAD2',oldlace:'#FDF5E6',red:'#FF0000',fuchsia:'#FF00FF',magenta:'#FF00FF',deeppink:'#FF1493',orangered:'#FF4500',tomato:'#FF6347',hotpink:'#FF69B4',coral:'#FF7F50',darkorange:'#FF8C00',lightsalmon:'#FFA07A',orange:'#FFA500',lightpink:'#FFB6C1',pink:'#FFC0CB',gold:'#FFD700',peachpuff:'#FFDAB9',navajowhite:'#FFDEAD',moccasin:'#FFE4B5',bisque:'#FFE4C4',mistyrose:'#FFE4E1',blanchedalmond:'#FFEBCD',papayawhip:'#FFEFD5',lavenderblush:'#FFF0F5',seashell:'#FFF5EE',cornsilk:'#FFF8DC',lemonchiffon:'#FFFACD',floralwhite:'#FFFAF0',snow:'#FFFAFA',yellow:'#FFFF00',lightyellow:'#FFFFE0',ivory:'#FFFFF0',white:'#FFFFFF'};if(typeof color==='string'){return htmlColors[color];}}/**
	       * Set the color of the colorPicker
	       * Supported formats:
	       * 'red'                   --> HTML color string
	       * '#ffffff'               --> hex string
	       * 'rbg(255,255,255)'      --> rgb string
	       * 'rgba(255,255,255,1.0)' --> rgba string
	       * {r:255,g:255,b:255}     --> rgb object
	       * {r:255,g:255,b:255,a:1.0} --> rgba object
	       * @param color
	       * @param setInitial
	       */},{key:'setColor',value:function setColor(color){var setInitial=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(color==='none'){return;}var rgba=void 0;// if a html color shorthand is used, convert to hex
	var htmlColor=this._isColorString(color);if(htmlColor!==undefined){color=htmlColor;}// check format
	if(util.isString(color)===true){if(util.isValidRGB(color)===true){var rgbaArray=color.substr(4).substr(0,color.length-5).split(',');rgba={r:rgbaArray[0],g:rgbaArray[1],b:rgbaArray[2],a:1.0};}else if(util.isValidRGBA(color)===true){var _rgbaArray=color.substr(5).substr(0,color.length-6).split(',');rgba={r:_rgbaArray[0],g:_rgbaArray[1],b:_rgbaArray[2],a:_rgbaArray[3]};}else if(util.isValidHex(color)===true){var rgbObj=util.hexToRGB(color);rgba={r:rgbObj.r,g:rgbObj.g,b:rgbObj.b,a:1.0};}}else{if(color instanceof Object){if(color.r!==undefined&&color.g!==undefined&&color.b!==undefined){var alpha=color.a!==undefined?color.a:'1.0';rgba={r:color.r,g:color.g,b:color.b,a:alpha};}}}// set color
	if(rgba===undefined){throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: "+JSON.stringify(color));}else{this._setColor(rgba,setInitial);}}/**
	       * this shows the color picker.
	       * The hue circle is constructed once and stored.
	       */},{key:'show',value:function show(){if(this.closeCallback!==undefined){this.closeCallback();this.closeCallback=undefined;}this.applied=false;this.frame.style.display='block';this._generateHueCircle();}// ------------------------------------------ PRIVATE ----------------------------- //
	/**
	       * Hide the picker. Is called by the cancel button.
	       * Optional boolean to store the previous color for easy access later on.
	       * @param storePrevious
	       * @private
	       */},{key:'_hide',value:function _hide(){var _this=this;var storePrevious=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;// store the previous color for next time;
	if(storePrevious===true){this.previousColor=util.extend({},this.color);}if(this.applied===true){this.updateCallback(this.initialColor);}this.frame.style.display='none';// call the closing callback, restoring the onclick method.
	// this is in a setTimeout because it will trigger the show again before the click is done.
	setTimeout(function(){if(_this.closeCallback!==undefined){_this.closeCallback();_this.closeCallback=undefined;}},0);}/**
	       * bound to the save button. Saves and hides.
	       * @private
	       */},{key:'_save',value:function _save(){this.updateCallback(this.color);this.applied=false;this._hide();}/**
	       * Bound to apply button. Saves but does not close. Is undone by the cancel button.
	       * @private
	       */},{key:'_apply',value:function _apply(){this.applied=true;this.updateCallback(this.color);this._updatePicker(this.color);}/**
	       * load the color from the previous session.
	       * @private
	       */},{key:'_loadLast',value:function _loadLast(){if(this.previousColor!==undefined){this.setColor(this.previousColor,false);}else{alert("There is no last color to load...");}}/**
	       * set the color, place the picker
	       * @param rgba
	       * @param setInitial
	       * @private
	       */},{key:'_setColor',value:function _setColor(rgba){var setInitial=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;// store the initial color
	if(setInitial===true){this.initialColor=util.extend({},rgba);}this.color=rgba;var hsv=util.RGBToHSV(rgba.r,rgba.g,rgba.b);var angleConvert=2*Math.PI;var radius=this.r*hsv.s;var x=this.centerCoordinates.x+radius*Math.sin(angleConvert*hsv.h);var y=this.centerCoordinates.y+radius*Math.cos(angleConvert*hsv.h);this.colorPickerSelector.style.left=x-0.5*this.colorPickerSelector.clientWidth+'px';this.colorPickerSelector.style.top=y-0.5*this.colorPickerSelector.clientHeight+'px';this._updatePicker(rgba);}/**
	       * bound to opacity control
	       * @param value
	       * @private
	       */},{key:'_setOpacity',value:function _setOpacity(value){this.color.a=value/100;this._updatePicker(this.color);}/**
	       * bound to brightness control
	       * @param value
	       * @private
	       */},{key:'_setBrightness',value:function _setBrightness(value){var hsv=util.RGBToHSV(this.color.r,this.color.g,this.color.b);hsv.v=value/100;var rgba=util.HSVToRGB(hsv.h,hsv.s,hsv.v);rgba['a']=this.color.a;this.color=rgba;this._updatePicker();}/**
	       * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
	       * @param rgba
	       * @private
	       */},{key:'_updatePicker',value:function _updatePicker(){var rgba=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.color;var hsv=util.RGBToHSV(rgba.r,rgba.g,rgba.b);var ctx=this.colorPickerCanvas.getContext('2d');if(this.pixelRation===undefined){this.pixelRatio=(window.devicePixelRatio||1)/(ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1);}ctx.setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0);// clear the canvas
	var w=this.colorPickerCanvas.clientWidth;var h=this.colorPickerCanvas.clientHeight;ctx.clearRect(0,0,w,h);ctx.putImageData(this.hueCircle,0,0);ctx.fillStyle='rgba(0,0,0,'+(1-hsv.v)+')';ctx.circle(this.centerCoordinates.x,this.centerCoordinates.y,this.r);ctx.fill();this.brightnessRange.value=100*hsv.v;this.opacityRange.value=100*rgba.a;this.initialColorDiv.style.backgroundColor='rgba('+this.initialColor.r+','+this.initialColor.g+','+this.initialColor.b+','+this.initialColor.a+')';this.newColorDiv.style.backgroundColor='rgba('+this.color.r+','+this.color.g+','+this.color.b+','+this.color.a+')';}/**
	       * used by create to set the size of the canvas.
	       * @private
	       */},{key:'_setSize',value:function _setSize(){this.colorPickerCanvas.style.width='100%';this.colorPickerCanvas.style.height='100%';this.colorPickerCanvas.width=289*this.pixelRatio;this.colorPickerCanvas.height=289*this.pixelRatio;}/**
	       * create all dom elements
	       * TODO: cleanup, lots of similar dom elements
	       * @private
	       */},{key:'_create',value:function _create(){this.frame=document.createElement('div');this.frame.className='vis-color-picker';this.colorPickerDiv=document.createElement('div');this.colorPickerSelector=document.createElement('div');this.colorPickerSelector.className='vis-selector';this.colorPickerDiv.appendChild(this.colorPickerSelector);this.colorPickerCanvas=document.createElement('canvas');this.colorPickerDiv.appendChild(this.colorPickerCanvas);if(!this.colorPickerCanvas.getContext){var noCanvas=document.createElement('DIV');noCanvas.style.color='red';noCanvas.style.fontWeight='bold';noCanvas.style.padding='10px';noCanvas.innerHTML='Error: your browser does not support HTML canvas';this.colorPickerCanvas.appendChild(noCanvas);}else{var ctx=this.colorPickerCanvas.getContext("2d");this.pixelRatio=(window.devicePixelRatio||1)/(ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1);this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0);}this.colorPickerDiv.className='vis-color';this.opacityDiv=document.createElement('div');this.opacityDiv.className='vis-opacity';this.brightnessDiv=document.createElement('div');this.brightnessDiv.className='vis-brightness';this.arrowDiv=document.createElement('div');this.arrowDiv.className='vis-arrow';this.opacityRange=document.createElement('input');try{this.opacityRange.type='range';// Not supported on IE9
	this.opacityRange.min='0';this.opacityRange.max='100';}catch(err){}this.opacityRange.value='100';this.opacityRange.className='vis-range';this.brightnessRange=document.createElement('input');try{this.brightnessRange.type='range';// Not supported on IE9
	this.brightnessRange.min='0';this.brightnessRange.max='100';}catch(err){}this.brightnessRange.value='100';this.brightnessRange.className='vis-range';this.opacityDiv.appendChild(this.opacityRange);this.brightnessDiv.appendChild(this.brightnessRange);var me=this;this.opacityRange.onchange=function(){me._setOpacity(this.value);};this.opacityRange.oninput=function(){me._setOpacity(this.value);};this.brightnessRange.onchange=function(){me._setBrightness(this.value);};this.brightnessRange.oninput=function(){me._setBrightness(this.value);};this.brightnessLabel=document.createElement("div");this.brightnessLabel.className="vis-label vis-brightness";this.brightnessLabel.innerHTML='brightness:';this.opacityLabel=document.createElement("div");this.opacityLabel.className="vis-label vis-opacity";this.opacityLabel.innerHTML='opacity:';this.newColorDiv=document.createElement("div");this.newColorDiv.className="vis-new-color";this.newColorDiv.innerHTML='new';this.initialColorDiv=document.createElement("div");this.initialColorDiv.className="vis-initial-color";this.initialColorDiv.innerHTML='initial';this.cancelButton=document.createElement("div");this.cancelButton.className="vis-button vis-cancel";this.cancelButton.innerHTML='cancel';this.cancelButton.onclick=this._hide.bind(this,false);this.applyButton=document.createElement("div");this.applyButton.className="vis-button vis-apply";this.applyButton.innerHTML='apply';this.applyButton.onclick=this._apply.bind(this);this.saveButton=document.createElement("div");this.saveButton.className="vis-button vis-save";this.saveButton.innerHTML='save';this.saveButton.onclick=this._save.bind(this);this.loadButton=document.createElement("div");this.loadButton.className="vis-button vis-load";this.loadButton.innerHTML='load last';this.loadButton.onclick=this._loadLast.bind(this);this.frame.appendChild(this.colorPickerDiv);this.frame.appendChild(this.arrowDiv);this.frame.appendChild(this.brightnessLabel);this.frame.appendChild(this.brightnessDiv);this.frame.appendChild(this.opacityLabel);this.frame.appendChild(this.opacityDiv);this.frame.appendChild(this.newColorDiv);this.frame.appendChild(this.initialColorDiv);this.frame.appendChild(this.cancelButton);this.frame.appendChild(this.applyButton);this.frame.appendChild(this.saveButton);this.frame.appendChild(this.loadButton);}/**
	       * bind hammer to the color picker
	       * @private
	       */},{key:'_bindHammer',value:function _bindHammer(){var _this2=this;this.drag={};this.pinch={};this.hammer=new Hammer(this.colorPickerCanvas);this.hammer.get('pinch').set({enable:true});hammerUtil.onTouch(this.hammer,function(event){_this2._moveSelector(event);});this.hammer.on('tap',function(event){_this2._moveSelector(event);});this.hammer.on('panstart',function(event){_this2._moveSelector(event);});this.hammer.on('panmove',function(event){_this2._moveSelector(event);});this.hammer.on('panend',function(event){_this2._moveSelector(event);});}/**
	       * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
	       * @private
	       */},{key:'_generateHueCircle',value:function _generateHueCircle(){if(this.generated===false){var ctx=this.colorPickerCanvas.getContext('2d');if(this.pixelRation===undefined){this.pixelRatio=(window.devicePixelRatio||1)/(ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1);}ctx.setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0);// clear the canvas
	var w=this.colorPickerCanvas.clientWidth;var h=this.colorPickerCanvas.clientHeight;ctx.clearRect(0,0,w,h);// draw hue circle
	var x=void 0,y=void 0,hue=void 0,sat=void 0;this.centerCoordinates={x:w*0.5,y:h*0.5};this.r=0.49*w;var angleConvert=2*Math.PI/360;var hfac=1/360;var sfac=1/this.r;var rgb=void 0;for(hue=0;hue<360;hue++){for(sat=0;sat<this.r;sat++){x=this.centerCoordinates.x+sat*Math.sin(angleConvert*hue);y=this.centerCoordinates.y+sat*Math.cos(angleConvert*hue);rgb=util.HSVToRGB(hue*hfac,sat*sfac,1);ctx.fillStyle='rgb('+rgb.r+','+rgb.g+','+rgb.b+')';ctx.fillRect(x-0.5,y-0.5,2,2);}}ctx.strokeStyle='rgba(0,0,0,1)';ctx.circle(this.centerCoordinates.x,this.centerCoordinates.y,this.r);ctx.stroke();this.hueCircle=ctx.getImageData(0,0,w,h);}this.generated=true;}/**
	       * move the selector. This is called by hammer functions.
	       *
	       * @param event
	       * @private
	       */},{key:'_moveSelector',value:function _moveSelector(event){var rect=this.colorPickerDiv.getBoundingClientRect();var left=event.center.x-rect.left;var top=event.center.y-rect.top;var centerY=0.5*this.colorPickerDiv.clientHeight;var centerX=0.5*this.colorPickerDiv.clientWidth;var x=left-centerX;var y=top-centerY;var angle=Math.atan2(x,y);var radius=0.98*Math.min(Math.sqrt(x*x+y*y),centerX);var newTop=Math.cos(angle)*radius+centerY;var newLeft=Math.sin(angle)*radius+centerX;this.colorPickerSelector.style.top=newTop-0.5*this.colorPickerSelector.clientHeight+'px';this.colorPickerSelector.style.left=newLeft-0.5*this.colorPickerSelector.clientWidth+'px';// set color
	var h=angle/(2*Math.PI);h=h<0?h+1:h;var s=radius/this.r;var hsv=util.RGBToHSV(this.color.r,this.color.g,this.color.b);hsv.h=h;hsv.s=s;var rgba=util.HSVToRGB(hsv.h,hsv.s,hsv.v);rgba['a']=this.color.a;this.color=rgba;// update previews
	this.initialColorDiv.style.backgroundColor='rgba('+this.initialColor.r+','+this.initialColor.g+','+this.initialColor.b+','+this.initialColor.a+')';this.newColorDiv.style.backgroundColor='rgba('+this.color.r+','+this.color.g+','+this.color.b+','+this.color.a+')';}}]);return ColorPicker;}();exports.default=ColorPicker;/***/},/* 30 *//***/function(module,exports,__webpack_require__){'use strict';var Hammer=__webpack_require__(22);/**
	   * Register a touch event, taking place before a gesture
	   * @param {Hammer} hammer       A hammer instance
	   * @param {function} callback   Callback, called as callback(event)
	   */exports.onTouch=function(hammer,callback){callback.inputHandler=function(event){if(event.isFirst){callback(event);}};hammer.on('hammer.input',callback.inputHandler);};/**
	   * Register a release event, taking place after a gesture
	   * @param {Hammer} hammer       A hammer instance
	   * @param {function} callback   Callback, called as callback(event)
	   */exports.onRelease=function(hammer,callback){callback.inputHandler=function(event){if(event.isFinal){callback(event);}};return hammer.on('hammer.input',callback.inputHandler);};/**
	   * Unregister a touch event, taking place before a gesture
	   * @param {Hammer} hammer       A hammer instance
	   * @param {function} callback   Callback, called as callback(event)
	   */exports.offTouch=function(hammer,callback){hammer.off('hammer.input',callback.inputHandler);};/**
	   * Unregister a release event, taking place before a gesture
	   * @param {Hammer} hammer       A hammer instance
	   * @param {function} callback   Callback, called as callback(event)
	   */exports.offRelease=exports.offTouch;/**
	   * Hack the PinchRecognizer such that it doesn't prevent default behavior
	   * for vertical panning.
	   *
	   * Yeah ... this is quite a hack ... see https://github.com/hammerjs/hammer.js/issues/932
	   *
	   * @param {Hammer.Pinch} pinchRecognizer
	   * @return {Hammer.Pinch} returns the pinchRecognizer
	   */exports.disablePreventDefaultVertically=function(pinchRecognizer){var TOUCH_ACTION_PAN_Y='pan-y';pinchRecognizer.getTouchAction=function(){// default method returns [TOUCH_ACTION_NONE]
	return[TOUCH_ACTION_PAN_Y];};return pinchRecognizer;};/***/},/* 31 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var errorFound=false;var allOptions=void 0;var printStyle='background: #FFeeee; color: #dd0000';/**
	   *  Used to validate options.
	   */var Validator=function(){function Validator(){_classCallCheck(this,Validator);}/**
	     * Main function to be called
	     * @param options
	     * @param subObject
	     * @returns {boolean}
	     */_createClass(Validator,null,[{key:'validate',value:function validate(options,referenceOptions,subObject){errorFound=false;allOptions=referenceOptions;var usedOptions=referenceOptions;if(subObject!==undefined){usedOptions=referenceOptions[subObject];}Validator.parse(options,usedOptions,[]);return errorFound;}/**
	       * Will traverse an object recursively and check every value
	       * @param options
	       * @param referenceOptions
	       * @param path
	       */},{key:'parse',value:function parse(options,referenceOptions,path){for(var option in options){if(options.hasOwnProperty(option)){Validator.check(option,options,referenceOptions,path);}}}/**
	       * Check every value. If the value is an object, call the parse function on that object.
	       * @param option
	       * @param options
	       * @param referenceOptions
	       * @param path
	       */},{key:'check',value:function check(option,options,referenceOptions,path){if(referenceOptions[option]===undefined&&referenceOptions.__any__===undefined){Validator.getSuggestion(option,referenceOptions,path);}else if(referenceOptions[option]===undefined&&referenceOptions.__any__!==undefined){// __any__ is a wildcard. Any value is accepted and will be further analysed by reference.
	if(Validator.getType(options[option])==='object'&&referenceOptions['__any__'].__type__!==undefined){// if the any subgroup is not a predefined object int he configurator we do not look deeper into the object.
	Validator.checkFields(option,options,referenceOptions,'__any__',referenceOptions['__any__'].__type__,path);}else{Validator.checkFields(option,options,referenceOptions,'__any__',referenceOptions['__any__'],path);}}else{// Since all options in the reference are objects, we can check whether they are supposed to be object to look for the __type__ field.
	if(referenceOptions[option].__type__!==undefined){// if this should be an object, we check if the correct type has been supplied to account for shorthand options.
	Validator.checkFields(option,options,referenceOptions,option,referenceOptions[option].__type__,path);}else{Validator.checkFields(option,options,referenceOptions,option,referenceOptions[option],path);}}}/**
	       *
	       * @param {String}  option     | the option property
	       * @param {Object}  options    | The supplied options object
	       * @param {Object}  referenceOptions    | The reference options containing all options and their allowed formats
	       * @param {String}  referenceOption     | Usually this is the same as option, except when handling an __any__ tag.
	       * @param {String}  refOptionType       | This is the type object from the reference options
	       * @param {Array}   path      | where in the object is the option
	       */},{key:'checkFields',value:function checkFields(option,options,referenceOptions,referenceOption,refOptionObj,path){var optionType=Validator.getType(options[option]);var refOptionType=refOptionObj[optionType];if(refOptionType!==undefined){// if the type is correct, we check if it is supposed to be one of a few select values
	if(Validator.getType(refOptionType)==='array'){if(refOptionType.indexOf(options[option])===-1){console.log('%cInvalid option detected in "'+option+'".'+' Allowed values are:'+Validator.print(refOptionType)+' not "'+options[option]+'". '+Validator.printLocation(path,option),printStyle);errorFound=true;}else if(optionType==='object'&&referenceOption!=="__any__"){path=util.copyAndExtendArray(path,option);Validator.parse(options[option],referenceOptions[referenceOption],path);}}else if(optionType==='object'&&referenceOption!=="__any__"){path=util.copyAndExtendArray(path,option);Validator.parse(options[option],referenceOptions[referenceOption],path);}}else if(refOptionObj['any']===undefined){// type of the field is incorrect and the field cannot be any
	console.log('%cInvalid type received for "'+option+'". Expected: '+Validator.print(Object.keys(refOptionObj))+'. Received ['+optionType+'] "'+options[option]+'"'+Validator.printLocation(path,option),printStyle);errorFound=true;}}},{key:'getType',value:function getType(object){var type=typeof object==='undefined'?'undefined':_typeof(object);if(type==='object'){if(object===null){return'null';}if(object instanceof Boolean){return'boolean';}if(object instanceof Number){return'number';}if(object instanceof String){return'string';}if(Array.isArray(object)){return'array';}if(object instanceof Date){return'date';}if(object.nodeType!==undefined){return'dom';}if(object._isAMomentObject===true){return'moment';}return'object';}else if(type==='number'){return'number';}else if(type==='boolean'){return'boolean';}else if(type==='string'){return'string';}else if(type===undefined){return'undefined';}return type;}},{key:'getSuggestion',value:function getSuggestion(option,options,path){var localSearch=Validator.findInOptions(option,options,path,false);var globalSearch=Validator.findInOptions(option,allOptions,[],true);var localSearchThreshold=8;var globalSearchThreshold=4;if(localSearch.indexMatch!==undefined){console.log('%cUnknown option detected: "'+option+'" in '+Validator.printLocation(localSearch.path,option,'')+'Perhaps it was incomplete? Did you mean: "'+localSearch.indexMatch+'"?\n\n',printStyle);}else if(globalSearch.distance<=globalSearchThreshold&&localSearch.distance>globalSearch.distance){console.log('%cUnknown option detected: "'+option+'" in '+Validator.printLocation(localSearch.path,option,'')+'Perhaps it was misplaced? Matching option found at: '+Validator.printLocation(globalSearch.path,globalSearch.closestMatch,''),printStyle);}else if(localSearch.distance<=localSearchThreshold){console.log('%cUnknown option detected: "'+option+'". Did you mean "'+localSearch.closestMatch+'"?'+Validator.printLocation(localSearch.path,option),printStyle);}else{console.log('%cUnknown option detected: "'+option+'". Did you mean one of these: '+Validator.print(Object.keys(options))+Validator.printLocation(path,option),printStyle);}errorFound=true;}/**
	       * traverse the options in search for a match.
	       * @param option
	       * @param options
	       * @param path
	       * @param recursive
	       * @returns {{closestMatch: string, path: Array, distance: number}}
	       */},{key:'findInOptions',value:function findInOptions(option,options,path){var recursive=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var min=1e9;var closestMatch='';var closestMatchPath=[];var lowerCaseOption=option.toLowerCase();var indexMatch=undefined;for(var op in options){var distance=void 0;if(options[op].__type__!==undefined&&recursive===true){var result=Validator.findInOptions(option,options[op],util.copyAndExtendArray(path,op));if(min>result.distance){closestMatch=result.closestMatch;closestMatchPath=result.path;min=result.distance;indexMatch=result.indexMatch;}}else{if(op.toLowerCase().indexOf(lowerCaseOption)!==-1){indexMatch=op;}distance=Validator.levenshteinDistance(option,op);if(min>distance){closestMatch=op;closestMatchPath=util.copyArray(path);min=distance;}}}return{closestMatch:closestMatch,path:closestMatchPath,distance:min,indexMatch:indexMatch};}},{key:'printLocation',value:function printLocation(path,option){var prefix=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'Problem value found at: \n';var str='\n\n'+prefix+'options = {\n';for(var i=0;i<path.length;i++){for(var j=0;j<i+1;j++){str+='  ';}str+=path[i]+': {\n';}for(var _j=0;_j<path.length+1;_j++){str+='  ';}str+=option+'\n';for(var _i=0;_i<path.length+1;_i++){for(var _j2=0;_j2<path.length-_i;_j2++){str+='  ';}str+='}\n';}return str+'\n\n';}},{key:'print',value:function print(options){return JSON.stringify(options).replace(/(\")|(\[)|(\])|(,"__type__")/g,"").replace(/(\,)/g,', ');}// Compute the edit distance between the two given strings
	// http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
	/*
	       Copyright (c) 2011 Andrei Mackenzie
	        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
	        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
	        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	       */},{key:'levenshteinDistance',value:function levenshteinDistance(a,b){if(a.length===0)return b.length;if(b.length===0)return a.length;var matrix=[];// increment along the first column of each row
	var i;for(i=0;i<=b.length;i++){matrix[i]=[i];}// increment each column in the first row
	var j;for(j=0;j<=a.length;j++){matrix[0][j]=j;}// Fill in the rest of the matrix
	for(i=1;i<=b.length;i++){for(j=1;j<=a.length;j++){if(b.charAt(i-1)==a.charAt(j-1)){matrix[i][j]=matrix[i-1][j-1];}else{matrix[i][j]=Math.min(matrix[i-1][j-1]+1,// substitution
	Math.min(matrix[i][j-1]+1,// insertion
	matrix[i-1][j]+1));// deletion
	}}}return matrix[b.length][a.length];}}]);return Validator;}();exports.default=Validator;exports.printStyle=printStyle;/***/},/* 32 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var util=__webpack_require__(1);var hammerUtil=__webpack_require__(30);var moment=__webpack_require__(2);var Component=__webpack_require__(33);var DateUtil=__webpack_require__(34);/**
	   * @constructor Range
	   * A Range controls a numeric range with a start and end value.
	   * The Range adjusts the range based on mouse events or programmatic changes,
	   * and triggers events when the range is changing or has been changed.
	   * @param {{dom: Object, domProps: Object, emitter: Emitter}} body
	   * @param {Object} [options]    See description at Range.setOptions
	   */function Range(body,options){var now=moment().hours(0).minutes(0).seconds(0).milliseconds(0);this.start=now.clone().add(-3,'days').valueOf();// Number
	this.end=now.clone().add(4,'days').valueOf();// Number
	this.body=body;this.deltaDifference=0;this.scaleOffset=0;this.startToFront=false;this.endToFront=true;// default options
	this.defaultOptions={rtl:false,start:null,end:null,moment:moment,direction:'horizontal',// 'horizontal' or 'vertical'
	moveable:true,zoomable:true,min:null,max:null,zoomMin:10,// milliseconds
	zoomMax:1000*60*60*24*365*10000// milliseconds
	};this.options=util.extend({},this.defaultOptions);this.props={touch:{}};this.animationTimer=null;// drag listeners for dragging
	this.body.emitter.on('panstart',this._onDragStart.bind(this));this.body.emitter.on('panmove',this._onDrag.bind(this));this.body.emitter.on('panend',this._onDragEnd.bind(this));// mouse wheel for zooming
	this.body.emitter.on('mousewheel',this._onMouseWheel.bind(this));// pinch to zoom
	this.body.emitter.on('touch',this._onTouch.bind(this));this.body.emitter.on('pinch',this._onPinch.bind(this));this.setOptions(options);}Range.prototype=new Component();/**
	   * Set options for the range controller
	   * @param {Object} options      Available options:
	   *                              {Number | Date | String} start  Start date for the range
	   *                              {Number | Date | String} end    End date for the range
	   *                              {Number} min    Minimum value for start
	   *                              {Number} max    Maximum value for end
	   *                              {Number} zoomMin    Set a minimum value for
	   *                                                  (end - start).
	   *                              {Number} zoomMax    Set a maximum value for
	   *                                                  (end - start).
	   *                              {Boolean} moveable Enable moving of the range
	   *                                                 by dragging. True by default
	   *                              {Boolean} zoomable Enable zooming of the range
	   *                                                 by pinching/scrolling. True by default
	   */Range.prototype.setOptions=function(options){if(options){// copy the options that we know
	var fields=['direction','min','max','zoomMin','zoomMax','moveable','zoomable','moment','activate','hiddenDates','zoomKey','rtl','horizontalScroll'];util.selectiveExtend(fields,this.options,options);if('start'in options||'end'in options){// apply a new range. both start and end are optional
	this.setRange(options.start,options.end);}}};/**
	   * Test whether direction has a valid value
	   * @param {String} direction    'horizontal' or 'vertical'
	   */function validateDirection(direction){if(direction!='horizontal'&&direction!='vertical'){throw new TypeError('Unknown direction "'+direction+'". '+'Choose "horizontal" or "vertical".');}}/**
	   * Set a new start and end range
	   * @param {Date | Number | String} [start]
	   * @param {Date | Number | String} [end]
	   * @param {boolean | {duration: number, easingFunction: string}} [animation=false]
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   * @param {Boolean} [byUser=false]
	   *
	   */Range.prototype.setRange=function(start,end,animation,byUser){if(byUser!==true){byUser=false;}var finalStart=start!=undefined?util.convert(start,'Date').valueOf():null;var finalEnd=end!=undefined?util.convert(end,'Date').valueOf():null;this._cancelAnimation();if(animation){// true or an Object
	var me=this;var initStart=this.start;var initEnd=this.end;var duration=(typeof animation==='undefined'?'undefined':_typeof(animation))==='object'&&'duration'in animation?animation.duration:500;var easingName=(typeof animation==='undefined'?'undefined':_typeof(animation))==='object'&&'easingFunction'in animation?animation.easingFunction:'easeInOutQuad';var easingFunction=util.easingFunctions[easingName];if(!easingFunction){throw new Error('Unknown easing function '+JSON.stringify(easingName)+'. '+'Choose from: '+Object.keys(util.easingFunctions).join(', '));}var initTime=new Date().valueOf();var anyChanged=false;var next=function next(){if(!me.props.touch.dragging){var now=new Date().valueOf();var time=now-initTime;var ease=easingFunction(time/duration);var done=time>duration;var s=done||finalStart===null?finalStart:initStart+(finalStart-initStart)*ease;var e=done||finalEnd===null?finalEnd:initEnd+(finalEnd-initEnd)*ease;changed=me._applyRange(s,e);DateUtil.updateHiddenDates(me.options.moment,me.body,me.options.hiddenDates);anyChanged=anyChanged||changed;if(changed){me.body.emitter.emit('rangechange',{start:new Date(me.start),end:new Date(me.end),byUser:byUser});}if(done){if(anyChanged){me.body.emitter.emit('rangechanged',{start:new Date(me.start),end:new Date(me.end),byUser:byUser});}}else{// animate with as high as possible frame rate, leave 20 ms in between
	// each to prevent the browser from blocking
	me.animationTimer=setTimeout(next,20);}}};return next();}else{var changed=this._applyRange(finalStart,finalEnd);DateUtil.updateHiddenDates(this.options.moment,this.body,this.options.hiddenDates);if(changed){var params={start:new Date(this.start),end:new Date(this.end),byUser:byUser};this.body.emitter.emit('rangechange',params);this.body.emitter.emit('rangechanged',params);}}};/**
	   * Stop an animation
	   * @private
	   */Range.prototype._cancelAnimation=function(){if(this.animationTimer){clearTimeout(this.animationTimer);this.animationTimer=null;}};/**
	   * Set a new start and end range. This method is the same as setRange, but
	   * does not trigger a range change and range changed event, and it returns
	   * true when the range is changed
	   * @param {Number} [start]
	   * @param {Number} [end]
	   * @return {Boolean} changed
	   * @private
	   */Range.prototype._applyRange=function(start,end){var newStart=start!=null?util.convert(start,'Date').valueOf():this.start,newEnd=end!=null?util.convert(end,'Date').valueOf():this.end,max=this.options.max!=null?util.convert(this.options.max,'Date').valueOf():null,min=this.options.min!=null?util.convert(this.options.min,'Date').valueOf():null,diff;// check for valid number
	if(isNaN(newStart)||newStart===null){throw new Error('Invalid start "'+start+'"');}if(isNaN(newEnd)||newEnd===null){throw new Error('Invalid end "'+end+'"');}// prevent start < end
	if(newEnd<newStart){newEnd=newStart;}// prevent start < min
	if(min!==null){if(newStart<min){diff=min-newStart;newStart+=diff;newEnd+=diff;// prevent end > max
	if(max!=null){if(newEnd>max){newEnd=max;}}}}// prevent end > max
	if(max!==null){if(newEnd>max){diff=newEnd-max;newStart-=diff;newEnd-=diff;// prevent start < min
	if(min!=null){if(newStart<min){newStart=min;}}}}// prevent (end-start) < zoomMin
	if(this.options.zoomMin!==null){var zoomMin=parseFloat(this.options.zoomMin);if(zoomMin<0){zoomMin=0;}if(newEnd-newStart<zoomMin){if(this.end-this.start===zoomMin&&newStart>this.start&&newEnd<this.end){// ignore this action, we are already zoomed to the minimum
	newStart=this.start;newEnd=this.end;}else{// zoom to the minimum
	diff=zoomMin-(newEnd-newStart);newStart-=diff/2;newEnd+=diff/2;}}}// prevent (end-start) > zoomMax
	if(this.options.zoomMax!==null){var zoomMax=parseFloat(this.options.zoomMax);if(zoomMax<0){zoomMax=0;}if(newEnd-newStart>zoomMax){if(this.end-this.start===zoomMax&&newStart<this.start&&newEnd>this.end){// ignore this action, we are already zoomed to the maximum
	newStart=this.start;newEnd=this.end;}else{// zoom to the maximum
	diff=newEnd-newStart-zoomMax;newStart+=diff/2;newEnd-=diff/2;}}}var changed=this.start!=newStart||this.end!=newEnd;// if the new range does NOT overlap with the old range, emit checkRangedItems to avoid not showing ranged items (ranged meaning has end time, not necessarily of type Range)
	if(!(newStart>=this.start&&newStart<=this.end||newEnd>=this.start&&newEnd<=this.end)&&!(this.start>=newStart&&this.start<=newEnd||this.end>=newStart&&this.end<=newEnd)){this.body.emitter.emit('checkRangedItems');}this.start=newStart;this.end=newEnd;return changed;};/**
	   * Retrieve the current range.
	   * @return {Object} An object with start and end properties
	   */Range.prototype.getRange=function(){return{start:this.start,end:this.end};};/**
	   * Calculate the conversion offset and scale for current range, based on
	   * the provided width
	   * @param {Number} width
	   * @returns {{offset: number, scale: number}} conversion
	   */Range.prototype.conversion=function(width,totalHidden){return Range.conversion(this.start,this.end,width,totalHidden);};/**
	   * Static method to calculate the conversion offset and scale for a range,
	   * based on the provided start, end, and width
	   * @param {Number} start
	   * @param {Number} end
	   * @param {Number} width
	   * @returns {{offset: number, scale: number}} conversion
	   */Range.conversion=function(start,end,width,totalHidden){if(totalHidden===undefined){totalHidden=0;}if(width!=0&&end-start!=0){return{offset:start,scale:width/(end-start-totalHidden)};}else{return{offset:0,scale:1};}};/**
	   * Start dragging horizontally or vertically
	   * @param {Event} event
	   * @private
	   */Range.prototype._onDragStart=function(event){this.deltaDifference=0;this.previousDelta=0;// only allow dragging when configured as movable
	if(!this.options.moveable)return;// only start dragging when the mouse is inside the current range
	if(!this._isInsideRange(event))return;// refuse to drag when we where pinching to prevent the timeline make a jump
	// when releasing the fingers in opposite order from the touch screen
	if(!this.props.touch.allowDragging)return;this.props.touch.start=this.start;this.props.touch.end=this.end;this.props.touch.dragging=true;if(this.body.dom.root){this.body.dom.root.style.cursor='move';}};/**
	   * Perform dragging operation
	   * @param {Event} event
	   * @private
	   */Range.prototype._onDrag=function(event){if(!event)return;if(!this.props.touch.dragging)return;// only allow dragging when configured as movable
	if(!this.options.moveable)return;// TODO: this may be redundant in hammerjs2
	// refuse to drag when we where pinching to prevent the timeline make a jump
	// when releasing the fingers in opposite order from the touch screen
	if(!this.props.touch.allowDragging)return;var direction=this.options.direction;validateDirection(direction);var delta=direction=='horizontal'?event.deltaX:event.deltaY;delta-=this.deltaDifference;var interval=this.props.touch.end-this.props.touch.start;// normalize dragging speed if cutout is in between.
	var duration=DateUtil.getHiddenDurationBetween(this.body.hiddenDates,this.start,this.end);interval-=duration;var width=direction=='horizontal'?this.body.domProps.center.width:this.body.domProps.center.height;if(this.options.rtl){var diffRange=delta/width*interval;}else{var diffRange=-delta/width*interval;}var newStart=this.props.touch.start+diffRange;var newEnd=this.props.touch.end+diffRange;// snapping times away from hidden zones
	var safeStart=DateUtil.snapAwayFromHidden(this.body.hiddenDates,newStart,this.previousDelta-delta,true);var safeEnd=DateUtil.snapAwayFromHidden(this.body.hiddenDates,newEnd,this.previousDelta-delta,true);if(safeStart!=newStart||safeEnd!=newEnd){this.deltaDifference+=delta;this.props.touch.start=safeStart;this.props.touch.end=safeEnd;this._onDrag(event);return;}this.previousDelta=delta;this._applyRange(newStart,newEnd);var startDate=new Date(this.start);var endDate=new Date(this.end);// fire a rangechange event
	this.body.emitter.emit('rangechange',{start:startDate,end:endDate,byUser:true});// fire a panmove event
	this.body.emitter.emit('panmove');};/**
	   * Stop dragging operation
	   * @param {event} event
	   * @private
	   */Range.prototype._onDragEnd=function(event){if(!this.props.touch.dragging)return;// only allow dragging when configured as movable
	if(!this.options.moveable)return;// TODO: this may be redundant in hammerjs2
	// refuse to drag when we where pinching to prevent the timeline make a jump
	// when releasing the fingers in opposite order from the touch screen
	if(!this.props.touch.allowDragging)return;this.props.touch.dragging=false;if(this.body.dom.root){this.body.dom.root.style.cursor='auto';}// fire a rangechanged event
	this.body.emitter.emit('rangechanged',{start:new Date(this.start),end:new Date(this.end),byUser:true});};/**
	   * Event handler for mouse wheel event, used to zoom
	   * Code from http://adomas.org/javascript-mouse-wheel/
	   * @param {Event} event
	   * @private
	   */Range.prototype._onMouseWheel=function(event){// Prevent default actions caused by mouse wheel
	// (else the page and timeline both zoom and scroll)
	event.preventDefault();// retrieve delta
	var delta=0;if(event.wheelDelta){/* IE/Opera. */delta=event.wheelDelta/120;}else if(event.detail){/* Mozilla case. */// In Mozilla, sign of delta is different than in IE.
	// Also, delta is multiple of 3.
	delta=-event.detail/3;}// don't allow zoom when the according key is pressed and the zoomKey option or not zoomable but movable
	if(this.options.zoomKey&&!event[this.options.zoomKey]&&this.options.zoomable||!this.options.zoomable&&this.options.moveable){if(this.options.horizontalScroll){// calculate a single scroll jump relative to the range scale
	var diff=delta*(this.end-this.start)/20;// calculate new start and end
	var newStart=this.start-diff;var newEnd=this.end-diff;this.setRange(newStart,newEnd);}return;}// only allow zooming when configured as zoomable and moveable
	if(!(this.options.zoomable&&this.options.moveable))return;// only zoom when the mouse is inside the current range
	if(!this._isInsideRange(event))return;// If delta is nonzero, handle it.
	// Basically, delta is now positive if wheel was scrolled up,
	// and negative, if wheel was scrolled down.
	if(delta){// perform the zoom action. Delta is normally 1 or -1
	// adjust a negative delta such that zooming in with delta 0.1
	// equals zooming out with a delta -0.1
	var scale;if(delta<0){scale=1-delta/5;}else{scale=1/(1+delta/5);}// calculate center, the date to zoom around
	var pointer=this.getPointer({x:event.clientX,y:event.clientY},this.body.dom.center);var pointerDate=this._pointerToDate(pointer);this.zoom(scale,pointerDate,delta);}};/**
	   * Start of a touch gesture
	   * @private
	   */Range.prototype._onTouch=function(event){this.props.touch.start=this.start;this.props.touch.end=this.end;this.props.touch.allowDragging=true;this.props.touch.center=null;this.scaleOffset=0;this.deltaDifference=0;};/**
	   * Handle pinch event
	   * @param {Event} event
	   * @private
	   */Range.prototype._onPinch=function(event){// only allow zooming when configured as zoomable and moveable
	if(!(this.options.zoomable&&this.options.moveable))return;this.props.touch.allowDragging=false;if(!this.props.touch.center){this.props.touch.center=this.getPointer(event.center,this.body.dom.center);}var scale=1/(event.scale+this.scaleOffset);var centerDate=this._pointerToDate(this.props.touch.center);var hiddenDuration=DateUtil.getHiddenDurationBetween(this.body.hiddenDates,this.start,this.end);var hiddenDurationBefore=DateUtil.getHiddenDurationBefore(this.options.moment,this.body.hiddenDates,this,centerDate);var hiddenDurationAfter=hiddenDuration-hiddenDurationBefore;// calculate new start and end
	var newStart=centerDate-hiddenDurationBefore+(this.props.touch.start-(centerDate-hiddenDurationBefore))*scale;var newEnd=centerDate+hiddenDurationAfter+(this.props.touch.end-(centerDate+hiddenDurationAfter))*scale;// snapping times away from hidden zones
	this.startToFront=1-scale<=0;// used to do the right auto correction with periodic hidden times
	this.endToFront=scale-1<=0;// used to do the right auto correction with periodic hidden times
	var safeStart=DateUtil.snapAwayFromHidden(this.body.hiddenDates,newStart,1-scale,true);var safeEnd=DateUtil.snapAwayFromHidden(this.body.hiddenDates,newEnd,scale-1,true);if(safeStart!=newStart||safeEnd!=newEnd){this.props.touch.start=safeStart;this.props.touch.end=safeEnd;this.scaleOffset=1-event.scale;newStart=safeStart;newEnd=safeEnd;}this.setRange(newStart,newEnd,false,true);this.startToFront=false;// revert to default
	this.endToFront=true;// revert to default
	};/**
	   * Test whether the mouse from a mouse event is inside the visible window,
	   * between the current start and end date
	   * @param {Object} event
	   * @return {boolean} Returns true when inside the visible window
	   * @private
	   */Range.prototype._isInsideRange=function(event){// calculate the time where the mouse is, check whether inside
	// and no scroll action should happen.
	var clientX=event.center?event.center.x:event.clientX;if(this.options.rtl){var x=clientX-util.getAbsoluteLeft(this.body.dom.centerContainer);}else{var x=util.getAbsoluteRight(this.body.dom.centerContainer)-clientX;}var time=this.body.util.toTime(x);return time>=this.start&&time<=this.end;};/**
	   * Helper function to calculate the center date for zooming
	   * @param {{x: Number, y: Number}} pointer
	   * @return {number} date
	   * @private
	   */Range.prototype._pointerToDate=function(pointer){var conversion;var direction=this.options.direction;validateDirection(direction);if(direction=='horizontal'){return this.body.util.toTime(pointer.x).valueOf();}else{var height=this.body.domProps.center.height;conversion=this.conversion(height);return pointer.y/conversion.scale+conversion.offset;}};/**
	   * Get the pointer location relative to the location of the dom element
	   * @param {{x: Number, y: Number}} touch
	   * @param {Element} element   HTML DOM element
	   * @return {{x: Number, y: Number}} pointer
	   * @private
	   */Range.prototype.getPointer=function(touch,element){if(this.options.rtl){return{x:util.getAbsoluteRight(element)-touch.x,y:touch.y-util.getAbsoluteTop(element)};}else{return{x:touch.x-util.getAbsoluteLeft(element),y:touch.y-util.getAbsoluteTop(element)};}};/**
	   * Zoom the range the given scale in or out. Start and end date will
	   * be adjusted, and the timeline will be redrawn. You can optionally give a
	   * date around which to zoom.
	   * For example, try scale = 0.9 or 1.1
	   * @param {Number} scale      Scaling factor. Values above 1 will zoom out,
	   *                            values below 1 will zoom in.
	   * @param {Number} [center]   Value representing a date around which will
	   *                            be zoomed.
	   */Range.prototype.zoom=function(scale,center,delta){// if centerDate is not provided, take it half between start Date and end Date
	if(center==null){center=(this.start+this.end)/2;}var hiddenDuration=DateUtil.getHiddenDurationBetween(this.body.hiddenDates,this.start,this.end);var hiddenDurationBefore=DateUtil.getHiddenDurationBefore(this.options.moment,this.body.hiddenDates,this,center);var hiddenDurationAfter=hiddenDuration-hiddenDurationBefore;// calculate new start and end
	var newStart=center-hiddenDurationBefore+(this.start-(center-hiddenDurationBefore))*scale;var newEnd=center+hiddenDurationAfter+(this.end-(center+hiddenDurationAfter))*scale;// snapping times away from hidden zones
	this.startToFront=delta>0?false:true;// used to do the right autocorrection with periodic hidden times
	this.endToFront=-delta>0?false:true;// used to do the right autocorrection with periodic hidden times
	var safeStart=DateUtil.snapAwayFromHidden(this.body.hiddenDates,newStart,delta,true);var safeEnd=DateUtil.snapAwayFromHidden(this.body.hiddenDates,newEnd,-delta,true);if(safeStart!=newStart||safeEnd!=newEnd){newStart=safeStart;newEnd=safeEnd;}this.setRange(newStart,newEnd,false,true);this.startToFront=false;// revert to default
	this.endToFront=true;// revert to default
	};/**
	   * Move the range with a given delta to the left or right. Start and end
	   * value will be adjusted. For example, try delta = 0.1 or -0.1
	   * @param {Number}  delta     Moving amount. Positive value will move right,
	   *                            negative value will move left
	   */Range.prototype.move=function(delta){// zoom start Date and end Date relative to the centerDate
	var diff=this.end-this.start;// apply new values
	var newStart=this.start+diff*delta;var newEnd=this.end+diff*delta;// TODO: reckon with min and max range
	this.start=newStart;this.end=newEnd;};/**
	   * Move the range to a new center point
	   * @param {Number} moveTo      New center point of the range
	   */Range.prototype.moveTo=function(moveTo){var center=(this.start+this.end)/2;var diff=center-moveTo;// calculate new start and end
	var newStart=this.start-diff;var newEnd=this.end-diff;this.setRange(newStart,newEnd);};module.exports=Range;/***/},/* 33 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);/**
	   * Prototype for visual components
	   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} [body]
	   * @param {Object} [options]
	   */function Component(body,options){this.options=null;this.props=null;}/**
	   * Set options for the component. The new options will be merged into the
	   * current options.
	   * @param {Object} options
	   */Component.prototype.setOptions=function(options){if(options){util.extend(this.options,options);}};/**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */Component.prototype.redraw=function(){// should be implemented by the component
	return false;};/**
	   * Destroy the component. Cleanup DOM and event listeners
	   */Component.prototype.destroy=function(){// should be implemented by the component
	};/**
	   * Test whether the component is resized since the last time _isResized() was
	   * called.
	   * @return {Boolean} Returns true if the component is resized
	   * @protected
	   */Component.prototype._isResized=function(){var resized=this.props._previousWidth!==this.props.width||this.props._previousHeight!==this.props.height;this.props._previousWidth=this.props.width;this.props._previousHeight=this.props.height;return resized;};module.exports=Component;/***/},/* 34 *//***/function(module,exports){"use strict";/**
	   * used in Core to convert the options into a volatile variable
	   * 
	   * @param {function} moment
	   * @param {Object} body
	   * @param {Array | Object} hiddenDates
	   */exports.convertHiddenOptions=function(moment,body,hiddenDates){if(hiddenDates&&!Array.isArray(hiddenDates)){return exports.convertHiddenOptions(moment,body,[hiddenDates]);}body.hiddenDates=[];if(hiddenDates){if(Array.isArray(hiddenDates)==true){for(var i=0;i<hiddenDates.length;i++){if(hiddenDates[i].repeat===undefined){var dateItem={};dateItem.start=moment(hiddenDates[i].start).toDate().valueOf();dateItem.end=moment(hiddenDates[i].end).toDate().valueOf();body.hiddenDates.push(dateItem);}}body.hiddenDates.sort(function(a,b){return a.start-b.start;});// sort by start time
	}}};/**
	   * create new entrees for the repeating hidden dates
	   * @param {function} moment
	   * @param {Object} body
	   * @param {Array | Object} hiddenDates
	   */exports.updateHiddenDates=function(moment,body,hiddenDates){if(hiddenDates&&!Array.isArray(hiddenDates)){return exports.updateHiddenDates(moment,body,[hiddenDates]);}if(hiddenDates&&body.domProps.centerContainer.width!==undefined){exports.convertHiddenOptions(moment,body,hiddenDates);var start=moment(body.range.start);var end=moment(body.range.end);var totalRange=body.range.end-body.range.start;var pixelTime=totalRange/body.domProps.centerContainer.width;for(var i=0;i<hiddenDates.length;i++){if(hiddenDates[i].repeat!==undefined){var startDate=moment(hiddenDates[i].start);var endDate=moment(hiddenDates[i].end);if(startDate._d=="Invalid Date"){throw new Error("Supplied start date is not valid: "+hiddenDates[i].start);}if(endDate._d=="Invalid Date"){throw new Error("Supplied end date is not valid: "+hiddenDates[i].end);}var duration=endDate-startDate;if(duration>=4*pixelTime){var offset=0;var runUntil=end.clone();switch(hiddenDates[i].repeat){case"daily":// case of time
	if(startDate.day()!=endDate.day()){offset=1;}startDate.dayOfYear(start.dayOfYear());startDate.year(start.year());startDate.subtract(7,'days');endDate.dayOfYear(start.dayOfYear());endDate.year(start.year());endDate.subtract(7-offset,'days');runUntil.add(1,'weeks');break;case"weekly":var dayOffset=endDate.diff(startDate,'days');var day=startDate.day();// set the start date to the range.start
	startDate.date(start.date());startDate.month(start.month());startDate.year(start.year());endDate=startDate.clone();// force
	startDate.day(day);endDate.day(day);endDate.add(dayOffset,'days');startDate.subtract(1,'weeks');endDate.subtract(1,'weeks');runUntil.add(1,'weeks');break;case"monthly":if(startDate.month()!=endDate.month()){offset=1;}startDate.month(start.month());startDate.year(start.year());startDate.subtract(1,'months');endDate.month(start.month());endDate.year(start.year());endDate.subtract(1,'months');endDate.add(offset,'months');runUntil.add(1,'months');break;case"yearly":if(startDate.year()!=endDate.year()){offset=1;}startDate.year(start.year());startDate.subtract(1,'years');endDate.year(start.year());endDate.subtract(1,'years');endDate.add(offset,'years');runUntil.add(1,'years');break;default:console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:",hiddenDates[i].repeat);return;}while(startDate<runUntil){body.hiddenDates.push({start:startDate.valueOf(),end:endDate.valueOf()});switch(hiddenDates[i].repeat){case"daily":startDate.add(1,'days');endDate.add(1,'days');break;case"weekly":startDate.add(1,'weeks');endDate.add(1,'weeks');break;case"monthly":startDate.add(1,'months');endDate.add(1,'months');break;case"yearly":startDate.add(1,'y');endDate.add(1,'y');break;default:console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:",hiddenDates[i].repeat);return;}}body.hiddenDates.push({start:startDate.valueOf(),end:endDate.valueOf()});}}}// remove duplicates, merge where possible
	exports.removeDuplicates(body);// ensure the new positions are not on hidden dates
	var startHidden=exports.isHidden(body.range.start,body.hiddenDates);var endHidden=exports.isHidden(body.range.end,body.hiddenDates);var rangeStart=body.range.start;var rangeEnd=body.range.end;if(startHidden.hidden==true){rangeStart=body.range.startToFront==true?startHidden.startDate-1:startHidden.endDate+1;}if(endHidden.hidden==true){rangeEnd=body.range.endToFront==true?endHidden.startDate-1:endHidden.endDate+1;}if(startHidden.hidden==true||endHidden.hidden==true){body.range._applyRange(rangeStart,rangeEnd);}}};/**
	   * remove duplicates from the hidden dates list. Duplicates are evil. They mess everything up.
	   * Scales with N^2
	   * @param body
	   */exports.removeDuplicates=function(body){var hiddenDates=body.hiddenDates;var safeDates=[];for(var i=0;i<hiddenDates.length;i++){for(var j=0;j<hiddenDates.length;j++){if(i!=j&&hiddenDates[j].remove!=true&&hiddenDates[i].remove!=true){// j inside i
	if(hiddenDates[j].start>=hiddenDates[i].start&&hiddenDates[j].end<=hiddenDates[i].end){hiddenDates[j].remove=true;}// j start inside i
	else if(hiddenDates[j].start>=hiddenDates[i].start&&hiddenDates[j].start<=hiddenDates[i].end){hiddenDates[i].end=hiddenDates[j].end;hiddenDates[j].remove=true;}// j end inside i
	else if(hiddenDates[j].end>=hiddenDates[i].start&&hiddenDates[j].end<=hiddenDates[i].end){hiddenDates[i].start=hiddenDates[j].start;hiddenDates[j].remove=true;}}}}for(var i=0;i<hiddenDates.length;i++){if(hiddenDates[i].remove!==true){safeDates.push(hiddenDates[i]);}}body.hiddenDates=safeDates;body.hiddenDates.sort(function(a,b){return a.start-b.start;});// sort by start time
	};exports.printDates=function(dates){for(var i=0;i<dates.length;i++){console.log(i,new Date(dates[i].start),new Date(dates[i].end),dates[i].start,dates[i].end,dates[i].remove);}};/**
	   * Used in TimeStep to avoid the hidden times.
	   * @param {function} moment
	   * @param {TimeStep} timeStep
	   * @param previousTime
	   */exports.stepOverHiddenDates=function(moment,timeStep,previousTime){var stepInHidden=false;var currentValue=timeStep.current.valueOf();for(var i=0;i<timeStep.hiddenDates.length;i++){var startDate=timeStep.hiddenDates[i].start;var endDate=timeStep.hiddenDates[i].end;if(currentValue>=startDate&&currentValue<endDate){stepInHidden=true;break;}}if(stepInHidden==true&&currentValue<timeStep._end.valueOf()&&currentValue!=previousTime){var prevValue=moment(previousTime);var newValue=moment(endDate);//check if the next step should be major
	if(prevValue.year()!=newValue.year()){timeStep.switchedYear=true;}else if(prevValue.month()!=newValue.month()){timeStep.switchedMonth=true;}else if(prevValue.dayOfYear()!=newValue.dayOfYear()){timeStep.switchedDay=true;}timeStep.current=newValue;}};///**
	// * Used in TimeStep to avoid the hidden times.
	// * @param timeStep
	// * @param previousTime
	// */
	//exports.checkFirstStep = function(timeStep) {
	//  var stepInHidden = false;
	//  var currentValue = timeStep.current.valueOf();
	//  for (var i = 0; i < timeStep.hiddenDates.length; i++) {
	//    var startDate = timeStep.hiddenDates[i].start;
	//    var endDate = timeStep.hiddenDates[i].end;
	//    if (currentValue >= startDate && currentValue < endDate) {
	//      stepInHidden = true;
	//      break;
	//    }
	//  }
	//
	//  if (stepInHidden == true && currentValue <= timeStep._end.valueOf()) {
	//    var newValue = moment(endDate);
	//    timeStep.current = newValue.toDate();
	//  }
	//};
	/**
	   * replaces the Core toScreen methods
	   * @param Core
	   * @param time
	   * @param width
	   * @returns {number}
	   */exports.toScreen=function(Core,time,width){if(Core.body.hiddenDates.length==0){var conversion=Core.range.conversion(width);return(time.valueOf()-conversion.offset)*conversion.scale;}else{var hidden=exports.isHidden(time,Core.body.hiddenDates);if(hidden.hidden==true){time=hidden.startDate;}var duration=exports.getHiddenDurationBetween(Core.body.hiddenDates,Core.range.start,Core.range.end);if(time<Core.range.start){var conversion=Core.range.conversion(width,duration);var hiddenBeforeStart=exports.getHiddenDurationBeforeStart(Core.body.hiddenDates,time,conversion.offset);time=Core.options.moment(time).toDate().valueOf();time=time+hiddenBeforeStart;return-(conversion.offset-time.valueOf())*conversion.scale;}else if(time>Core.range.end){var rangeAfterEnd={start:Core.range.start,end:time};time=exports.correctTimeForHidden(Core.options.moment,Core.body.hiddenDates,rangeAfterEnd,time);var conversion=Core.range.conversion(width,duration);return(time.valueOf()-conversion.offset)*conversion.scale;}else{time=exports.correctTimeForHidden(Core.options.moment,Core.body.hiddenDates,Core.range,time);var conversion=Core.range.conversion(width,duration);return(time.valueOf()-conversion.offset)*conversion.scale;}}};/**
	   * Replaces the core toTime methods
	   * @param body
	   * @param range
	   * @param x
	   * @param width
	   * @returns {Date}
	   */exports.toTime=function(Core,x,width){if(Core.body.hiddenDates.length==0){var conversion=Core.range.conversion(width);return new Date(x/conversion.scale+conversion.offset);}else{var hiddenDuration=exports.getHiddenDurationBetween(Core.body.hiddenDates,Core.range.start,Core.range.end);var totalDuration=Core.range.end-Core.range.start-hiddenDuration;var partialDuration=totalDuration*x/width;var accumulatedHiddenDuration=exports.getAccumulatedHiddenDuration(Core.body.hiddenDates,Core.range,partialDuration);var newTime=new Date(accumulatedHiddenDuration+partialDuration+Core.range.start);return newTime;}};/**
	   * Support function
	   *
	   * @param hiddenDates
	   * @param range
	   * @returns {number}
	   */exports.getHiddenDurationBetween=function(hiddenDates,start,end){var duration=0;for(var i=0;i<hiddenDates.length;i++){var startDate=hiddenDates[i].start;var endDate=hiddenDates[i].end;// if time after the cutout, and the
	if(startDate>=start&&endDate<end){duration+=endDate-startDate;}}return duration;};/**
	     * Support function
	     *
	     * @param hiddenDates
	     * @param start
	     * @param end
	     * @returns {number}
	     */exports.getHiddenDurationBeforeStart=function(hiddenDates,start,end){var duration=0;for(var i=0;i<hiddenDates.length;i++){var startDate=hiddenDates[i].start;var endDate=hiddenDates[i].end;if(startDate>=start&&endDate<=end){duration+=endDate-startDate;}}return duration;};/**
	   * Support function
	   * @param moment
	   * @param hiddenDates
	   * @param range
	   * @param time
	   * @returns {{duration: number, time: *, offset: number}}
	   */exports.correctTimeForHidden=function(moment,hiddenDates,range,time){time=moment(time).toDate().valueOf();time-=exports.getHiddenDurationBefore(moment,hiddenDates,range,time);return time;};exports.getHiddenDurationBefore=function(moment,hiddenDates,range,time){var timeOffset=0;time=moment(time).toDate().valueOf();for(var i=0;i<hiddenDates.length;i++){var startDate=hiddenDates[i].start;var endDate=hiddenDates[i].end;// if time after the cutout, and the
	if(startDate>=range.start&&endDate<range.end){if(time>=endDate){timeOffset+=endDate-startDate;}}}return timeOffset;};/**
	   * sum the duration from start to finish, including the hidden duration,
	   * until the required amount has been reached, return the accumulated hidden duration
	   * @param hiddenDates
	   * @param range
	   * @param time
	   * @returns {{duration: number, time: *, offset: number}}
	   */exports.getAccumulatedHiddenDuration=function(hiddenDates,range,requiredDuration){var hiddenDuration=0;var duration=0;var previousPoint=range.start;//exports.printDates(hiddenDates)
	for(var i=0;i<hiddenDates.length;i++){var startDate=hiddenDates[i].start;var endDate=hiddenDates[i].end;// if time after the cutout, and the
	if(startDate>=range.start&&endDate<range.end){duration+=startDate-previousPoint;previousPoint=endDate;if(duration>=requiredDuration){break;}else{hiddenDuration+=endDate-startDate;}}}return hiddenDuration;};/**
	   * used to step over to either side of a hidden block. Correction is disabled on tablets, might be set to true
	   * @param hiddenDates
	   * @param time
	   * @param direction
	   * @param correctionEnabled
	   * @returns {*}
	   */exports.snapAwayFromHidden=function(hiddenDates,time,direction,correctionEnabled){var isHidden=exports.isHidden(time,hiddenDates);if(isHidden.hidden==true){if(direction<0){if(correctionEnabled==true){return isHidden.startDate-(isHidden.endDate-time)-1;}else{return isHidden.startDate-1;}}else{if(correctionEnabled==true){return isHidden.endDate+(time-isHidden.startDate)+1;}else{return isHidden.endDate+1;}}}else{return time;}};/**
	   * Check if a time is hidden
	   *
	   * @param time
	   * @param hiddenDates
	   * @returns {{hidden: boolean, startDate: Window.start, endDate: *}}
	   */exports.isHidden=function(time,hiddenDates){for(var i=0;i<hiddenDates.length;i++){var startDate=hiddenDates[i].start;var endDate=hiddenDates[i].end;if(time>=startDate&&time<endDate){// if the start is entering a hidden zone
	return{hidden:true,startDate:startDate,endDate:endDate};break;}}return{hidden:false,startDate:startDate,endDate:endDate};};/***/},/* 35 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var Emitter=__webpack_require__(13);var Hammer=__webpack_require__(22);var hammerUtil=__webpack_require__(30);var util=__webpack_require__(1);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var Range=__webpack_require__(32);var ItemSet=__webpack_require__(36);var TimeAxis=__webpack_require__(46);var Activator=__webpack_require__(47);var DateUtil=__webpack_require__(34);var CustomTime=__webpack_require__(48);/**
	   * Create a timeline visualization
	   * @constructor
	   */function Core(){}// turn Core into an event emitter
	Emitter(Core.prototype);/**
	   * Create the main DOM for the Core: a root panel containing left, right,
	   * top, bottom, content, and background panel.
	   * @param {Element} container  The container element where the Core will
	   *                             be attached.
	   * @protected
	   */Core.prototype._create=function(container){this.dom={};this.dom.container=container;this.dom.root=document.createElement('div');this.dom.background=document.createElement('div');this.dom.backgroundVertical=document.createElement('div');this.dom.backgroundHorizontal=document.createElement('div');this.dom.centerContainer=document.createElement('div');this.dom.leftContainer=document.createElement('div');this.dom.rightContainer=document.createElement('div');this.dom.center=document.createElement('div');this.dom.left=document.createElement('div');this.dom.right=document.createElement('div');this.dom.top=document.createElement('div');this.dom.bottom=document.createElement('div');this.dom.shadowTop=document.createElement('div');this.dom.shadowBottom=document.createElement('div');this.dom.shadowTopLeft=document.createElement('div');this.dom.shadowBottomLeft=document.createElement('div');this.dom.shadowTopRight=document.createElement('div');this.dom.shadowBottomRight=document.createElement('div');this.dom.root.className='vis-timeline';this.dom.background.className='vis-panel vis-background';this.dom.backgroundVertical.className='vis-panel vis-background vis-vertical';this.dom.backgroundHorizontal.className='vis-panel vis-background vis-horizontal';this.dom.centerContainer.className='vis-panel vis-center';this.dom.leftContainer.className='vis-panel vis-left';this.dom.rightContainer.className='vis-panel vis-right';this.dom.top.className='vis-panel vis-top';this.dom.bottom.className='vis-panel vis-bottom';this.dom.left.className='vis-content';this.dom.center.className='vis-content';this.dom.right.className='vis-content';this.dom.shadowTop.className='vis-shadow vis-top';this.dom.shadowBottom.className='vis-shadow vis-bottom';this.dom.shadowTopLeft.className='vis-shadow vis-top';this.dom.shadowBottomLeft.className='vis-shadow vis-bottom';this.dom.shadowTopRight.className='vis-shadow vis-top';this.dom.shadowBottomRight.className='vis-shadow vis-bottom';this.dom.root.appendChild(this.dom.background);this.dom.root.appendChild(this.dom.backgroundVertical);this.dom.root.appendChild(this.dom.backgroundHorizontal);this.dom.root.appendChild(this.dom.centerContainer);this.dom.root.appendChild(this.dom.leftContainer);this.dom.root.appendChild(this.dom.rightContainer);this.dom.root.appendChild(this.dom.top);this.dom.root.appendChild(this.dom.bottom);this.dom.centerContainer.appendChild(this.dom.center);this.dom.leftContainer.appendChild(this.dom.left);this.dom.rightContainer.appendChild(this.dom.right);this.dom.centerContainer.appendChild(this.dom.shadowTop);this.dom.centerContainer.appendChild(this.dom.shadowBottom);this.dom.leftContainer.appendChild(this.dom.shadowTopLeft);this.dom.leftContainer.appendChild(this.dom.shadowBottomLeft);this.dom.rightContainer.appendChild(this.dom.shadowTopRight);this.dom.rightContainer.appendChild(this.dom.shadowBottomRight);// size properties of each of the panels
	this.props={root:{},background:{},centerContainer:{},leftContainer:{},rightContainer:{},center:{},left:{},right:{},top:{},bottom:{},border:{},scrollTop:0,scrollTopMin:0};this.on('rangechange',function(){if(this.initialDrawDone===true){this._redraw();}}.bind(this));this.on('touch',this._onTouch.bind(this));this.on('panmove',this._onDrag.bind(this));var me=this;this.on('_change',function(properties){if(properties&&properties.queue==true){// redraw once on next tick
	if(!me._redrawTimer){me._redrawTimer=setTimeout(function(){me._redrawTimer=null;me._redraw();},0);}}else{// redraw immediately
	me._redraw();}});// create event listeners for all interesting events, these events will be
	// emitted via emitter
	this.hammer=new Hammer(this.dom.root);var pinchRecognizer=this.hammer.get('pinch').set({enable:true});hammerUtil.disablePreventDefaultVertically(pinchRecognizer);this.hammer.get('pan').set({threshold:5,direction:Hammer.DIRECTION_HORIZONTAL});this.listeners={};var events=['tap','doubletap','press','pinch','pan','panstart','panmove','panend'// TODO: cleanup
	//'touch', 'pinch',
	//'tap', 'doubletap', 'hold',
	//'dragstart', 'drag', 'dragend',
	//'mousewheel', 'DOMMouseScroll' // DOMMouseScroll is needed for Firefox
	];events.forEach(function(type){var listener=function listener(event){if(me.isActive()){me.emit(type,event);}};me.hammer.on(type,listener);me.listeners[type]=listener;});// emulate a touch event (emitted before the start of a pan, pinch, tap, or press)
	hammerUtil.onTouch(this.hammer,function(event){me.emit('touch',event);}.bind(this));// emulate a release event (emitted after a pan, pinch, tap, or press)
	hammerUtil.onRelease(this.hammer,function(event){me.emit('release',event);}.bind(this));function onMouseWheel(event){if(this.isActive()){this.emit('mousewheel',event);}// prevent scrolling when zoomKey defined or activated
	if(!this.options.zoomKey||event[this.options.zoomKey])return;// prevent scrolling vertically when horizontalScroll is true
	if(this.options.horizontalScroll)return;var delta=0;if(event.wheelDelta){/* IE/Opera. */delta=event.wheelDelta/120;}else if(event.detail){/* Mozilla case. */// In Mozilla, sign of delta is different than in IE.
	// Also, delta is multiple of 3.
	delta=-event.detail/3;}var current=this.props.scrollTop;var adjusted=current+delta*120;if(this.isActive()){this._setScrollTop(adjusted);if(this.options.verticalScroll){this.dom.left.parentNode.scrollTop=-adjusted;this.dom.right.parentNode.scrollTop=-adjusted;}this._redraw();this.emit('scroll',event);}// Prevent default actions caused by mouse wheel
	// (else the page and timeline both scroll)
	event.preventDefault();}if(this.dom.centerContainer.addEventListener){// IE9, Chrome, Safari, Opera
	this.dom.centerContainer.addEventListener("mousewheel",onMouseWheel.bind(this),false);// Firefox
	this.dom.centerContainer.addEventListener("DOMMouseScroll",onMouseWheel.bind(this),false);}else{// IE 6/7/8
	this.dom.centerContainer.attachEvent("onmousewheel",onMouseWheel.bind(this));}function onMouseScrollSide(event){if(!me.options.verticalScroll)return;event.preventDefault();if(me.isActive()){var adjusted=-event.target.scrollTop;me._setScrollTop(adjusted);me._redraw();me.emit('scrollSide',event);}}this.dom.left.parentNode.addEventListener('scroll',onMouseScrollSide.bind(this));this.dom.right.parentNode.addEventListener('scroll',onMouseScrollSide.bind(this));var itemAddedToTimeline=false;function handleDragOver(event){if(event.preventDefault){event.preventDefault();// Necessary. Allows us to drop.
	}// make sure your target is a vis element
	if(!event.target.className.includes('vis'))return;// make sure only one item is added every time you're over the timeline
	if(itemAddedToTimeline)return;event.dataTransfer.dropEffect='move';itemAddedToTimeline=true;return false;}function handleDrop(event){// return when dropping non-vis items 
	try{var itemData=JSON.parse(event.dataTransfer.getData("text/plain"));if(!itemData.content)return;}catch(err){return false;}itemAddedToTimeline=false;event.center={x:event.x,y:event.y};me.itemSet._onAddItem(event);return false;}this.dom.center.addEventListener('dragover',handleDragOver.bind(this),false);this.dom.center.addEventListener('drop',handleDrop.bind(this),false);this.customTimes=[];// store state information needed for touch events
	this.touch={};this.redrawCount=0;this.initialDrawDone=false;// attach the root panel to the provided container
	if(!container)throw new Error('No container provided');container.appendChild(this.dom.root);};/**
	   * Set options. Options will be passed to all components loaded in the Timeline.
	   * @param {Object} [options]
	   *                           {String} orientation
	   *                              Vertical orientation for the Timeline,
	   *                              can be 'bottom' (default) or 'top'.
	   *                           {String | Number} width
	   *                              Width for the timeline, a number in pixels or
	   *                              a css string like '1000px' or '75%'. '100%' by default.
	   *                           {String | Number} height
	   *                              Fixed height for the Timeline, a number in pixels or
	   *                              a css string like '400px' or '75%'. If undefined,
	   *                              The Timeline will automatically size such that
	   *                              its contents fit.
	   *                           {String | Number} minHeight
	   *                              Minimum height for the Timeline, a number in pixels or
	   *                              a css string like '400px' or '75%'.
	   *                           {String | Number} maxHeight
	   *                              Maximum height for the Timeline, a number in pixels or
	   *                              a css string like '400px' or '75%'.
	   *                           {Number | Date | String} start
	   *                              Start date for the visible window
	   *                           {Number | Date | String} end
	   *                              End date for the visible window
	   */Core.prototype.setOptions=function(options){if(options){// copy the known options
	var fields=['width','height','minHeight','maxHeight','autoResize','start','end','clickToUse','dataAttributes','hiddenDates','locale','locales','moment','rtl','zoomKey','horizontalScroll','verticalScroll'];util.selectiveExtend(fields,this.options,options);if(this.options.rtl){this.dom.container.style.direction="rtl";this.dom.backgroundVertical.className='vis-panel vis-background vis-vertical-rtl';}if(this.options.verticalScroll){if(this.options.rtl){this.dom.rightContainer.className='vis-panel vis-right vis-vertical-scroll';}else{this.dom.leftContainer.className='vis-panel vis-left vis-vertical-scroll';}}this.options.orientation={item:undefined,axis:undefined};if('orientation'in options){if(typeof options.orientation==='string'){this.options.orientation={item:options.orientation,axis:options.orientation};}else if(_typeof(options.orientation)==='object'){if('item'in options.orientation){this.options.orientation.item=options.orientation.item;}if('axis'in options.orientation){this.options.orientation.axis=options.orientation.axis;}}}if(this.options.orientation.axis==='both'){if(!this.timeAxis2){var timeAxis2=this.timeAxis2=new TimeAxis(this.body);timeAxis2.setOptions=function(options){var _options=options?util.extend({},options):{};_options.orientation='top';// override the orientation option, always top
	TimeAxis.prototype.setOptions.call(timeAxis2,_options);};this.components.push(timeAxis2);}}else{if(this.timeAxis2){var index=this.components.indexOf(this.timeAxis2);if(index!==-1){this.components.splice(index,1);}this.timeAxis2.destroy();this.timeAxis2=null;}}// if the graph2d's drawPoints is a function delegate the callback to the onRender property
	if(typeof options.drawPoints=='function'){options.drawPoints={onRender:options.drawPoints};}if('hiddenDates'in this.options){DateUtil.convertHiddenOptions(this.options.moment,this.body,this.options.hiddenDates);}if('clickToUse'in options){if(options.clickToUse){if(!this.activator){this.activator=new Activator(this.dom.root);}}else{if(this.activator){this.activator.destroy();delete this.activator;}}}if('showCustomTime'in options){throw new Error('Option `showCustomTime` is deprecated. Create a custom time bar via timeline.addCustomTime(time [, id])');}// enable/disable autoResize
	this._initAutoResize();}// propagate options to all components
	this.components.forEach(function(component){return component.setOptions(options);});// enable/disable configure
	if('configure'in options){if(!this.configurator){this.configurator=this._createConfigurator();}this.configurator.setOptions(options.configure);// collect the settings of all components, and pass them to the configuration system
	var appliedOptions=util.deepExtend({},this.options);this.components.forEach(function(component){util.deepExtend(appliedOptions,component.options);});this.configurator.setModuleOptions({global:appliedOptions});}// override redraw with a throttled version
	if(!this._origRedraw){this._origRedraw=this._redraw.bind(this);this._redraw=util.throttle(this._origRedraw);}else{// Not the initial run: redraw everything
	this._redraw();}};/**
	   * Returns true when the Timeline is active.
	   * @returns {boolean}
	   */Core.prototype.isActive=function(){return!this.activator||this.activator.active;};/**
	   * Destroy the Core, clean up all DOM elements and event listeners.
	   */Core.prototype.destroy=function(){// unbind datasets
	this.setItems(null);this.setGroups(null);// remove all event listeners
	this.off();// stop checking for changed size
	this._stopAutoResize();// remove from DOM
	if(this.dom.root.parentNode){this.dom.root.parentNode.removeChild(this.dom.root);}this.dom=null;// remove Activator
	if(this.activator){this.activator.destroy();delete this.activator;}// cleanup hammer touch events
	for(var event in this.listeners){if(this.listeners.hasOwnProperty(event)){delete this.listeners[event];}}this.listeners=null;this.hammer=null;// give all components the opportunity to cleanup
	this.components.forEach(function(component){return component.destroy();});this.body=null;};/**
	   * Set a custom time bar
	   * @param {Date} time
	   * @param {number} [id=undefined] Optional id of the custom time bar to be adjusted.
	   */Core.prototype.setCustomTime=function(time,id){var customTimes=this.customTimes.filter(function(component){return id===component.options.id;});if(customTimes.length===0){throw new Error('No custom time bar found with id '+JSON.stringify(id));}if(customTimes.length>0){customTimes[0].setCustomTime(time);}};/**
	   * Retrieve the current custom time.
	   * @param {number} [id=undefined]    Id of the custom time bar.
	   * @return {Date | undefined} customTime
	   */Core.prototype.getCustomTime=function(id){var customTimes=this.customTimes.filter(function(component){return component.options.id===id;});if(customTimes.length===0){throw new Error('No custom time bar found with id '+JSON.stringify(id));}return customTimes[0].getCustomTime();};/**
	   * Set a custom title for the custom time bar.
	   * @param {String} [title] Custom title
	   * @param {number} [id=undefined]    Id of the custom time bar.
	   */Core.prototype.setCustomTimeTitle=function(title,id){var customTimes=this.customTimes.filter(function(component){return component.options.id===id;});if(customTimes.length===0){throw new Error('No custom time bar found with id '+JSON.stringify(id));}if(customTimes.length>0){return customTimes[0].setCustomTitle(title);}};/**
	   * Retrieve meta information from an event.
	   * Should be overridden by classes extending Core
	   * @param {Event} event
	   * @return {Object} An object with related information.
	   */Core.prototype.getEventProperties=function(event){return{event:event};};/**
	   * Add custom vertical bar
	   * @param {Date | String | Number} [time]  A Date, unix timestamp, or
	   *                                         ISO date string. Time point where
	   *                                         the new bar should be placed.
	   *                                         If not provided, `new Date()` will
	   *                                         be used.
	   * @param {Number | String} [id=undefined] Id of the new bar. Optional
	   * @return {Number | String}               Returns the id of the new bar
	   */Core.prototype.addCustomTime=function(time,id){var timestamp=time!==undefined?util.convert(time,'Date').valueOf():new Date();var exists=this.customTimes.some(function(customTime){return customTime.options.id===id;});if(exists){throw new Error('A custom time with id '+JSON.stringify(id)+' already exists');}var customTime=new CustomTime(this.body,util.extend({},this.options,{time:timestamp,id:id}));this.customTimes.push(customTime);this.components.push(customTime);this._redraw();return id;};/**
	   * Remove previously added custom bar
	   * @param {int} id ID of the custom bar to be removed
	   * @return {boolean} True if the bar exists and is removed, false otherwise
	   */Core.prototype.removeCustomTime=function(id){var customTimes=this.customTimes.filter(function(bar){return bar.options.id===id;});if(customTimes.length===0){throw new Error('No custom time bar found with id '+JSON.stringify(id));}customTimes.forEach(function(customTime){this.customTimes.splice(this.customTimes.indexOf(customTime),1);this.components.splice(this.components.indexOf(customTime),1);customTime.destroy();}.bind(this));};/**
	   * Get the id's of the currently visible items.
	   * @returns {Array} The ids of the visible items
	   */Core.prototype.getVisibleItems=function(){return this.itemSet&&this.itemSet.getVisibleItems()||[];};/**
	   * Set Core window such that it fits all items
	   * @param {Object} [options]  Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */Core.prototype.fit=function(options){var range=this.getDataRange();// skip range set if there is no min and max date
	if(range.min===null&&range.max===null){return;}// apply a margin of 1% left and right of the data
	var interval=range.max-range.min;var min=new Date(range.min.valueOf()-interval*0.01);var max=new Date(range.max.valueOf()+interval*0.01);var animation=options&&options.animation!==undefined?options.animation:true;this.range.setRange(min,max,animation);};/**
	   * Calculate the data range of the items start and end dates
	   * @returns {{min: Date | null, max: Date | null}}
	   * @protected
	   */Core.prototype.getDataRange=function(){// must be implemented by Timeline and Graph2d
	throw new Error('Cannot invoke abstract method getDataRange');};/**
	   * Set the visible window. Both parameters are optional, you can change only
	   * start or only end. Syntax:
	   *
	   *     TimeLine.setWindow(start, end)
	   *     TimeLine.setWindow(start, end, options)
	   *     TimeLine.setWindow(range)
	   *
	   * Where start and end can be a Date, number, or string, and range is an
	   * object with properties start and end.
	   *
	   * @param {Date | Number | String | Object} [start] Start date of visible window
	   * @param {Date | Number | String} [end]            End date of visible window
	   * @param {Object} [options]  Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */Core.prototype.setWindow=function(start,end,options){var animation;if(arguments.length==1){var range=arguments[0];animation=range.animation!==undefined?range.animation:true;this.range.setRange(range.start,range.end,animation);}else{animation=options&&options.animation!==undefined?options.animation:true;this.range.setRange(start,end,animation);}};/**
	   * Move the window such that given time is centered on screen.
	   * @param {Date | Number | String} time
	   * @param {Object} [options]  Available options:
	   *                                `animation: boolean | {duration: number, easingFunction: string}`
	   *                                    If true (default), the range is animated
	   *                                    smoothly to the new window. An object can be
	   *                                    provided to specify duration and easing function.
	   *                                    Default duration is 500 ms, and default easing
	   *                                    function is 'easeInOutQuad'.
	   */Core.prototype.moveTo=function(time,options){var interval=this.range.end-this.range.start;var t=util.convert(time,'Date').valueOf();var start=t-interval/2;var end=t+interval/2;var animation=options&&options.animation!==undefined?options.animation:true;this.range.setRange(start,end,animation);};/**
	   * Get the visible window
	   * @return {{start: Date, end: Date}}   Visible range
	   */Core.prototype.getWindow=function(){var range=this.range.getRange();return{start:new Date(range.start),end:new Date(range.end)};};/**
	   * Zoom in the window such that given time is centered on screen.
	   * @param {Number} percentage - must be between [0..1]
	   */Core.prototype.zoomIn=function(percentage){if(!percentage||percentage<0||percentage>1)return;var range=this.getWindow();var start=range.start.valueOf();var end=range.end.valueOf();var interval=end-start;var newInterval=interval/(1+percentage);var distance=(interval-newInterval)/2;var newStart=start+distance;var newEnd=end-distance;this.setWindow({start:newStart,end:newEnd});};/**
	   * Zoom out the window such that given time is centered on screen.
	   * @param {Number} percentage - must be between [0..1]
	   */Core.prototype.zoomOut=function(percentage){if(!percentage||percentage<0||percentage>1)return;var range=this.getWindow();var start=range.start.valueOf();var end=range.end.valueOf();var interval=end-start;var newStart=start-interval*percentage/2;var newEnd=end+interval*percentage/2;this.setWindow({start:newStart,end:newEnd});};/**
	   * Force a redraw. Can be overridden by implementations of Core
	   *
	   * Note: this function will be overridden on construction with a trottled version
	   */Core.prototype.redraw=function(){this._redraw();};/**
	   * Redraw for internal use. Redraws all components. See also the public
	   * method redraw.
	   * @protected
	   */Core.prototype._redraw=function(){this.redrawCount++;var resized=false;var options=this.options;var props=this.props;var dom=this.dom;if(!dom||!dom.container||dom.root.offsetWidth==0)return;// when destroyed, or invisible
	DateUtil.updateHiddenDates(this.options.moment,this.body,this.options.hiddenDates);// update class names
	if(options.orientation=='top'){util.addClassName(dom.root,'vis-top');util.removeClassName(dom.root,'vis-bottom');}else{util.removeClassName(dom.root,'vis-top');util.addClassName(dom.root,'vis-bottom');}// update root width and height options
	dom.root.style.maxHeight=util.option.asSize(options.maxHeight,'');dom.root.style.minHeight=util.option.asSize(options.minHeight,'');dom.root.style.width=util.option.asSize(options.width,'');// calculate border widths
	props.border.left=(dom.centerContainer.offsetWidth-dom.centerContainer.clientWidth)/2;props.border.right=props.border.left;props.border.top=(dom.centerContainer.offsetHeight-dom.centerContainer.clientHeight)/2;props.border.bottom=props.border.top;var borderRootHeight=dom.root.offsetHeight-dom.root.clientHeight;var borderRootWidth=dom.root.offsetWidth-dom.root.clientWidth;// workaround for a bug in IE: the clientWidth of an element with
	// a height:0px and overflow:hidden is not calculated and always has value 0
	if(dom.centerContainer.clientHeight===0){props.border.left=props.border.top;props.border.right=props.border.left;}if(dom.root.clientHeight===0){borderRootWidth=borderRootHeight;}// calculate the heights. If any of the side panels is empty, we set the height to
	// minus the border width, such that the border will be invisible
	props.center.height=dom.center.offsetHeight;props.left.height=dom.left.offsetHeight;props.right.height=dom.right.offsetHeight;props.top.height=dom.top.clientHeight||-props.border.top;props.bottom.height=dom.bottom.clientHeight||-props.border.bottom;// TODO: compensate borders when any of the panels is empty.
	// apply auto height
	// TODO: only calculate autoHeight when needed (else we cause an extra reflow/repaint of the DOM)
	var contentHeight=Math.max(props.left.height,props.center.height,props.right.height);var autoHeight=props.top.height+contentHeight+props.bottom.height+borderRootHeight+props.border.top+props.border.bottom;dom.root.style.height=util.option.asSize(options.height,autoHeight+'px');// calculate heights of the content panels
	props.root.height=dom.root.offsetHeight;props.background.height=props.root.height-borderRootHeight;var containerHeight=props.root.height-props.top.height-props.bottom.height-borderRootHeight;props.centerContainer.height=containerHeight;props.leftContainer.height=containerHeight;props.rightContainer.height=props.leftContainer.height;// calculate the widths of the panels
	props.root.width=dom.root.offsetWidth;props.background.width=props.root.width-borderRootWidth;if(!this.initialDrawDone){props.scrollbarWidth=util.getScrollBarWidth();}if(this.options.verticalScroll){if(this.options.rtl){props.left.width=dom.leftContainer.clientWidth||-props.border.left;props.right.width=dom.rightContainer.clientWidth+props.scrollbarWidth||-props.border.right;}else{props.left.width=dom.leftContainer.clientWidth+props.scrollbarWidth||-props.border.left;props.right.width=dom.rightContainer.clientWidth||-props.border.right;}}else{props.left.width=dom.leftContainer.clientWidth||-props.border.left;props.right.width=dom.rightContainer.clientWidth||-props.border.right;}props.leftContainer.width=props.left.width;props.rightContainer.width=props.right.width;var centerWidth=props.root.width-props.left.width-props.right.width-borderRootWidth;props.center.width=centerWidth;props.centerContainer.width=centerWidth;props.top.width=centerWidth;props.bottom.width=centerWidth;// resize the panels
	dom.background.style.height=props.background.height+'px';dom.backgroundVertical.style.height=props.background.height+'px';dom.backgroundHorizontal.style.height=props.centerContainer.height+'px';dom.centerContainer.style.height=props.centerContainer.height+'px';dom.leftContainer.style.height=props.leftContainer.height+'px';dom.rightContainer.style.height=props.rightContainer.height+'px';dom.background.style.width=props.background.width+'px';dom.backgroundVertical.style.width=props.centerContainer.width+'px';dom.backgroundHorizontal.style.width=props.background.width+'px';dom.centerContainer.style.width=props.center.width+'px';dom.top.style.width=props.top.width+'px';dom.bottom.style.width=props.bottom.width+'px';// reposition the panels
	dom.background.style.left='0';dom.background.style.top='0';dom.backgroundVertical.style.left=props.left.width+props.border.left+'px';dom.backgroundVertical.style.top='0';dom.backgroundHorizontal.style.left='0';dom.backgroundHorizontal.style.top=props.top.height+'px';dom.centerContainer.style.left=props.left.width+'px';dom.centerContainer.style.top=props.top.height+'px';dom.leftContainer.style.left='0';dom.leftContainer.style.top=props.top.height+'px';dom.rightContainer.style.left=props.left.width+props.center.width+'px';dom.rightContainer.style.top=props.top.height+'px';dom.top.style.left=props.left.width+'px';dom.top.style.top='0';dom.bottom.style.left=props.left.width+'px';dom.bottom.style.top=props.top.height+props.centerContainer.height+'px';// update the scrollTop, feasible range for the offset can be changed
	// when the height of the Core or of the contents of the center changed
	var offset=this._updateScrollTop();// reposition the scrollable contents
	if(options.orientation.item!='top'){offset+=Math.max(this.props.centerContainer.height-this.props.center.height-this.props.border.top-this.props.border.bottom,0);}dom.center.style.left='0';dom.center.style.top=offset+'px';dom.left.style.left='0';dom.right.style.left='0';// show shadows when vertical scrolling is available
	var visibilityTop=this.props.scrollTop==0?'hidden':'';var visibilityBottom=this.props.scrollTop==this.props.scrollTopMin?'hidden':'';dom.shadowTop.style.visibility=visibilityTop;dom.shadowBottom.style.visibility=visibilityBottom;dom.shadowTopLeft.style.visibility=visibilityTop;dom.shadowBottomLeft.style.visibility=visibilityBottom;dom.shadowTopRight.style.visibility=visibilityTop;dom.shadowBottomRight.style.visibility=visibilityBottom;if(this.options.verticalScroll){dom.shadowTopRight.style.visibility="hidden";dom.shadowBottomRight.style.visibility="hidden";dom.shadowTopLeft.style.visibility="hidden";dom.shadowBottomLeft.style.visibility="hidden";}else{dom.left.style.top=offset+'px';dom.right.style.top=offset+'px';}// enable/disable vertical panning
	var contentsOverflow=this.props.center.height>this.props.centerContainer.height;this.hammer.get('pan').set({direction:contentsOverflow?Hammer.DIRECTION_ALL:Hammer.DIRECTION_HORIZONTAL});// redraw all components
	this.components.forEach(function(component){resized=component.redraw()||resized;});var MAX_REDRAW=5;if(resized){if(this.redrawCount<MAX_REDRAW){this.body.emitter.emit('_change');return;}else{console.log('WARNING: infinite loop in redraw?');}}else{this.redrawCount=0;}this.initialDrawDone=true;//Emit public 'changed' event for UI updates, see issue #1592
	this.body.emitter.emit("changed");};// TODO: deprecated since version 1.1.0, remove some day
	Core.prototype.repaint=function(){throw new Error('Function repaint is deprecated. Use redraw instead.');};/**
	   * Set a current time. This can be used for example to ensure that a client's
	   * time is synchronized with a shared server time.
	   * Only applicable when option `showCurrentTime` is true.
	   * @param {Date | String | Number} time     A Date, unix timestamp, or
	   *                                          ISO date string.
	   */Core.prototype.setCurrentTime=function(time){if(!this.currentTime){throw new Error('Option showCurrentTime must be true');}this.currentTime.setCurrentTime(time);};/**
	   * Get the current time.
	   * Only applicable when option `showCurrentTime` is true.
	   * @return {Date} Returns the current time.
	   */Core.prototype.getCurrentTime=function(){if(!this.currentTime){throw new Error('Option showCurrentTime must be true');}return this.currentTime.getCurrentTime();};/**
	   * Convert a position on screen (pixels) to a datetime
	   * @param {int}     x    Position on the screen in pixels
	   * @return {Date}   time The datetime the corresponds with given position x
	   * @protected
	   */// TODO: move this function to Range
	Core.prototype._toTime=function(x){return DateUtil.toTime(this,x,this.props.center.width);};/**
	   * Convert a position on the global screen (pixels) to a datetime
	   * @param {int}     x    Position on the screen in pixels
	   * @return {Date}   time The datetime the corresponds with given position x
	   * @protected
	   */// TODO: move this function to Range
	Core.prototype._toGlobalTime=function(x){return DateUtil.toTime(this,x,this.props.root.width);//var conversion = this.range.conversion(this.props.root.width);
	//return new Date(x / conversion.scale + conversion.offset);
	};/**
	   * Convert a datetime (Date object) into a position on the screen
	   * @param {Date}   time A date
	   * @return {int}   x    The position on the screen in pixels which corresponds
	   *                      with the given date.
	   * @protected
	   */// TODO: move this function to Range
	Core.prototype._toScreen=function(time){return DateUtil.toScreen(this,time,this.props.center.width);};/**
	   * Convert a datetime (Date object) into a position on the root
	   * This is used to get the pixel density estimate for the screen, not the center panel
	   * @param {Date}   time A date
	   * @return {int}   x    The position on root in pixels which corresponds
	   *                      with the given date.
	   * @protected
	   */// TODO: move this function to Range
	Core.prototype._toGlobalScreen=function(time){return DateUtil.toScreen(this,time,this.props.root.width);//var conversion = this.range.conversion(this.props.root.width);
	//return (time.valueOf() - conversion.offset) * conversion.scale;
	};/**
	   * Initialize watching when option autoResize is true
	   * @private
	   */Core.prototype._initAutoResize=function(){if(this.options.autoResize==true){this._startAutoResize();}else{this._stopAutoResize();}};/**
	   * Watch for changes in the size of the container. On resize, the Panel will
	   * automatically redraw itself.
	   * @private
	   */Core.prototype._startAutoResize=function(){var me=this;this._stopAutoResize();this._onResize=function(){if(me.options.autoResize!=true){// stop watching when the option autoResize is changed to false
	me._stopAutoResize();return;}if(me.dom.root){// check whether the frame is resized
	// Note: we compare offsetWidth here, not clientWidth. For some reason,
	// IE does not restore the clientWidth from 0 to the actual width after
	// changing the timeline's container display style from none to visible
	if(me.dom.root.offsetWidth!=me.props.lastWidth||me.dom.root.offsetHeight!=me.props.lastHeight){me.props.lastWidth=me.dom.root.offsetWidth;me.props.lastHeight=me.dom.root.offsetHeight;me.body.emitter.emit('_change');}}};// add event listener to window resize
	util.addEventListener(window,'resize',this._onResize);//Prevent initial unnecessary redraw
	if(me.dom.root){me.props.lastWidth=me.dom.root.offsetWidth;me.props.lastHeight=me.dom.root.offsetHeight;}this.watchTimer=setInterval(this._onResize,1000);};/**
	   * Stop watching for a resize of the frame.
	   * @private
	   */Core.prototype._stopAutoResize=function(){if(this.watchTimer){clearInterval(this.watchTimer);this.watchTimer=undefined;}// remove event listener on window.resize
	if(this._onResize){util.removeEventListener(window,'resize',this._onResize);this._onResize=null;}};/**
	   * Start moving the timeline vertically
	   * @param {Event} event
	   * @private
	   */Core.prototype._onTouch=function(event){this.touch.allowDragging=true;this.touch.initialScrollTop=this.props.scrollTop;};/**
	   * Start moving the timeline vertically
	   * @param {Event} event
	   * @private
	   */Core.prototype._onPinch=function(event){this.touch.allowDragging=false;};/**
	   * Move the timeline vertically
	   * @param {Event} event
	   * @private
	   */Core.prototype._onDrag=function(event){if(!event)return;// refuse to drag when we where pinching to prevent the timeline make a jump
	// when releasing the fingers in opposite order from the touch screen
	if(!this.touch.allowDragging)return;var delta=event.deltaY;var oldScrollTop=this._getScrollTop();var newScrollTop=this._setScrollTop(this.touch.initialScrollTop+delta);if(this.options.verticalScroll){this.dom.left.parentNode.scrollTop=-this.props.scrollTop;this.dom.right.parentNode.scrollTop=-this.props.scrollTop;}if(newScrollTop!=oldScrollTop){this.emit("verticalDrag");}};/**
	   * Apply a scrollTop
	   * @param {Number} scrollTop
	   * @returns {Number} scrollTop  Returns the applied scrollTop
	   * @private
	   */Core.prototype._setScrollTop=function(scrollTop){this.props.scrollTop=scrollTop;this._updateScrollTop();return this.props.scrollTop;};/**
	   * Update the current scrollTop when the height of  the containers has been changed
	   * @returns {Number} scrollTop  Returns the applied scrollTop
	   * @private
	   */Core.prototype._updateScrollTop=function(){// recalculate the scrollTopMin
	var scrollTopMin=Math.min(this.props.centerContainer.height-this.props.center.height,0);// is negative or zero
	if(scrollTopMin!=this.props.scrollTopMin){// in case of bottom orientation, change the scrollTop such that the contents
	// do not move relative to the time axis at the bottom
	if(this.options.orientation.item!='top'){this.props.scrollTop+=scrollTopMin-this.props.scrollTopMin;}this.props.scrollTopMin=scrollTopMin;}// limit the scrollTop to the feasible scroll range
	if(this.props.scrollTop>0)this.props.scrollTop=0;if(this.props.scrollTop<scrollTopMin)this.props.scrollTop=scrollTopMin;return this.props.scrollTop;};/**
	   * Get the current scrollTop
	   * @returns {number} scrollTop
	   * @private
	   */Core.prototype._getScrollTop=function(){return this.props.scrollTop;};/**
	   * Load a configurator
	   * @return {Object}
	   * @private
	   */Core.prototype._createConfigurator=function(){throw new Error('Cannot invoke abstract method _createConfigurator');};module.exports=Core;/***/},/* 36 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var Hammer=__webpack_require__(22);var util=__webpack_require__(1);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var TimeStep=__webpack_require__(37);var Component=__webpack_require__(33);var Group=__webpack_require__(38);var BackgroundGroup=__webpack_require__(42);var BoxItem=__webpack_require__(43);var PointItem=__webpack_require__(44);var RangeItem=__webpack_require__(40);var BackgroundItem=__webpack_require__(45);var UNGROUPED='__ungrouped__';// reserved group id for ungrouped items
	var BACKGROUND='__background__';// reserved group id for background items without group
	/**
	   * An ItemSet holds a set of items and ranges which can be displayed in a
	   * range. The width is determined by the parent of the ItemSet, and the height
	   * is determined by the size of the items.
	   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
	   * @param {Object} [options]      See ItemSet.setOptions for the available options.
	   * @constructor ItemSet
	   * @extends Component
	   */function ItemSet(body,options){this.body=body;this.defaultOptions={type:null,// 'box', 'point', 'range', 'background'
	orientation:{item:'bottom'// item orientation: 'top' or 'bottom'
	},align:'auto',// alignment of box items
	stack:true,groupOrderSwap:function groupOrderSwap(fromGroup,toGroup,groups){var targetOrder=toGroup.order;toGroup.order=fromGroup.order;fromGroup.order=targetOrder;},groupOrder:'order',selectable:true,multiselect:false,itemsAlwaysDraggable:false,editable:{updateTime:false,updateGroup:false,add:false,remove:false},groupEditable:{order:false,add:false,remove:false},snap:TimeStep.snap,onAdd:function onAdd(item,callback){callback(item);},onUpdate:function onUpdate(item,callback){callback(item);},onMove:function onMove(item,callback){callback(item);},onRemove:function onRemove(item,callback){callback(item);},onMoving:function onMoving(item,callback){callback(item);},onAddGroup:function onAddGroup(item,callback){callback(item);},onMoveGroup:function onMoveGroup(item,callback){callback(item);},onRemoveGroup:function onRemoveGroup(item,callback){callback(item);},margin:{item:{horizontal:10,vertical:10},axis:20},tooltipOnItemUpdateTime:false};// options is shared by this ItemSet and all its items
	this.options=util.extend({},this.defaultOptions);this.options.rtl=options.rtl;// options for getting items from the DataSet with the correct type
	this.itemOptions={type:{start:'Date',end:'Date'}};this.conversion={toScreen:body.util.toScreen,toTime:body.util.toTime};this.dom={};this.props={};this.hammer=null;var me=this;this.itemsData=null;// DataSet
	this.groupsData=null;// DataSet
	// listeners for the DataSet of the items
	this.itemListeners={'add':function add(event,params,senderId){me._onAdd(params.items);},'update':function update(event,params,senderId){me._onUpdate(params.items);},'remove':function remove(event,params,senderId){me._onRemove(params.items);}};// listeners for the DataSet of the groups
	this.groupListeners={'add':function add(event,params,senderId){me._onAddGroups(params.items);},'update':function update(event,params,senderId){me._onUpdateGroups(params.items);},'remove':function remove(event,params,senderId){me._onRemoveGroups(params.items);}};this.items={};// object with an Item for every data item
	this.groups={};// Group object for every group
	this.groupIds=[];this.selection=[];// list with the ids of all selected nodes
	this.stackDirty=true;// if true, all items will be restacked on next redraw
	this.touchParams={};// stores properties while dragging
	this.groupTouchParams={};// create the HTML DOM
	this._create();this.setOptions(options);}ItemSet.prototype=new Component();// available item types will be registered here
	ItemSet.types={background:BackgroundItem,box:BoxItem,range:RangeItem,point:PointItem};/**
	   * Create the HTML DOM for the ItemSet
	   */ItemSet.prototype._create=function(){var frame=document.createElement('div');frame.className='vis-itemset';frame['timeline-itemset']=this;this.dom.frame=frame;// create background panel
	var background=document.createElement('div');background.className='vis-background';frame.appendChild(background);this.dom.background=background;// create foreground panel
	var foreground=document.createElement('div');foreground.className='vis-foreground';frame.appendChild(foreground);this.dom.foreground=foreground;// create axis panel
	var axis=document.createElement('div');axis.className='vis-axis';this.dom.axis=axis;// create labelset
	var labelSet=document.createElement('div');labelSet.className='vis-labelset';this.dom.labelSet=labelSet;// create ungrouped Group
	this._updateUngrouped();// create background Group
	var backgroundGroup=new BackgroundGroup(BACKGROUND,null,this);backgroundGroup.show();this.groups[BACKGROUND]=backgroundGroup;// attach event listeners
	// Note: we bind to the centerContainer for the case where the height
	//       of the center container is larger than of the ItemSet, so we
	//       can click in the empty area to create a new item or deselect an item.
	this.hammer=new Hammer(this.body.dom.centerContainer);// drag items when selected
	this.hammer.on('hammer.input',function(event){if(event.isFirst){this._onTouch(event);}}.bind(this));this.hammer.on('panstart',this._onDragStart.bind(this));this.hammer.on('panmove',this._onDrag.bind(this));this.hammer.on('panend',this._onDragEnd.bind(this));this.hammer.get('pan').set({threshold:5,direction:Hammer.DIRECTION_HORIZONTAL});// single select (or unselect) when tapping an item
	this.hammer.on('tap',this._onSelectItem.bind(this));// multi select when holding mouse/touch, or on ctrl+click
	this.hammer.on('press',this._onMultiSelectItem.bind(this));// add item on doubletap
	this.hammer.on('doubletap',this._onAddItem.bind(this));if(this.options.rtl){this.groupHammer=new Hammer(this.body.dom.rightContainer);}else{this.groupHammer=new Hammer(this.body.dom.leftContainer);}this.groupHammer.on('panstart',this._onGroupDragStart.bind(this));this.groupHammer.on('panmove',this._onGroupDrag.bind(this));this.groupHammer.on('panend',this._onGroupDragEnd.bind(this));this.groupHammer.get('pan').set({threshold:5,direction:Hammer.DIRECTION_HORIZONTAL});this.body.dom.centerContainer.addEventListener('mouseover',this._onMouseOver.bind(this));this.body.dom.centerContainer.addEventListener('mouseout',this._onMouseOut.bind(this));// attach to the DOM
	this.show();};/**
	   * Set options for the ItemSet. Existing options will be extended/overwritten.
	   * @param {Object} [options] The following options are available:
	   *                           {String} type
	   *                              Default type for the items. Choose from 'box'
	   *                              (default), 'point', 'range', or 'background'.
	   *                              The default style can be overwritten by
	   *                              individual items.
	   *                           {String} align
	   *                              Alignment for the items, only applicable for
	   *                              BoxItem. Choose 'center' (default), 'left', or
	   *                              'right'.
	   *                           {String} orientation.item
	   *                              Orientation of the item set. Choose 'top' or
	   *                              'bottom' (default).
	   *                           {Function} groupOrder
	   *                              A sorting function for ordering groups
	   *                           {Boolean} stack
	   *                              If true (default), items will be stacked on
	   *                              top of each other.
	   *                           {Number} margin.axis
	   *                              Margin between the axis and the items in pixels.
	   *                              Default is 20.
	   *                           {Number} margin.item.horizontal
	   *                              Horizontal margin between items in pixels.
	   *                              Default is 10.
	   *                           {Number} margin.item.vertical
	   *                              Vertical Margin between items in pixels.
	   *                              Default is 10.
	   *                           {Number} margin.item
	   *                              Margin between items in pixels in both horizontal
	   *                              and vertical direction. Default is 10.
	   *                           {Number} margin
	   *                              Set margin for both axis and items in pixels.
	   *                           {Boolean} selectable
	   *                              If true (default), items can be selected.
	   *                           {Boolean} multiselect
	   *                              If true, multiple items can be selected.
	   *                              False by default.
	   *                           {Boolean} editable
	   *                              Set all editable options to true or false
	   *                           {Boolean} editable.updateTime
	   *                              Allow dragging an item to an other moment in time
	   *                           {Boolean} editable.updateGroup
	   *                              Allow dragging an item to an other group
	   *                           {Boolean} editable.add
	   *                              Allow creating new items on double tap
	   *                           {Boolean} editable.remove
	   *                              Allow removing items by clicking the delete button
	   *                              top right of a selected item.
	   *                           {Function(item: Item, callback: Function)} onAdd
	   *                              Callback function triggered when an item is about to be added:
	   *                              when the user double taps an empty space in the Timeline.
	   *                           {Function(item: Item, callback: Function)} onUpdate
	   *                              Callback function fired when an item is about to be updated.
	   *                              This function typically has to show a dialog where the user
	   *                              change the item. If not implemented, nothing happens.
	   *                           {Function(item: Item, callback: Function)} onMove
	   *                              Fired when an item has been moved. If not implemented,
	   *                              the move action will be accepted.
	   *                           {Function(item: Item, callback: Function)} onRemove
	   *                              Fired when an item is about to be deleted.
	   *                              If not implemented, the item will be always removed.
	   */ItemSet.prototype.setOptions=function(options){if(options){// copy all options that we know
	var fields=['type','rtl','align','order','stack','selectable','multiselect','itemsAlwaysDraggable','multiselectPerGroup','groupOrder','dataAttributes','template','groupTemplate','hide','snap','groupOrderSwap','tooltipOnItemUpdateTime'];util.selectiveExtend(fields,this.options,options);if('orientation'in options){if(typeof options.orientation==='string'){this.options.orientation.item=options.orientation==='top'?'top':'bottom';}else if(_typeof(options.orientation)==='object'&&'item'in options.orientation){this.options.orientation.item=options.orientation.item;}}if('margin'in options){if(typeof options.margin==='number'){this.options.margin.axis=options.margin;this.options.margin.item.horizontal=options.margin;this.options.margin.item.vertical=options.margin;}else if(_typeof(options.margin)==='object'){util.selectiveExtend(['axis'],this.options.margin,options.margin);if('item'in options.margin){if(typeof options.margin.item==='number'){this.options.margin.item.horizontal=options.margin.item;this.options.margin.item.vertical=options.margin.item;}else if(_typeof(options.margin.item)==='object'){util.selectiveExtend(['horizontal','vertical'],this.options.margin.item,options.margin.item);}}}}if('editable'in options){if(typeof options.editable==='boolean'){this.options.editable.updateTime=options.editable;this.options.editable.updateGroup=options.editable;this.options.editable.add=options.editable;this.options.editable.remove=options.editable;}else if(_typeof(options.editable)==='object'){util.selectiveExtend(['updateTime','updateGroup','add','remove'],this.options.editable,options.editable);}}if('groupEditable'in options){if(typeof options.groupEditable==='boolean'){this.options.groupEditable.order=options.groupEditable;this.options.groupEditable.add=options.groupEditable;this.options.groupEditable.remove=options.groupEditable;}else if(_typeof(options.groupEditable)==='object'){util.selectiveExtend(['order','add','remove'],this.options.groupEditable,options.groupEditable);}}// callback functions
	var addCallback=function(name){var fn=options[name];if(fn){if(!(fn instanceof Function)){throw new Error('option '+name+' must be a function '+name+'(item, callback)');}this.options[name]=fn;}}.bind(this);['onAdd','onUpdate','onRemove','onMove','onMoving','onAddGroup','onMoveGroup','onRemoveGroup'].forEach(addCallback);// force the itemSet to refresh: options like orientation and margins may be changed
	this.markDirty();}};/**
	   * Mark the ItemSet dirty so it will refresh everything with next redraw.
	   * Optionally, all items can be marked as dirty and be refreshed.
	   * @param {{refreshItems: boolean}} [options]
	   */ItemSet.prototype.markDirty=function(options){this.groupIds=[];this.stackDirty=true;if(options&&options.refreshItems){util.forEach(this.items,function(item){item.dirty=true;if(item.displayed)item.redraw();});}};/**
	   * Destroy the ItemSet
	   */ItemSet.prototype.destroy=function(){this.hide();this.setItems(null);this.setGroups(null);this.hammer=null;this.body=null;this.conversion=null;};/**
	   * Hide the component from the DOM
	   */ItemSet.prototype.hide=function(){// remove the frame containing the items
	if(this.dom.frame.parentNode){this.dom.frame.parentNode.removeChild(this.dom.frame);}// remove the axis with dots
	if(this.dom.axis.parentNode){this.dom.axis.parentNode.removeChild(this.dom.axis);}// remove the labelset containing all group labels
	if(this.dom.labelSet.parentNode){this.dom.labelSet.parentNode.removeChild(this.dom.labelSet);}};/**
	   * Show the component in the DOM (when not already visible).
	   * @return {Boolean} changed
	   */ItemSet.prototype.show=function(){// show frame containing the items
	if(!this.dom.frame.parentNode){this.body.dom.center.appendChild(this.dom.frame);}// show axis with dots
	if(!this.dom.axis.parentNode){this.body.dom.backgroundVertical.appendChild(this.dom.axis);}// show labelset containing labels
	if(!this.dom.labelSet.parentNode){if(this.options.rtl){this.body.dom.right.appendChild(this.dom.labelSet);}else{this.body.dom.left.appendChild(this.dom.labelSet);}}};/**
	   * Set selected items by their id. Replaces the current selection
	   * Unknown id's are silently ignored.
	   * @param {string[] | string} [ids] An array with zero or more id's of the items to be
	   *                                  selected, or a single item id. If ids is undefined
	   *                                  or an empty array, all items will be unselected.
	   */ItemSet.prototype.setSelection=function(ids){var i,ii,id,item;if(ids==undefined)ids=[];if(!Array.isArray(ids))ids=[ids];// unselect currently selected items
	for(i=0,ii=this.selection.length;i<ii;i++){id=this.selection[i];item=this.items[id];if(item)item.unselect();}// select items
	this.selection=[];for(i=0,ii=ids.length;i<ii;i++){id=ids[i];item=this.items[id];if(item){this.selection.push(id);item.select();}}};/**
	   * Get the selected items by their id
	   * @return {Array} ids  The ids of the selected items
	   */ItemSet.prototype.getSelection=function(){return this.selection.concat([]);};/**
	   * Get the id's of the currently visible items.
	   * @returns {Array} The ids of the visible items
	   */ItemSet.prototype.getVisibleItems=function(){var range=this.body.range.getRange();if(this.options.rtl){var right=this.body.util.toScreen(range.start);var left=this.body.util.toScreen(range.end);}else{var left=this.body.util.toScreen(range.start);var right=this.body.util.toScreen(range.end);}var ids=[];for(var groupId in this.groups){if(this.groups.hasOwnProperty(groupId)){var group=this.groups[groupId];var rawVisibleItems=group.visibleItems;// filter the "raw" set with visibleItems into a set which is really
	// visible by pixels
	for(var i=0;i<rawVisibleItems.length;i++){var item=rawVisibleItems[i];// TODO: also check whether visible vertically
	if(this.options.rtl){if(item.right<left&&item.right+item.width>right){ids.push(item.id);}}else{if(item.left<right&&item.left+item.width>left){ids.push(item.id);}}}}}return ids;};/**
	   * Deselect a selected item
	   * @param {String | Number} id
	   * @private
	   */ItemSet.prototype._deselect=function(id){var selection=this.selection;for(var i=0,ii=selection.length;i<ii;i++){if(selection[i]==id){// non-strict comparison!
	selection.splice(i,1);break;}}};/**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */ItemSet.prototype.redraw=function(){var margin=this.options.margin,range=this.body.range,asSize=util.option.asSize,options=this.options,orientation=options.orientation.item,resized=false,frame=this.dom.frame;// recalculate absolute position (before redrawing groups)
	this.props.top=this.body.domProps.top.height+this.body.domProps.border.top;if(this.options.rtl){this.props.right=this.body.domProps.right.width+this.body.domProps.border.right;}else{this.props.left=this.body.domProps.left.width+this.body.domProps.border.left;}// update class name
	frame.className='vis-itemset';// reorder the groups (if needed)
	resized=this._orderGroups()||resized;// check whether zoomed (in that case we need to re-stack everything)
	// TODO: would be nicer to get this as a trigger from Range
	var visibleInterval=range.end-range.start;var zoomed=visibleInterval!=this.lastVisibleInterval||this.props.width!=this.props.lastWidth;if(zoomed)this.stackDirty=true;this.lastVisibleInterval=visibleInterval;this.props.lastWidth=this.props.width;var restack=this.stackDirty;var firstGroup=this._firstGroup();var firstMargin={item:margin.item,axis:margin.axis};var nonFirstMargin={item:margin.item,axis:margin.item.vertical/2};var height=0;var minHeight=margin.axis+margin.item.vertical;// redraw the background group
	this.groups[BACKGROUND].redraw(range,nonFirstMargin,restack);// redraw all regular groups
	util.forEach(this.groups,function(group){var groupMargin=group==firstGroup?firstMargin:nonFirstMargin;var groupResized=group.redraw(range,groupMargin,restack);resized=groupResized||resized;height+=group.height;});height=Math.max(height,minHeight);this.stackDirty=false;// update frame height
	frame.style.height=asSize(height);// calculate actual size
	this.props.width=frame.offsetWidth;this.props.height=height;// reposition axis
	this.dom.axis.style.top=asSize(orientation=='top'?this.body.domProps.top.height+this.body.domProps.border.top:this.body.domProps.top.height+this.body.domProps.centerContainer.height);if(this.options.rtl){this.dom.axis.style.right='0';}else{this.dom.axis.style.left='0';}// check if this component is resized
	resized=this._isResized()||resized;return resized;};/**
	   * Get the first group, aligned with the axis
	   * @return {Group | null} firstGroup
	   * @private
	   */ItemSet.prototype._firstGroup=function(){var firstGroupIndex=this.options.orientation.item=='top'?0:this.groupIds.length-1;var firstGroupId=this.groupIds[firstGroupIndex];var firstGroup=this.groups[firstGroupId]||this.groups[UNGROUPED];return firstGroup||null;};/**
	   * Create or delete the group holding all ungrouped items. This group is used when
	   * there are no groups specified.
	   * @protected
	   */ItemSet.prototype._updateUngrouped=function(){var ungrouped=this.groups[UNGROUPED];var background=this.groups[BACKGROUND];var item,itemId;if(this.groupsData){// remove the group holding all ungrouped items
	if(ungrouped){ungrouped.hide();delete this.groups[UNGROUPED];for(itemId in this.items){if(this.items.hasOwnProperty(itemId)){item=this.items[itemId];item.parent&&item.parent.remove(item);var groupId=this._getGroupId(item.data);var group=this.groups[groupId];group&&group.add(item)||item.hide();}}}}else{// create a group holding all (unfiltered) items
	if(!ungrouped){var id=null;var data=null;ungrouped=new Group(id,data,this);this.groups[UNGROUPED]=ungrouped;for(itemId in this.items){if(this.items.hasOwnProperty(itemId)){item=this.items[itemId];ungrouped.add(item);}}ungrouped.show();}}};/**
	   * Get the element for the labelset
	   * @return {HTMLElement} labelSet
	   */ItemSet.prototype.getLabelSet=function(){return this.dom.labelSet;};/**
	   * Set items
	   * @param {vis.DataSet | null} items
	   */ItemSet.prototype.setItems=function(items){var me=this,ids,oldItemsData=this.itemsData;// replace the dataset
	if(!items){this.itemsData=null;}else if(items instanceof DataSet||items instanceof DataView){this.itemsData=items;}else{throw new TypeError('Data must be an instance of DataSet or DataView');}if(oldItemsData){// unsubscribe from old dataset
	util.forEach(this.itemListeners,function(callback,event){oldItemsData.off(event,callback);});// remove all drawn items
	ids=oldItemsData.getIds();this._onRemove(ids);}if(this.itemsData){// subscribe to new dataset
	var id=this.id;util.forEach(this.itemListeners,function(callback,event){me.itemsData.on(event,callback,id);});// add all new items
	ids=this.itemsData.getIds();this._onAdd(ids);// update the group holding all ungrouped items
	this._updateUngrouped();}this.body.emitter.emit('_change',{queue:true});};/**
	   * Get the current items
	   * @returns {vis.DataSet | null}
	   */ItemSet.prototype.getItems=function(){return this.itemsData;};/**
	   * Set groups
	   * @param {vis.DataSet} groups
	   */ItemSet.prototype.setGroups=function(groups){var me=this,ids;// unsubscribe from current dataset
	if(this.groupsData){util.forEach(this.groupListeners,function(callback,event){me.groupsData.off(event,callback);});// remove all drawn groups
	ids=this.groupsData.getIds();this.groupsData=null;this._onRemoveGroups(ids);// note: this will cause a redraw
	}// replace the dataset
	if(!groups){this.groupsData=null;}else if(groups instanceof DataSet||groups instanceof DataView){this.groupsData=groups;}else{throw new TypeError('Data must be an instance of DataSet or DataView');}if(this.groupsData){// subscribe to new dataset
	var id=this.id;util.forEach(this.groupListeners,function(callback,event){me.groupsData.on(event,callback,id);});// draw all ms
	ids=this.groupsData.getIds();this._onAddGroups(ids);}// update the group holding all ungrouped items
	this._updateUngrouped();// update the order of all items in each group
	this._order();this.body.emitter.emit('_change',{queue:true});};/**
	   * Get the current groups
	   * @returns {vis.DataSet | null} groups
	   */ItemSet.prototype.getGroups=function(){return this.groupsData;};/**
	   * Remove an item by its id
	   * @param {String | Number} id
	   */ItemSet.prototype.removeItem=function(id){var item=this.itemsData.get(id),dataset=this.itemsData.getDataSet();if(item){// confirm deletion
	this.options.onRemove(item,function(item){if(item){// remove by id here, it is possible that an item has no id defined
	// itself, so better not delete by the item itself
	dataset.remove(id);}});}};/**
	   * Get the time of an item based on it's data and options.type
	   * @param {Object} itemData
	   * @returns {string} Returns the type
	   * @private
	   */ItemSet.prototype._getType=function(itemData){return itemData.type||this.options.type||(itemData.end?'range':'box');};/**
	   * Get the group id for an item
	   * @param {Object} itemData
	   * @returns {string} Returns the groupId
	   * @private
	   */ItemSet.prototype._getGroupId=function(itemData){var type=this._getType(itemData);if(type=='background'&&itemData.group==undefined){return BACKGROUND;}else{return this.groupsData?itemData.group:UNGROUPED;}};/**
	   * Handle updated items
	   * @param {Number[]} ids
	   * @protected
	   */ItemSet.prototype._onUpdate=function(ids){var me=this;ids.forEach(function(id){var itemData=me.itemsData.get(id,me.itemOptions);var item=me.items[id];var type=itemData?me._getType(itemData):null;var constructor=ItemSet.types[type];var selected;if(item){// update item
	if(!constructor||!(item instanceof constructor)){// item type has changed, delete the item and recreate it
	selected=item.selected;// preserve selection of this item
	me._removeItem(item);item=null;}else{me._updateItem(item,itemData);}}if(!item&&itemData){// create item
	if(constructor){item=new constructor(itemData,me.conversion,me.options);item.id=id;// TODO: not so nice setting id afterwards
	me._addItem(item);if(selected){this.selection.push(id);item.select();}}else if(type=='rangeoverflow'){// TODO: deprecated since version 2.1.0 (or 3.0.0?). cleanup some day
	throw new TypeError('Item type "rangeoverflow" is deprecated. Use css styling instead: '+'.vis-item.vis-range .vis-item-content {overflow: visible;}');}else{throw new TypeError('Unknown item type "'+type+'"');}}}.bind(this));this._order();this.stackDirty=true;// force re-stacking of all items next redraw
	this.body.emitter.emit('_change',{queue:true});};/**
	   * Handle added items
	   * @param {Number[]} ids
	   * @protected
	   */ItemSet.prototype._onAdd=ItemSet.prototype._onUpdate;/**
	   * Handle removed items
	   * @param {Number[]} ids
	   * @protected
	   */ItemSet.prototype._onRemove=function(ids){var count=0;var me=this;ids.forEach(function(id){var item=me.items[id];if(item){count++;me._removeItem(item);}});if(count){// update order
	this._order();this.stackDirty=true;// force re-stacking of all items next redraw
	this.body.emitter.emit('_change',{queue:true});}};/**
	   * Update the order of item in all groups
	   * @private
	   */ItemSet.prototype._order=function(){// reorder the items in all groups
	// TODO: optimization: only reorder groups affected by the changed items
	util.forEach(this.groups,function(group){group.order();});};/**
	   * Handle updated groups
	   * @param {Number[]} ids
	   * @private
	   */ItemSet.prototype._onUpdateGroups=function(ids){this._onAddGroups(ids);};/**
	   * Handle changed groups (added or updated)
	   * @param {Number[]} ids
	   * @private
	   */ItemSet.prototype._onAddGroups=function(ids){var me=this;ids.forEach(function(id){var groupData=me.groupsData.get(id);var group=me.groups[id];if(!group){// check for reserved ids
	if(id==UNGROUPED||id==BACKGROUND){throw new Error('Illegal group id. '+id+' is a reserved id.');}var groupOptions=Object.create(me.options);util.extend(groupOptions,{height:null});group=new Group(id,groupData,me);me.groups[id]=group;// add items with this groupId to the new group
	for(var itemId in me.items){if(me.items.hasOwnProperty(itemId)){var item=me.items[itemId];if(item.data.group==id){group.add(item);}}}group.order();group.show();}else{// update group
	group.setData(groupData);}});this.body.emitter.emit('_change',{queue:true});};/**
	   * Handle removed groups
	   * @param {Number[]} ids
	   * @private
	   */ItemSet.prototype._onRemoveGroups=function(ids){var groups=this.groups;ids.forEach(function(id){var group=groups[id];if(group){group.hide();delete groups[id];}});this.markDirty();this.body.emitter.emit('_change',{queue:true});};/**
	   * Reorder the groups if needed
	   * @return {boolean} changed
	   * @private
	   */ItemSet.prototype._orderGroups=function(){if(this.groupsData){// reorder the groups
	var groupIds=this.groupsData.getIds({order:this.options.groupOrder});var changed=!util.equalArray(groupIds,this.groupIds);if(changed){// hide all groups, removes them from the DOM
	var groups=this.groups;groupIds.forEach(function(groupId){groups[groupId].hide();});// show the groups again, attach them to the DOM in correct order
	groupIds.forEach(function(groupId){groups[groupId].show();});this.groupIds=groupIds;}return changed;}else{return false;}};/**
	   * Add a new item
	   * @param {Item} item
	   * @private
	   */ItemSet.prototype._addItem=function(item){this.items[item.id]=item;// add to group
	var groupId=this._getGroupId(item.data);var group=this.groups[groupId];if(group)group.add(item);};/**
	   * Update an existing item
	   * @param {Item} item
	   * @param {Object} itemData
	   * @private
	   */ItemSet.prototype._updateItem=function(item,itemData){var oldGroupId=item.data.group;var oldSubGroupId=item.data.subgroup;// update the items data (will redraw the item when displayed)
	item.setData(itemData);// update group
	if(oldGroupId!=item.data.group||oldSubGroupId!=item.data.subgroup){var oldGroup=this.groups[oldGroupId];if(oldGroup)oldGroup.remove(item);var groupId=this._getGroupId(item.data);var group=this.groups[groupId];if(group)group.add(item);}};/**
	   * Delete an item from the ItemSet: remove it from the DOM, from the map
	   * with items, and from the map with visible items, and from the selection
	   * @param {Item} item
	   * @private
	   */ItemSet.prototype._removeItem=function(item){// remove from DOM
	item.hide();// remove from items
	delete this.items[item.id];// remove from selection
	var index=this.selection.indexOf(item.id);if(index!=-1)this.selection.splice(index,1);// remove from group
	item.parent&&item.parent.remove(item);};/**
	   * Create an array containing all items being a range (having an end date)
	   * @param array
	   * @returns {Array}
	   * @private
	   */ItemSet.prototype._constructByEndArray=function(array){var endArray=[];for(var i=0;i<array.length;i++){if(array[i]instanceof RangeItem){endArray.push(array[i]);}}return endArray;};/**
	   * Register the clicked item on touch, before dragStart is initiated.
	   *
	   * dragStart is initiated from a mousemove event, AFTER the mouse/touch is
	   * already moving. Therefore, the mouse/touch can sometimes be above an other
	   * DOM element than the item itself.
	   *
	   * @param {Event} event
	   * @private
	   */ItemSet.prototype._onTouch=function(event){// store the touched item, used in _onDragStart
	this.touchParams.item=this.itemFromTarget(event);this.touchParams.dragLeftItem=event.target.dragLeftItem||false;this.touchParams.dragRightItem=event.target.dragRightItem||false;this.touchParams.itemProps=null;};/**
	   * Given an group id, returns the index it has.
	   *
	   * @param {Number} groupID
	   * @private
	   */ItemSet.prototype._getGroupIndex=function(groupId){for(var i=0;i<this.groupIds.length;i++){if(groupId==this.groupIds[i])return i;}};/**
	   * Start dragging the selected events
	   * @param {Event} event
	   * @private
	   */ItemSet.prototype._onDragStart=function(event){var item=this.touchParams.item||null;var me=this;var props;if(item&&(item.selected||this.options.itemsAlwaysDraggable)){if(!this.options.editable.updateTime&&!this.options.editable.updateGroup&&!item.editable){return;}// override options.editable
	if(item.editable===false){return;}var dragLeftItem=this.touchParams.dragLeftItem;var dragRightItem=this.touchParams.dragRightItem;this.touchParams.itemIsDragging=true;if(dragLeftItem){props={item:dragLeftItem,initialX:event.center.x,dragLeft:true,data:this._cloneItemData(item.data)};this.touchParams.itemProps=[props];}else if(dragRightItem){props={item:dragRightItem,initialX:event.center.x,dragRight:true,data:this._cloneItemData(item.data)};this.touchParams.itemProps=[props];}else{this.touchParams.selectedItem=item;var baseGroupIndex=this._getGroupIndex(item.data.group);var itemsToDrag=this.options.itemsAlwaysDraggable&&!item.selected?[item.id]:this.getSelection();this.touchParams.itemProps=itemsToDrag.map(function(id){var item=me.items[id];var groupIndex=me._getGroupIndex(item.data.group);return{item:item,initialX:event.center.x,groupOffset:baseGroupIndex-groupIndex,data:this._cloneItemData(item.data)};}.bind(this));}event.stopPropagation();}else if(this.options.editable.add&&(event.srcEvent.ctrlKey||event.srcEvent.metaKey)){// create a new range item when dragging with ctrl key down
	this._onDragStartAddItem(event);}};/**
	   * Start creating a new range item by dragging.
	   * @param {Event} event
	   * @private
	   */ItemSet.prototype._onDragStartAddItem=function(event){var snap=this.options.snap||null;if(this.options.rtl){var xAbs=util.getAbsoluteRight(this.dom.frame);var x=xAbs-event.center.x+10;// plus 10 to compensate for the drag starting as soon as you've moved 10px
	}else{var xAbs=util.getAbsoluteLeft(this.dom.frame);var x=event.center.x-xAbs-10;// minus 10 to compensate for the drag starting as soon as you've moved 10px
	}var time=this.body.util.toTime(x);var scale=this.body.util.getScale();var step=this.body.util.getStep();var start=snap?snap(time,scale,step):time;var end=start;var itemData={type:'range',start:start,end:end,content:'new item'};var id=util.randomUUID();itemData[this.itemsData._fieldId]=id;var group=this.groupFromTarget(event);if(group){itemData.group=group.groupId;}var newItem=new RangeItem(itemData,this.conversion,this.options);newItem.id=id;// TODO: not so nice setting id afterwards
	newItem.data=this._cloneItemData(itemData);this._addItem(newItem);var props={item:newItem,initialX:event.center.x,data:newItem.data};if(this.options.rtl){props.dragLeft=true;}else{props.dragRight=true;}this.touchParams.itemProps=[props];event.stopPropagation();};/**
	   * Drag selected items
	   * @param {Event} event
	   * @private
	   */ItemSet.prototype._onDrag=function(event){if(this.touchParams.itemProps){event.stopPropagation();var me=this;var snap=this.options.snap||null;if(this.options.rtl){var xOffset=this.body.dom.root.offsetLeft+this.body.domProps.right.width;}else{var xOffset=this.body.dom.root.offsetLeft+this.body.domProps.left.width;}var scale=this.body.util.getScale();var step=this.body.util.getStep();//only calculate the new group for the item that's actually dragged
	var selectedItem=this.touchParams.selectedItem;var updateGroupAllowed=me.options.editable.updateGroup;var newGroupBase=null;if(updateGroupAllowed&&selectedItem){if(selectedItem.data.group!=undefined){// drag from one group to another
	var group=me.groupFromTarget(event);if(group){//we know the offset for all items, so the new group for all items
	//will be relative to this one.
	newGroupBase=this._getGroupIndex(group.groupId);}}}// move
	this.touchParams.itemProps.forEach(function(props){var current=me.body.util.toTime(event.center.x-xOffset);var initial=me.body.util.toTime(props.initialX-xOffset);if(this.options.rtl){var offset=-(current-initial);// ms
	}else{var offset=current-initial;// ms
	}var itemData=this._cloneItemData(props.item.data);// clone the data
	if(props.item.editable===false){return;}var updateTimeAllowed=me.options.editable.updateTime||props.item.editable===true;if(updateTimeAllowed){if(props.dragLeft){// drag left side of a range item
	if(this.options.rtl){if(itemData.end!=undefined){var initialEnd=util.convert(props.data.end,'Date');var end=new Date(initialEnd.valueOf()+offset);// TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	itemData.end=snap?snap(end,scale,step):end;}}else{if(itemData.start!=undefined){var initialStart=util.convert(props.data.start,'Date');var start=new Date(initialStart.valueOf()+offset);// TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	itemData.start=snap?snap(start,scale,step):start;}}}else if(props.dragRight){// drag right side of a range item
	if(this.options.rtl){if(itemData.start!=undefined){var initialStart=util.convert(props.data.start,'Date');var start=new Date(initialStart.valueOf()+offset);// TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	itemData.start=snap?snap(start,scale,step):start;}}else{if(itemData.end!=undefined){var initialEnd=util.convert(props.data.end,'Date');var end=new Date(initialEnd.valueOf()+offset);// TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	itemData.end=snap?snap(end,scale,step):end;}}}else{// drag both start and end
	if(itemData.start!=undefined){var initialStart=util.convert(props.data.start,'Date').valueOf();var start=new Date(initialStart+offset);if(itemData.end!=undefined){var initialEnd=util.convert(props.data.end,'Date');var duration=initialEnd.valueOf()-initialStart.valueOf();// TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	itemData.start=snap?snap(start,scale,step):start;itemData.end=new Date(itemData.start.valueOf()+duration);}else{// TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	itemData.start=snap?snap(start,scale,step):start;}}}}var updateGroupAllowed=me.options.editable.updateGroup||props.item.editable===true;if(updateGroupAllowed&&!props.dragLeft&&!props.dragRight&&newGroupBase!=null){if(itemData.group!=undefined){var newOffset=newGroupBase-props.groupOffset;//make sure we stay in bounds
	newOffset=Math.max(0,newOffset);newOffset=Math.min(me.groupIds.length-1,newOffset);itemData.group=me.groupIds[newOffset];}}// confirm moving the item
	itemData=this._cloneItemData(itemData);// convert start and end to the correct type
	me.options.onMoving(itemData,function(itemData){if(itemData){props.item.setData(this._cloneItemData(itemData,'Date'));}}.bind(this));}.bind(this));this.stackDirty=true;// force re-stacking of all items next redraw
	this.body.emitter.emit('_change');}};/**
	   * Move an item to another group
	   * @param {Item} item
	   * @param {String | Number} groupId
	   * @private
	   */ItemSet.prototype._moveToGroup=function(item,groupId){var group=this.groups[groupId];if(group&&group.groupId!=item.data.group){var oldGroup=item.parent;oldGroup.remove(item);oldGroup.order();group.add(item);group.order();item.data.group=group.groupId;}};/**
	   * End of dragging selected items
	   * @param {Event} event
	   * @private
	   */ItemSet.prototype._onDragEnd=function(event){if(this.touchParams.itemProps){event.stopPropagation();var me=this;var dataset=this.itemsData.getDataSet();var itemProps=this.touchParams.itemProps;this.touchParams.itemProps=null;this.touchParams.itemIsDragging=false;itemProps.forEach(function(props){var id=props.item.id;var exists=me.itemsData.get(id,me.itemOptions)!=null;if(!exists){// add a new item
	me.options.onAdd(props.item.data,function(itemData){me._removeItem(props.item);// remove temporary item
	if(itemData){me.itemsData.getDataSet().add(itemData);}// force re-stacking of all items next redraw
	me.stackDirty=true;me.body.emitter.emit('_change');});}else{// update existing item
	var itemData=this._cloneItemData(props.item.data);// convert start and end to the correct type
	me.options.onMove(itemData,function(itemData){if(itemData){// apply changes
	itemData[dataset._fieldId]=id;// ensure the item contains its id (can be undefined)
	dataset.update(itemData);}else{// restore original values
	props.item.setData(props.data);me.stackDirty=true;// force re-stacking of all items next redraw
	me.body.emitter.emit('_change');}});}}.bind(this));}};ItemSet.prototype._onGroupDragStart=function(event){if(this.options.groupEditable.order){this.groupTouchParams.group=this.groupFromTarget(event);if(this.groupTouchParams.group){event.stopPropagation();this.groupTouchParams.originalOrder=this.groupsData.getIds({order:this.options.groupOrder});}}};ItemSet.prototype._onGroupDrag=function(event){if(this.options.groupEditable.order&&this.groupTouchParams.group){event.stopPropagation();// drag from one group to another
	var group=this.groupFromTarget(event);// try to avoid toggling when groups differ in height
	if(group&&group.height!=this.groupTouchParams.group.height){var movingUp=group.top<this.groupTouchParams.group.top;var clientY=event.center?event.center.y:event.clientY;var targetGroupTop=util.getAbsoluteTop(group.dom.foreground);var draggedGroupHeight=this.groupTouchParams.group.height;if(movingUp){// skip swapping the groups when the dragged group is not below clientY afterwards
	if(targetGroupTop+draggedGroupHeight<clientY){return;}}else{var targetGroupHeight=group.height;// skip swapping the groups when the dragged group is not below clientY afterwards
	if(targetGroupTop+targetGroupHeight-draggedGroupHeight>clientY){return;}}}if(group&&group!=this.groupTouchParams.group){var groupsData=this.groupsData;var targetGroup=groupsData.get(group.groupId);var draggedGroup=groupsData.get(this.groupTouchParams.group.groupId);// switch groups
	if(draggedGroup&&targetGroup){this.options.groupOrderSwap(draggedGroup,targetGroup,this.groupsData);this.groupsData.update(draggedGroup);this.groupsData.update(targetGroup);}// fetch current order of groups
	var newOrder=this.groupsData.getIds({order:this.options.groupOrder});// in case of changes since _onGroupDragStart
	if(!util.equalArray(newOrder,this.groupTouchParams.originalOrder)){var groupsData=this.groupsData;var origOrder=this.groupTouchParams.originalOrder;var draggedId=this.groupTouchParams.group.groupId;var numGroups=Math.min(origOrder.length,newOrder.length);var curPos=0;var newOffset=0;var orgOffset=0;while(curPos<numGroups){// as long as the groups are where they should be step down along the groups order
	while(curPos+newOffset<numGroups&&curPos+orgOffset<numGroups&&newOrder[curPos+newOffset]==origOrder[curPos+orgOffset]){curPos++;}// all ok
	if(curPos+newOffset>=numGroups){break;}// not all ok
	// if dragged group was move upwards everything below should have an offset
	if(newOrder[curPos+newOffset]==draggedId){newOffset=1;continue;}// if dragged group was move downwards everything above should have an offset
	else if(origOrder[curPos+orgOffset]==draggedId){orgOffset=1;continue;}// found a group (apart from dragged group) that has the wrong position -> switch with the 
	// group at the position where other one should be, fix index arrays and continue
	else{var slippedPosition=newOrder.indexOf(origOrder[curPos+orgOffset]);var switchGroup=groupsData.get(newOrder[curPos+newOffset]);var shouldBeGroup=groupsData.get(origOrder[curPos+orgOffset]);this.options.groupOrderSwap(switchGroup,shouldBeGroup,groupsData);groupsData.update(switchGroup);groupsData.update(shouldBeGroup);var switchGroupId=newOrder[curPos+newOffset];newOrder[curPos+newOffset]=origOrder[curPos+orgOffset];newOrder[slippedPosition]=switchGroupId;curPos++;}}}}}};ItemSet.prototype._onGroupDragEnd=function(event){if(this.options.groupEditable.order&&this.groupTouchParams.group){event.stopPropagation();// update existing group
	var me=this;var id=me.groupTouchParams.group.groupId;var dataset=me.groupsData.getDataSet();var groupData=util.extend({},dataset.get(id));// clone the data
	me.options.onMoveGroup(groupData,function(groupData){if(groupData){// apply changes
	groupData[dataset._fieldId]=id;// ensure the group contains its id (can be undefined)
	dataset.update(groupData);}else{// fetch current order of groups
	var newOrder=dataset.getIds({order:me.options.groupOrder});// restore original order
	if(!util.equalArray(newOrder,me.groupTouchParams.originalOrder)){var origOrder=me.groupTouchParams.originalOrder;var numGroups=Math.min(origOrder.length,newOrder.length);var curPos=0;while(curPos<numGroups){// as long as the groups are where they should be step down along the groups order
	while(curPos<numGroups&&newOrder[curPos]==origOrder[curPos]){curPos++;}// all ok
	if(curPos>=numGroups){break;}// found a group that has the wrong position -> switch with the 
	// group at the position where other one should be, fix index arrays and continue
	var slippedPosition=newOrder.indexOf(origOrder[curPos]);var switchGroup=dataset.get(newOrder[curPos]);var shouldBeGroup=dataset.get(origOrder[curPos]);me.options.groupOrderSwap(switchGroup,shouldBeGroup,dataset);groupsData.update(switchGroup);groupsData.update(shouldBeGroup);var switchGroupId=newOrder[curPos];newOrder[curPos]=origOrder[curPos];newOrder[slippedPosition]=switchGroupId;curPos++;}}}});me.body.emitter.emit('groupDragged',{groupId:id});}};/**
	   * Handle selecting/deselecting an item when tapping it
	   * @param {Event} event
	   * @private
	   */ItemSet.prototype._onSelectItem=function(event){if(!this.options.selectable)return;var ctrlKey=event.srcEvent&&(event.srcEvent.ctrlKey||event.srcEvent.metaKey);var shiftKey=event.srcEvent&&event.srcEvent.shiftKey;if(ctrlKey||shiftKey){this._onMultiSelectItem(event);return;}var oldSelection=this.getSelection();var item=this.itemFromTarget(event);var selection=item?[item.id]:[];this.setSelection(selection);var newSelection=this.getSelection();// emit a select event,
	// except when old selection is empty and new selection is still empty
	if(newSelection.length>0||oldSelection.length>0){this.body.emitter.emit('select',{items:newSelection,event:event});}};/**
	   * Handle hovering an item
	   * @param {Event} event
	   * @private
	   */ItemSet.prototype._onMouseOver=function(event){var item=this.itemFromTarget(event);if(!item)return;this.body.emitter.emit('itemover',{item:item.id,event:event});};ItemSet.prototype._onMouseOut=function(event){var item=this.itemFromTarget(event);if(!item)return;this.body.emitter.emit('itemout',{item:item.id,event:event});};/**
	   * Handle creation and updates of an item on double tap
	   * @param event
	   * @private
	   */ItemSet.prototype._onAddItem=function(event){if(!this.options.selectable)return;if(!this.options.editable.add)return;var me=this;var snap=this.options.snap||null;var item=this.itemFromTarget(event);if(item){// update item
	// execute async handler to update the item (or cancel it)
	var itemData=me.itemsData.get(item.id);// get a clone of the data from the dataset
	this.options.onUpdate(itemData,function(itemData){if(itemData){me.itemsData.getDataSet().update(itemData);}});}else{// add item
	if(this.options.rtl){var xAbs=util.getAbsoluteRight(this.dom.frame);var x=xAbs-event.center.x;}else{var xAbs=util.getAbsoluteLeft(this.dom.frame);var x=event.center.x-xAbs;}// var xAbs = util.getAbsoluteLeft(this.dom.frame);
	// var x = event.center.x - xAbs;
	var start=this.body.util.toTime(x);var scale=this.body.util.getScale();var step=this.body.util.getStep();var newItemData={start:snap?snap(start,scale,step):start,content:'new item'};if(event.type=='drop'){var itemData=JSON.parse(event.dataTransfer.getData("text/plain"));newItemData.content=itemData.content;// content is required 
	newItemData.type=itemData.type||'box';newItemData[this.itemsData._fieldId]=itemData.id||util.randomUUID();if(itemData.type=='range'||itemData.end&&itemData.start){if(!itemData.end){var end=this.body.util.toTime(x+this.props.width/5);newItemData.end=snap?snap(end,scale,step):end;}else{newItemData.end=new Date(newItemData.start._i).getTime()+new Date(itemData.end).getTime()-new Date(itemData.start).getTime();}}}else{newItemData[this.itemsData._fieldId]=util.randomUUID();// when default type is a range, add a default end date to the new item
	if(this.options.type==='range'){var end=this.body.util.toTime(x+this.props.width/5);newItemData.end=snap?snap(end,scale,step):end;}}var group=this.groupFromTarget(event);if(group){newItemData.group=group.groupId;}// execute async handler to customize (or cancel) adding an item
	newItemData=this._cloneItemData(newItemData);// convert start and end to the correct type
	this.options.onAdd(newItemData,function(item){if(item){me.itemsData.getDataSet().add(item);if(event.type=='drop'){me.setSelection([item.id]);}// TODO: need to trigger a redraw?
	}});}};/**
	   * Handle selecting/deselecting multiple items when holding an item
	   * @param {Event} event
	   * @private
	   */ItemSet.prototype._onMultiSelectItem=function(event){if(!this.options.selectable)return;var item=this.itemFromTarget(event);if(item){// multi select items (if allowed)
	var selection=this.options.multiselect?this.getSelection()// take current selection
	:[];// deselect current selection
	var shiftKey=event.srcEvent&&event.srcEvent.shiftKey||false;if(shiftKey&&this.options.multiselect){// select all items between the old selection and the tapped item
	var itemGroup=this.itemsData.get(item.id).group;// when filtering get the group of the last selected item
	var lastSelectedGroup=undefined;if(this.options.multiselectPerGroup){if(selection.length>0){lastSelectedGroup=this.itemsData.get(selection[0]).group;}}// determine the selection range
	if(!this.options.multiselectPerGroup||lastSelectedGroup==undefined||lastSelectedGroup==itemGroup){selection.push(item.id);}var range=ItemSet._getItemRange(this.itemsData.get(selection,this.itemOptions));if(!this.options.multiselectPerGroup||lastSelectedGroup==itemGroup){// select all items within the selection range
	selection=[];for(var id in this.items){if(this.items.hasOwnProperty(id)){var _item=this.items[id];var start=_item.data.start;var end=_item.data.end!==undefined?_item.data.end:start;if(start>=range.min&&end<=range.max&&(!this.options.multiselectPerGroup||lastSelectedGroup==this.itemsData.get(_item.id).group)&&!(_item instanceof BackgroundItem)){selection.push(_item.id);// do not use id but item.id, id itself is stringified
	}}}}}else{// add/remove this item from the current selection
	var index=selection.indexOf(item.id);if(index==-1){// item is not yet selected -> select it
	selection.push(item.id);}else{// item is already selected -> deselect it
	selection.splice(index,1);}}this.setSelection(selection);this.body.emitter.emit('select',{items:this.getSelection(),event:event});}};/**
	   * Calculate the time range of a list of items
	   * @param {Array.<Object>} itemsData
	   * @return {{min: Date, max: Date}} Returns the range of the provided items
	   * @private
	   */ItemSet._getItemRange=function(itemsData){var max=null;var min=null;itemsData.forEach(function(data){if(min==null||data.start<min){min=data.start;}if(data.end!=undefined){if(max==null||data.end>max){max=data.end;}}else{if(max==null||data.start>max){max=data.start;}}});return{min:min,max:max};};/**
	   * Find an item from an event target:
	   * searches for the attribute 'timeline-item' in the event target's element tree
	   * @param {Event} event
	   * @return {Item | null} item
	   */ItemSet.prototype.itemFromTarget=function(event){var target=event.target;while(target){if(target.hasOwnProperty('timeline-item')){return target['timeline-item'];}target=target.parentNode;}return null;};/**
	   * Find the Group from an event target:
	   * searches for the attribute 'timeline-group' in the event target's element tree
	   * @param {Event} event
	   * @return {Group | null} group
	   */ItemSet.prototype.groupFromTarget=function(event){var clientY=event.center?event.center.y:event.clientY;for(var i=0;i<this.groupIds.length;i++){var groupId=this.groupIds[i];var group=this.groups[groupId];var foreground=group.dom.foreground;var top=util.getAbsoluteTop(foreground);if(clientY>top&&clientY<top+foreground.offsetHeight){return group;}if(this.options.orientation.item==='top'){if(i===this.groupIds.length-1&&clientY>top){return group;}}else{if(i===0&&clientY<top+foreground.offset){return group;}}}return null;};/**
	   * Find the ItemSet from an event target:
	   * searches for the attribute 'timeline-itemset' in the event target's element tree
	   * @param {Event} event
	   * @return {ItemSet | null} item
	   */ItemSet.itemSetFromTarget=function(event){var target=event.target;while(target){if(target.hasOwnProperty('timeline-itemset')){return target['timeline-itemset'];}target=target.parentNode;}return null;};/**
	   * Clone the data of an item, and "normalize" it: convert the start and end date
	   * to the type (Date, Moment, ...) configured in the DataSet. If not configured,
	   * start and end are converted to Date.
	   * @param {Object} itemData, typically `item.data`
	   * @param {string} [type]  Optional Date type. If not provided, the type from the DataSet is taken
	   * @return {Object} The cloned object
	   * @private
	   */ItemSet.prototype._cloneItemData=function(itemData,type){var clone=util.extend({},itemData);if(!type){// convert start and end date to the type (Date, Moment, ...) configured in the DataSet
	type=this.itemsData.getDataSet()._options.type;}if(clone.start!=undefined){clone.start=util.convert(clone.start,type&&type.start||'Date');}if(clone.end!=undefined){clone.end=util.convert(clone.end,type&&type.end||'Date');}return clone;};module.exports=ItemSet;/***/},/* 37 *//***/function(module,exports,__webpack_require__){'use strict';var moment=__webpack_require__(2);var DateUtil=__webpack_require__(34);var util=__webpack_require__(1);/**
	   * @constructor  TimeStep
	   * The class TimeStep is an iterator for dates. You provide a start date and an
	   * end date. The class itself determines the best scale (step size) based on the
	   * provided start Date, end Date, and minimumStep.
	   *
	   * If minimumStep is provided, the step size is chosen as close as possible
	   * to the minimumStep but larger than minimumStep. If minimumStep is not
	   * provided, the scale is set to 1 DAY.
	   * The minimumStep should correspond with the onscreen size of about 6 characters
	   *
	   * Alternatively, you can set a scale by hand.
	   * After creation, you can initialize the class by executing first(). Then you
	   * can iterate from the start date to the end date via next(). You can check if
	   * the end date is reached with the function hasNext(). After each step, you can
	   * retrieve the current date via getCurrent().
	   * The TimeStep has scales ranging from milliseconds, seconds, minutes, hours,
	   * days, to years.
	   *
	   * Version: 1.2
	   *
	   * @param {Date} [start]         The start date, for example new Date(2010, 9, 21)
	   *                               or new Date(2010, 9, 21, 23, 45, 00)
	   * @param {Date} [end]           The end date
	   * @param {Number} [minimumStep] Optional. Minimum step size in milliseconds
	   */function TimeStep(start,end,minimumStep,hiddenDates){this.moment=moment;// variables
	this.current=this.moment();this._start=this.moment();this._end=this.moment();this.autoScale=true;this.scale='day';this.step=1;// initialize the range
	this.setRange(start,end,minimumStep);// hidden Dates options
	this.switchedDay=false;this.switchedMonth=false;this.switchedYear=false;if(Array.isArray(hiddenDates)){this.hiddenDates=hiddenDates;}else if(hiddenDates!=undefined){this.hiddenDates=[hiddenDates];}else{this.hiddenDates=[];}this.format=TimeStep.FORMAT;// default formatting
	}// Time formatting
	TimeStep.FORMAT={minorLabels:{millisecond:'SSS',second:'s',minute:'HH:mm',hour:'HH:mm',weekday:'ddd D',day:'D',month:'MMM',year:'YYYY'},majorLabels:{millisecond:'HH:mm:ss',second:'D MMMM HH:mm',minute:'ddd D MMMM',hour:'ddd D MMMM',weekday:'MMMM YYYY',day:'MMMM YYYY',month:'YYYY',year:''}};/**
	   * Set custom constructor function for moment. Can be used to set dates
	   * to UTC or to set a utcOffset.
	   * @param {function} moment
	   */TimeStep.prototype.setMoment=function(moment){this.moment=moment;// update the date properties, can have a new utcOffset
	this.current=this.moment(this.current.valueOf());this._start=this.moment(this._start.valueOf());this._end=this.moment(this._end.valueOf());};/**
	   * Set custom formatting for the minor an major labels of the TimeStep.
	   * Both `minorLabels` and `majorLabels` are an Object with properties:
	   * 'millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'month', 'year'.
	   * @param {{minorLabels: Object, majorLabels: Object}} format
	   */TimeStep.prototype.setFormat=function(format){var defaultFormat=util.deepExtend({},TimeStep.FORMAT);this.format=util.deepExtend(defaultFormat,format);};/**
	   * Set a new range
	   * If minimumStep is provided, the step size is chosen as close as possible
	   * to the minimumStep but larger than minimumStep. If minimumStep is not
	   * provided, the scale is set to 1 DAY.
	   * The minimumStep should correspond with the onscreen size of about 6 characters
	   * @param {Date} [start]      The start date and time.
	   * @param {Date} [end]        The end date and time.
	   * @param {int} [minimumStep] Optional. Minimum step size in milliseconds
	   */TimeStep.prototype.setRange=function(start,end,minimumStep){if(!(start instanceof Date)||!(end instanceof Date)){throw"No legal start or end date in method setRange";}this._start=start!=undefined?this.moment(start.valueOf()):new Date();this._end=end!=undefined?this.moment(end.valueOf()):new Date();if(this.autoScale){this.setMinimumStep(minimumStep);}};/**
	   * Set the range iterator to the start date.
	   */TimeStep.prototype.start=function(){this.current=this._start.clone();this.roundToMinor();};/**
	   * Round the current date to the first minor date value
	   * This must be executed once when the current date is set to start Date
	   */TimeStep.prototype.roundToMinor=function(){// round to floor
	// IMPORTANT: we have no breaks in this switch! (this is no bug)
	// noinspection FallThroughInSwitchStatementJS
	switch(this.scale){case'year':this.current.year(this.step*Math.floor(this.current.year()/this.step));this.current.month(0);case'month':this.current.date(1);case'day':// intentional fall through
	case'weekday':this.current.hours(0);case'hour':this.current.minutes(0);case'minute':this.current.seconds(0);case'second':this.current.milliseconds(0);//case 'millisecond': // nothing to do for milliseconds
	}if(this.step!=1){// round down to the first minor value that is a multiple of the current step size
	switch(this.scale){case'millisecond':this.current.subtract(this.current.milliseconds()%this.step,'milliseconds');break;case'second':this.current.subtract(this.current.seconds()%this.step,'seconds');break;case'minute':this.current.subtract(this.current.minutes()%this.step,'minutes');break;case'hour':this.current.subtract(this.current.hours()%this.step,'hours');break;case'weekday':// intentional fall through
	case'day':this.current.subtract((this.current.date()-1)%this.step,'day');break;case'month':this.current.subtract(this.current.month()%this.step,'month');break;case'year':this.current.subtract(this.current.year()%this.step,'year');break;default:break;}}};/**
	   * Check if the there is a next step
	   * @return {boolean}  true if the current date has not passed the end date
	   */TimeStep.prototype.hasNext=function(){return this.current.valueOf()<=this._end.valueOf();};/**
	   * Do the next step
	   */TimeStep.prototype.next=function(){var prev=this.current.valueOf();// Two cases, needed to prevent issues with switching daylight savings
	// (end of March and end of October)
	if(this.current.month()<6){switch(this.scale){case'millisecond':this.current.add(this.step,'millisecond');break;case'second':this.current.add(this.step,'second');break;case'minute':this.current.add(this.step,'minute');break;case'hour':this.current.add(this.step,'hour');// in case of skipping an hour for daylight savings, adjust the hour again (else you get: 0h 5h 9h ... instead of 0h 4h 8h ...)
	// TODO: is this still needed now we use the function of moment.js?
	this.current.subtract(this.current.hours()%this.step,'hour');break;case'weekday':// intentional fall through
	case'day':this.current.add(this.step,'day');break;case'month':this.current.add(this.step,'month');break;case'year':this.current.add(this.step,'year');break;default:break;}}else{switch(this.scale){case'millisecond':this.current.add(this.step,'millisecond');break;case'second':this.current.add(this.step,'second');break;case'minute':this.current.add(this.step,'minute');break;case'hour':this.current.add(this.step,'hour');break;case'weekday':// intentional fall through
	case'day':this.current.add(this.step,'day');break;case'month':this.current.add(this.step,'month');break;case'year':this.current.add(this.step,'year');break;default:break;}}if(this.step!=1){// round down to the correct major value
	switch(this.scale){case'millisecond':if(this.current.milliseconds()<this.step)this.current.milliseconds(0);break;case'second':if(this.current.seconds()<this.step)this.current.seconds(0);break;case'minute':if(this.current.minutes()<this.step)this.current.minutes(0);break;case'hour':if(this.current.hours()<this.step)this.current.hours(0);break;case'weekday':// intentional fall through
	case'day':if(this.current.date()<this.step+1)this.current.date(1);break;case'month':if(this.current.month()<this.step)this.current.month(0);break;case'year':break;// nothing to do for year
	default:break;}}// safety mechanism: if current time is still unchanged, move to the end
	if(this.current.valueOf()==prev){this.current=this._end.clone();}// Reset switches for year, month and day. Will get set to true where appropriate in DateUtil.stepOverHiddenDates
	this.switchedDay=false;this.switchedMonth=false;this.switchedYear=false;DateUtil.stepOverHiddenDates(this.moment,this,prev);};/**
	   * Get the current datetime
	   * @return {Moment}  current The current date
	   */TimeStep.prototype.getCurrent=function(){return this.current;};/**
	   * Set a custom scale. Autoscaling will be disabled.
	   * For example setScale('minute', 5) will result
	   * in minor steps of 5 minutes, and major steps of an hour.
	   *
	   * @param {{scale: string, step: number}} params
	   *                               An object containing two properties:
	   *                               - A string 'scale'. Choose from 'millisecond', 'second',
	   *                                 'minute', 'hour', 'weekday', 'day', 'month', 'year'.
	   *                               - A number 'step'. A step size, by default 1.
	   *                                 Choose for example 1, 2, 5, or 10.
	   */TimeStep.prototype.setScale=function(params){if(params&&typeof params.scale=='string'){this.scale=params.scale;this.step=params.step>0?params.step:1;this.autoScale=false;}};/**
	   * Enable or disable autoscaling
	   * @param {boolean} enable  If true, autoascaling is set true
	   */TimeStep.prototype.setAutoScale=function(enable){this.autoScale=enable;};/**
	   * Automatically determine the scale that bests fits the provided minimum step
	   * @param {Number} [minimumStep]  The minimum step size in milliseconds
	   */TimeStep.prototype.setMinimumStep=function(minimumStep){if(minimumStep==undefined){return;}//var b = asc + ds;
	var stepYear=1000*60*60*24*30*12;var stepMonth=1000*60*60*24*30;var stepDay=1000*60*60*24;var stepHour=1000*60*60;var stepMinute=1000*60;var stepSecond=1000;var stepMillisecond=1;// find the smallest step that is larger than the provided minimumStep
	if(stepYear*1000>minimumStep){this.scale='year';this.step=1000;}if(stepYear*500>minimumStep){this.scale='year';this.step=500;}if(stepYear*100>minimumStep){this.scale='year';this.step=100;}if(stepYear*50>minimumStep){this.scale='year';this.step=50;}if(stepYear*10>minimumStep){this.scale='year';this.step=10;}if(stepYear*5>minimumStep){this.scale='year';this.step=5;}if(stepYear>minimumStep){this.scale='year';this.step=1;}if(stepMonth*3>minimumStep){this.scale='month';this.step=3;}if(stepMonth>minimumStep){this.scale='month';this.step=1;}if(stepDay*5>minimumStep){this.scale='day';this.step=5;}if(stepDay*2>minimumStep){this.scale='day';this.step=2;}if(stepDay>minimumStep){this.scale='day';this.step=1;}if(stepDay/2>minimumStep){this.scale='weekday';this.step=1;}if(stepHour*4>minimumStep){this.scale='hour';this.step=4;}if(stepHour>minimumStep){this.scale='hour';this.step=1;}if(stepMinute*15>minimumStep){this.scale='minute';this.step=15;}if(stepMinute*10>minimumStep){this.scale='minute';this.step=10;}if(stepMinute*5>minimumStep){this.scale='minute';this.step=5;}if(stepMinute>minimumStep){this.scale='minute';this.step=1;}if(stepSecond*15>minimumStep){this.scale='second';this.step=15;}if(stepSecond*10>minimumStep){this.scale='second';this.step=10;}if(stepSecond*5>minimumStep){this.scale='second';this.step=5;}if(stepSecond>minimumStep){this.scale='second';this.step=1;}if(stepMillisecond*200>minimumStep){this.scale='millisecond';this.step=200;}if(stepMillisecond*100>minimumStep){this.scale='millisecond';this.step=100;}if(stepMillisecond*50>minimumStep){this.scale='millisecond';this.step=50;}if(stepMillisecond*10>minimumStep){this.scale='millisecond';this.step=10;}if(stepMillisecond*5>minimumStep){this.scale='millisecond';this.step=5;}if(stepMillisecond>minimumStep){this.scale='millisecond';this.step=1;}};/**
	   * Snap a date to a rounded value.
	   * The snap intervals are dependent on the current scale and step.
	   * Static function
	   * @param {Date} date    the date to be snapped.
	   * @param {string} scale Current scale, can be 'millisecond', 'second',
	   *                       'minute', 'hour', 'weekday, 'day', 'month', 'year'.
	   * @param {number} step  Current step (1, 2, 4, 5, ...
	   * @return {Date} snappedDate
	   */TimeStep.snap=function(date,scale,step){var clone=moment(date);if(scale=='year'){var year=clone.year()+Math.round(clone.month()/12);clone.year(Math.round(year/step)*step);clone.month(0);clone.date(0);clone.hours(0);clone.minutes(0);clone.seconds(0);clone.milliseconds(0);}else if(scale=='month'){if(clone.date()>15){clone.date(1);clone.add(1,'month');// important: first set Date to 1, after that change the month.
	}else{clone.date(1);}clone.hours(0);clone.minutes(0);clone.seconds(0);clone.milliseconds(0);}else if(scale=='day'){//noinspection FallthroughInSwitchStatementJS
	switch(step){case 5:case 2:clone.hours(Math.round(clone.hours()/24)*24);break;default:clone.hours(Math.round(clone.hours()/12)*12);break;}clone.minutes(0);clone.seconds(0);clone.milliseconds(0);}else if(scale=='weekday'){//noinspection FallthroughInSwitchStatementJS
	switch(step){case 5:case 2:clone.hours(Math.round(clone.hours()/12)*12);break;default:clone.hours(Math.round(clone.hours()/6)*6);break;}clone.minutes(0);clone.seconds(0);clone.milliseconds(0);}else if(scale=='hour'){switch(step){case 4:clone.minutes(Math.round(clone.minutes()/60)*60);break;default:clone.minutes(Math.round(clone.minutes()/30)*30);break;}clone.seconds(0);clone.milliseconds(0);}else if(scale=='minute'){//noinspection FallthroughInSwitchStatementJS
	switch(step){case 15:case 10:clone.minutes(Math.round(clone.minutes()/5)*5);clone.seconds(0);break;case 5:clone.seconds(Math.round(clone.seconds()/60)*60);break;default:clone.seconds(Math.round(clone.seconds()/30)*30);break;}clone.milliseconds(0);}else if(scale=='second'){//noinspection FallthroughInSwitchStatementJS
	switch(step){case 15:case 10:clone.seconds(Math.round(clone.seconds()/5)*5);clone.milliseconds(0);break;case 5:clone.milliseconds(Math.round(clone.milliseconds()/1000)*1000);break;default:clone.milliseconds(Math.round(clone.milliseconds()/500)*500);break;}}else if(scale=='millisecond'){var _step=step>5?step/2:1;clone.milliseconds(Math.round(clone.milliseconds()/_step)*_step);}return clone;};/**
	   * Check if the current value is a major value (for example when the step
	   * is DAY, a major value is each first day of the MONTH)
	   * @return {boolean} true if current date is major, else false.
	   */TimeStep.prototype.isMajor=function(){if(this.switchedYear==true){switch(this.scale){case'year':case'month':case'weekday':case'day':case'hour':case'minute':case'second':case'millisecond':return true;default:return false;}}else if(this.switchedMonth==true){switch(this.scale){case'weekday':case'day':case'hour':case'minute':case'second':case'millisecond':return true;default:return false;}}else if(this.switchedDay==true){switch(this.scale){case'millisecond':case'second':case'minute':case'hour':return true;default:return false;}}var date=this.moment(this.current);switch(this.scale){case'millisecond':return date.milliseconds()==0;case'second':return date.seconds()==0;case'minute':return date.hours()==0&&date.minutes()==0;case'hour':return date.hours()==0;case'weekday':// intentional fall through
	case'day':return date.date()==1;case'month':return date.month()==0;case'year':return false;default:return false;}};/**
	   * Returns formatted text for the minor axislabel, depending on the current
	   * date and the scale. For example when scale is MINUTE, the current time is
	   * formatted as "hh:mm".
	   * @param {Date} [date] custom date. if not provided, current date is taken
	   */TimeStep.prototype.getLabelMinor=function(date){if(date==undefined){date=this.current;}if(typeof this.format.minorLabels==="function"){return this.format.minorLabels(date,this.scale,this.step);}var format=this.format.minorLabels[this.scale];return format&&format.length>0?this.moment(date).format(format):'';};/**
	   * Returns formatted text for the major axis label, depending on the current
	   * date and the scale. For example when scale is MINUTE, the major scale is
	   * hours, and the hour will be formatted as "hh".
	   * @param {Date} [date] custom date. if not provided, current date is taken
	   */TimeStep.prototype.getLabelMajor=function(date){if(date==undefined){date=this.current;}if(typeof this.format.majorLabels==="function"){return this.format.majorLabels(date,this.scale,this.step);}var format=this.format.majorLabels[this.scale];return format&&format.length>0?this.moment(date).format(format):'';};TimeStep.prototype.getClassName=function(){var _moment=this.moment;var m=this.moment(this.current);var current=m.locale?m.locale('en'):m.lang('en');// old versions of moment have .lang() function
	var step=this.step;function even(value){return value/step%2==0?' vis-even':' vis-odd';}function today(date){if(date.isSame(new Date(),'day')){return' vis-today';}if(date.isSame(_moment().add(1,'day'),'day')){return' vis-tomorrow';}if(date.isSame(_moment().add(-1,'day'),'day')){return' vis-yesterday';}return'';}function currentWeek(date){return date.isSame(new Date(),'week')?' vis-current-week':'';}function currentMonth(date){return date.isSame(new Date(),'month')?' vis-current-month':'';}function currentYear(date){return date.isSame(new Date(),'year')?' vis-current-year':'';}switch(this.scale){case'millisecond':return today(current)+even(current.milliseconds()).trim();case'second':return today(current)+even(current.seconds()).trim();case'minute':return today(current)+even(current.minutes()).trim();case'hour':return'vis-h'+current.hours()+(this.step==4?'-h'+(current.hours()+4):'')+today(current)+even(current.hours());case'weekday':return'vis-'+current.format('dddd').toLowerCase()+today(current)+currentWeek(current)+even(current.date());case'day':return'vis-day'+current.date()+' vis-'+current.format('MMMM').toLowerCase()+today(current)+currentMonth(current)+this.step<=2?today(current):''+this.step<=2?' vis-'+current.format('dddd').toLowerCase():''+even(current.date()-1);case'month':return'vis-'+current.format('MMMM').toLowerCase()+currentMonth(current)+even(current.month());case'year':var year=current.year();return'vis-year'+year+currentYear(current)+even(year);default:return'';}};module.exports=TimeStep;/***/},/* 38 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);var stack=__webpack_require__(39);var RangeItem=__webpack_require__(40);/**
	   * @constructor Group
	   * @param {Number | String} groupId
	   * @param {Object} data
	   * @param {ItemSet} itemSet
	   */function Group(groupId,data,itemSet){this.groupId=groupId;this.subgroups={};this.subgroupIndex=0;this.subgroupOrderer=data&&data.subgroupOrder;this.itemSet=itemSet;this.isVisible=null;this.dom={};this.props={label:{width:0,height:0}};this.className=null;this.items={};// items filtered by groupId of this group
	this.visibleItems=[];// items currently visible in window
	this.orderedItems={byStart:[],byEnd:[]};this.checkRangedItems=false;// needed to refresh the ranged items if the window is programatically changed with NO overlap.
	var me=this;this.itemSet.body.emitter.on("checkRangedItems",function(){me.checkRangedItems=true;});this._create();this.setData(data);}/**
	   * Create DOM elements for the group
	   * @private
	   */Group.prototype._create=function(){var label=document.createElement('div');if(this.itemSet.options.groupEditable.order){label.className='vis-label draggable';}else{label.className='vis-label';}this.dom.label=label;var inner=document.createElement('div');inner.className='vis-inner';label.appendChild(inner);this.dom.inner=inner;var foreground=document.createElement('div');foreground.className='vis-group';foreground['timeline-group']=this;this.dom.foreground=foreground;this.dom.background=document.createElement('div');this.dom.background.className='vis-group';this.dom.axis=document.createElement('div');this.dom.axis.className='vis-group';// create a hidden marker to detect when the Timelines container is attached
	// to the DOM, or the style of a parent of the Timeline is changed from
	// display:none is changed to visible.
	this.dom.marker=document.createElement('div');this.dom.marker.style.visibility='hidden';this.dom.marker.innerHTML='?';this.dom.background.appendChild(this.dom.marker);};/**
	   * Set the group data for this group
	   * @param {Object} data   Group data, can contain properties content and className
	   */Group.prototype.setData=function(data){// update contents
	var content;var templateFunction;if(this.itemSet.options&&this.itemSet.options.groupTemplate){templateFunction=this.itemSet.options.groupTemplate.bind(this);content=templateFunction(data,this.dom.inner);}else{content=data&&data.content;}if(content instanceof Element){this.dom.inner.appendChild(content);while(this.dom.inner.firstChild){this.dom.inner.removeChild(this.dom.inner.firstChild);}this.dom.inner.appendChild(content);}else if(content instanceof Object){templateFunction(data,this.dom.inner);}else if(content!==undefined&&content!==null){this.dom.inner.innerHTML=content;}else{this.dom.inner.innerHTML=this.groupId||'';// groupId can be null
	}// update title
	this.dom.label.title=data&&data.title||'';if(!this.dom.inner.firstChild){util.addClassName(this.dom.inner,'vis-hidden');}else{util.removeClassName(this.dom.inner,'vis-hidden');}// update className
	var className=data&&data.className||null;if(className!=this.className){if(this.className){util.removeClassName(this.dom.label,this.className);util.removeClassName(this.dom.foreground,this.className);util.removeClassName(this.dom.background,this.className);util.removeClassName(this.dom.axis,this.className);}util.addClassName(this.dom.label,className);util.addClassName(this.dom.foreground,className);util.addClassName(this.dom.background,className);util.addClassName(this.dom.axis,className);this.className=className;}// update style
	if(this.style){util.removeCssText(this.dom.label,this.style);this.style=null;}if(data&&data.style){util.addCssText(this.dom.label,data.style);this.style=data.style;}};/**
	   * Get the width of the group label
	   * @return {number} width
	   */Group.prototype.getLabelWidth=function(){return this.props.label.width;};/**
	   * Repaint this group
	   * @param {{start: number, end: number}} range
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   * @param {boolean} [restack=false]  Force restacking of all items
	   * @return {boolean} Returns true if the group is resized
	   */Group.prototype.redraw=function(range,margin,restack){var resized=false;// force recalculation of the height of the items when the marker height changed
	// (due to the Timeline being attached to the DOM or changed from display:none to visible)
	var markerHeight=this.dom.marker.clientHeight;if(markerHeight!=this.lastMarkerHeight){this.lastMarkerHeight=markerHeight;util.forEach(this.items,function(item){item.dirty=true;if(item.displayed)item.redraw();});restack=true;}// recalculate the height of the subgroups
	this._calculateSubGroupHeights();this.isVisible=this._isGroupVisible(range,margin);// calculate actual size and position
	var foreground=this.dom.foreground;this.top=foreground.offsetTop;this.right=foreground.offsetLeft;this.width=foreground.offsetWidth;this.isVisible=this._isGroupVisible(range,margin);// reposition visible items vertically
	if(typeof this.itemSet.options.order==='function'){// a custom order function
	if(restack){// brute force restack of all items
	// show all items
	var me=this;var limitSize=false;util.forEach(this.items,function(item){if(!item.displayed){item.redraw();me.visibleItems.push(item);}item.repositionX(limitSize);});// order all items and force a restacking
	var customOrderedItems=this.orderedItems.byStart.slice().sort(function(a,b){return me.itemSet.options.order(a.data,b.data);});stack.stack(customOrderedItems,margin,true/* restack=true */);}this.visibleItems=this._updateVisibleItems(this.orderedItems,this.visibleItems,range);}else{// no custom order function, lazy stacking
	this.visibleItems=this._updateVisibleItems(this.orderedItems,this.visibleItems,range);if(this.itemSet.options.stack){// TODO: ugly way to access options...
	stack.stack(this.visibleItems,margin,restack);}else{// no stacking
	stack.nostack(this.visibleItems,margin,this.subgroups);}}if(!this.isVisible&&this.height){return resized=false;}// recalculate the height of the group
	var height=this._calculateHeight(margin);// calculate actual size and position
	var foreground=this.dom.foreground;this.top=foreground.offsetTop;this.right=foreground.offsetLeft;this.width=foreground.offsetWidth;resized=util.updateProperty(this,'height',height)||resized;// recalculate size of label
	resized=util.updateProperty(this.props.label,'width',this.dom.inner.clientWidth)||resized;resized=util.updateProperty(this.props.label,'height',this.dom.inner.clientHeight)||resized;// apply new height
	this.dom.background.style.height=height+'px';this.dom.foreground.style.height=height+'px';this.dom.label.style.height=height+'px';// update vertical position of items after they are re-stacked and the height of the group is calculated
	for(var i=0,ii=this.visibleItems.length;i<ii;i++){var item=this.visibleItems[i];item.repositionY(margin);}return resized;};/**
	   * recalculate the height of the subgroups
	   * @private
	   */Group.prototype._calculateSubGroupHeights=function(){if(Object.keys(this.subgroups).length>0){var me=this;this.resetSubgroups();util.forEach(this.visibleItems,function(item){if(item.data.subgroup!==undefined){me.subgroups[item.data.subgroup].height=Math.max(me.subgroups[item.data.subgroup].height,item.height);me.subgroups[item.data.subgroup].visible=true;}});}};/**
	   * check if group is visible
	   * @private
	    */Group.prototype._isGroupVisible=function(range,margin){var isVisible=this.top<=range.body.domProps.centerContainer.height-range.body.domProps.scrollTop+margin.axis&&this.top+this.height+margin.axis>=-range.body.domProps.scrollTop;return isVisible;};/**
	   * recalculate the height of the group
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   * @returns {number} Returns the height
	   * @private
	   */Group.prototype._calculateHeight=function(margin){// recalculate the height of the group
	var height;var visibleItems=this.visibleItems;if(visibleItems.length>0){var min=visibleItems[0].top;var max=visibleItems[0].top+visibleItems[0].height;util.forEach(visibleItems,function(item){min=Math.min(min,item.top);max=Math.max(max,item.top+item.height);});if(min>margin.axis){// there is an empty gap between the lowest item and the axis
	var offset=min-margin.axis;max-=offset;util.forEach(visibleItems,function(item){item.top-=offset;});}height=max+margin.item.vertical/2;}else{height=0;}height=Math.max(height,this.props.label.height);return height;};/**
	   * Show this group: attach to the DOM
	   */Group.prototype.show=function(){if(!this.dom.label.parentNode){this.itemSet.dom.labelSet.appendChild(this.dom.label);}if(!this.dom.foreground.parentNode){this.itemSet.dom.foreground.appendChild(this.dom.foreground);}if(!this.dom.background.parentNode){this.itemSet.dom.background.appendChild(this.dom.background);}if(!this.dom.axis.parentNode){this.itemSet.dom.axis.appendChild(this.dom.axis);}};/**
	   * Hide this group: remove from the DOM
	   */Group.prototype.hide=function(){var label=this.dom.label;if(label.parentNode){label.parentNode.removeChild(label);}var foreground=this.dom.foreground;if(foreground.parentNode){foreground.parentNode.removeChild(foreground);}var background=this.dom.background;if(background.parentNode){background.parentNode.removeChild(background);}var axis=this.dom.axis;if(axis.parentNode){axis.parentNode.removeChild(axis);}};/**
	   * Add an item to the group
	   * @param {Item} item
	   */Group.prototype.add=function(item){this.items[item.id]=item;item.setParent(this);// add to
	if(item.data.subgroup!==undefined){if(this.subgroups[item.data.subgroup]===undefined){this.subgroups[item.data.subgroup]={height:0,visible:false,index:this.subgroupIndex,items:[]};this.subgroupIndex++;}this.subgroups[item.data.subgroup].items.push(item);}this.orderSubgroups();if(this.visibleItems.indexOf(item)==-1){var range=this.itemSet.body.range;// TODO: not nice accessing the range like this
	this._checkIfVisible(item,this.visibleItems,range);}};Group.prototype.orderSubgroups=function(){if(this.subgroupOrderer!==undefined){var sortArray=[];if(typeof this.subgroupOrderer=='string'){for(var subgroup in this.subgroups){sortArray.push({subgroup:subgroup,sortField:this.subgroups[subgroup].items[0].data[this.subgroupOrderer]});}sortArray.sort(function(a,b){return a.sortField-b.sortField;});}else if(typeof this.subgroupOrderer=='function'){for(var subgroup in this.subgroups){sortArray.push(this.subgroups[subgroup].items[0].data);}sortArray.sort(this.subgroupOrderer);}if(sortArray.length>0){for(var i=0;i<sortArray.length;i++){this.subgroups[sortArray[i].subgroup].index=i;}}}};Group.prototype.resetSubgroups=function(){for(var subgroup in this.subgroups){if(this.subgroups.hasOwnProperty(subgroup)){this.subgroups[subgroup].visible=false;}}};/**
	   * Remove an item from the group
	   * @param {Item} item
	   */Group.prototype.remove=function(item){delete this.items[item.id];item.setParent(null);// remove from visible items
	var index=this.visibleItems.indexOf(item);if(index!=-1)this.visibleItems.splice(index,1);if(item.data.subgroup!==undefined){var subgroup=this.subgroups[item.data.subgroup];if(subgroup){var itemIndex=subgroup.items.indexOf(item);subgroup.items.splice(itemIndex,1);if(!subgroup.items.length){delete this.subgroups[item.data.subgroup];this.subgroupIndex--;}this.orderSubgroups();}}};/**
	   * Remove an item from the corresponding DataSet
	   * @param {Item} item
	   */Group.prototype.removeFromDataSet=function(item){this.itemSet.removeItem(item.id);};/**
	   * Reorder the items
	   */Group.prototype.order=function(){var array=util.toArray(this.items);var startArray=[];var endArray=[];for(var i=0;i<array.length;i++){if(array[i].data.end!==undefined){endArray.push(array[i]);}startArray.push(array[i]);}this.orderedItems={byStart:startArray,byEnd:endArray};stack.orderByStart(this.orderedItems.byStart);stack.orderByEnd(this.orderedItems.byEnd);};/**
	   * Update the visible items
	   * @param {{byStart: Item[], byEnd: Item[]}} orderedItems   All items ordered by start date and by end date
	   * @param {Item[]} visibleItems                             The previously visible items.
	   * @param {{start: number, end: number}} range              Visible range
	   * @return {Item[]} visibleItems                            The new visible items.
	   * @private
	   */Group.prototype._updateVisibleItems=function(orderedItems,oldVisibleItems,range){var visibleItems=[];var visibleItemsLookup={};// we keep this to quickly look up if an item already exists in the list without using indexOf on visibleItems
	if(!this.isVisible&&this.groupId!="__background__"){for(var i=0;i<oldVisibleItems.length;i++){var item=oldVisibleItems[i];if(item.displayed)item.hide();}return visibleItems;}var interval=(range.end-range.start)/4;var lowerBound=range.start-interval;var upperBound=range.end+interval;// this function is used to do the binary search.
	var searchFunction=function searchFunction(value){if(value<lowerBound){return-1;}else if(value<=upperBound){return 0;}else{return 1;}};// first check if the items that were in view previously are still in view.
	// IMPORTANT: this handles the case for the items with startdate before the window and enddate after the window!
	// also cleans up invisible items.
	if(oldVisibleItems.length>0){for(var i=0;i<oldVisibleItems.length;i++){this._checkIfVisibleWithReference(oldVisibleItems[i],visibleItems,visibleItemsLookup,range);}}// we do a binary search for the items that have only start values.
	var initialPosByStart=util.binarySearchCustom(orderedItems.byStart,searchFunction,'data','start');// trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the start values.
	this._traceVisible(initialPosByStart,orderedItems.byStart,visibleItems,visibleItemsLookup,function(item){return item.data.start<lowerBound||item.data.start>upperBound;});// if the window has changed programmatically without overlapping the old window, the ranged items with start < lowerBound and end > upperbound are not shown.
	// We therefore have to brute force check all items in the byEnd list
	if(this.checkRangedItems==true){this.checkRangedItems=false;for(i=0;i<orderedItems.byEnd.length;i++){this._checkIfVisibleWithReference(orderedItems.byEnd[i],visibleItems,visibleItemsLookup,range);}}else{// we do a binary search for the items that have defined end times.
	var initialPosByEnd=util.binarySearchCustom(orderedItems.byEnd,searchFunction,'data','end');// trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the end values.
	this._traceVisible(initialPosByEnd,orderedItems.byEnd,visibleItems,visibleItemsLookup,function(item){return item.data.end<lowerBound||item.data.end>upperBound;});}// finally, we reposition all the visible items.
	for(var i=0;i<visibleItems.length;i++){var item=visibleItems[i];if(!item.displayed)item.show();// reposition item horizontally
	item.repositionX();}return visibleItems;};Group.prototype._traceVisible=function(initialPos,items,visibleItems,visibleItemsLookup,breakCondition){if(initialPos!=-1){for(var i=initialPos;i>=0;i--){var item=items[i];if(breakCondition(item)){break;}else{if(visibleItemsLookup[item.id]===undefined){visibleItemsLookup[item.id]=true;visibleItems.push(item);}}}for(var i=initialPos+1;i<items.length;i++){var item=items[i];if(breakCondition(item)){break;}else{if(visibleItemsLookup[item.id]===undefined){visibleItemsLookup[item.id]=true;visibleItems.push(item);}}}}};/**
	   * this function is very similar to the _checkIfInvisible() but it does not
	   * return booleans, hides the item if it should not be seen and always adds to
	   * the visibleItems.
	   * this one is for brute forcing and hiding.
	   *
	   * @param {Item} item
	   * @param {Array} visibleItems
	   * @param {{start:number, end:number}} range
	   * @private
	   */Group.prototype._checkIfVisible=function(item,visibleItems,range){if(item.isVisible(range)){if(!item.displayed)item.show();// reposition item horizontally
	item.repositionX();visibleItems.push(item);}else{if(item.displayed)item.hide();}};/**
	   * this function is very similar to the _checkIfInvisible() but it does not
	   * return booleans, hides the item if it should not be seen and always adds to
	   * the visibleItems.
	   * this one is for brute forcing and hiding.
	   *
	   * @param {Item} item
	   * @param {Array} visibleItems
	   * @param {{start:number, end:number}} range
	   * @private
	   */Group.prototype._checkIfVisibleWithReference=function(item,visibleItems,visibleItemsLookup,range){if(item.isVisible(range)){if(visibleItemsLookup[item.id]===undefined){visibleItemsLookup[item.id]=true;visibleItems.push(item);}}else{if(item.displayed)item.hide();}};module.exports=Group;/***/},/* 39 *//***/function(module,exports){'use strict';// Utility functions for ordering and stacking of items
	var EPSILON=0.001;// used when checking collisions, to prevent round-off errors
	/**
	   * Order items by their start data
	   * @param {Item[]} items
	   */exports.orderByStart=function(items){items.sort(function(a,b){return a.data.start-b.data.start;});};/**
	   * Order items by their end date. If they have no end date, their start date
	   * is used.
	   * @param {Item[]} items
	   */exports.orderByEnd=function(items){items.sort(function(a,b){var aTime='end'in a.data?a.data.end:a.data.start,bTime='end'in b.data?b.data.end:b.data.start;return aTime-bTime;});};/**
	   * Adjust vertical positions of the items such that they don't overlap each
	   * other.
	   * @param {Item[]} items
	   *            All visible items
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   *            Margins between items and between items and the axis.
	   * @param {boolean} [force=false]
	   *            If true, all items will be repositioned. If false (default), only
	   *            items having a top===null will be re-stacked
	   */exports.stack=function(items,margin,force){var i,iMax;if(force){// reset top position of all items
	for(i=0,iMax=items.length;i<iMax;i++){items[i].top=null;}}// calculate new, non-overlapping positions
	for(i=0,iMax=items.length;i<iMax;i++){var item=items[i];if(item.stack&&item.top===null){// initialize top position
	item.top=margin.axis;do{// TODO: optimize checking for overlap. when there is a gap without items,
	//       you only need to check for items from the next item on, not from zero
	var collidingItem=null;for(var j=0,jj=items.length;j<jj;j++){var other=items[j];if(other.top!==null&&other!==item&&other.stack&&exports.collision(item,other,margin.item,other.options.rtl)){collidingItem=other;break;}}if(collidingItem!=null){// There is a collision. Reposition the items above the colliding element
	item.top=collidingItem.top+collidingItem.height+margin.item.vertical;}}while(collidingItem);}}};/**
	   * Adjust vertical positions of the items without stacking them
	   * @param {Item[]} items
	   *            All visible items
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   *            Margins between items and between items and the axis.
	   */exports.nostack=function(items,margin,subgroups){var i,iMax,newTop;// reset top position of all items
	for(i=0,iMax=items.length;i<iMax;i++){if(items[i].data.subgroup!==undefined){newTop=margin.axis;for(var subgroup in subgroups){if(subgroups.hasOwnProperty(subgroup)){if(subgroups[subgroup].visible==true&&subgroups[subgroup].index<subgroups[items[i].data.subgroup].index){newTop+=subgroups[subgroup].height+margin.item.vertical;}}}items[i].top=newTop;}else{items[i].top=margin.axis;}}};/**
	   * Test if the two provided items collide
	   * The items must have parameters left, width, top, and height.
	   * @param {Item} a          The first item
	   * @param {Item} b          The second item
	   * @param {{horizontal: number, vertical: number}} margin
	   *                          An object containing a horizontal and vertical
	   *                          minimum required margin.
	   * @param {boolean} rtl
	   * @return {boolean}        true if a and b collide, else false
	   */exports.collision=function(a,b,margin,rtl){if(rtl){return a.right-margin.horizontal+EPSILON<b.right+b.width&&a.right+a.width+margin.horizontal-EPSILON>b.right&&a.top-margin.vertical+EPSILON<b.top+b.height&&a.top+a.height+margin.vertical-EPSILON>b.top;}else{return a.left-margin.horizontal+EPSILON<b.left+b.width&&a.left+a.width+margin.horizontal-EPSILON>b.left&&a.top-margin.vertical+EPSILON<b.top+b.height&&a.top+a.height+margin.vertical-EPSILON>b.top;}};/***/},/* 40 *//***/function(module,exports,__webpack_require__){'use strict';var Hammer=__webpack_require__(22);var Item=__webpack_require__(41);/**
	   * @constructor RangeItem
	   * @extends Item
	   * @param {Object} data             Object containing parameters start, end
	   *                                  content, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} [options]        Configuration options
	   *                                  // TODO: describe options
	   */function RangeItem(data,conversion,options){this.props={content:{width:0}};this.overflow=false;// if contents can overflow (css styling), this flag is set to true
	this.options=options;// validate data
	if(data){if(data.start==undefined){throw new Error('Property "start" missing in item '+data.id);}if(data.end==undefined){throw new Error('Property "end" missing in item '+data.id);}}Item.call(this,data,conversion,options);}RangeItem.prototype=new Item(null,null,null);RangeItem.prototype.baseClassName='vis-item vis-range';/**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */RangeItem.prototype.isVisible=function(range){// determine visibility
	return this.data.start<range.end&&this.data.end>range.start;};/**
	   * Repaint the item
	   */RangeItem.prototype.redraw=function(){var dom=this.dom;if(!dom){// create DOM
	this.dom={};dom=this.dom;// background box
	dom.box=document.createElement('div');// className is updated in redraw()
	// frame box (to prevent the item contents from overflowing
	dom.frame=document.createElement('div');dom.frame.className='vis-item-overflow';dom.box.appendChild(dom.frame);// contents box
	dom.content=document.createElement('div');dom.content.className='vis-item-content';dom.frame.appendChild(dom.content);// attach this item as attribute
	dom.box['timeline-item']=this;this.dirty=true;}// append DOM to parent DOM
	if(!this.parent){throw new Error('Cannot redraw item: no parent attached');}if(!dom.box.parentNode){var foreground=this.parent.dom.foreground;if(!foreground){throw new Error('Cannot redraw item: parent has no foreground container element');}foreground.appendChild(dom.box);}this.displayed=true;// Update DOM when item is marked dirty. An item is marked dirty when:
	// - the item is not yet rendered
	// - the item's data is changed
	// - the item is selected/deselected
	if(this.dirty){this._updateContents(this.dom.content);this._updateTitle(this.dom.box);this._updateDataAttributes(this.dom.box);this._updateStyle(this.dom.box);var editable=(this.options.editable.updateTime||this.options.editable.updateGroup||this.editable===true)&&this.editable!==false;// update class
	var className=(this.data.className?' '+this.data.className:'')+(this.selected?' vis-selected':'')+(editable?' vis-editable':' vis-readonly');dom.box.className=this.baseClassName+className;// determine from css whether this box has overflow
	this.overflow=window.getComputedStyle(dom.frame).overflow!=='hidden';// recalculate size
	// turn off max-width to be able to calculate the real width
	// this causes an extra browser repaint/reflow, but so be it
	this.dom.content.style.maxWidth='none';this.props.content.width=this.dom.content.offsetWidth;this.height=this.dom.box.offsetHeight;this.dom.content.style.maxWidth='';this.dirty=false;}this._repaintOnItemUpdateTimeTooltip(dom.box);this._repaintDeleteButton(dom.box);this._repaintDragCenter();this._repaintDragLeft();this._repaintDragRight();};/**
	   * Show the item in the DOM (when not already visible). The items DOM will
	   * be created when needed.
	   */RangeItem.prototype.show=function(){if(!this.displayed){this.redraw();}};/**
	   * Hide the item from the DOM (when visible)
	   * @return {Boolean} changed
	   */RangeItem.prototype.hide=function(){if(this.displayed){var box=this.dom.box;if(box.parentNode){box.parentNode.removeChild(box);}this.displayed=false;}};/**
	   * Reposition the item horizontally
	   * @param {boolean} [limitSize=true] If true (default), the width of the range
	   *                                   item will be limited, as the browser cannot
	   *                                   display very wide divs. This means though
	   *                                   that the applied left and width may
	   *                                   not correspond to the ranges start and end
	   * @Override
	   */RangeItem.prototype.repositionX=function(limitSize){var parentWidth=this.parent.width;var start=this.conversion.toScreen(this.data.start);var end=this.conversion.toScreen(this.data.end);var contentStartPosition;var contentWidth;// limit the width of the range, as browsers cannot draw very wide divs
	if(limitSize===undefined||limitSize===true){if(start<-parentWidth){start=-parentWidth;}if(end>2*parentWidth){end=2*parentWidth;}}// add 0.5 to compensate floating-point values rounding
	var boxWidth=Math.max(end-start+0.5,1);if(this.overflow){if(this.options.rtl){this.right=start;}else{this.left=start;}this.width=boxWidth+this.props.content.width;contentWidth=this.props.content.width;// Note: The calculation of width is an optimistic calculation, giving
	//       a width which will not change when moving the Timeline
	//       So no re-stacking needed, which is nicer for the eye;
	}else{if(this.options.rtl){this.right=start;}else{this.left=start;}this.width=boxWidth;contentWidth=Math.min(end-start,this.props.content.width);}if(this.options.rtl){this.dom.box.style.right=this.right+'px';}else{this.dom.box.style.left=this.left+'px';}this.dom.box.style.width=boxWidth+'px';switch(this.options.align){case'left':if(this.options.rtl){this.dom.content.style.right='0';}else{this.dom.content.style.left='0';}break;case'right':if(this.options.rtl){this.dom.content.style.right=Math.max(boxWidth-contentWidth,0)+'px';}else{this.dom.content.style.left=Math.max(boxWidth-contentWidth,0)+'px';}break;case'center':if(this.options.rtl){this.dom.content.style.right=Math.max((boxWidth-contentWidth)/2,0)+'px';}else{this.dom.content.style.left=Math.max((boxWidth-contentWidth)/2,0)+'px';}break;default:// 'auto'
	// when range exceeds left of the window, position the contents at the left of the visible area
	if(this.overflow){if(end>0){contentStartPosition=Math.max(-start,0);}else{contentStartPosition=-contentWidth;// ensure it's not visible anymore
	}}else{if(start<0){contentStartPosition=-start;}else{contentStartPosition=0;}}if(this.options.rtl){this.dom.content.style.right=contentStartPosition+'px';}else{this.dom.content.style.left=contentStartPosition+'px';this.dom.content.style.width='calc(100% - '+contentStartPosition+'px)';}}};/**
	   * Reposition the item vertically
	   * @Override
	   */RangeItem.prototype.repositionY=function(){var orientation=this.options.orientation.item;var box=this.dom.box;if(orientation=='top'){box.style.top=this.top+'px';}else{box.style.top=this.parent.height-this.top-this.height+'px';}};/**
	   * Repaint a drag area on the left side of the range when the range is selected
	   * @protected
	   */RangeItem.prototype._repaintDragLeft=function(){if(this.selected&&this.options.editable.updateTime&&!this.dom.dragLeft){// create and show drag area
	var dragLeft=document.createElement('div');dragLeft.className='vis-drag-left';dragLeft.dragLeftItem=this;this.dom.box.appendChild(dragLeft);this.dom.dragLeft=dragLeft;}else if(!this.selected&&this.dom.dragLeft){// delete drag area
	if(this.dom.dragLeft.parentNode){this.dom.dragLeft.parentNode.removeChild(this.dom.dragLeft);}this.dom.dragLeft=null;}};/**
	   * Repaint a drag area on the right side of the range when the range is selected
	   * @protected
	   */RangeItem.prototype._repaintDragRight=function(){if(this.selected&&this.options.editable.updateTime&&!this.dom.dragRight){// create and show drag area
	var dragRight=document.createElement('div');dragRight.className='vis-drag-right';dragRight.dragRightItem=this;this.dom.box.appendChild(dragRight);this.dom.dragRight=dragRight;}else if(!this.selected&&this.dom.dragRight){// delete drag area
	if(this.dom.dragRight.parentNode){this.dom.dragRight.parentNode.removeChild(this.dom.dragRight);}this.dom.dragRight=null;}};module.exports=RangeItem;/***/},/* 41 *//***/function(module,exports,__webpack_require__){'use strict';var Hammer=__webpack_require__(22);var util=__webpack_require__(1);var moment=__webpack_require__(2);/**
	   * @constructor Item
	   * @param {Object} data             Object containing (optional) parameters type,
	   *                                  start, end, content, group, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} options          Configuration options
	   *                                  // TODO: describe available options
	   */function Item(data,conversion,options){this.id=null;this.parent=null;this.data=data;this.dom=null;this.conversion=conversion||{};this.options=options||{};this.selected=false;this.displayed=false;this.dirty=true;this.top=null;this.right=null;this.left=null;this.width=null;this.height=null;this.editable=null;if(this.data&&this.data.hasOwnProperty('editable')&&typeof this.data.editable==='boolean'){this.editable=data.editable;}}Item.prototype.stack=true;/**
	   * Select current item
	   */Item.prototype.select=function(){this.selected=true;this.dirty=true;if(this.displayed)this.redraw();};/**
	   * Unselect current item
	   */Item.prototype.unselect=function(){this.selected=false;this.dirty=true;if(this.displayed)this.redraw();};/**
	   * Set data for the item. Existing data will be updated. The id should not
	   * be changed. When the item is displayed, it will be redrawn immediately.
	   * @param {Object} data
	   */Item.prototype.setData=function(data){var groupChanged=data.group!=undefined&&this.data.group!=data.group;if(groupChanged){this.parent.itemSet._moveToGroup(this,data.group);}if(data.hasOwnProperty('editable')&&typeof data.editable==='boolean'){this.editable=data.editable;}this.data=data;this.dirty=true;if(this.displayed)this.redraw();};/**
	   * Set a parent for the item
	   * @param {ItemSet | Group} parent
	   */Item.prototype.setParent=function(parent){if(this.displayed){this.hide();this.parent=parent;if(this.parent){this.show();}}else{this.parent=parent;}};/**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */Item.prototype.isVisible=function(range){return false;};/**
	   * Show the Item in the DOM (when not already visible)
	   * @return {Boolean} changed
	   */Item.prototype.show=function(){return false;};/**
	   * Hide the Item from the DOM (when visible)
	   * @return {Boolean} changed
	   */Item.prototype.hide=function(){return false;};/**
	   * Repaint the item
	   */Item.prototype.redraw=function(){// should be implemented by the item
	};/**
	   * Reposition the Item horizontally
	   */Item.prototype.repositionX=function(){// should be implemented by the item
	};/**
	   * Reposition the Item vertically
	   */Item.prototype.repositionY=function(){// should be implemented by the item
	};/**
	   * Repaint a delete button on the top right of the item when the item is selected
	   * @param {HTMLElement} anchor
	   * @protected
	   */Item.prototype._repaintDeleteButton=function(anchor){var editable=(this.options.editable.remove||this.data.editable===true)&&this.data.editable!==false;if(this.selected&&editable&&!this.dom.deleteButton){// create and show button
	var me=this;var deleteButton=document.createElement('div');if(this.options.rtl){deleteButton.className='vis-delete-rtl';}else{deleteButton.className='vis-delete';}deleteButton.title='Delete this item';// TODO: be able to destroy the delete button
	new Hammer(deleteButton).on('tap',function(event){event.stopPropagation();me.parent.removeFromDataSet(me);});anchor.appendChild(deleteButton);this.dom.deleteButton=deleteButton;}else if(!this.selected&&this.dom.deleteButton){// remove button
	if(this.dom.deleteButton.parentNode){this.dom.deleteButton.parentNode.removeChild(this.dom.deleteButton);}this.dom.deleteButton=null;}};/**
	   * Repaint a onChange tooltip on the top right of the item when the item is selected
	   * @param {HTMLElement} anchor
	   * @protected
	   */Item.prototype._repaintOnItemUpdateTimeTooltip=function(anchor){if(!this.options.tooltipOnItemUpdateTime)return;var editable=(this.options.editable.updateTime||this.data.editable===true)&&this.data.editable!==false;if(this.selected&&editable&&!this.dom.onItemUpdateTimeTooltip){// create and show tooltip
	var me=this;var onItemUpdateTimeTooltip=document.createElement('div');onItemUpdateTimeTooltip.className='vis-onUpdateTime-tooltip';anchor.appendChild(onItemUpdateTimeTooltip);this.dom.onItemUpdateTimeTooltip=onItemUpdateTimeTooltip;}else if(!this.selected&&this.dom.onItemUpdateTimeTooltip){// remove button
	if(this.dom.onItemUpdateTimeTooltip.parentNode){this.dom.onItemUpdateTimeTooltip.parentNode.removeChild(this.dom.onItemUpdateTimeTooltip);}this.dom.onItemUpdateTimeTooltip=null;}// position onChange tooltip
	if(this.dom.onItemUpdateTimeTooltip){// only show when editing
	this.dom.onItemUpdateTimeTooltip.style.visibility=this.parent.itemSet.touchParams.itemIsDragging?'visible':'hidden';// position relative to item's content
	if(this.options.rtl){this.dom.onItemUpdateTimeTooltip.style.right=this.dom.content.style.right;}else{this.dom.onItemUpdateTimeTooltip.style.left=this.dom.content.style.left;}// position above or below the item depending on the item's position in the window
	var tooltipOffset=50;// TODO: should be tooltip height (depends on template)
	var scrollTop=this.parent.itemSet.body.domProps.scrollTop;// TODO: this.top for orientation:true is actually the items distance from the bottom... 
	// (should be this.bottom)
	var itemDistanceFromTop;if(this.options.orientation.item=='top'){itemDistanceFromTop=this.top;}else{itemDistanceFromTop=this.parent.height-this.top-this.height;}var isCloseToTop=itemDistanceFromTop+this.parent.top-tooltipOffset<-scrollTop;if(isCloseToTop){this.dom.onItemUpdateTimeTooltip.style.bottom="";this.dom.onItemUpdateTimeTooltip.style.top=this.height+2+"px";}else{this.dom.onItemUpdateTimeTooltip.style.top="";this.dom.onItemUpdateTimeTooltip.style.bottom=this.height+2+"px";}// handle tooltip content
	var content;var templateFunction;if(this.options.tooltipOnItemUpdateTime&&this.options.tooltipOnItemUpdateTime.template){templateFunction=this.options.tooltipOnItemUpdateTime.template.bind(this);content=templateFunction(this.data);}else{content='start: '+moment(this.data.start).format('MM/DD/YYYY hh:mm');if(this.data.end){content+='<br> end: '+moment(this.data.end).format('MM/DD/YYYY hh:mm');}}this.dom.onItemUpdateTimeTooltip.innerHTML=content;}};/**
	   * Set HTML contents for the item
	   * @param {Element} element   HTML element to fill with the contents
	   * @private
	   */Item.prototype._updateContents=function(element){var content;var templateFunction;if(this.options.template){var itemData=this.parent.itemSet.itemsData.get(this.id);// get a clone of the data from the dataset
	templateFunction=this.options.template.bind(this);content=templateFunction(itemData,element);}else{content=this.data.content;}if(content instanceof Object&&!(content instanceof Element)){templateFunction(itemData,element);}else{var changed=this._contentToString(this.content)!==this._contentToString(content);if(changed){// only replace the content when changed
	if(content instanceof Element){element.innerHTML='';element.appendChild(content);}else if(content!=undefined){element.innerHTML=content;}else{if(!(this.data.type=='background'&&this.data.content===undefined)){throw new Error('Property "content" missing in item '+this.id);}}this.content=content;}}};/**
	   * Set HTML contents for the item
	   * @param {Element} element   HTML element to fill with the contents
	   * @private
	   */Item.prototype._updateTitle=function(element){if(this.data.title!=null){element.title=this.data.title||'';}else{element.removeAttribute('vis-title');}};/**
	   * Process dataAttributes timeline option and set as data- attributes on dom.content
	   * @param {Element} element   HTML element to which the attributes will be attached
	   * @private
	   */Item.prototype._updateDataAttributes=function(element){if(this.options.dataAttributes&&this.options.dataAttributes.length>0){var attributes=[];if(Array.isArray(this.options.dataAttributes)){attributes=this.options.dataAttributes;}else if(this.options.dataAttributes=='all'){attributes=Object.keys(this.data);}else{return;}for(var i=0;i<attributes.length;i++){var name=attributes[i];var value=this.data[name];if(value!=null){element.setAttribute('data-'+name,value);}else{element.removeAttribute('data-'+name);}}}};/**
	   * Update custom styles of the element
	   * @param element
	   * @private
	   */Item.prototype._updateStyle=function(element){// remove old styles
	if(this.style){util.removeCssText(element,this.style);this.style=null;}// append new styles
	if(this.data.style){util.addCssText(element,this.data.style);this.style=this.data.style;}};/**
	   * Stringify the items contents
	   * @param {string | Element | undefined} content
	   * @returns {string | undefined}
	   * @private
	   */Item.prototype._contentToString=function(content){if(typeof content==='string')return content;if(content&&'outerHTML'in content)return content.outerHTML;return content;};/**
	   * Return the width of the item left from its start date
	   * @return {number}
	   */Item.prototype.getWidthLeft=function(){return 0;};/**
	   * Return the width of the item right from the max of its start and end date
	   * @return {number}
	   */Item.prototype.getWidthRight=function(){return 0;};/**
	   * Repaint a drag area on the center of the item when the item is selected
	   * @protected
	   */Item.prototype._repaintDragCenter=function(){if(this.selected&&this.options.editable.updateTime&&!this.dom.dragCenter){// create and show drag area
	var dragCenter=document.createElement('div');dragCenter.className='vis-drag-center';dragCenter.dragCenterItem=this;if(this.dom.box){this.dom.box.appendChild(dragCenter);}else if(this.dom.point){this.dom.point.appendChild(dragCenter);}this.dom.dragCenter=dragCenter;}else if(!this.selected&&this.dom.dragCenter){// delete drag area
	if(this.dom.dragCenter.parentNode){this.dom.dragCenter.parentNode.removeChild(this.dom.dragCenter);}this.dom.dragCenter=null;}};module.exports=Item;/***/},/* 42 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);var Group=__webpack_require__(38);/**
	   * @constructor BackgroundGroup
	   * @param {Number | String} groupId
	   * @param {Object} data
	   * @param {ItemSet} itemSet
	   */function BackgroundGroup(groupId,data,itemSet){Group.call(this,groupId,data,itemSet);this.width=0;this.height=0;this.top=0;this.left=0;}BackgroundGroup.prototype=Object.create(Group.prototype);/**
	   * Repaint this group
	   * @param {{start: number, end: number}} range
	   * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	   * @param {boolean} [restack=false]  Force restacking of all items
	   * @return {boolean} Returns true if the group is resized
	   */BackgroundGroup.prototype.redraw=function(range,margin,restack){var resized=false;this.visibleItems=this._updateVisibleItems(this.orderedItems,this.visibleItems,range);// calculate actual size
	this.width=this.dom.background.offsetWidth;// apply new height (just always zero for BackgroundGroup
	this.dom.background.style.height='0';// update vertical position of items after they are re-stacked and the height of the group is calculated
	for(var i=0,ii=this.visibleItems.length;i<ii;i++){var item=this.visibleItems[i];item.repositionY(margin);}return resized;};/**
	   * Show this group: attach to the DOM
	   */BackgroundGroup.prototype.show=function(){if(!this.dom.background.parentNode){this.itemSet.dom.background.appendChild(this.dom.background);}};module.exports=BackgroundGroup;/***/},/* 43 *//***/function(module,exports,__webpack_require__){'use strict';var Item=__webpack_require__(41);var util=__webpack_require__(1);/**
	   * @constructor BoxItem
	   * @extends Item
	   * @param {Object} data             Object containing parameters start
	   *                                  content, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} [options]        Configuration options
	   *                                  // TODO: describe available options
	   */function BoxItem(data,conversion,options){this.props={dot:{width:0,height:0},line:{width:0,height:0}};this.options=options;// validate data
	if(data){if(data.start==undefined){throw new Error('Property "start" missing in item '+data);}}Item.call(this,data,conversion,options);}BoxItem.prototype=new Item(null,null,null);/**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */BoxItem.prototype.isVisible=function(range){// determine visibility
	var isVisible;var align=this.options.align;var msPerPixel=(range.end-range.start)/range.body.dom.center.clientWidth;var widthInMs=this.width*msPerPixel;if(align=='right'){isVisible=this.data.start.getTime()>range.start&&this.data.start.getTime()-widthInMs<range.end;}else if(align=='left'){isVisible=this.data.start.getTime()+widthInMs>range.start&&this.data.start.getTime()<range.end;}else{// default or 'center'
	isVisible=this.data.start.getTime()+widthInMs/2>range.start&&this.data.start.getTime()-widthInMs/2<range.end;}return isVisible;};/**
	   * Repaint the item
	   */BoxItem.prototype.redraw=function(){var dom=this.dom;if(!dom){// create DOM
	this.dom={};dom=this.dom;// create main box
	dom.box=document.createElement('DIV');// contents box (inside the background box). used for making margins
	dom.content=document.createElement('DIV');dom.content.className='vis-item-content';dom.box.appendChild(dom.content);// line to axis
	dom.line=document.createElement('DIV');dom.line.className='vis-line';// dot on axis
	dom.dot=document.createElement('DIV');dom.dot.className='vis-dot';// attach this item as attribute
	dom.box['timeline-item']=this;this.dirty=true;}// append DOM to parent DOM
	if(!this.parent){throw new Error('Cannot redraw item: no parent attached');}if(!dom.box.parentNode){var foreground=this.parent.dom.foreground;if(!foreground)throw new Error('Cannot redraw item: parent has no foreground container element');foreground.appendChild(dom.box);}if(!dom.line.parentNode){var background=this.parent.dom.background;if(!background)throw new Error('Cannot redraw item: parent has no background container element');background.appendChild(dom.line);}if(!dom.dot.parentNode){var axis=this.parent.dom.axis;if(!background)throw new Error('Cannot redraw item: parent has no axis container element');axis.appendChild(dom.dot);}this.displayed=true;// Update DOM when item is marked dirty. An item is marked dirty when:
	// - the item is not yet rendered
	// - the item's data is changed
	// - the item is selected/deselected
	if(this.dirty){this._updateContents(this.dom.content);this._updateTitle(this.dom.box);this._updateDataAttributes(this.dom.box);this._updateStyle(this.dom.box);var editable=(this.options.editable.updateTime||this.options.editable.updateGroup||this.editable===true)&&this.editable!==false;// update class
	var className=(this.data.className?' '+this.data.className:'')+(this.selected?' vis-selected':'')+(editable?' vis-editable':' vis-readonly');dom.box.className='vis-item vis-box'+className;dom.line.className='vis-item vis-line'+className;dom.dot.className='vis-item vis-dot'+className;// set initial position in the visible range of the grid so that the
	// rendered box size can be determinated correctly, even the content
	// has a dynamic width (fixes #2032).
	var previousRight=dom.box.style.right;var previousLeft=dom.box.style.left;if(this.options.rtl){dom.box.style.right="0px";}else{dom.box.style.left="0px";}// recalculate size
	this.props.dot.height=dom.dot.offsetHeight;this.props.dot.width=dom.dot.offsetWidth;this.props.line.width=dom.line.offsetWidth;this.width=dom.box.offsetWidth;this.height=dom.box.offsetHeight;// restore previous position
	if(this.options.rtl){dom.box.style.right=previousRight;}else{dom.box.style.left=previousLeft;}this.dirty=false;}this._repaintOnItemUpdateTimeTooltip(dom.box);this._repaintDragCenter();this._repaintDeleteButton(dom.box);};/**
	   * Show the item in the DOM (when not already displayed). The items DOM will
	   * be created when needed.
	   */BoxItem.prototype.show=function(){if(!this.displayed){this.redraw();}};/**
	   * Hide the item from the DOM (when visible)
	   */BoxItem.prototype.hide=function(){if(this.displayed){var dom=this.dom;if(dom.box.parentNode)dom.box.parentNode.removeChild(dom.box);if(dom.line.parentNode)dom.line.parentNode.removeChild(dom.line);if(dom.dot.parentNode)dom.dot.parentNode.removeChild(dom.dot);this.displayed=false;}};/**
	   * Reposition the item horizontally
	   * @Override
	   */BoxItem.prototype.repositionX=function(){var start=this.conversion.toScreen(this.data.start);var align=this.options.align;// calculate left position of the box
	if(align=='right'){if(this.options.rtl){this.right=start-this.width;// reposition box, line, and dot
	this.dom.box.style.right=this.right+'px';this.dom.line.style.right=start-this.props.line.width+'px';this.dom.dot.style.right=start-this.props.line.width/2-this.props.dot.width/2+'px';}else{this.left=start-this.width;// reposition box, line, and dot
	this.dom.box.style.left=this.left+'px';this.dom.line.style.left=start-this.props.line.width+'px';this.dom.dot.style.left=start-this.props.line.width/2-this.props.dot.width/2+'px';}}else if(align=='left'){if(this.options.rtl){this.right=start;// reposition box, line, and dot
	this.dom.box.style.right=this.right+'px';this.dom.line.style.right=start+'px';this.dom.dot.style.right=start+this.props.line.width/2-this.props.dot.width/2+'px';}else{this.left=start;// reposition box, line, and dot
	this.dom.box.style.left=this.left+'px';this.dom.line.style.left=start+'px';this.dom.dot.style.left=start+this.props.line.width/2-this.props.dot.width/2+'px';}}else{// default or 'center'
	if(this.options.rtl){this.right=start-this.width/2;// reposition box, line, and dot
	this.dom.box.style.right=this.right+'px';this.dom.line.style.right=start-this.props.line.width+'px';this.dom.dot.style.right=start-this.props.dot.width/2+'px';}else{this.left=start-this.width/2;// reposition box, line, and dot
	this.dom.box.style.left=this.left+'px';this.dom.line.style.left=start-this.props.line.width/2+'px';this.dom.dot.style.left=start-this.props.dot.width/2+'px';}}};/**
	   * Reposition the item vertically
	   * @Override
	   */BoxItem.prototype.repositionY=function(){var orientation=this.options.orientation.item;var box=this.dom.box;var line=this.dom.line;var dot=this.dom.dot;if(orientation=='top'){box.style.top=(this.top||0)+'px';line.style.top='0';line.style.height=this.parent.top+this.top+1+'px';line.style.bottom='';}else{// orientation 'bottom'
	var itemSetHeight=this.parent.itemSet.props.height;// TODO: this is nasty
	var lineHeight=itemSetHeight-this.parent.top-this.parent.height+this.top;box.style.top=(this.parent.height-this.top-this.height||0)+'px';line.style.top=itemSetHeight-lineHeight+'px';line.style.bottom='0';}dot.style.top=-this.props.dot.height/2+'px';};/**
	   * Return the width of the item left from its start date
	   * @return {number}
	   */BoxItem.prototype.getWidthLeft=function(){return this.width/2;};/**
	   * Return the width of the item right from its start date
	   * @return {number}
	   */BoxItem.prototype.getWidthRight=function(){return this.width/2;};module.exports=BoxItem;/***/},/* 44 *//***/function(module,exports,__webpack_require__){'use strict';var Item=__webpack_require__(41);/**
	   * @constructor PointItem
	   * @extends Item
	   * @param {Object} data             Object containing parameters start
	   *                                  content, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} [options]        Configuration options
	   *                                  // TODO: describe available options
	   */function PointItem(data,conversion,options){this.props={dot:{top:0,width:0,height:0},content:{height:0,marginLeft:0,marginRight:0}};this.options=options;// validate data
	if(data){if(data.start==undefined){throw new Error('Property "start" missing in item '+data);}}Item.call(this,data,conversion,options);}PointItem.prototype=new Item(null,null,null);/**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */PointItem.prototype.isVisible=function(range){// determine visibility
	var msPerPixel=(range.end-range.start)/range.body.dom.center.clientWidth;var widthInMs=this.width*msPerPixel;return this.data.start.getTime()+widthInMs>range.start&&this.data.start<range.end;};/**
	   * Repaint the item
	   */PointItem.prototype.redraw=function(){var dom=this.dom;if(!dom){// create DOM
	this.dom={};dom=this.dom;// background box
	dom.point=document.createElement('div');// className is updated in redraw()
	// contents box, right from the dot
	dom.content=document.createElement('div');dom.content.className='vis-item-content';dom.point.appendChild(dom.content);// dot at start
	dom.dot=document.createElement('div');dom.point.appendChild(dom.dot);// attach this item as attribute
	dom.point['timeline-item']=this;this.dirty=true;}// append DOM to parent DOM
	if(!this.parent){throw new Error('Cannot redraw item: no parent attached');}if(!dom.point.parentNode){var foreground=this.parent.dom.foreground;if(!foreground){throw new Error('Cannot redraw item: parent has no foreground container element');}foreground.appendChild(dom.point);}this.displayed=true;// Update DOM when item is marked dirty. An item is marked dirty when:
	// - the item is not yet rendered
	// - the item's data is changed
	// - the item is selected/deselected
	if(this.dirty){this._updateContents(this.dom.content);this._updateTitle(this.dom.point);this._updateDataAttributes(this.dom.point);this._updateStyle(this.dom.point);var editable=(this.options.editable.updateTime||this.options.editable.updateGroup||this.editable===true)&&this.editable!==false;// update class
	var className=(this.data.className?' '+this.data.className:'')+(this.selected?' vis-selected':'')+(editable?' vis-editable':' vis-readonly');dom.point.className='vis-item vis-point'+className;dom.dot.className='vis-item vis-dot'+className;// recalculate size of dot and contents
	this.props.dot.width=dom.dot.offsetWidth;this.props.dot.height=dom.dot.offsetHeight;this.props.content.height=dom.content.offsetHeight;// resize contents
	if(this.options.rtl){dom.content.style.marginRight=2*this.props.dot.width+'px';}else{dom.content.style.marginLeft=2*this.props.dot.width+'px';}//dom.content.style.marginRight = ... + 'px'; // TODO: margin right
	// recalculate size
	this.width=dom.point.offsetWidth;this.height=dom.point.offsetHeight;// reposition the dot
	dom.dot.style.top=(this.height-this.props.dot.height)/2+'px';if(this.options.rtl){dom.dot.style.right=this.props.dot.width/2+'px';}else{dom.dot.style.left=this.props.dot.width/2+'px';}this.dirty=false;}this._repaintOnItemUpdateTimeTooltip(dom.point);this._repaintDragCenter();this._repaintDeleteButton(dom.point);};/**
	   * Show the item in the DOM (when not already visible). The items DOM will
	   * be created when needed.
	   */PointItem.prototype.show=function(){if(!this.displayed){this.redraw();}};/**
	   * Hide the item from the DOM (when visible)
	   */PointItem.prototype.hide=function(){if(this.displayed){if(this.dom.point.parentNode){this.dom.point.parentNode.removeChild(this.dom.point);}this.displayed=false;}};/**
	   * Reposition the item horizontally
	   * @Override
	   */PointItem.prototype.repositionX=function(){var start=this.conversion.toScreen(this.data.start);if(this.options.rtl){this.right=start-this.props.dot.width;// reposition point
	this.dom.point.style.right=this.right+'px';}else{this.left=start-this.props.dot.width;// reposition point
	this.dom.point.style.left=this.left+'px';}};/**
	   * Reposition the item vertically
	   * @Override
	   */PointItem.prototype.repositionY=function(){var orientation=this.options.orientation.item;var point=this.dom.point;if(orientation=='top'){point.style.top=this.top+'px';}else{point.style.top=this.parent.height-this.top-this.height+'px';}};/**
	   * Return the width of the item left from its start date
	   * @return {number}
	   */PointItem.prototype.getWidthLeft=function(){return this.props.dot.width;};/**
	   * Return the width of the item right from  its start date
	   * @return {number}
	   */PointItem.prototype.getWidthRight=function(){return this.props.dot.width;};module.exports=PointItem;/***/},/* 45 *//***/function(module,exports,__webpack_require__){'use strict';var Hammer=__webpack_require__(22);var Item=__webpack_require__(41);var BackgroundGroup=__webpack_require__(42);var RangeItem=__webpack_require__(40);/**
	   * @constructor BackgroundItem
	   * @extends Item
	   * @param {Object} data             Object containing parameters start, end
	   *                                  content, className.
	   * @param {{toScreen: function, toTime: function}} conversion
	   *                                  Conversion functions from time to screen and vice versa
	   * @param {Object} [options]        Configuration options
	   *                                  // TODO: describe options
	   */// TODO: implement support for the BackgroundItem just having a start, then being displayed as a sort of an annotation
	function BackgroundItem(data,conversion,options){this.props={content:{width:0}};this.overflow=false;// if contents can overflow (css styling), this flag is set to true
	// validate data
	if(data){if(data.start==undefined){throw new Error('Property "start" missing in item '+data.id);}if(data.end==undefined){throw new Error('Property "end" missing in item '+data.id);}}Item.call(this,data,conversion,options);}BackgroundItem.prototype=new Item(null,null,null);BackgroundItem.prototype.baseClassName='vis-item vis-background';BackgroundItem.prototype.stack=false;/**
	   * Check whether this item is visible inside given range
	   * @returns {{start: Number, end: Number}} range with a timestamp for start and end
	   * @returns {boolean} True if visible
	   */BackgroundItem.prototype.isVisible=function(range){// determine visibility
	return this.data.start<range.end&&this.data.end>range.start;};/**
	   * Repaint the item
	   */BackgroundItem.prototype.redraw=function(){var dom=this.dom;if(!dom){// create DOM
	this.dom={};dom=this.dom;// background box
	dom.box=document.createElement('div');// className is updated in redraw()
	// frame box (to prevent the item contents from overflowing
	dom.frame=document.createElement('div');dom.frame.className='vis-item-overflow';dom.box.appendChild(dom.frame);// contents box
	dom.content=document.createElement('div');dom.content.className='vis-item-content';dom.frame.appendChild(dom.content);// Note: we do NOT attach this item as attribute to the DOM,
	//       such that background items cannot be selected
	//dom.box['timeline-item'] = this;
	this.dirty=true;}// append DOM to parent DOM
	if(!this.parent){throw new Error('Cannot redraw item: no parent attached');}if(!dom.box.parentNode){var background=this.parent.dom.background;if(!background){throw new Error('Cannot redraw item: parent has no background container element');}background.appendChild(dom.box);}this.displayed=true;// Update DOM when item is marked dirty. An item is marked dirty when:
	// - the item is not yet rendered
	// - the item's data is changed
	// - the item is selected/deselected
	if(this.dirty){this._updateContents(this.dom.content);this._updateTitle(this.dom.content);this._updateDataAttributes(this.dom.content);this._updateStyle(this.dom.box);// update class
	var className=(this.data.className?' '+this.data.className:'')+(this.selected?' vis-selected':'');dom.box.className=this.baseClassName+className;// determine from css whether this box has overflow
	this.overflow=window.getComputedStyle(dom.content).overflow!=='hidden';// recalculate size
	this.props.content.width=this.dom.content.offsetWidth;this.height=0;// set height zero, so this item will be ignored when stacking items
	this.dirty=false;}};/**
	   * Show the item in the DOM (when not already visible). The items DOM will
	   * be created when needed.
	   */BackgroundItem.prototype.show=RangeItem.prototype.show;/**
	   * Hide the item from the DOM (when visible)
	   * @return {Boolean} changed
	   */BackgroundItem.prototype.hide=RangeItem.prototype.hide;/**
	   * Reposition the item horizontally
	   * @Override
	   */BackgroundItem.prototype.repositionX=RangeItem.prototype.repositionX;/**
	   * Reposition the item vertically
	   * @Override
	   */BackgroundItem.prototype.repositionY=function(margin){var onTop=this.options.orientation.item==='top';this.dom.content.style.top=onTop?'':'0';this.dom.content.style.bottom=onTop?'0':'';var height;// special positioning for subgroups
	if(this.data.subgroup!==undefined){// TODO: instead of calculating the top position of the subgroups here for every BackgroundItem, calculate the top of the subgroup once in Itemset
	var itemSubgroup=this.data.subgroup;var subgroups=this.parent.subgroups;var subgroupIndex=subgroups[itemSubgroup].index;// if the orientation is top, we need to take the difference in height into account.
	if(onTop==true){// the first subgroup will have to account for the distance from the top to the first item.
	height=this.parent.subgroups[itemSubgroup].height+margin.item.vertical;height+=subgroupIndex==0?margin.axis-0.5*margin.item.vertical:0;var newTop=this.parent.top;for(var subgroup in subgroups){if(subgroups.hasOwnProperty(subgroup)){if(subgroups[subgroup].visible==true&&subgroups[subgroup].index<subgroupIndex){newTop+=subgroups[subgroup].height+margin.item.vertical;}}}// the others will have to be offset downwards with this same distance.
	newTop+=subgroupIndex!=0?margin.axis-0.5*margin.item.vertical:0;this.dom.box.style.top=newTop+'px';this.dom.box.style.bottom='';}// and when the orientation is bottom:
	else{var newTop=this.parent.top;var totalHeight=0;for(var subgroup in subgroups){if(subgroups.hasOwnProperty(subgroup)){if(subgroups[subgroup].visible==true){var newHeight=subgroups[subgroup].height+margin.item.vertical;totalHeight+=newHeight;if(subgroups[subgroup].index>subgroupIndex){newTop+=newHeight;}}}}height=this.parent.subgroups[itemSubgroup].height+margin.item.vertical;this.dom.box.style.top=this.parent.height-totalHeight+newTop+'px';this.dom.box.style.bottom='';}}// and in the case of no subgroups:
	else{// we want backgrounds with groups to only show in groups.
	if(this.parent instanceof BackgroundGroup){// if the item is not in a group:
	height=Math.max(this.parent.height,this.parent.itemSet.body.domProps.center.height,this.parent.itemSet.body.domProps.centerContainer.height);this.dom.box.style.top=onTop?'0':'';this.dom.box.style.bottom=onTop?'':'0';}else{height=this.parent.height;// same alignment for items when orientation is top or bottom
	this.dom.box.style.top=this.parent.top+'px';this.dom.box.style.bottom='';}}this.dom.box.style.height=height+'px';};module.exports=BackgroundItem;/***/},/* 46 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var util=__webpack_require__(1);var Component=__webpack_require__(33);var TimeStep=__webpack_require__(37);var DateUtil=__webpack_require__(34);var moment=__webpack_require__(2);/**
	   * A horizontal time axis
	   * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
	   * @param {Object} [options]        See TimeAxis.setOptions for the available
	   *                                  options.
	   * @constructor TimeAxis
	   * @extends Component
	   */function TimeAxis(body,options){this.dom={foreground:null,lines:[],majorTexts:[],minorTexts:[],redundant:{lines:[],majorTexts:[],minorTexts:[]}};this.props={range:{start:0,end:0,minimumStep:0},lineTop:0};this.defaultOptions={orientation:{axis:'bottom'},// axis orientation: 'top' or 'bottom'
	showMinorLabels:true,showMajorLabels:true,maxMinorChars:7,format:TimeStep.FORMAT,moment:moment,timeAxis:null};this.options=util.extend({},this.defaultOptions);this.body=body;// create the HTML DOM
	this._create();this.setOptions(options);}TimeAxis.prototype=new Component();/**
	   * Set options for the TimeAxis.
	   * Parameters will be merged in current options.
	   * @param {Object} options  Available options:
	   *                          {string} [orientation.axis]
	   *                          {boolean} [showMinorLabels]
	   *                          {boolean} [showMajorLabels]
	   */TimeAxis.prototype.setOptions=function(options){if(options){// copy all options that we know
	util.selectiveExtend(['showMinorLabels','showMajorLabels','maxMinorChars','hiddenDates','timeAxis','moment','rtl'],this.options,options);// deep copy the format options
	util.selectiveDeepExtend(['format'],this.options,options);if('orientation'in options){if(typeof options.orientation==='string'){this.options.orientation.axis=options.orientation;}else if(_typeof(options.orientation)==='object'&&'axis'in options.orientation){this.options.orientation.axis=options.orientation.axis;}}// apply locale to moment.js
	// TODO: not so nice, this is applied globally to moment.js
	if('locale'in options){if(typeof moment.locale==='function'){// moment.js 2.8.1+
	moment.locale(options.locale);}else{moment.lang(options.locale);}}}};/**
	   * Create the HTML DOM for the TimeAxis
	   */TimeAxis.prototype._create=function(){this.dom.foreground=document.createElement('div');this.dom.background=document.createElement('div');this.dom.foreground.className='vis-time-axis vis-foreground';this.dom.background.className='vis-time-axis vis-background';};/**
	   * Destroy the TimeAxis
	   */TimeAxis.prototype.destroy=function(){// remove from DOM
	if(this.dom.foreground.parentNode){this.dom.foreground.parentNode.removeChild(this.dom.foreground);}if(this.dom.background.parentNode){this.dom.background.parentNode.removeChild(this.dom.background);}this.body=null;};/**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */TimeAxis.prototype.redraw=function(){var props=this.props;var foreground=this.dom.foreground;var background=this.dom.background;// determine the correct parent DOM element (depending on option orientation)
	var parent=this.options.orientation.axis=='top'?this.body.dom.top:this.body.dom.bottom;var parentChanged=foreground.parentNode!==parent;// calculate character width and height
	this._calculateCharSize();// TODO: recalculate sizes only needed when parent is resized or options is changed
	var showMinorLabels=this.options.showMinorLabels&&this.options.orientation.axis!=='none';var showMajorLabels=this.options.showMajorLabels&&this.options.orientation.axis!=='none';// determine the width and height of the elemens for the axis
	props.minorLabelHeight=showMinorLabels?props.minorCharHeight:0;props.majorLabelHeight=showMajorLabels?props.majorCharHeight:0;props.height=props.minorLabelHeight+props.majorLabelHeight;props.width=foreground.offsetWidth;props.minorLineHeight=this.body.domProps.root.height-props.majorLabelHeight-(this.options.orientation.axis=='top'?this.body.domProps.bottom.height:this.body.domProps.top.height);props.minorLineWidth=1;// TODO: really calculate width
	props.majorLineHeight=props.minorLineHeight+props.majorLabelHeight;props.majorLineWidth=1;// TODO: really calculate width
	//  take foreground and background offline while updating (is almost twice as fast)
	var foregroundNextSibling=foreground.nextSibling;var backgroundNextSibling=background.nextSibling;foreground.parentNode&&foreground.parentNode.removeChild(foreground);background.parentNode&&background.parentNode.removeChild(background);foreground.style.height=this.props.height+'px';this._repaintLabels();// put DOM online again (at the same place)
	if(foregroundNextSibling){parent.insertBefore(foreground,foregroundNextSibling);}else{parent.appendChild(foreground);}if(backgroundNextSibling){this.body.dom.backgroundVertical.insertBefore(background,backgroundNextSibling);}else{this.body.dom.backgroundVertical.appendChild(background);}return this._isResized()||parentChanged;};/**
	   * Repaint major and minor text labels and vertical grid lines
	   * @private
	   */TimeAxis.prototype._repaintLabels=function(){var orientation=this.options.orientation.axis;// calculate range and step (step such that we have space for 7 characters per label)
	var start=util.convert(this.body.range.start,'Number');var end=util.convert(this.body.range.end,'Number');var timeLabelsize=this.body.util.toTime((this.props.minorCharWidth||10)*this.options.maxMinorChars).valueOf();var minimumStep=timeLabelsize-DateUtil.getHiddenDurationBefore(this.options.moment,this.body.hiddenDates,this.body.range,timeLabelsize);minimumStep-=this.body.util.toTime(0).valueOf();var step=new TimeStep(new Date(start),new Date(end),minimumStep,this.body.hiddenDates);step.setMoment(this.options.moment);if(this.options.format){step.setFormat(this.options.format);}if(this.options.timeAxis){step.setScale(this.options.timeAxis);}this.step=step;// Move all DOM elements to a "redundant" list, where they
	// can be picked for re-use, and clear the lists with lines and texts.
	// At the end of the function _repaintLabels, left over elements will be cleaned up
	var dom=this.dom;dom.redundant.lines=dom.lines;dom.redundant.majorTexts=dom.majorTexts;dom.redundant.minorTexts=dom.minorTexts;dom.lines=[];dom.majorTexts=[];dom.minorTexts=[];var current;var next;var x;var xNext;var isMajor,nextIsMajor;var width=0,prevWidth;var line;var labelMinor;var xFirstMajorLabel=undefined;var count=0;var MAX=1000;var className;step.start();next=step.getCurrent();xNext=this.body.util.toScreen(next);while(step.hasNext()&&count<MAX){count++;isMajor=step.isMajor();className=step.getClassName();labelMinor=step.getLabelMinor();current=next;x=xNext;step.next();next=step.getCurrent();nextIsMajor=step.isMajor();xNext=this.body.util.toScreen(next);prevWidth=width;width=xNext-x;var showMinorGrid=width>=prevWidth*0.4;// prevent displaying of the 31th of the month on a scale of 5 days
	if(this.options.showMinorLabels&&showMinorGrid){var label=this._repaintMinorText(x,labelMinor,orientation,className);label.style.width=width+'px';// set width to prevent overflow
	}if(isMajor&&this.options.showMajorLabels){if(x>0){if(xFirstMajorLabel==undefined){xFirstMajorLabel=x;}label=this._repaintMajorText(x,step.getLabelMajor(),orientation,className);}line=this._repaintMajorLine(x,width,orientation,className);}else{// minor line
	if(showMinorGrid){line=this._repaintMinorLine(x,width,orientation,className);}else{if(line){// adjust the width of the previous grid
	line.style.width=parseInt(line.style.width)+width+'px';}}}}if(count===MAX&&!warnedForOverflow){console.warn('Something is wrong with the Timeline scale. Limited drawing of grid lines to '+MAX+' lines.');warnedForOverflow=true;}// create a major label on the left when needed
	if(this.options.showMajorLabels){var leftTime=this.body.util.toTime(0),leftText=step.getLabelMajor(leftTime),widthText=leftText.length*(this.props.majorCharWidth||10)+10;// upper bound estimation
	if(xFirstMajorLabel==undefined||widthText<xFirstMajorLabel){this._repaintMajorText(0,leftText,orientation,className);}}// Cleanup leftover DOM elements from the redundant list
	util.forEach(this.dom.redundant,function(arr){while(arr.length){var elem=arr.pop();if(elem&&elem.parentNode){elem.parentNode.removeChild(elem);}}});};/**
	   * Create a minor label for the axis at position x
	   * @param {Number} x
	   * @param {String} text
	   * @param {String} orientation   "top" or "bottom" (default)
	   * @param {String} className
	   * @return {Element} Returns the HTML element of the created label
	   * @private
	   */TimeAxis.prototype._repaintMinorText=function(x,text,orientation,className){// reuse redundant label
	var label=this.dom.redundant.minorTexts.shift();if(!label){// create new label
	var content=document.createTextNode('');label=document.createElement('div');label.appendChild(content);this.dom.foreground.appendChild(label);}this.dom.minorTexts.push(label);label.childNodes[0].nodeValue=text;label.style.top=orientation=='top'?this.props.majorLabelHeight+'px':'0';if(this.options.rtl){label.style.left="";label.style.right=x+'px';}else{label.style.left=x+'px';};label.className='vis-text vis-minor '+className;//label.title = title;  // TODO: this is a heavy operation
	return label;};/**
	   * Create a Major label for the axis at position x
	   * @param {Number} x
	   * @param {String} text
	   * @param {String} orientation   "top" or "bottom" (default)
	   * @param {String} className
	   * @return {Element} Returns the HTML element of the created label
	   * @private
	   */TimeAxis.prototype._repaintMajorText=function(x,text,orientation,className){// reuse redundant label
	var label=this.dom.redundant.majorTexts.shift();if(!label){// create label
	var content=document.createTextNode(text);label=document.createElement('div');label.appendChild(content);this.dom.foreground.appendChild(label);}this.dom.majorTexts.push(label);label.childNodes[0].nodeValue=text;label.className='vis-text vis-major '+className;//label.title = title; // TODO: this is a heavy operation
	label.style.top=orientation=='top'?'0':this.props.minorLabelHeight+'px';if(this.options.rtl){label.style.left="";label.style.right=x+'px';}else{label.style.left=x+'px';};return label;};/**
	   * Create a minor line for the axis at position x
	   * @param {Number} x
	   * @param {Number} width
	   * @param {String} orientation   "top" or "bottom" (default)
	   * @param {String} className
	   * @return {Element} Returns the created line
	   * @private
	   */TimeAxis.prototype._repaintMinorLine=function(x,width,orientation,className){// reuse redundant line
	var line=this.dom.redundant.lines.shift();if(!line){// create vertical line
	line=document.createElement('div');this.dom.background.appendChild(line);}this.dom.lines.push(line);var props=this.props;if(orientation=='top'){line.style.top=props.majorLabelHeight+'px';}else{line.style.top=this.body.domProps.top.height+'px';}line.style.height=props.minorLineHeight+'px';if(this.options.rtl){line.style.left="";line.style.right=x-props.minorLineWidth/2+'px';line.className='vis-grid vis-vertical-rtl vis-minor '+className;}else{line.style.left=x-props.minorLineWidth/2+'px';line.className='vis-grid vis-vertical vis-minor '+className;};line.style.width=width+'px';return line;};/**
	   * Create a Major line for the axis at position x
	   * @param {Number} x
	   * @param {Number} width
	   * @param {String} orientation   "top" or "bottom" (default)
	   * @param {String} className
	   * @return {Element} Returns the created line
	   * @private
	   */TimeAxis.prototype._repaintMajorLine=function(x,width,orientation,className){// reuse redundant line
	var line=this.dom.redundant.lines.shift();if(!line){// create vertical line
	line=document.createElement('div');this.dom.background.appendChild(line);}this.dom.lines.push(line);var props=this.props;if(orientation=='top'){line.style.top='0';}else{line.style.top=this.body.domProps.top.height+'px';}if(this.options.rtl){line.style.left="";line.style.right=x-props.majorLineWidth/2+'px';line.className='vis-grid vis-vertical-rtl vis-major '+className;}else{line.style.left=x-props.majorLineWidth/2+'px';line.className='vis-grid vis-vertical vis-major '+className;}line.style.height=props.majorLineHeight+'px';line.style.width=width+'px';return line;};/**
	   * Determine the size of text on the axis (both major and minor axis).
	   * The size is calculated only once and then cached in this.props.
	   * @private
	   */TimeAxis.prototype._calculateCharSize=function(){// Note: We calculate char size with every redraw. Size may change, for
	// example when any of the timelines parents had display:none for example.
	// determine the char width and height on the minor axis
	if(!this.dom.measureCharMinor){this.dom.measureCharMinor=document.createElement('DIV');this.dom.measureCharMinor.className='vis-text vis-minor vis-measure';this.dom.measureCharMinor.style.position='absolute';this.dom.measureCharMinor.appendChild(document.createTextNode('0'));this.dom.foreground.appendChild(this.dom.measureCharMinor);}this.props.minorCharHeight=this.dom.measureCharMinor.clientHeight;this.props.minorCharWidth=this.dom.measureCharMinor.clientWidth;// determine the char width and height on the major axis
	if(!this.dom.measureCharMajor){this.dom.measureCharMajor=document.createElement('DIV');this.dom.measureCharMajor.className='vis-text vis-major vis-measure';this.dom.measureCharMajor.style.position='absolute';this.dom.measureCharMajor.appendChild(document.createTextNode('0'));this.dom.foreground.appendChild(this.dom.measureCharMajor);}this.props.majorCharHeight=this.dom.measureCharMajor.clientHeight;this.props.majorCharWidth=this.dom.measureCharMajor.clientWidth;};var warnedForOverflow=false;module.exports=TimeAxis;/***/},/* 47 *//***/function(module,exports,__webpack_require__){'use strict';var keycharm=__webpack_require__(25);var Emitter=__webpack_require__(13);var Hammer=__webpack_require__(22);var util=__webpack_require__(1);/**
	   * Turn an element into an clickToUse element.
	   * When not active, the element has a transparent overlay. When the overlay is
	   * clicked, the mode is changed to active.
	   * When active, the element is displayed with a blue border around it, and
	   * the interactive contents of the element can be used. When clicked outside
	   * the element, the elements mode is changed to inactive.
	   * @param {Element} container
	   * @constructor
	   */function Activator(container){this.active=false;this.dom={container:container};this.dom.overlay=document.createElement('div');this.dom.overlay.className='vis-overlay';this.dom.container.appendChild(this.dom.overlay);this.hammer=Hammer(this.dom.overlay);this.hammer.on('tap',this._onTapOverlay.bind(this));// block all touch events (except tap)
	var me=this;var events=['tap','doubletap','press','pinch','pan','panstart','panmove','panend'];events.forEach(function(event){me.hammer.on(event,function(event){event.stopPropagation();});});// attach a click event to the window, in order to deactivate when clicking outside the timeline
	if(document&&document.body){this.onClick=function(event){if(!_hasParent(event.target,container)){me.deactivate();}};document.body.addEventListener('click',this.onClick);}if(this.keycharm!==undefined){this.keycharm.destroy();}this.keycharm=keycharm();// keycharm listener only bounded when active)
	this.escListener=this.deactivate.bind(this);}// turn into an event emitter
	Emitter(Activator.prototype);// The currently active activator
	Activator.current=null;/**
	   * Destroy the activator. Cleans up all created DOM and event listeners
	   */Activator.prototype.destroy=function(){this.deactivate();// remove dom
	this.dom.overlay.parentNode.removeChild(this.dom.overlay);// remove global event listener
	if(this.onClick){document.body.removeEventListener('click',this.onClick);}// cleanup hammer instances
	this.hammer.destroy();this.hammer=null;// FIXME: cleaning up hammer instances doesn't work (Timeline not removed from memory)
	};/**
	   * Activate the element
	   * Overlay is hidden, element is decorated with a blue shadow border
	   */Activator.prototype.activate=function(){// we allow only one active activator at a time
	if(Activator.current){Activator.current.deactivate();}Activator.current=this;this.active=true;this.dom.overlay.style.display='none';util.addClassName(this.dom.container,'vis-active');this.emit('change');this.emit('activate');// ugly hack: bind ESC after emitting the events, as the Network rebinds all
	// keyboard events on a 'change' event
	this.keycharm.bind('esc',this.escListener);};/**
	   * Deactivate the element
	   * Overlay is displayed on top of the element
	   */Activator.prototype.deactivate=function(){this.active=false;this.dom.overlay.style.display='';util.removeClassName(this.dom.container,'vis-active');this.keycharm.unbind('esc',this.escListener);this.emit('change');this.emit('deactivate');};/**
	   * Handle a tap event: activate the container
	   * @param event
	   * @private
	   */Activator.prototype._onTapOverlay=function(event){// activate the container
	this.activate();event.stopPropagation();};/**
	   * Test whether the element has the requested parent element somewhere in
	   * its chain of parent nodes.
	   * @param {HTMLElement} element
	   * @param {HTMLElement} parent
	   * @returns {boolean} Returns true when the parent is found somewhere in the
	   *                    chain of parent nodes.
	   * @private
	   */function _hasParent(element,parent){while(element){if(element===parent){return true;}element=element.parentNode;}return false;}module.exports=Activator;/***/},/* 48 *//***/function(module,exports,__webpack_require__){'use strict';var Hammer=__webpack_require__(22);var util=__webpack_require__(1);var Component=__webpack_require__(33);var moment=__webpack_require__(2);var locales=__webpack_require__(49);/**
	   * A custom time bar
	   * @param {{range: Range, dom: Object}} body
	   * @param {Object} [options]        Available parameters:
	   *                                  {number | string} id
	   *                                  {string} locales
	   *                                  {string} locale
	   * @constructor CustomTime
	   * @extends Component
	   */function CustomTime(body,options){this.body=body;// default options
	this.defaultOptions={moment:moment,locales:locales,locale:'en',id:undefined,title:undefined};this.options=util.extend({},this.defaultOptions);if(options&&options.time){this.customTime=options.time;}else{this.customTime=new Date();}this.eventParams={};// stores state parameters while dragging the bar
	this.setOptions(options);// create the DOM
	this._create();}CustomTime.prototype=new Component();/**
	   * Set options for the component. Options will be merged in current options.
	   * @param {Object} options  Available parameters:
	   *                                  {number | string} id
	   *                                  {string} locales
	   *                                  {string} locale
	   */CustomTime.prototype.setOptions=function(options){if(options){// copy all options that we know
	util.selectiveExtend(['moment','locale','locales','id'],this.options,options);}};/**
	   * Create the DOM for the custom time
	   * @private
	   */CustomTime.prototype._create=function(){var bar=document.createElement('div');bar['custom-time']=this;bar.className='vis-custom-time '+(this.options.id||'');bar.style.position='absolute';bar.style.top='0px';bar.style.height='100%';this.bar=bar;var drag=document.createElement('div');drag.style.position='relative';drag.style.top='0px';drag.style.left='-10px';drag.style.height='100%';drag.style.width='20px';bar.appendChild(drag);// attach event listeners
	this.hammer=new Hammer(drag);this.hammer.on('panstart',this._onDragStart.bind(this));this.hammer.on('panmove',this._onDrag.bind(this));this.hammer.on('panend',this._onDragEnd.bind(this));this.hammer.get('pan').set({threshold:5,direction:Hammer.DIRECTION_HORIZONTAL});};/**
	   * Destroy the CustomTime bar
	   */CustomTime.prototype.destroy=function(){this.hide();this.hammer.destroy();this.hammer=null;this.body=null;};/**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */CustomTime.prototype.redraw=function(){var parent=this.body.dom.backgroundVertical;if(this.bar.parentNode!=parent){// attach to the dom
	if(this.bar.parentNode){this.bar.parentNode.removeChild(this.bar);}parent.appendChild(this.bar);}var x=this.body.util.toScreen(this.customTime);var locale=this.options.locales[this.options.locale];if(!locale){if(!this.warned){console.log('WARNING: options.locales[\''+this.options.locale+'\'] not found. See http://visjs.org/docs/timeline/#Localization');this.warned=true;}locale=this.options.locales['en'];// fall back on english when not available
	}var title=this.options.title;// To hide the title completely use empty string ''.
	if(title===undefined){title=locale.time+': '+this.options.moment(this.customTime).format('dddd, MMMM Do YYYY, H:mm:ss');title=title.charAt(0).toUpperCase()+title.substring(1);}this.bar.style.left=x+'px';this.bar.title=title;return false;};/**
	   * Remove the CustomTime from the DOM
	   */CustomTime.prototype.hide=function(){// remove the line from the DOM
	if(this.bar.parentNode){this.bar.parentNode.removeChild(this.bar);}};/**
	   * Set custom time.
	   * @param {Date | number | string} time
	   */CustomTime.prototype.setCustomTime=function(time){this.customTime=util.convert(time,'Date');this.redraw();};/**
	   * Retrieve the current custom time.
	   * @return {Date} customTime
	   */CustomTime.prototype.getCustomTime=function(){return new Date(this.customTime.valueOf());};/**
	    * Set custom title.
	    * @param {Date | number | string} title
	    */CustomTime.prototype.setCustomTitle=function(title){this.options.title=title;};/**
	   * Start moving horizontally
	   * @param {Event} event
	   * @private
	   */CustomTime.prototype._onDragStart=function(event){this.eventParams.dragging=true;this.eventParams.customTime=this.customTime;event.stopPropagation();};/**
	   * Perform moving operating.
	   * @param {Event} event
	   * @private
	   */CustomTime.prototype._onDrag=function(event){if(!this.eventParams.dragging)return;var x=this.body.util.toScreen(this.eventParams.customTime)+event.deltaX;var time=this.body.util.toTime(x);this.setCustomTime(time);// fire a timechange event
	this.body.emitter.emit('timechange',{id:this.options.id,time:new Date(this.customTime.valueOf())});event.stopPropagation();};/**
	   * Stop moving operating.
	   * @param {Event} event
	   * @private
	   */CustomTime.prototype._onDragEnd=function(event){if(!this.eventParams.dragging)return;// fire a timechanged event
	this.body.emitter.emit('timechanged',{id:this.options.id,time:new Date(this.customTime.valueOf())});event.stopPropagation();};/**
	   * Find a custom time from an event target:
	   * searches for the attribute 'custom-time' in the event target's element tree
	   * @param {Event} event
	   * @return {CustomTime | null} customTime
	   */CustomTime.customTimeFromTarget=function(event){var target=event.target;while(target){if(target.hasOwnProperty('custom-time')){return target['custom-time'];}target=target.parentNode;}return null;};module.exports=CustomTime;/***/},/* 49 *//***/function(module,exports){'use strict';// English
	exports['en']={current:'current',time:'time'};exports['en_EN']=exports['en'];exports['en_US']=exports['en'];// Italiano
	exports['it']={current:'attuale',time:'tempo'};exports['it_IT']=exports['it'];exports['it_CH']=exports['it'];// Dutch
	exports['nl']={current:'huidige',time:'tijd'};exports['nl_NL']=exports['nl'];exports['nl_BE']=exports['nl'];// German
	exports['de']={current:'Aktuelle',time:'Zeit'};exports['de_DE']=exports['de'];/***/},/* 50 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);var Component=__webpack_require__(33);var moment=__webpack_require__(2);var locales=__webpack_require__(49);/**
	   * A current time bar
	   * @param {{range: Range, dom: Object, domProps: Object}} body
	   * @param {Object} [options]        Available parameters:
	   *                                  {Boolean} [showCurrentTime]
	   * @constructor CurrentTime
	   * @extends Component
	   */function CurrentTime(body,options){this.body=body;// default options
	this.defaultOptions={rtl:false,showCurrentTime:true,moment:moment,locales:locales,locale:'en'};this.options=util.extend({},this.defaultOptions);this.offset=0;this._create();this.setOptions(options);}CurrentTime.prototype=new Component();/**
	   * Create the HTML DOM for the current time bar
	   * @private
	   */CurrentTime.prototype._create=function(){var bar=document.createElement('div');bar.className='vis-current-time';bar.style.position='absolute';bar.style.top='0px';bar.style.height='100%';this.bar=bar;};/**
	   * Destroy the CurrentTime bar
	   */CurrentTime.prototype.destroy=function(){this.options.showCurrentTime=false;this.redraw();// will remove the bar from the DOM and stop refreshing
	this.body=null;};/**
	   * Set options for the component. Options will be merged in current options.
	   * @param {Object} options  Available parameters:
	   *                          {boolean} [showCurrentTime]
	   */CurrentTime.prototype.setOptions=function(options){if(options){// copy all options that we know
	util.selectiveExtend(['rtl','showCurrentTime','moment','locale','locales'],this.options,options);}};/**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */CurrentTime.prototype.redraw=function(){if(this.options.showCurrentTime){var parent=this.body.dom.backgroundVertical;if(this.bar.parentNode!=parent){// attach to the dom
	if(this.bar.parentNode){this.bar.parentNode.removeChild(this.bar);}parent.appendChild(this.bar);this.start();}var now=this.options.moment(new Date().valueOf()+this.offset);var x=this.body.util.toScreen(now);var locale=this.options.locales[this.options.locale];if(!locale){if(!this.warned){console.log('WARNING: options.locales[\''+this.options.locale+'\'] not found. See http://visjs.org/docs/timeline/#Localization');this.warned=true;}locale=this.options.locales['en'];// fall back on english when not available
	}var title=locale.current+' '+locale.time+': '+now.format('dddd, MMMM Do YYYY, H:mm:ss');title=title.charAt(0).toUpperCase()+title.substring(1);if(this.options.rtl){this.bar.style.right=x+'px';}else{this.bar.style.left=x+'px';}this.bar.title=title;}else{// remove the line from the DOM
	if(this.bar.parentNode){this.bar.parentNode.removeChild(this.bar);}this.stop();}return false;};/**
	   * Start auto refreshing the current time bar
	   */CurrentTime.prototype.start=function(){var me=this;function update(){me.stop();// determine interval to refresh
	var scale=me.body.range.conversion(me.body.domProps.center.width).scale;var interval=1/scale/10;if(interval<30)interval=30;if(interval>1000)interval=1000;me.redraw();me.body.emitter.emit('currentTimeTick');// start a renderTimer to adjust for the new time
	me.currentTimeTimer=setTimeout(update,interval);}update();};/**
	   * Stop auto refreshing the current time bar
	   */CurrentTime.prototype.stop=function(){if(this.currentTimeTimer!==undefined){clearTimeout(this.currentTimeTimer);delete this.currentTimeTimer;}};/**
	   * Set a current time. This can be used for example to ensure that a client's
	   * time is synchronized with a shared server time.
	   * @param {Date | String | Number} time     A Date, unix timestamp, or
	   *                                          ISO date string.
	   */CurrentTime.prototype.setCurrentTime=function(time){var t=util.convert(time,'Date').valueOf();var now=new Date().valueOf();this.offset=t-now;this.redraw();};/**
	   * Get the current time.
	   * @return {Date} Returns the current time.
	   */CurrentTime.prototype.getCurrentTime=function(){return new Date(new Date().valueOf()+this.offset);};module.exports=CurrentTime;/***/},/* 51 *//***/function(module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});/**
	   * This object contains all possible options. It will check if the types are correct, if required if the option is one
	   * of the allowed values.
	   *
	   * __any__ means that the name of the property does not matter.
	   * __type__ is a required field for all objects and contains the allowed types of all objects
	   */var string='string';var boolean='boolean';var number='number';var array='array';var date='date';var object='object';// should only be in a __type__ property
	var dom='dom';var moment='moment';var any='any';var allOptions={configure:{enabled:{boolean:boolean},filter:{boolean:boolean,'function':'function'},container:{dom:dom},__type__:{object:object,boolean:boolean,'function':'function'}},//globals :
	align:{string:string},rtl:{boolean:boolean,'undefined':'undefined'},verticalScroll:{boolean:boolean,'undefined':'undefined'},horizontalScroll:{boolean:boolean,'undefined':'undefined'},autoResize:{boolean:boolean},clickToUse:{boolean:boolean},dataAttributes:{string:string,array:array},editable:{add:{boolean:boolean,'undefined':'undefined'},remove:{boolean:boolean,'undefined':'undefined'},updateGroup:{boolean:boolean,'undefined':'undefined'},updateTime:{boolean:boolean,'undefined':'undefined'},__type__:{boolean:boolean,object:object}},end:{number:number,date:date,string:string,moment:moment},format:{minorLabels:{millisecond:{string:string,'undefined':'undefined'},second:{string:string,'undefined':'undefined'},minute:{string:string,'undefined':'undefined'},hour:{string:string,'undefined':'undefined'},weekday:{string:string,'undefined':'undefined'},day:{string:string,'undefined':'undefined'},month:{string:string,'undefined':'undefined'},year:{string:string,'undefined':'undefined'},__type__:{object:object,'function':'function'}},majorLabels:{millisecond:{string:string,'undefined':'undefined'},second:{string:string,'undefined':'undefined'},minute:{string:string,'undefined':'undefined'},hour:{string:string,'undefined':'undefined'},weekday:{string:string,'undefined':'undefined'},day:{string:string,'undefined':'undefined'},month:{string:string,'undefined':'undefined'},year:{string:string,'undefined':'undefined'},__type__:{object:object,'function':'function'}},__type__:{object:object}},moment:{'function':'function'},groupOrder:{string:string,'function':'function'},groupEditable:{add:{boolean:boolean,'undefined':'undefined'},remove:{boolean:boolean,'undefined':'undefined'},order:{boolean:boolean,'undefined':'undefined'},__type__:{boolean:boolean,object:object}},groupOrderSwap:{'function':'function'},height:{string:string,number:number},hiddenDates:{start:{date:date,number:number,string:string,moment:moment},end:{date:date,number:number,string:string,moment:moment},repeat:{string:string},__type__:{object:object,array:array}},itemsAlwaysDraggable:{boolean:boolean},locale:{string:string},locales:{__any__:{any:any},__type__:{object:object}},margin:{axis:{number:number},item:{horizontal:{number:number,'undefined':'undefined'},vertical:{number:number,'undefined':'undefined'},__type__:{object:object,number:number}},__type__:{object:object,number:number}},max:{date:date,number:number,string:string,moment:moment},maxHeight:{number:number,string:string},maxMinorChars:{number:number},min:{date:date,number:number,string:string,moment:moment},minHeight:{number:number,string:string},moveable:{boolean:boolean},multiselect:{boolean:boolean},multiselectPerGroup:{boolean:boolean},onAdd:{'function':'function'},onUpdate:{'function':'function'},onMove:{'function':'function'},onMoving:{'function':'function'},onRemove:{'function':'function'},onAddGroup:{'function':'function'},onMoveGroup:{'function':'function'},onRemoveGroup:{'function':'function'},order:{'function':'function'},orientation:{axis:{string:string,'undefined':'undefined'},item:{string:string,'undefined':'undefined'},__type__:{string:string,object:object}},selectable:{boolean:boolean},showCurrentTime:{boolean:boolean},showMajorLabels:{boolean:boolean},showMinorLabels:{boolean:boolean},stack:{boolean:boolean},snap:{'function':'function','null':'null'},start:{date:date,number:number,string:string,moment:moment},template:{'function':'function'},groupTemplate:{'function':'function'},tooltipOnItemUpdateTime:{template:{'function':'function'},__type__:{boolean:boolean,object:object}},timeAxis:{scale:{string:string,'undefined':'undefined'},step:{number:number,'undefined':'undefined'},__type__:{object:object}},type:{string:string},width:{string:string,number:number},zoomable:{boolean:boolean},zoomKey:{string:['ctrlKey','altKey','metaKey','']},zoomMax:{number:number},zoomMin:{number:number},__type__:{object:object}};var configureOptions={global:{align:['center','left','right'],direction:false,autoResize:true,clickToUse:false,// dataAttributes: ['all'], // FIXME: can be 'all' or string[]
	editable:{add:false,remove:false,updateGroup:false,updateTime:false},end:'',format:{minorLabels:{millisecond:'SSS',second:'s',minute:'HH:mm',hour:'HH:mm',weekday:'ddd D',day:'D',month:'MMM',year:'YYYY'},majorLabels:{millisecond:'HH:mm:ss',second:'D MMMM HH:mm',minute:'ddd D MMMM',hour:'ddd D MMMM',weekday:'MMMM YYYY',day:'MMMM YYYY',month:'YYYY',year:''}},//groupOrder: {string, 'function': 'function'},
	groupsDraggable:false,height:'',//hiddenDates: {object, array},
	locale:'',margin:{axis:[20,0,100,1],item:{horizontal:[10,0,100,1],vertical:[10,0,100,1]}},max:'',maxHeight:'',maxMinorChars:[7,0,20,1],min:'',minHeight:'',moveable:false,multiselect:false,multiselectPerGroup:false,//onAdd: {'function': 'function'},
	//onUpdate: {'function': 'function'},
	//onMove: {'function': 'function'},
	//onMoving: {'function': 'function'},
	//onRename: {'function': 'function'},
	//order: {'function': 'function'},
	orientation:{axis:['both','bottom','top'],item:['bottom','top']},selectable:true,showCurrentTime:false,showMajorLabels:true,showMinorLabels:true,stack:true,//snap: {'function': 'function', nada},
	start:'',//template: {'function': 'function'},
	//timeAxis: {
	//  scale: ['millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'month', 'year'],
	//  step: [1, 1, 10, 1]
	//},
	tooltipOnItemUpdateTime:false,type:['box','point','range','background'],width:'100%',zoomable:true,zoomKey:['ctrlKey','altKey','metaKey',''],zoomMax:[315360000000000,10,315360000000000,1],zoomMin:[10,10,315360000000000,1]}};exports.allOptions=allOptions;exports.configureOptions=configureOptions;/***/},/* 52 *//***/function(module,exports,__webpack_require__){'use strict';var _Configurator=__webpack_require__(28);var _Configurator2=_interopRequireDefault(_Configurator);var _Validator=__webpack_require__(31);var _Validator2=_interopRequireDefault(_Validator);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Emitter=__webpack_require__(13);var Hammer=__webpack_require__(22);var moment=__webpack_require__(2);var util=__webpack_require__(1);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var Range=__webpack_require__(32);var Core=__webpack_require__(35);var TimeAxis=__webpack_require__(46);var CurrentTime=__webpack_require__(50);var CustomTime=__webpack_require__(48);var LineGraph=__webpack_require__(53);var printStyle=__webpack_require__(31).printStyle;var allOptions=__webpack_require__(61).allOptions;var configureOptions=__webpack_require__(61).configureOptions;/**
	   * Create a timeline visualization
	   * @param {HTMLElement} container
	   * @param {vis.DataSet | Array} [items]
	   * @param {Object} [options]  See Graph2d.setOptions for the available options.
	   * @constructor
	   * @extends Core
	   */function Graph2d(container,items,groups,options){// if the third element is options, the forth is groups (optionally);
	if(!(Array.isArray(groups)||groups instanceof DataSet||groups instanceof DataView)&&groups instanceof Object){var forthArgument=options;options=groups;groups=forthArgument;}var me=this;this.defaultOptions={start:null,end:null,autoResize:true,orientation:{axis:'bottom',// axis orientation: 'bottom', 'top', or 'both'
	item:'bottom'// not relevant for Graph2d
	},moment:moment,width:null,height:null,maxHeight:null,minHeight:null};this.options=util.deepExtend({},this.defaultOptions);// Create the DOM, props, and emitter
	this._create(container);// all components listed here will be repainted automatically
	this.components=[];this.body={dom:this.dom,domProps:this.props,emitter:{on:this.on.bind(this),off:this.off.bind(this),emit:this.emit.bind(this)},hiddenDates:[],util:{toScreen:me._toScreen.bind(me),toGlobalScreen:me._toGlobalScreen.bind(me),// this refers to the root.width
	toTime:me._toTime.bind(me),toGlobalTime:me._toGlobalTime.bind(me)}};// range
	this.range=new Range(this.body);this.components.push(this.range);this.body.range=this.range;// time axis
	this.timeAxis=new TimeAxis(this.body);this.components.push(this.timeAxis);//this.body.util.snap = this.timeAxis.snap.bind(this.timeAxis);
	// current time bar
	this.currentTime=new CurrentTime(this.body);this.components.push(this.currentTime);// item set
	this.linegraph=new LineGraph(this.body);this.components.push(this.linegraph);this.itemsData=null;// DataSet
	this.groupsData=null;// DataSet
	this.on('tap',function(event){me.emit('click',me.getEventProperties(event));});this.on('doubletap',function(event){me.emit('doubleClick',me.getEventProperties(event));});this.dom.root.oncontextmenu=function(event){me.emit('contextmenu',me.getEventProperties(event));};// apply options
	if(options){this.setOptions(options);}// IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
	if(groups){this.setGroups(groups);}// create itemset
	if(items){this.setItems(items);}// draw for the first time
	this._redraw();}// Extend the functionality from Core
	Graph2d.prototype=new Core();Graph2d.prototype.setOptions=function(options){// validate options
	var errorFound=_Validator2.default.validate(options,allOptions);if(errorFound===true){console.log('%cErrors have been found in the supplied options object.',printStyle);}Core.prototype.setOptions.call(this,options);};/**
	   * Set items
	   * @param {vis.DataSet | Array | null} items
	   */Graph2d.prototype.setItems=function(items){var initialLoad=this.itemsData==null;// convert to type DataSet when needed
	var newDataSet;if(!items){newDataSet=null;}else if(items instanceof DataSet||items instanceof DataView){newDataSet=items;}else{// turn an array into a dataset
	newDataSet=new DataSet(items,{type:{start:'Date',end:'Date'}});}// set items
	this.itemsData=newDataSet;this.linegraph&&this.linegraph.setItems(newDataSet);if(initialLoad){if(this.options.start!=undefined||this.options.end!=undefined){var start=this.options.start!=undefined?this.options.start:null;var end=this.options.end!=undefined?this.options.end:null;this.setWindow(start,end,{animation:false});}else{this.fit({animation:false});}}};/**
	   * Set groups
	   * @param {vis.DataSet | Array} groups
	   */Graph2d.prototype.setGroups=function(groups){// convert to type DataSet when needed
	var newDataSet;if(!groups){newDataSet=null;}else if(groups instanceof DataSet||groups instanceof DataView){newDataSet=groups;}else{// turn an array into a dataset
	newDataSet=new DataSet(groups);}this.groupsData=newDataSet;this.linegraph.setGroups(newDataSet);};/**
	   * Returns an object containing an SVG element with the icon of the group (size determined by iconWidth and iconHeight), the label of the group (content) and the yAxisOrientation of the group (left or right).
	   * @param groupId
	   * @param width
	   * @param height
	   */Graph2d.prototype.getLegend=function(groupId,width,height){if(width===undefined){width=15;}if(height===undefined){height=15;}if(this.linegraph.groups[groupId]!==undefined){return this.linegraph.groups[groupId].getLegend(width,height);}else{return"cannot find group:'"+groupId+"'";}};/**
	   * This checks if the visible option of the supplied group (by ID) is true or false.
	   * @param groupId
	   * @returns {*}
	   */Graph2d.prototype.isGroupVisible=function(groupId){if(this.linegraph.groups[groupId]!==undefined){return this.linegraph.groups[groupId].visible&&(this.linegraph.options.groups.visibility[groupId]===undefined||this.linegraph.options.groups.visibility[groupId]==true);}else{return false;}};/**
	   * Get the data range of the item set.
	   * @returns {{min: Date, max: Date}} range  A range with a start and end Date.
	   *                                          When no minimum is found, min==null
	   *                                          When no maximum is found, max==null
	   */Graph2d.prototype.getDataRange=function(){var min=null;var max=null;// calculate min from start filed
	for(var groupId in this.linegraph.groups){if(this.linegraph.groups.hasOwnProperty(groupId)){if(this.linegraph.groups[groupId].visible==true){for(var i=0;i<this.linegraph.groups[groupId].itemsData.length;i++){var item=this.linegraph.groups[groupId].itemsData[i];var value=util.convert(item.x,'Date').valueOf();min=min==null?value:min>value?value:min;max=max==null?value:max<value?value:max;}}}}return{min:min!=null?new Date(min):null,max:max!=null?new Date(max):null};};/**
	   * Generate Timeline related information from an event
	   * @param {Event} event
	   * @return {Object} An object with related information, like on which area
	   *                  The event happened, whether clicked on an item, etc.
	   */Graph2d.prototype.getEventProperties=function(event){var clientX=event.center?event.center.x:event.clientX;var clientY=event.center?event.center.y:event.clientY;var x=clientX-util.getAbsoluteLeft(this.dom.centerContainer);var y=clientY-util.getAbsoluteTop(this.dom.centerContainer);var time=this._toTime(x);var customTime=CustomTime.customTimeFromTarget(event);var element=util.getTarget(event);var what=null;if(util.hasParent(element,this.timeAxis.dom.foreground)){what='axis';}else if(this.timeAxis2&&util.hasParent(element,this.timeAxis2.dom.foreground)){what='axis';}else if(util.hasParent(element,this.linegraph.yAxisLeft.dom.frame)){what='data-axis';}else if(util.hasParent(element,this.linegraph.yAxisRight.dom.frame)){what='data-axis';}else if(util.hasParent(element,this.linegraph.legendLeft.dom.frame)){what='legend';}else if(util.hasParent(element,this.linegraph.legendRight.dom.frame)){what='legend';}else if(customTime!=null){what='custom-time';}else if(util.hasParent(element,this.currentTime.bar)){what='current-time';}else if(util.hasParent(element,this.dom.center)){what='background';}var value=[];var yAxisLeft=this.linegraph.yAxisLeft;var yAxisRight=this.linegraph.yAxisRight;if(!yAxisLeft.hidden){value.push(yAxisLeft.screenToValue(y));}if(!yAxisRight.hidden){value.push(yAxisRight.screenToValue(y));}return{event:event,what:what,pageX:event.srcEvent?event.srcEvent.pageX:event.pageX,pageY:event.srcEvent?event.srcEvent.pageY:event.pageY,x:x,y:y,time:time,value:value};};/**
	   * Load a configurator
	   * @return {Object}
	   * @private
	   */Graph2d.prototype._createConfigurator=function(){return new _Configurator2.default(this,this.dom.container,configureOptions);};module.exports=Graph2d;/***/},/* 53 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var util=__webpack_require__(1);var DOMutil=__webpack_require__(8);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var Component=__webpack_require__(33);var DataAxis=__webpack_require__(54);var GraphGroup=__webpack_require__(56);var Legend=__webpack_require__(60);var Bars=__webpack_require__(57);var Lines=__webpack_require__(59);var Points=__webpack_require__(58);var UNGROUPED='__ungrouped__';// reserved group id for ungrouped items
	/**
	   * This is the constructor of the LineGraph. It requires a Timeline body and options.
	   *
	   * @param body
	   * @param options
	   * @constructor
	   */function LineGraph(body,options){this.id=util.randomUUID();this.body=body;this.defaultOptions={yAxisOrientation:'left',defaultGroup:'default',sort:true,sampling:true,stack:false,graphHeight:'400px',shaded:{enabled:false,orientation:'bottom'// top, bottom, zero
	},style:'line',// line, bar
	barChart:{width:50,sideBySide:false,align:'center'// left, center, right
	},interpolation:{enabled:true,parametrization:'centripetal',// uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	alpha:0.5},drawPoints:{enabled:true,size:6,style:'square'// square, circle
	},dataAxis:{},//Defaults are done on DataAxis level
	legend:{},//Defaults are done on Legend level
	groups:{visibility:{}}};// options is shared by this lineGraph and all its items
	this.options=util.extend({},this.defaultOptions);this.dom={};this.props={};this.hammer=null;this.groups={};this.abortedGraphUpdate=false;this.updateSVGheight=false;this.updateSVGheightOnResize=false;this.forceGraphUpdate=true;var me=this;this.itemsData=null;// DataSet
	this.groupsData=null;// DataSet
	// listeners for the DataSet of the items
	this.itemListeners={'add':function add(event,params,senderId){me._onAdd(params.items);},'update':function update(event,params,senderId){me._onUpdate(params.items);},'remove':function remove(event,params,senderId){me._onRemove(params.items);}};// listeners for the DataSet of the groups
	this.groupListeners={'add':function add(event,params,senderId){me._onAddGroups(params.items);},'update':function update(event,params,senderId){me._onUpdateGroups(params.items);},'remove':function remove(event,params,senderId){me._onRemoveGroups(params.items);}};this.items={};// object with an Item for every data item
	this.selection=[];// list with the ids of all selected nodes
	this.lastStart=this.body.range.start;this.touchParams={};// stores properties while dragging
	this.svgElements={};this.setOptions(options);this.groupsUsingDefaultStyles=[0];this.body.emitter.on('rangechanged',function(){me.lastStart=me.body.range.start;me.svg.style.left=util.option.asSize(-me.props.width);me.forceGraphUpdate=true;//Is this local redraw necessary? (Core also does a change event!)
	me.redraw.call(me);});// create the HTML DOM
	this._create();this.framework={svg:this.svg,svgElements:this.svgElements,options:this.options,groups:this.groups};}LineGraph.prototype=new Component();/**
	   * Create the HTML DOM for the ItemSet
	   */LineGraph.prototype._create=function(){var frame=document.createElement('div');frame.className='vis-line-graph';this.dom.frame=frame;// create svg element for graph drawing.
	this.svg=document.createElementNS('http://www.w3.org/2000/svg','svg');this.svg.style.position='relative';this.svg.style.height=(''+this.options.graphHeight).replace('px','')+'px';this.svg.style.display='block';frame.appendChild(this.svg);// data axis
	this.options.dataAxis.orientation='left';this.yAxisLeft=new DataAxis(this.body,this.options.dataAxis,this.svg,this.options.groups);this.options.dataAxis.orientation='right';this.yAxisRight=new DataAxis(this.body,this.options.dataAxis,this.svg,this.options.groups);delete this.options.dataAxis.orientation;// legends
	this.legendLeft=new Legend(this.body,this.options.legend,'left',this.options.groups);this.legendRight=new Legend(this.body,this.options.legend,'right',this.options.groups);this.show();};/**
	   * set the options of the LineGraph. the mergeOptions is used for subObjects that have an enabled element.
	   * @param {object} options
	   */LineGraph.prototype.setOptions=function(options){if(options){var fields=['sampling','defaultGroup','stack','height','graphHeight','yAxisOrientation','style','barChart','dataAxis','sort','groups'];if(options.graphHeight===undefined&&options.height!==undefined){this.updateSVGheight=true;this.updateSVGheightOnResize=true;}else if(this.body.domProps.centerContainer.height!==undefined&&options.graphHeight!==undefined){if(parseInt((options.graphHeight+'').replace("px",''))<this.body.domProps.centerContainer.height){this.updateSVGheight=true;}}util.selectiveDeepExtend(fields,this.options,options);util.mergeOptions(this.options,options,'interpolation');util.mergeOptions(this.options,options,'drawPoints');util.mergeOptions(this.options,options,'shaded');util.mergeOptions(this.options,options,'legend');if(options.interpolation){if(_typeof(options.interpolation)=='object'){if(options.interpolation.parametrization){if(options.interpolation.parametrization=='uniform'){this.options.interpolation.alpha=0;}else if(options.interpolation.parametrization=='chordal'){this.options.interpolation.alpha=1.0;}else{this.options.interpolation.parametrization='centripetal';this.options.interpolation.alpha=0.5;}}}}if(this.yAxisLeft){if(options.dataAxis!==undefined){this.yAxisLeft.setOptions(this.options.dataAxis);this.yAxisRight.setOptions(this.options.dataAxis);}}if(this.legendLeft){if(options.legend!==undefined){this.legendLeft.setOptions(this.options.legend);this.legendRight.setOptions(this.options.legend);}}if(this.groups.hasOwnProperty(UNGROUPED)){this.groups[UNGROUPED].setOptions(options);}}// this is used to redraw the graph if the visibility of the groups is changed.
	if(this.dom.frame){//not on initial run?
	this.forceGraphUpdate=true;this.body.emitter.emit("_change",{queue:true});}};/**
	   * Hide the component from the DOM
	   */LineGraph.prototype.hide=function(){// remove the frame containing the items
	if(this.dom.frame.parentNode){this.dom.frame.parentNode.removeChild(this.dom.frame);}};/**
	   * Show the component in the DOM (when not already visible).
	   * @return {Boolean} changed
	   */LineGraph.prototype.show=function(){// show frame containing the items
	if(!this.dom.frame.parentNode){this.body.dom.center.appendChild(this.dom.frame);}};/**
	   * Set items
	   * @param {vis.DataSet | null} items
	   */LineGraph.prototype.setItems=function(items){var me=this,ids,oldItemsData=this.itemsData;// replace the dataset
	if(!items){this.itemsData=null;}else if(items instanceof DataSet||items instanceof DataView){this.itemsData=items;}else{throw new TypeError('Data must be an instance of DataSet or DataView');}if(oldItemsData){// unsubscribe from old dataset
	util.forEach(this.itemListeners,function(callback,event){oldItemsData.off(event,callback);});// remove all drawn items
	ids=oldItemsData.getIds();this._onRemove(ids);}if(this.itemsData){// subscribe to new dataset
	var id=this.id;util.forEach(this.itemListeners,function(callback,event){me.itemsData.on(event,callback,id);});// add all new items
	ids=this.itemsData.getIds();this._onAdd(ids);}};/**
	   * Set groups
	   * @param {vis.DataSet} groups
	   */LineGraph.prototype.setGroups=function(groups){var me=this;var ids;// unsubscribe from current dataset
	if(this.groupsData){util.forEach(this.groupListeners,function(callback,event){me.groupsData.off(event,callback);});// remove all drawn groups
	ids=this.groupsData.getIds();this.groupsData=null;for(var i=0;i<ids.length;i++){this._removeGroup(ids[i]);}}// replace the dataset
	if(!groups){this.groupsData=null;}else if(groups instanceof DataSet||groups instanceof DataView){this.groupsData=groups;}else{throw new TypeError('Data must be an instance of DataSet or DataView');}if(this.groupsData){// subscribe to new dataset
	var id=this.id;util.forEach(this.groupListeners,function(callback,event){me.groupsData.on(event,callback,id);});// draw all ms
	ids=this.groupsData.getIds();this._onAddGroups(ids);}};LineGraph.prototype._onUpdate=function(ids){this._updateAllGroupData();};LineGraph.prototype._onAdd=function(ids){this._onUpdate(ids);};LineGraph.prototype._onRemove=function(ids){this._onUpdate(ids);};LineGraph.prototype._onUpdateGroups=function(groupIds){this._updateAllGroupData();};LineGraph.prototype._onAddGroups=function(groupIds){this._onUpdateGroups(groupIds);};/**
	   * this cleans the group out off the legends and the dataaxis, updates the ungrouped and updates the graph
	   * @param {Array} groupIds
	   * @private
	   */LineGraph.prototype._onRemoveGroups=function(groupIds){for(var i=0;i<groupIds.length;i++){this._removeGroup(groupIds[i]);}this.forceGraphUpdate=true;this.body.emitter.emit("_change",{queue:true});};/**
	   * this cleans the group out off the legends and the dataaxis
	   * @param groupId
	   * @private
	   */LineGraph.prototype._removeGroup=function(groupId){if(this.groups.hasOwnProperty(groupId)){if(this.groups[groupId].options.yAxisOrientation=='right'){this.yAxisRight.removeGroup(groupId);this.legendRight.removeGroup(groupId);this.legendRight.redraw();}else{this.yAxisLeft.removeGroup(groupId);this.legendLeft.removeGroup(groupId);this.legendLeft.redraw();}delete this.groups[groupId];}};/**
	   * update a group object with the group dataset entree
	   *
	   * @param group
	   * @param groupId
	   * @private
	   */LineGraph.prototype._updateGroup=function(group,groupId){if(!this.groups.hasOwnProperty(groupId)){this.groups[groupId]=new GraphGroup(group,groupId,this.options,this.groupsUsingDefaultStyles);if(this.groups[groupId].options.yAxisOrientation=='right'){this.yAxisRight.addGroup(groupId,this.groups[groupId]);this.legendRight.addGroup(groupId,this.groups[groupId]);}else{this.yAxisLeft.addGroup(groupId,this.groups[groupId]);this.legendLeft.addGroup(groupId,this.groups[groupId]);}}else{this.groups[groupId].update(group);if(this.groups[groupId].options.yAxisOrientation=='right'){this.yAxisRight.updateGroup(groupId,this.groups[groupId]);this.legendRight.updateGroup(groupId,this.groups[groupId]);//If yAxisOrientation changed, clean out the group from the other axis.
	this.yAxisLeft.removeGroup(groupId);this.legendLeft.removeGroup(groupId);}else{this.yAxisLeft.updateGroup(groupId,this.groups[groupId]);this.legendLeft.updateGroup(groupId,this.groups[groupId]);//If yAxisOrientation changed, clean out the group from the other axis.
	this.yAxisRight.removeGroup(groupId);this.legendRight.removeGroup(groupId);}}this.legendLeft.redraw();this.legendRight.redraw();};/**
	   * this updates all groups, it is used when there is an update the the itemset.
	   *
	   * @private
	   */LineGraph.prototype._updateAllGroupData=function(){if(this.itemsData!=null){var groupsContent={};var items=this.itemsData.get();//pre-Determine array sizes, for more efficient memory claim
	var groupCounts={};for(var i=0;i<items.length;i++){var item=items[i];var groupId=item.group;if(groupId===null||groupId===undefined){groupId=UNGROUPED;}groupCounts.hasOwnProperty(groupId)?groupCounts[groupId]++:groupCounts[groupId]=1;}//Now insert data into the arrays.
	for(var i=0;i<items.length;i++){var item=items[i];var groupId=item.group;if(groupId===null||groupId===undefined){groupId=UNGROUPED;}if(!groupsContent.hasOwnProperty(groupId)){groupsContent[groupId]=new Array(groupCounts[groupId]);}//Copy data (because of unmodifiable DataView input.
	var extended=util.bridgeObject(item);extended.x=util.convert(item.x,'Date');extended.orginalY=item.y;//real Y
	extended.y=Number(item.y);var index=groupsContent[groupId].length-groupCounts[groupId]--;groupsContent[groupId][index]=extended;}//Make sure all groups are present, to allow removal of old groups
	for(var groupId in this.groups){if(this.groups.hasOwnProperty(groupId)){if(!groupsContent.hasOwnProperty(groupId)){groupsContent[groupId]=new Array(0);}}}//Update legendas, style and axis
	for(var groupId in groupsContent){if(groupsContent.hasOwnProperty(groupId)){if(groupsContent[groupId].length==0){if(this.groups.hasOwnProperty(groupId)){this._removeGroup(groupId);}}else{var group=undefined;if(this.groupsData!=undefined){group=this.groupsData.get(groupId);}if(group==undefined){group={id:groupId,content:this.options.defaultGroup+groupId};}this._updateGroup(group,groupId);this.groups[groupId].setItems(groupsContent[groupId]);}}}this.forceGraphUpdate=true;this.body.emitter.emit("_change",{queue:true});}};/**
	   * Redraw the component, mandatory function
	   * @return {boolean} Returns true if the component is resized
	   */LineGraph.prototype.redraw=function(){var resized=false;// calculate actual size and position
	this.props.width=this.dom.frame.offsetWidth;this.props.height=this.body.domProps.centerContainer.height-this.body.domProps.border.top-this.body.domProps.border.bottom;// check if this component is resized
	resized=this._isResized()||resized;// check whether zoomed (in that case we need to re-stack everything)
	var visibleInterval=this.body.range.end-this.body.range.start;var zoomed=visibleInterval!=this.lastVisibleInterval;this.lastVisibleInterval=visibleInterval;// the svg element is three times as big as the width, this allows for fully dragging left and right
	// without reloading the graph. the controls for this are bound to events in the constructor
	if(resized==true){this.svg.style.width=util.option.asSize(3*this.props.width);this.svg.style.left=util.option.asSize(-this.props.width);// if the height of the graph is set as proportional, change the height of the svg
	if((this.options.height+'').indexOf("%")!=-1||this.updateSVGheightOnResize==true){this.updateSVGheight=true;}}// update the height of the graph on each redraw of the graph.
	if(this.updateSVGheight==true){if(this.options.graphHeight!=this.props.height+'px'){this.options.graphHeight=this.props.height+'px';this.svg.style.height=this.props.height+'px';}this.updateSVGheight=false;}else{this.svg.style.height=(''+this.options.graphHeight).replace('px','')+'px';}// zoomed is here to ensure that animations are shown correctly.
	if(resized==true||zoomed==true||this.abortedGraphUpdate==true||this.forceGraphUpdate==true){resized=this._updateGraph()||resized;this.forceGraphUpdate=false;}else{// move the whole svg while dragging
	if(this.lastStart!=0){var offset=this.body.range.start-this.lastStart;var range=this.body.range.end-this.body.range.start;if(this.props.width!=0){var rangePerPixelInv=this.props.width/range;var xOffset=offset*rangePerPixelInv;this.svg.style.left=-this.props.width-xOffset+'px';}}}this.legendLeft.redraw();this.legendRight.redraw();return resized;};LineGraph.prototype._getSortedGroupIds=function(){// getting group Ids
	var grouplist=[];for(var groupId in this.groups){if(this.groups.hasOwnProperty(groupId)){var group=this.groups[groupId];if(group.visible==true&&(this.options.groups.visibility[groupId]===undefined||this.options.groups.visibility[groupId]==true)){grouplist.push({id:groupId,zIndex:group.options.zIndex});}}}util.insertSort(grouplist,function(a,b){var az=a.zIndex;var bz=b.zIndex;if(az===undefined)az=0;if(bz===undefined)bz=0;return az==bz?0:az<bz?-1:1;});var groupIds=new Array(grouplist.length);for(var i=0;i<grouplist.length;i++){groupIds[i]=grouplist[i].id;}return groupIds;};/**
	   * Update and redraw the graph.
	   *
	   */LineGraph.prototype._updateGraph=function(){// reset the svg elements
	DOMutil.prepareElements(this.svgElements);if(this.props.width!=0&&this.itemsData!=null){var group,i;var groupRanges={};var changeCalled=false;// this is the range of the SVG canvas
	var minDate=this.body.util.toGlobalTime(-this.body.domProps.root.width);var maxDate=this.body.util.toGlobalTime(2*this.body.domProps.root.width);// getting group Ids
	var groupIds=this._getSortedGroupIds();if(groupIds.length>0){var groupsData={};// fill groups data, this only loads the data we require based on the timewindow
	this._getRelevantData(groupIds,groupsData,minDate,maxDate);// apply sampling, if disabled, it will pass through this function.
	this._applySampling(groupIds,groupsData);// we transform the X coordinates to detect collisions
	for(i=0;i<groupIds.length;i++){this._convertXcoordinates(groupsData[groupIds[i]]);}// now all needed data has been collected we start the processing.
	this._getYRanges(groupIds,groupsData,groupRanges);// update the Y axis first, we use this data to draw at the correct Y points
	changeCalled=this._updateYAxis(groupIds,groupRanges);//  at changeCalled, abort this update cycle as the graph needs another update with new Width input from the Redraw container.
	//  Cleanup SVG elements on abort.
	if(changeCalled==true){DOMutil.cleanupElements(this.svgElements);this.abortedGraphUpdate=true;return true;}this.abortedGraphUpdate=false;// With the yAxis scaled correctly, use this to get the Y values of the points.
	var below=undefined;for(i=0;i<groupIds.length;i++){group=this.groups[groupIds[i]];if(this.options.stack===true&&this.options.style==='line'){if(group.options.excludeFromStacking==undefined||!group.options.excludeFromStacking){if(below!=undefined){this._stack(groupsData[group.id],groupsData[below.id]);if(group.options.shaded.enabled==true&&group.options.shaded.orientation!=="group"){if(group.options.shaded.orientation=="top"&&below.options.shaded.orientation!=="group"){below.options.shaded.orientation="group";below.options.shaded.groupId=group.id;}else{group.options.shaded.orientation="group";group.options.shaded.groupId=below.id;}}}below=group;}}this._convertYcoordinates(groupsData[groupIds[i]],group);}//Precalculate paths and draw shading if appropriate. This will make sure the shading is always behind any lines.
	var paths={};for(i=0;i<groupIds.length;i++){group=this.groups[groupIds[i]];if(group.options.style==='line'&&group.options.shaded.enabled==true){var dataset=groupsData[groupIds[i]];if(dataset==null||dataset.length==0){continue;}if(!paths.hasOwnProperty(groupIds[i])){paths[groupIds[i]]=Lines.calcPath(dataset,group);}if(group.options.shaded.orientation==="group"){var subGroupId=group.options.shaded.groupId;if(groupIds.indexOf(subGroupId)===-1){console.log(group.id+": Unknown shading group target given:"+subGroupId);continue;}if(!paths.hasOwnProperty(subGroupId)){paths[subGroupId]=Lines.calcPath(groupsData[subGroupId],this.groups[subGroupId]);}Lines.drawShading(paths[groupIds[i]],group,paths[subGroupId],this.framework);}else{Lines.drawShading(paths[groupIds[i]],group,undefined,this.framework);}}}// draw the groups, calculating paths if still necessary.
	Bars.draw(groupIds,groupsData,this.framework);for(i=0;i<groupIds.length;i++){group=this.groups[groupIds[i]];if(groupsData[groupIds[i]].length>0){switch(group.options.style){case"line":if(!paths.hasOwnProperty(groupIds[i])){paths[groupIds[i]]=Lines.calcPath(groupsData[groupIds[i]],group);}Lines.draw(paths[groupIds[i]],group,this.framework);//explicit no break;
	case"point"://explicit no break;
	case"points":if(group.options.style=="point"||group.options.style=="points"||group.options.drawPoints.enabled==true){Points.draw(groupsData[groupIds[i]],group,this.framework);}break;case"bar":// bar needs to be drawn enmasse
	//explicit no break
	default://do nothing...
	}}}}}// cleanup unused svg elements
	DOMutil.cleanupElements(this.svgElements);return false;};LineGraph.prototype._stack=function(data,subData){var index,dx,dy,subPrevPoint,subNextPoint;index=0;// for each data point we look for a matching on in the set below
	for(var j=0;j<data.length;j++){subPrevPoint=undefined;subNextPoint=undefined;// we look for time matches or a before-after point
	for(var k=index;k<subData.length;k++){// if times match exactly
	if(subData[k].x===data[j].x){subPrevPoint=subData[k];subNextPoint=subData[k];index=k;break;}else if(subData[k].x>data[j].x){// overshoot
	subNextPoint=subData[k];if(k==0){subPrevPoint=subNextPoint;}else{subPrevPoint=subData[k-1];}index=k;break;}}// in case the last data point has been used, we assume it stays like this.
	if(subNextPoint===undefined){subPrevPoint=subData[subData.length-1];subNextPoint=subData[subData.length-1];}// linear interpolation
	dx=subNextPoint.x-subPrevPoint.x;dy=subNextPoint.y-subPrevPoint.y;if(dx==0){data[j].y=data[j].orginalY+subNextPoint.y;}else{data[j].y=data[j].orginalY+dy/dx*(data[j].x-subPrevPoint.x)+subPrevPoint.y;// ax + b where b is data[j].y
	}}};/**
	   * first select and preprocess the data from the datasets.
	   * the groups have their preselection of data, we now loop over this data to see
	   * what data we need to draw. Sorted data is much faster.
	   * more optimization is possible by doing the sampling before and using the binary search
	   * to find the end date to determine the increment.
	   *
	   * @param {array}  groupIds
	   * @param {object} groupsData
	   * @param {date}   minDate
	   * @param {date}   maxDate
	   * @private
	   */LineGraph.prototype._getRelevantData=function(groupIds,groupsData,minDate,maxDate){var group,i,j,item;if(groupIds.length>0){for(i=0;i<groupIds.length;i++){group=this.groups[groupIds[i]];var itemsData=group.getItems();// optimization for sorted data
	if(group.options.sort==true){var dateComparator=function dateComparator(a,b){return a.getTime()==b.getTime()?0:a<b?-1:1;};var first=Math.max(0,util.binarySearchValue(itemsData,minDate,'x','before',dateComparator));var last=Math.min(itemsData.length,util.binarySearchValue(itemsData,maxDate,'x','after',dateComparator)+1);if(last<=0){last=itemsData.length;}var dataContainer=new Array(last-first);for(j=first;j<last;j++){item=group.itemsData[j];dataContainer[j-first]=item;}groupsData[groupIds[i]]=dataContainer;}else{// If unsorted data, all data is relevant, just returning entire structure
	groupsData[groupIds[i]]=group.itemsData;}}}};/**
	   *
	   * @param groupIds
	   * @param groupsData
	   * @private
	   */LineGraph.prototype._applySampling=function(groupIds,groupsData){var group;if(groupIds.length>0){for(var i=0;i<groupIds.length;i++){group=this.groups[groupIds[i]];if(group.options.sampling==true){var dataContainer=groupsData[groupIds[i]];if(dataContainer.length>0){var increment=1;var amountOfPoints=dataContainer.length;// the global screen is used because changing the width of the yAxis may affect the increment, resulting in an endless loop
	// of width changing of the yAxis.
	var xDistance=this.body.util.toGlobalScreen(dataContainer[dataContainer.length-1].x)-this.body.util.toGlobalScreen(dataContainer[0].x);var pointsPerPixel=amountOfPoints/xDistance;increment=Math.min(Math.ceil(0.2*amountOfPoints),Math.max(1,Math.round(pointsPerPixel)));var sampledData=new Array(amountOfPoints);for(var j=0;j<amountOfPoints;j+=increment){var idx=Math.round(j/increment);sampledData[idx]=dataContainer[j];}groupsData[groupIds[i]]=sampledData.splice(0,Math.round(amountOfPoints/increment));}}}}};/**
	   *
	   *
	   * @param {array}  groupIds
	   * @param {object} groupsData
	   * @param {object} groupRanges  | this is being filled here
	   * @private
	   */LineGraph.prototype._getYRanges=function(groupIds,groupsData,groupRanges){var groupData,group,i;var combinedDataLeft=[];var combinedDataRight=[];var options;if(groupIds.length>0){for(i=0;i<groupIds.length;i++){groupData=groupsData[groupIds[i]];options=this.groups[groupIds[i]].options;if(groupData.length>0){group=this.groups[groupIds[i]];// if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
	if(options.stack===true&&options.style==='bar'){if(options.yAxisOrientation==='left'){combinedDataLeft=combinedDataLeft.concat(group.getItems());}else{combinedDataRight=combinedDataRight.concat(group.getItems());}}else{groupRanges[groupIds[i]]=group.getYRange(groupData,groupIds[i]);}}}// if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
	Bars.getStackedYRange(combinedDataLeft,groupRanges,groupIds,'__barStackLeft','left');Bars.getStackedYRange(combinedDataRight,groupRanges,groupIds,'__barStackRight','right');}};/**
	   * this sets the Y ranges for the Y axis. It also determines which of the axis should be shown or hidden.
	   * @param {Array} groupIds
	   * @param {Object} groupRanges
	   * @private
	   */LineGraph.prototype._updateYAxis=function(groupIds,groupRanges){var resized=false;var yAxisLeftUsed=false;var yAxisRightUsed=false;var minLeft=1e9,minRight=1e9,maxLeft=-1e9,maxRight=-1e9,minVal,maxVal;// if groups are present
	if(groupIds.length>0){// this is here to make sure that if there are no items in the axis but there are groups, that there is no infinite draw/redraw loop.
	for(var i=0;i<groupIds.length;i++){var group=this.groups[groupIds[i]];if(group&&group.options.yAxisOrientation!='right'){yAxisLeftUsed=true;minLeft=1e9;maxLeft=-1e9;}else if(group&&group.options.yAxisOrientation){yAxisRightUsed=true;minRight=1e9;maxRight=-1e9;}}// if there are items:
	for(var i=0;i<groupIds.length;i++){if(groupRanges.hasOwnProperty(groupIds[i])){if(groupRanges[groupIds[i]].ignore!==true){minVal=groupRanges[groupIds[i]].min;maxVal=groupRanges[groupIds[i]].max;if(groupRanges[groupIds[i]].yAxisOrientation!='right'){yAxisLeftUsed=true;minLeft=minLeft>minVal?minVal:minLeft;maxLeft=maxLeft<maxVal?maxVal:maxLeft;}else{yAxisRightUsed=true;minRight=minRight>minVal?minVal:minRight;maxRight=maxRight<maxVal?maxVal:maxRight;}}}}if(yAxisLeftUsed==true){this.yAxisLeft.setRange(minLeft,maxLeft);}if(yAxisRightUsed==true){this.yAxisRight.setRange(minRight,maxRight);}}resized=this._toggleAxisVisiblity(yAxisLeftUsed,this.yAxisLeft)||resized;resized=this._toggleAxisVisiblity(yAxisRightUsed,this.yAxisRight)||resized;if(yAxisRightUsed==true&&yAxisLeftUsed==true){this.yAxisLeft.drawIcons=true;this.yAxisRight.drawIcons=true;}else{this.yAxisLeft.drawIcons=false;this.yAxisRight.drawIcons=false;}this.yAxisRight.master=!yAxisLeftUsed;this.yAxisRight.masterAxis=this.yAxisLeft;if(this.yAxisRight.master==false){if(yAxisRightUsed==true){this.yAxisLeft.lineOffset=this.yAxisRight.width;}else{this.yAxisLeft.lineOffset=0;}resized=this.yAxisLeft.redraw()||resized;resized=this.yAxisRight.redraw()||resized;}else{resized=this.yAxisRight.redraw()||resized;}// clean the accumulated lists
	var tempGroups=['__barStackLeft','__barStackRight','__lineStackLeft','__lineStackRight'];for(var i=0;i<tempGroups.length;i++){if(groupIds.indexOf(tempGroups[i])!=-1){groupIds.splice(groupIds.indexOf(tempGroups[i]),1);}}return resized;};/**
	   * This shows or hides the Y axis if needed. If there is a change, the changed event is emitted by the updateYAxis function
	   *
	   * @param {boolean} axisUsed
	   * @returns {boolean}
	   * @private
	   * @param axis
	   */LineGraph.prototype._toggleAxisVisiblity=function(axisUsed,axis){var changed=false;if(axisUsed==false){if(axis.dom.frame.parentNode&&axis.hidden==false){axis.hide();changed=true;}}else{if(!axis.dom.frame.parentNode&&axis.hidden==true){axis.show();changed=true;}}return changed;};/**
	   * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
	   * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
	   * the yAxis.
	   *
	   * @param datapoints
	   * @returns {Array}
	   * @private
	   */LineGraph.prototype._convertXcoordinates=function(datapoints){var toScreen=this.body.util.toScreen;for(var i=0;i<datapoints.length;i++){datapoints[i].screen_x=toScreen(datapoints[i].x)+this.props.width;datapoints[i].screen_y=datapoints[i].y;//starting point for range calculations
	}};/**
	   * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
	   * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
	   * the yAxis.
	   *
	   * @param datapoints
	   * @param group
	   * @returns {Array}
	   * @private
	   */LineGraph.prototype._convertYcoordinates=function(datapoints,group){var axis=this.yAxisLeft;var svgHeight=Number(this.svg.style.height.replace('px',''));if(group.options.yAxisOrientation=='right'){axis=this.yAxisRight;}for(var i=0;i<datapoints.length;i++){datapoints[i].screen_y=Math.round(axis.convertValue(datapoints[i].y));}group.setZeroPosition(Math.min(svgHeight,axis.convertValue(0)));};module.exports=LineGraph;/***/},/* 54 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);var DOMutil=__webpack_require__(8);var Component=__webpack_require__(33);var DataScale=__webpack_require__(55);/**
	   * A horizontal time axis
	   * @param {Object} [options]        See DataAxis.setOptions for the available
	   *                                  options.
	   * @constructor DataAxis
	   * @extends Component
	   * @param body
	   */function DataAxis(body,options,svg,linegraphOptions){this.id=util.randomUUID();this.body=body;this.defaultOptions={orientation:'left',// supported: 'left', 'right'
	showMinorLabels:true,showMajorLabels:true,icons:false,majorLinesOffset:7,minorLinesOffset:4,labelOffsetX:10,labelOffsetY:2,iconWidth:20,width:'40px',visible:true,alignZeros:true,left:{range:{min:undefined,max:undefined},format:function format(value){return''+parseFloat(value.toPrecision(3));},title:{text:undefined,style:undefined}},right:{range:{min:undefined,max:undefined},format:function format(value){return''+parseFloat(value.toPrecision(3));},title:{text:undefined,style:undefined}}};this.linegraphOptions=linegraphOptions;this.linegraphSVG=svg;this.props={};this.DOMelements={// dynamic elements
	lines:{},labels:{},title:{}};this.dom={};this.scale=undefined;this.range={start:0,end:0};this.options=util.extend({},this.defaultOptions);this.conversionFactor=1;this.setOptions(options);this.width=Number((''+this.options.width).replace("px",""));this.minWidth=this.width;this.height=this.linegraphSVG.getBoundingClientRect().height;this.hidden=false;this.stepPixels=25;this.zeroCrossing=-1;this.amountOfSteps=-1;this.lineOffset=0;this.master=true;this.masterAxis=null;this.svgElements={};this.iconsRemoved=false;this.groups={};this.amountOfGroups=0;// create the HTML DOM
	this._create();this.framework={svg:this.svg,svgElements:this.svgElements,options:this.options,groups:this.groups};var me=this;this.body.emitter.on("verticalDrag",function(){me.dom.lineContainer.style.top=me.body.domProps.scrollTop+'px';});}DataAxis.prototype=new Component();DataAxis.prototype.addGroup=function(label,graphOptions){if(!this.groups.hasOwnProperty(label)){this.groups[label]=graphOptions;}this.amountOfGroups+=1;};DataAxis.prototype.updateGroup=function(label,graphOptions){if(!this.groups.hasOwnProperty(label)){this.amountOfGroups+=1;}this.groups[label]=graphOptions;};DataAxis.prototype.removeGroup=function(label){if(this.groups.hasOwnProperty(label)){delete this.groups[label];this.amountOfGroups-=1;}};DataAxis.prototype.setOptions=function(options){if(options){var redraw=false;if(this.options.orientation!=options.orientation&&options.orientation!==undefined){redraw=true;}var fields=['orientation','showMinorLabels','showMajorLabels','icons','majorLinesOffset','minorLinesOffset','labelOffsetX','labelOffsetY','iconWidth','width','visible','left','right','alignZeros'];util.selectiveDeepExtend(fields,this.options,options);this.minWidth=Number((''+this.options.width).replace("px",""));if(redraw===true&&this.dom.frame){this.hide();this.show();}}};/**
	   * Create the HTML DOM for the DataAxis
	   */DataAxis.prototype._create=function(){this.dom.frame=document.createElement('div');this.dom.frame.style.width=this.options.width;this.dom.frame.style.height=this.height;this.dom.lineContainer=document.createElement('div');this.dom.lineContainer.style.width='100%';this.dom.lineContainer.style.height=this.height;this.dom.lineContainer.style.position='relative';// create svg element for graph drawing.
	this.svg=document.createElementNS('http://www.w3.org/2000/svg',"svg");this.svg.style.position="absolute";this.svg.style.top='0px';this.svg.style.height='100%';this.svg.style.width='100%';this.svg.style.display="block";this.dom.frame.appendChild(this.svg);};DataAxis.prototype._redrawGroupIcons=function(){DOMutil.prepareElements(this.svgElements);var x;var iconWidth=this.options.iconWidth;var iconHeight=15;var iconOffset=4;var y=iconOffset+0.5*iconHeight;if(this.options.orientation==='left'){x=iconOffset;}else{x=this.width-iconWidth-iconOffset;}var groupArray=Object.keys(this.groups);groupArray.sort(function(a,b){return a<b?-1:1;});for(var i=0;i<groupArray.length;i++){var groupId=groupArray[i];if(this.groups[groupId].visible===true&&(this.linegraphOptions.visibility[groupId]===undefined||this.linegraphOptions.visibility[groupId]===true)){this.groups[groupId].getLegend(iconWidth,iconHeight,this.framework,x,y);y+=iconHeight+iconOffset;}}DOMutil.cleanupElements(this.svgElements);this.iconsRemoved=false;};DataAxis.prototype._cleanupIcons=function(){if(this.iconsRemoved===false){DOMutil.prepareElements(this.svgElements);DOMutil.cleanupElements(this.svgElements);this.iconsRemoved=true;}};/**
	   * Create the HTML DOM for the DataAxis
	   */DataAxis.prototype.show=function(){this.hidden=false;if(!this.dom.frame.parentNode){if(this.options.orientation==='left'){this.body.dom.left.appendChild(this.dom.frame);}else{this.body.dom.right.appendChild(this.dom.frame);}}if(!this.dom.lineContainer.parentNode){this.body.dom.backgroundHorizontal.appendChild(this.dom.lineContainer);}};/**
	   * Create the HTML DOM for the DataAxis
	   */DataAxis.prototype.hide=function(){this.hidden=true;if(this.dom.frame.parentNode){this.dom.frame.parentNode.removeChild(this.dom.frame);}if(this.dom.lineContainer.parentNode){this.dom.lineContainer.parentNode.removeChild(this.dom.lineContainer);}};/**
	   * Set a range (start and end)
	   * @param end
	   * @param start
	   * @param end
	   */DataAxis.prototype.setRange=function(start,end){this.range.start=start;this.range.end=end;};/**
	   * Repaint the component
	   * @return {boolean} Returns true if the component is resized
	   */DataAxis.prototype.redraw=function(){var resized=false;var activeGroups=0;// Make sure the line container adheres to the vertical scrolling.
	this.dom.lineContainer.style.top=this.body.domProps.scrollTop+'px';for(var groupId in this.groups){if(this.groups.hasOwnProperty(groupId)){if(this.groups[groupId].visible===true&&(this.linegraphOptions.visibility[groupId]===undefined||this.linegraphOptions.visibility[groupId]===true)){activeGroups++;}}}if(this.amountOfGroups===0||activeGroups===0){this.hide();}else{this.show();this.height=Number(this.linegraphSVG.style.height.replace("px",""));// svg offsetheight did not work in firefox and explorer...
	this.dom.lineContainer.style.height=this.height+'px';this.width=this.options.visible===true?Number((''+this.options.width).replace("px","")):0;var props=this.props;var frame=this.dom.frame;// update classname
	frame.className='vis-data-axis';// calculate character width and height
	this._calculateCharSize();var orientation=this.options.orientation;var showMinorLabels=this.options.showMinorLabels;var showMajorLabels=this.options.showMajorLabels;// determine the width and height of the elements for the axis
	props.minorLabelHeight=showMinorLabels?props.minorCharHeight:0;props.majorLabelHeight=showMajorLabels?props.majorCharHeight:0;props.minorLineWidth=this.body.dom.backgroundHorizontal.offsetWidth-this.lineOffset-this.width+2*this.options.minorLinesOffset;props.minorLineHeight=1;props.majorLineWidth=this.body.dom.backgroundHorizontal.offsetWidth-this.lineOffset-this.width+2*this.options.majorLinesOffset;props.majorLineHeight=1;//  take frame offline while updating (is almost twice as fast)
	if(orientation==='left'){frame.style.top='0';frame.style.left='0';frame.style.bottom='';frame.style.width=this.width+'px';frame.style.height=this.height+"px";this.props.width=this.body.domProps.left.width;this.props.height=this.body.domProps.left.height;}else{// right
	frame.style.top='';frame.style.bottom='0';frame.style.left='0';frame.style.width=this.width+'px';frame.style.height=this.height+"px";this.props.width=this.body.domProps.right.width;this.props.height=this.body.domProps.right.height;}resized=this._redrawLabels();resized=this._isResized()||resized;if(this.options.icons===true){this._redrawGroupIcons();}else{this._cleanupIcons();}this._redrawTitle(orientation);}return resized;};/**
	   * Repaint major and minor text labels and vertical grid lines
	   * @private
	   */DataAxis.prototype._redrawLabels=function(){var _this=this;var resized=false;DOMutil.prepareElements(this.DOMelements.lines);DOMutil.prepareElements(this.DOMelements.labels);var orientation=this.options['orientation'];var customRange=this.options[orientation].range!=undefined?this.options[orientation].range:{};//Override range with manual options:
	var autoScaleEnd=true;if(customRange.max!=undefined){this.range.end=customRange.max;autoScaleEnd=false;}var autoScaleStart=true;if(customRange.min!=undefined){this.range.start=customRange.min;autoScaleStart=false;}this.scale=new DataScale(this.range.start,this.range.end,autoScaleStart,autoScaleEnd,this.dom.frame.offsetHeight,this.props.majorCharHeight,this.options.alignZeros,this.options[orientation].format);if(this.master===false&&this.masterAxis!=undefined){this.scale.followScale(this.masterAxis.scale);}//Is updated in side-effect of _redrawLabel():
	this.maxLabelSize=0;var lines=this.scale.getLines();lines.forEach(function(line){var y=line.y;var isMajor=line.major;if(_this.options['showMinorLabels']&&isMajor===false){_this._redrawLabel(y-2,line.val,orientation,'vis-y-axis vis-minor',_this.props.minorCharHeight);}if(isMajor){if(y>=0){_this._redrawLabel(y-2,line.val,orientation,'vis-y-axis vis-major',_this.props.majorCharHeight);}}if(_this.master===true){if(isMajor){_this._redrawLine(y,orientation,'vis-grid vis-horizontal vis-major',_this.options.majorLinesOffset,_this.props.majorLineWidth);}else{_this._redrawLine(y,orientation,'vis-grid vis-horizontal vis-minor',_this.options.minorLinesOffset,_this.props.minorLineWidth);}}});// Note that title is rotated, so we're using the height, not width!
	var titleWidth=0;if(this.options[orientation].title!==undefined&&this.options[orientation].title.text!==undefined){titleWidth=this.props.titleCharHeight;}var offset=this.options.icons===true?Math.max(this.options.iconWidth,titleWidth)+this.options.labelOffsetX+15:titleWidth+this.options.labelOffsetX+15;// this will resize the yAxis to accommodate the labels.
	if(this.maxLabelSize>this.width-offset&&this.options.visible===true){this.width=this.maxLabelSize+offset;this.options.width=this.width+"px";DOMutil.cleanupElements(this.DOMelements.lines);DOMutil.cleanupElements(this.DOMelements.labels);this.redraw();resized=true;}// this will resize the yAxis if it is too big for the labels.
	else if(this.maxLabelSize<this.width-offset&&this.options.visible===true&&this.width>this.minWidth){this.width=Math.max(this.minWidth,this.maxLabelSize+offset);this.options.width=this.width+"px";DOMutil.cleanupElements(this.DOMelements.lines);DOMutil.cleanupElements(this.DOMelements.labels);this.redraw();resized=true;}else{DOMutil.cleanupElements(this.DOMelements.lines);DOMutil.cleanupElements(this.DOMelements.labels);resized=false;}return resized;};DataAxis.prototype.convertValue=function(value){return this.scale.convertValue(value);};DataAxis.prototype.screenToValue=function(x){return this.scale.screenToValue(x);};/**
	   * Create a label for the axis at position x
	   * @private
	   * @param y
	   * @param text
	   * @param orientation
	   * @param className
	   * @param characterHeight
	   */DataAxis.prototype._redrawLabel=function(y,text,orientation,className,characterHeight){// reuse redundant label
	var label=DOMutil.getDOMElement('div',this.DOMelements.labels,this.dom.frame);//this.dom.redundant.labels.shift();
	label.className=className;label.innerHTML=text;if(orientation==='left'){label.style.left='-'+this.options.labelOffsetX+'px';label.style.textAlign="right";}else{label.style.right='-'+this.options.labelOffsetX+'px';label.style.textAlign="left";}label.style.top=y-0.5*characterHeight+this.options.labelOffsetY+'px';text+='';var largestWidth=Math.max(this.props.majorCharWidth,this.props.minorCharWidth);if(this.maxLabelSize<text.length*largestWidth){this.maxLabelSize=text.length*largestWidth;}};/**
	   * Create a minor line for the axis at position y
	   * @param y
	   * @param orientation
	   * @param className
	   * @param offset
	   * @param width
	   */DataAxis.prototype._redrawLine=function(y,orientation,className,offset,width){if(this.master===true){var line=DOMutil.getDOMElement('div',this.DOMelements.lines,this.dom.lineContainer);//this.dom.redundant.lines.shift();
	line.className=className;line.innerHTML='';if(orientation==='left'){line.style.left=this.width-offset+'px';}else{line.style.right=this.width-offset+'px';}line.style.width=width+'px';line.style.top=y+'px';}};/**
	   * Create a title for the axis
	   * @private
	   * @param orientation
	   */DataAxis.prototype._redrawTitle=function(orientation){DOMutil.prepareElements(this.DOMelements.title);// Check if the title is defined for this axes
	if(this.options[orientation].title!==undefined&&this.options[orientation].title.text!==undefined){var title=DOMutil.getDOMElement('div',this.DOMelements.title,this.dom.frame);title.className='vis-y-axis vis-title vis-'+orientation;title.innerHTML=this.options[orientation].title.text;// Add style - if provided
	if(this.options[orientation].title.style!==undefined){util.addCssText(title,this.options[orientation].title.style);}if(orientation==='left'){title.style.left=this.props.titleCharHeight+'px';}else{title.style.right=this.props.titleCharHeight+'px';}title.style.width=this.height+'px';}// we need to clean up in case we did not use all elements.
	DOMutil.cleanupElements(this.DOMelements.title);};/**
	   * Determine the size of text on the axis (both major and minor axis).
	   * The size is calculated only once and then cached in this.props.
	   * @private
	   */DataAxis.prototype._calculateCharSize=function(){// determine the char width and height on the minor axis
	if(!('minorCharHeight'in this.props)){var textMinor=document.createTextNode('0');var measureCharMinor=document.createElement('div');measureCharMinor.className='vis-y-axis vis-minor vis-measure';measureCharMinor.appendChild(textMinor);this.dom.frame.appendChild(measureCharMinor);this.props.minorCharHeight=measureCharMinor.clientHeight;this.props.minorCharWidth=measureCharMinor.clientWidth;this.dom.frame.removeChild(measureCharMinor);}if(!('majorCharHeight'in this.props)){var textMajor=document.createTextNode('0');var measureCharMajor=document.createElement('div');measureCharMajor.className='vis-y-axis vis-major vis-measure';measureCharMajor.appendChild(textMajor);this.dom.frame.appendChild(measureCharMajor);this.props.majorCharHeight=measureCharMajor.clientHeight;this.props.majorCharWidth=measureCharMajor.clientWidth;this.dom.frame.removeChild(measureCharMajor);}if(!('titleCharHeight'in this.props)){var textTitle=document.createTextNode('0');var measureCharTitle=document.createElement('div');measureCharTitle.className='vis-y-axis vis-title vis-measure';measureCharTitle.appendChild(textTitle);this.dom.frame.appendChild(measureCharTitle);this.props.titleCharHeight=measureCharTitle.clientHeight;this.props.titleCharWidth=measureCharTitle.clientWidth;this.dom.frame.removeChild(measureCharTitle);}};module.exports=DataAxis;/***/},/* 55 *//***/function(module,exports){'use strict';/**
	   * Created by ludo on 25-1-16.
	   */function DataScale(start,end,autoScaleStart,autoScaleEnd,containerHeight,majorCharHeight){var zeroAlign=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;var formattingFunction=arguments.length>7&&arguments[7]!==undefined?arguments[7]:false;this.majorSteps=[1,2,5,10];this.minorSteps=[0.25,0.5,1,2];this.customLines=null;this.containerHeight=containerHeight;this.majorCharHeight=majorCharHeight;this._start=start;this._end=end;this.scale=1;this.minorStepIdx=-1;this.magnitudefactor=1;this.determineScale();this.zeroAlign=zeroAlign;this.autoScaleStart=autoScaleStart;this.autoScaleEnd=autoScaleEnd;this.formattingFunction=formattingFunction;if(autoScaleStart||autoScaleEnd){var me=this;var roundToMinor=function roundToMinor(value){var rounded=value-value%(me.magnitudefactor*me.minorSteps[me.minorStepIdx]);if(value%(me.magnitudefactor*me.minorSteps[me.minorStepIdx])>0.5*(me.magnitudefactor*me.minorSteps[me.minorStepIdx])){return rounded+me.magnitudefactor*me.minorSteps[me.minorStepIdx];}else{return rounded;}};if(autoScaleStart){this._start-=this.magnitudefactor*2*this.minorSteps[this.minorStepIdx];this._start=roundToMinor(this._start);}if(autoScaleEnd){this._end+=this.magnitudefactor*this.minorSteps[this.minorStepIdx];this._end=roundToMinor(this._end);}this.determineScale();}}DataScale.prototype.setCharHeight=function(majorCharHeight){this.majorCharHeight=majorCharHeight;};DataScale.prototype.setHeight=function(containerHeight){this.containerHeight=containerHeight;};DataScale.prototype.determineScale=function(){var range=this._end-this._start;this.scale=this.containerHeight/range;var minimumStepValue=this.majorCharHeight/this.scale;var orderOfMagnitude=range>0?Math.round(Math.log(range)/Math.LN10):0;this.minorStepIdx=-1;this.magnitudefactor=Math.pow(10,orderOfMagnitude);var start=0;if(orderOfMagnitude<0){start=orderOfMagnitude;}var solutionFound=false;for(var l=start;Math.abs(l)<=Math.abs(orderOfMagnitude);l++){this.magnitudefactor=Math.pow(10,l);for(var j=0;j<this.minorSteps.length;j++){var stepSize=this.magnitudefactor*this.minorSteps[j];if(stepSize>=minimumStepValue){solutionFound=true;this.minorStepIdx=j;break;}}if(solutionFound===true){break;}}};DataScale.prototype.is_major=function(value){return value%(this.magnitudefactor*this.majorSteps[this.minorStepIdx])===0;};DataScale.prototype.getStep=function(){return this.magnitudefactor*this.minorSteps[this.minorStepIdx];};DataScale.prototype.getFirstMajor=function(){var majorStep=this.magnitudefactor*this.majorSteps[this.minorStepIdx];return this.convertValue(this._start+(majorStep-this._start%majorStep)%majorStep);};DataScale.prototype.formatValue=function(current){var returnValue=current.toPrecision(5);if(typeof this.formattingFunction==='function'){returnValue=this.formattingFunction(current);}if(typeof returnValue==='number'){return''+returnValue;}else if(typeof returnValue==='string'){return returnValue;}else{return current.toPrecision(5);}};DataScale.prototype.getLines=function(){var lines=[];var step=this.getStep();var bottomOffset=(step-this._start%step)%step;for(var i=this._start+bottomOffset;this._end-i>0.00001;i+=step){if(i!=this._start){//Skip the bottom line
	lines.push({major:this.is_major(i),y:this.convertValue(i),val:this.formatValue(i)});}}return lines;};DataScale.prototype.followScale=function(other){var oldStepIdx=this.minorStepIdx;var oldStart=this._start;var oldEnd=this._end;var me=this;var increaseMagnitude=function increaseMagnitude(){me.magnitudefactor*=2;};var decreaseMagnitude=function decreaseMagnitude(){me.magnitudefactor/=2;};if(other.minorStepIdx<=1&&this.minorStepIdx<=1||other.minorStepIdx>1&&this.minorStepIdx>1){//easy, no need to change stepIdx nor multiplication factor
	}else if(other.minorStepIdx<this.minorStepIdx){//I'm 5, they are 4 per major.
	this.minorStepIdx=1;if(oldStepIdx==2){increaseMagnitude();}else{increaseMagnitude();increaseMagnitude();}}else{//I'm 4, they are 5 per major
	this.minorStepIdx=2;if(oldStepIdx==1){decreaseMagnitude();}else{decreaseMagnitude();decreaseMagnitude();}}//Get masters stats:
	var lines=other.getLines();var otherZero=other.convertValue(0);var otherStep=other.getStep()*other.scale;var done=false;var count=0;//Loop until magnitude is correct for given constrains.
	while(!done&&count++<5){//Get my stats:
	this.scale=otherStep/(this.minorSteps[this.minorStepIdx]*this.magnitudefactor);var newRange=this.containerHeight/this.scale;//For the case the magnitudefactor has changed:
	this._start=oldStart;this._end=this._start+newRange;var myOriginalZero=this._end*this.scale;var majorStep=this.magnitudefactor*this.majorSteps[this.minorStepIdx];var majorOffset=this.getFirstMajor()-other.getFirstMajor();if(this.zeroAlign){var zeroOffset=otherZero-myOriginalZero;this._end+=zeroOffset/this.scale;this._start=this._end-newRange;}else{if(!this.autoScaleStart){this._start+=majorStep-majorOffset/this.scale;this._end=this._start+newRange;}else{this._start-=majorOffset/this.scale;this._end=this._start+newRange;}}if(!this.autoScaleEnd&&this._end>oldEnd+0.00001){//Need to decrease magnitude to prevent scale overshoot! (end)
	decreaseMagnitude();done=false;continue;}if(!this.autoScaleStart&&this._start<oldStart-0.00001){if(this.zeroAlign&&oldStart>=0){console.warn("Can't adhere to given 'min' range, due to zeroalign");}else{//Need to decrease magnitude to prevent scale overshoot! (start)
	decreaseMagnitude();done=false;continue;}}if(this.autoScaleStart&&this.autoScaleEnd&&newRange<oldEnd-oldStart){increaseMagnitude();done=false;continue;}done=true;}};DataScale.prototype.convertValue=function(value){return this.containerHeight-(value-this._start)*this.scale;};DataScale.prototype.screenToValue=function(pixels){return(this.containerHeight-pixels)/this.scale+this._start;};module.exports=DataScale;/***/},/* 56 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var util=__webpack_require__(1);var DOMutil=__webpack_require__(8);var Bars=__webpack_require__(57);var Lines=__webpack_require__(59);var Points=__webpack_require__(58);/**
	   * /**
	   * @param {object} group            | the object of the group from the dataset
	   * @param {string} groupId          | ID of the group
	   * @param {object} options          | the default options
	   * @param {array} groupsUsingDefaultStyles  | this array has one entree.
	   *                                            It is passed as an array so it is passed by reference.
	   *                                            It enumerates through the default styles
	   * @constructor
	   */function GraphGroup(group,groupId,options,groupsUsingDefaultStyles){this.id=groupId;var fields=['sampling','style','sort','yAxisOrientation','barChart','drawPoints','shaded','interpolation','zIndex','excludeFromStacking','excludeFromLegend'];this.options=util.selectiveBridgeObject(fields,options);this.usingDefaultStyle=group.className===undefined;this.groupsUsingDefaultStyles=groupsUsingDefaultStyles;this.zeroPosition=0;this.update(group);if(this.usingDefaultStyle==true){this.groupsUsingDefaultStyles[0]+=1;}this.itemsData=[];this.visible=group.visible===undefined?true:group.visible;}/**
	   * this loads a reference to all items in this group into this group.
	   * @param {array} items
	   */GraphGroup.prototype.setItems=function(items){if(items!=null){this.itemsData=items;if(this.options.sort==true){util.insertSort(this.itemsData,function(a,b){return a.x>b.x?1:-1;});}}else{this.itemsData=[];}};GraphGroup.prototype.getItems=function(){return this.itemsData;};/**
	   * this is used for barcharts and shading, this way, we only have to calculate it once.
	   * @param pos
	   */GraphGroup.prototype.setZeroPosition=function(pos){this.zeroPosition=pos;};/**
	   * set the options of the graph group over the default options.
	   * @param options
	   */GraphGroup.prototype.setOptions=function(options){if(options!==undefined){var fields=['sampling','style','sort','yAxisOrientation','barChart','zIndex','excludeFromStacking','excludeFromLegend'];util.selectiveDeepExtend(fields,this.options,options);// if the group's drawPoints is a function delegate the callback to the onRender property
	if(typeof options.drawPoints=='function'){options.drawPoints={onRender:options.drawPoints};}util.mergeOptions(this.options,options,'interpolation');util.mergeOptions(this.options,options,'drawPoints');util.mergeOptions(this.options,options,'shaded');if(options.interpolation){if(_typeof(options.interpolation)=='object'){if(options.interpolation.parametrization){if(options.interpolation.parametrization=='uniform'){this.options.interpolation.alpha=0;}else if(options.interpolation.parametrization=='chordal'){this.options.interpolation.alpha=1.0;}else{this.options.interpolation.parametrization='centripetal';this.options.interpolation.alpha=0.5;}}}}}};/**
	   * this updates the current group class with the latest group dataset entree, used in _updateGroup in linegraph
	   * @param group
	   */GraphGroup.prototype.update=function(group){this.group=group;this.content=group.content||'graph';this.className=group.className||this.className||'vis-graph-group'+this.groupsUsingDefaultStyles[0]%10;this.visible=group.visible===undefined?true:group.visible;this.style=group.style;this.setOptions(group.options);};/**
	   * return the legend entree for this group.
	   *
	   * @param iconWidth
	   * @param iconHeight
	   * @returns {{icon: HTMLElement, label: (group.content|*|string), orientation: (.options.yAxisOrientation|*)}}
	   */GraphGroup.prototype.getLegend=function(iconWidth,iconHeight,framework,x,y){if(framework==undefined||framework==null){var svg=document.createElementNS('http://www.w3.org/2000/svg',"svg");framework={svg:svg,svgElements:{},options:this.options,groups:[this]};}if(x==undefined||x==null){x=0;}if(y==undefined||y==null){y=0.5*iconHeight;}switch(this.options.style){case"line":Lines.drawIcon(this,x,y,iconWidth,iconHeight,framework);break;case"points"://explicit no break
	case"point":Points.drawIcon(this,x,y,iconWidth,iconHeight,framework);break;case"bar":Bars.drawIcon(this,x,y,iconWidth,iconHeight,framework);break;}return{icon:framework.svg,label:this.content,orientation:this.options.yAxisOrientation};};GraphGroup.prototype.getYRange=function(groupData){var yMin=groupData[0].y;var yMax=groupData[0].y;for(var j=0;j<groupData.length;j++){yMin=yMin>groupData[j].y?groupData[j].y:yMin;yMax=yMax<groupData[j].y?groupData[j].y:yMax;}return{min:yMin,max:yMax,yAxisOrientation:this.options.yAxisOrientation};};module.exports=GraphGroup;/***/},/* 57 *//***/function(module,exports,__webpack_require__){'use strict';var DOMutil=__webpack_require__(8);var Points=__webpack_require__(58);function Bargraph(groupId,options){}Bargraph.drawIcon=function(group,x,y,iconWidth,iconHeight,framework){var fillHeight=iconHeight*0.5;var path,fillPath;var outline=DOMutil.getSVGElement("rect",framework.svgElements,framework.svg);outline.setAttributeNS(null,"x",x);outline.setAttributeNS(null,"y",y-fillHeight);outline.setAttributeNS(null,"width",iconWidth);outline.setAttributeNS(null,"height",2*fillHeight);outline.setAttributeNS(null,"class","vis-outline");var barWidth=Math.round(0.3*iconWidth);var originalWidth=group.options.barChart.width;var scale=originalWidth/barWidth;var bar1Height=Math.round(0.4*iconHeight);var bar2Height=Math.round(0.75*iconHeight);var offset=Math.round((iconWidth-2*barWidth)/3);DOMutil.drawBar(x+0.5*barWidth+offset,y+fillHeight-bar1Height-1,barWidth,bar1Height,group.className+' vis-bar',framework.svgElements,framework.svg,group.style);DOMutil.drawBar(x+1.5*barWidth+offset+2,y+fillHeight-bar2Height-1,barWidth,bar2Height,group.className+' vis-bar',framework.svgElements,framework.svg,group.style);if(group.options.drawPoints.enabled==true){var groupTemplate={style:group.options.drawPoints.style,styles:group.options.drawPoints.styles,size:group.options.drawPoints.size/scale,className:group.className};DOMutil.drawPoint(x+0.5*barWidth+offset,y+fillHeight-bar1Height-1,groupTemplate,framework.svgElements,framework.svg);DOMutil.drawPoint(x+1.5*barWidth+offset+2,y+fillHeight-bar2Height-1,groupTemplate,framework.svgElements,framework.svg);}};/**
	   * draw a bar graph
	   *
	   * @param groupIds
	   * @param processedGroupData
	   */Bargraph.draw=function(groupIds,processedGroupData,framework){var combinedData=[];var intersections={};var coreDistance;var key,drawData;var group;var i,j;var barPoints=0;// combine all barchart data
	for(i=0;i<groupIds.length;i++){group=framework.groups[groupIds[i]];if(group.options.style==='bar'){if(group.visible===true&&(framework.options.groups.visibility[groupIds[i]]===undefined||framework.options.groups.visibility[groupIds[i]]===true)){for(j=0;j<processedGroupData[groupIds[i]].length;j++){combinedData.push({screen_x:processedGroupData[groupIds[i]][j].screen_x,screen_y:processedGroupData[groupIds[i]][j].screen_y,x:processedGroupData[groupIds[i]][j].x,y:processedGroupData[groupIds[i]][j].y,groupId:groupIds[i],label:processedGroupData[groupIds[i]][j].label});barPoints+=1;}}}}if(barPoints===0){return;}// sort by time and by group
	combinedData.sort(function(a,b){if(a.screen_x===b.screen_x){return a.groupId<b.groupId?-1:1;}else{return a.screen_x-b.screen_x;}});// get intersections
	Bargraph._getDataIntersections(intersections,combinedData);// plot barchart
	for(i=0;i<combinedData.length;i++){group=framework.groups[combinedData[i].groupId];var minWidth=group.options.barChart.minWidth!=undefined?group.options.barChart.minWidth:0.1*group.options.barChart.width;key=combinedData[i].screen_x;var heightOffset=0;if(intersections[key]===undefined){if(i+1<combinedData.length){coreDistance=Math.abs(combinedData[i+1].screen_x-key);}drawData=Bargraph._getSafeDrawData(coreDistance,group,minWidth);}else{var nextKey=i+(intersections[key].amount-intersections[key].resolved);var prevKey=i-(intersections[key].resolved+1);if(nextKey<combinedData.length){coreDistance=Math.abs(combinedData[nextKey].screen_x-key);}drawData=Bargraph._getSafeDrawData(coreDistance,group,minWidth);intersections[key].resolved+=1;if(group.options.stack===true&&group.options.excludeFromStacking!==true){if(combinedData[i].screen_y<group.zeroPosition){heightOffset=intersections[key].accumulatedNegative;intersections[key].accumulatedNegative+=group.zeroPosition-combinedData[i].screen_y;}else{heightOffset=intersections[key].accumulatedPositive;intersections[key].accumulatedPositive+=group.zeroPosition-combinedData[i].screen_y;}}else if(group.options.barChart.sideBySide===true){drawData.width=drawData.width/intersections[key].amount;drawData.offset+=intersections[key].resolved*drawData.width-0.5*drawData.width*(intersections[key].amount+1);}}DOMutil.drawBar(combinedData[i].screen_x+drawData.offset,combinedData[i].screen_y-heightOffset,drawData.width,group.zeroPosition-combinedData[i].screen_y,group.className+' vis-bar',framework.svgElements,framework.svg,group.style);// draw points
	if(group.options.drawPoints.enabled===true){var pointData={screen_x:combinedData[i].screen_x,screen_y:combinedData[i].screen_y-heightOffset,x:combinedData[i].x,y:combinedData[i].y,groupId:combinedData[i].groupId,label:combinedData[i].label};Points.draw([pointData],group,framework,drawData.offset);//DOMutil.drawPoint(combinedData[i].x + drawData.offset, combinedData[i].y, group, framework.svgElements, framework.svg);
	}}};/**
	   * Fill the intersections object with counters of how many datapoints share the same x coordinates
	   * @param intersections
	   * @param combinedData
	   * @private
	   */Bargraph._getDataIntersections=function(intersections,combinedData){// get intersections
	var coreDistance;for(var i=0;i<combinedData.length;i++){if(i+1<combinedData.length){coreDistance=Math.abs(combinedData[i+1].screen_x-combinedData[i].screen_x);}if(i>0){coreDistance=Math.min(coreDistance,Math.abs(combinedData[i-1].screen_x-combinedData[i].screen_x));}if(coreDistance===0){if(intersections[combinedData[i].screen_x]===undefined){intersections[combinedData[i].screen_x]={amount:0,resolved:0,accumulatedPositive:0,accumulatedNegative:0};}intersections[combinedData[i].screen_x].amount+=1;}}};/**
	   * Get the width and offset for bargraphs based on the coredistance between datapoints
	   *
	   * @param coreDistance
	   * @param group
	   * @param minWidth
	   * @returns {{width: Number, offset: Number}}
	   * @private
	   */Bargraph._getSafeDrawData=function(coreDistance,group,minWidth){var width,offset;if(coreDistance<group.options.barChart.width&&coreDistance>0){width=coreDistance<minWidth?minWidth:coreDistance;offset=0;// recalculate offset with the new width;
	if(group.options.barChart.align==='left'){offset-=0.5*coreDistance;}else if(group.options.barChart.align==='right'){offset+=0.5*coreDistance;}}else{// default settings
	width=group.options.barChart.width;offset=0;if(group.options.barChart.align==='left'){offset-=0.5*group.options.barChart.width;}else if(group.options.barChart.align==='right'){offset+=0.5*group.options.barChart.width;}}return{width:width,offset:offset};};Bargraph.getStackedYRange=function(combinedData,groupRanges,groupIds,groupLabel,orientation){if(combinedData.length>0){// sort by time and by group
	combinedData.sort(function(a,b){if(a.screen_x===b.screen_x){return a.groupId<b.groupId?-1:1;}else{return a.screen_x-b.screen_x;}});var intersections={};Bargraph._getDataIntersections(intersections,combinedData);groupRanges[groupLabel]=Bargraph._getStackedYRange(intersections,combinedData);groupRanges[groupLabel].yAxisOrientation=orientation;groupIds.push(groupLabel);}};Bargraph._getStackedYRange=function(intersections,combinedData){var key;var yMin=combinedData[0].screen_y;var yMax=combinedData[0].screen_y;for(var i=0;i<combinedData.length;i++){key=combinedData[i].screen_x;if(intersections[key]===undefined){yMin=yMin>combinedData[i].screen_y?combinedData[i].screen_y:yMin;yMax=yMax<combinedData[i].screen_y?combinedData[i].screen_y:yMax;}else{if(combinedData[i].screen_y<0){intersections[key].accumulatedNegative+=combinedData[i].screen_y;}else{intersections[key].accumulatedPositive+=combinedData[i].screen_y;}}}for(var xpos in intersections){if(intersections.hasOwnProperty(xpos)){yMin=yMin>intersections[xpos].accumulatedNegative?intersections[xpos].accumulatedNegative:yMin;yMin=yMin>intersections[xpos].accumulatedPositive?intersections[xpos].accumulatedPositive:yMin;yMax=yMax<intersections[xpos].accumulatedNegative?intersections[xpos].accumulatedNegative:yMax;yMax=yMax<intersections[xpos].accumulatedPositive?intersections[xpos].accumulatedPositive:yMax;}}return{min:yMin,max:yMax};};module.exports=Bargraph;/***/},/* 58 *//***/function(module,exports,__webpack_require__){'use strict';var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var DOMutil=__webpack_require__(8);function Points(groupId,options){}/**
	   * draw the data points
	   *
	   * @param {Array} dataset
	   * @param {Object} JSONcontainer
	   * @param {Object} svg            | SVG DOM element
	   * @param {GraphGroup} group
	   * @param {Number} [offset]
	   */Points.draw=function(dataset,group,framework,offset){offset=offset||0;var callback=getCallback(framework,group);for(var i=0;i<dataset.length;i++){if(!callback){// draw the point the simple way.
	DOMutil.drawPoint(dataset[i].screen_x+offset,dataset[i].screen_y,getGroupTemplate(group),framework.svgElements,framework.svg,dataset[i].label);}else{var callbackResult=callback(dataset[i],group);// result might be true, false or an object
	if(callbackResult===true||(typeof callbackResult==='undefined'?'undefined':_typeof(callbackResult))==='object'){DOMutil.drawPoint(dataset[i].screen_x+offset,dataset[i].screen_y,getGroupTemplate(group,callbackResult),framework.svgElements,framework.svg,dataset[i].label);}}}};Points.drawIcon=function(group,x,y,iconWidth,iconHeight,framework){var fillHeight=iconHeight*0.5;var path,fillPath;var outline=DOMutil.getSVGElement("rect",framework.svgElements,framework.svg);outline.setAttributeNS(null,"x",x);outline.setAttributeNS(null,"y",y-fillHeight);outline.setAttributeNS(null,"width",iconWidth);outline.setAttributeNS(null,"height",2*fillHeight);outline.setAttributeNS(null,"class","vis-outline");//Don't call callback on icon
	DOMutil.drawPoint(x+0.5*iconWidth,y,getGroupTemplate(group),framework.svgElements,framework.svg);};function getGroupTemplate(group,callbackResult){callbackResult=typeof callbackResult==='undefined'?{}:callbackResult;return{style:callbackResult.style||group.options.drawPoints.style,styles:callbackResult.styles||group.options.drawPoints.styles,size:callbackResult.size||group.options.drawPoints.size,className:callbackResult.className||group.className};}function getCallback(framework,group){var callback=undefined;// check for the graph2d onRender
	if(framework.options&&framework.options.drawPoints&&framework.options.drawPoints.onRender&&typeof framework.options.drawPoints.onRender=='function'){callback=framework.options.drawPoints.onRender;}// override it with the group onRender if defined
	if(group.group.options&&group.group.options.drawPoints&&group.group.options.drawPoints.onRender&&typeof group.group.options.drawPoints.onRender=='function'){callback=group.group.options.drawPoints.onRender;}return callback;}module.exports=Points;/***/},/* 59 *//***/function(module,exports,__webpack_require__){"use strict";var DOMutil=__webpack_require__(8);function Line(groupId,options){}Line.calcPath=function(dataset,group){if(dataset!=null){if(dataset.length>0){var d=[];// construct path from dataset
	if(group.options.interpolation.enabled==true){d=Line._catmullRom(dataset,group);}else{d=Line._linear(dataset);}return d;}}};Line.drawIcon=function(group,x,y,iconWidth,iconHeight,framework){var fillHeight=iconHeight*0.5;var path,fillPath;var outline=DOMutil.getSVGElement("rect",framework.svgElements,framework.svg);outline.setAttributeNS(null,"x",x);outline.setAttributeNS(null,"y",y-fillHeight);outline.setAttributeNS(null,"width",iconWidth);outline.setAttributeNS(null,"height",2*fillHeight);outline.setAttributeNS(null,"class","vis-outline");path=DOMutil.getSVGElement("path",framework.svgElements,framework.svg);path.setAttributeNS(null,"class",group.className);if(group.style!==undefined){path.setAttributeNS(null,"style",group.style);}path.setAttributeNS(null,"d","M"+x+","+y+" L"+(x+iconWidth)+","+y+"");if(group.options.shaded.enabled==true){fillPath=DOMutil.getSVGElement("path",framework.svgElements,framework.svg);if(group.options.shaded.orientation=='top'){fillPath.setAttributeNS(null,"d","M"+x+", "+(y-fillHeight)+"L"+x+","+y+" L"+(x+iconWidth)+","+y+" L"+(x+iconWidth)+","+(y-fillHeight));}else{fillPath.setAttributeNS(null,"d","M"+x+","+y+" "+"L"+x+","+(y+fillHeight)+" "+"L"+(x+iconWidth)+","+(y+fillHeight)+"L"+(x+iconWidth)+","+y);}fillPath.setAttributeNS(null,"class",group.className+" vis-icon-fill");if(group.options.shaded.style!==undefined&&group.options.shaded.style!==""){fillPath.setAttributeNS(null,"style",group.options.shaded.style);}}if(group.options.drawPoints.enabled==true){var groupTemplate={style:group.options.drawPoints.style,styles:group.options.drawPoints.styles,size:group.options.drawPoints.size,className:group.className};DOMutil.drawPoint(x+0.5*iconWidth,y,groupTemplate,framework.svgElements,framework.svg);}};Line.drawShading=function(pathArray,group,subPathArray,framework){// append shading to the path
	if(group.options.shaded.enabled==true){var svgHeight=Number(framework.svg.style.height.replace('px',''));var fillPath=DOMutil.getSVGElement('path',framework.svgElements,framework.svg);var type="L";if(group.options.interpolation.enabled==true){type="C";}var dFill;var zero=0;if(group.options.shaded.orientation=='top'){zero=0;}else if(group.options.shaded.orientation=='bottom'){zero=svgHeight;}else{zero=Math.min(Math.max(0,group.zeroPosition),svgHeight);}if(group.options.shaded.orientation=='group'&&subPathArray!=null&&subPathArray!=undefined){dFill='M'+pathArray[0][0]+","+pathArray[0][1]+" "+this.serializePath(pathArray,type,false)+' L'+subPathArray[subPathArray.length-1][0]+","+subPathArray[subPathArray.length-1][1]+" "+this.serializePath(subPathArray,type,true)+subPathArray[0][0]+","+subPathArray[0][1]+" Z";}else{dFill='M'+pathArray[0][0]+","+pathArray[0][1]+" "+this.serializePath(pathArray,type,false)+' V'+zero+' H'+pathArray[0][0]+" Z";}fillPath.setAttributeNS(null,'class',group.className+' vis-fill');if(group.options.shaded.style!==undefined){fillPath.setAttributeNS(null,'style',group.options.shaded.style);}fillPath.setAttributeNS(null,'d',dFill);}};/**
	   * draw a line graph
	   *
	   * @param dataset
	   * @param group
	   */Line.draw=function(pathArray,group,framework){if(pathArray!=null&&pathArray!=undefined){var path=DOMutil.getSVGElement('path',framework.svgElements,framework.svg);path.setAttributeNS(null,"class",group.className);if(group.style!==undefined){path.setAttributeNS(null,"style",group.style);}var type="L";if(group.options.interpolation.enabled==true){type="C";}// copy properties to path for drawing.
	path.setAttributeNS(null,'d','M'+pathArray[0][0]+","+pathArray[0][1]+" "+this.serializePath(pathArray,type,false));}};Line.serializePath=function(pathArray,type,inverse){if(pathArray.length<2){//Too little data to create a path.
	return"";}var d=type;if(inverse){for(var i=pathArray.length-2;i>0;i--){d+=pathArray[i][0]+","+pathArray[i][1]+" ";}}else{for(var i=1;i<pathArray.length;i++){d+=pathArray[i][0]+","+pathArray[i][1]+" ";}}return d;};/**
	   * This uses an uniform parametrization of the interpolation algorithm:
	   * 'On the Parameterization of Catmull-Rom Curves' by Cem Yuksel et al.
	   * @param data
	   * @returns {string}
	   * @private
	   */Line._catmullRomUniform=function(data){// catmull rom
	var p0,p1,p2,p3,bp1,bp2;var d=[];d.push([Math.round(data[0].screen_x),Math.round(data[0].screen_y)]);var normalization=1/6;var length=data.length;for(var i=0;i<length-1;i++){p0=i==0?data[0]:data[i-1];p1=data[i];p2=data[i+1];p3=i+2<length?data[i+2]:p2;// Catmull-Rom to Cubic Bezier conversion matrix
	//    0       1       0       0
	//  -1/6      1      1/6      0
	//    0      1/6      1     -1/6
	//    0       0       1       0
	//    bp0 = { x: p1.x,                               y: p1.y };
	bp1={screen_x:(-p0.screen_x+6*p1.screen_x+p2.screen_x)*normalization,screen_y:(-p0.screen_y+6*p1.screen_y+p2.screen_y)*normalization};bp2={screen_x:(p1.screen_x+6*p2.screen_x-p3.screen_x)*normalization,screen_y:(p1.screen_y+6*p2.screen_y-p3.screen_y)*normalization};//    bp0 = { x: p2.x,                               y: p2.y };
	d.push([bp1.screen_x,bp1.screen_y]);d.push([bp2.screen_x,bp2.screen_y]);d.push([p2.screen_x,p2.screen_y]);}return d;};/**
	   * This uses either the chordal or centripetal parameterization of the catmull-rom algorithm.
	   * By default, the centripetal parameterization is used because this gives the nicest results.
	   * These parameterizations are relatively heavy because the distance between 4 points have to be calculated.
	   *
	   * One optimization can be used to reuse distances since this is a sliding window approach.
	   * @param data
	   * @param group
	   * @returns {string}
	   * @private
	   */Line._catmullRom=function(data,group){var alpha=group.options.interpolation.alpha;if(alpha==0||alpha===undefined){return this._catmullRomUniform(data);}else{var p0,p1,p2,p3,bp1,bp2,d1,d2,d3,A,B,N,M;var d3powA,d2powA,d3pow2A,d2pow2A,d1pow2A,d1powA;var d=[];d.push([Math.round(data[0].screen_x),Math.round(data[0].screen_y)]);var length=data.length;for(var i=0;i<length-1;i++){p0=i==0?data[0]:data[i-1];p1=data[i];p2=data[i+1];p3=i+2<length?data[i+2]:p2;d1=Math.sqrt(Math.pow(p0.screen_x-p1.screen_x,2)+Math.pow(p0.screen_y-p1.screen_y,2));d2=Math.sqrt(Math.pow(p1.screen_x-p2.screen_x,2)+Math.pow(p1.screen_y-p2.screen_y,2));d3=Math.sqrt(Math.pow(p2.screen_x-p3.screen_x,2)+Math.pow(p2.screen_y-p3.screen_y,2));// Catmull-Rom to Cubic Bezier conversion matrix
	// A = 2d1^2a + 3d1^a * d2^a + d3^2a
	// B = 2d3^2a + 3d3^a * d2^a + d2^2a
	// [   0             1            0          0          ]
	// [   -d2^2a /N     A/N          d1^2a /N   0          ]
	// [   0             d3^2a /M     B/M        -d2^2a /M  ]
	// [   0             0            1          0          ]
	d3powA=Math.pow(d3,alpha);d3pow2A=Math.pow(d3,2*alpha);d2powA=Math.pow(d2,alpha);d2pow2A=Math.pow(d2,2*alpha);d1powA=Math.pow(d1,alpha);d1pow2A=Math.pow(d1,2*alpha);A=2*d1pow2A+3*d1powA*d2powA+d2pow2A;B=2*d3pow2A+3*d3powA*d2powA+d2pow2A;N=3*d1powA*(d1powA+d2powA);if(N>0){N=1/N;}M=3*d3powA*(d3powA+d2powA);if(M>0){M=1/M;}bp1={screen_x:(-d2pow2A*p0.screen_x+A*p1.screen_x+d1pow2A*p2.screen_x)*N,screen_y:(-d2pow2A*p0.screen_y+A*p1.screen_y+d1pow2A*p2.screen_y)*N};bp2={screen_x:(d3pow2A*p1.screen_x+B*p2.screen_x-d2pow2A*p3.screen_x)*M,screen_y:(d3pow2A*p1.screen_y+B*p2.screen_y-d2pow2A*p3.screen_y)*M};if(bp1.screen_x==0&&bp1.screen_y==0){bp1=p1;}if(bp2.screen_x==0&&bp2.screen_y==0){bp2=p2;}d.push([bp1.screen_x,bp1.screen_y]);d.push([bp2.screen_x,bp2.screen_y]);d.push([p2.screen_x,p2.screen_y]);}return d;}};/**
	   * this generates the SVG path for a linear drawing between datapoints.
	   * @param data
	   * @returns {string}
	   * @private
	   */Line._linear=function(data){// linear
	var d=[];for(var i=0;i<data.length;i++){d.push([data[i].screen_x,data[i].screen_y]);}return d;};module.exports=Line;/***/},/* 60 *//***/function(module,exports,__webpack_require__){'use strict';var util=__webpack_require__(1);var DOMutil=__webpack_require__(8);var Component=__webpack_require__(33);/**
	   * Legend for Graph2d
	   */function Legend(body,options,side,linegraphOptions){this.body=body;this.defaultOptions={enabled:false,icons:true,iconSize:20,iconSpacing:6,left:{visible:true,position:'top-left'// top/bottom - left,center,right
	},right:{visible:true,position:'top-right'// top/bottom - left,center,right
	}};this.side=side;this.options=util.extend({},this.defaultOptions);this.linegraphOptions=linegraphOptions;this.svgElements={};this.dom={};this.groups={};this.amountOfGroups=0;this._create();this.framework={svg:this.svg,svgElements:this.svgElements,options:this.options,groups:this.groups};this.setOptions(options);}Legend.prototype=new Component();Legend.prototype.clear=function(){this.groups={};this.amountOfGroups=0;};Legend.prototype.addGroup=function(label,graphOptions){// Include a group only if the group option 'excludeFromLegend: false' is not set.
	if(graphOptions.options.excludeFromLegend!=true){if(!this.groups.hasOwnProperty(label)){this.groups[label]=graphOptions;}this.amountOfGroups+=1;}};Legend.prototype.updateGroup=function(label,graphOptions){this.groups[label]=graphOptions;};Legend.prototype.removeGroup=function(label){if(this.groups.hasOwnProperty(label)){delete this.groups[label];this.amountOfGroups-=1;}};Legend.prototype._create=function(){this.dom.frame=document.createElement('div');this.dom.frame.className='vis-legend';this.dom.frame.style.position="absolute";this.dom.frame.style.top="10px";this.dom.frame.style.display="block";this.dom.textArea=document.createElement('div');this.dom.textArea.className='vis-legend-text';this.dom.textArea.style.position="relative";this.dom.textArea.style.top="0px";this.svg=document.createElementNS('http://www.w3.org/2000/svg',"svg");this.svg.style.position='absolute';this.svg.style.top=0+'px';this.svg.style.width=this.options.iconSize+5+'px';this.svg.style.height='100%';this.dom.frame.appendChild(this.svg);this.dom.frame.appendChild(this.dom.textArea);};/**
	   * Hide the component from the DOM
	   */Legend.prototype.hide=function(){// remove the frame containing the items
	if(this.dom.frame.parentNode){this.dom.frame.parentNode.removeChild(this.dom.frame);}};/**
	   * Show the component in the DOM (when not already visible).
	   * @return {Boolean} changed
	   */Legend.prototype.show=function(){// show frame containing the items
	if(!this.dom.frame.parentNode){this.body.dom.center.appendChild(this.dom.frame);}};Legend.prototype.setOptions=function(options){var fields=['enabled','orientation','icons','left','right'];util.selectiveDeepExtend(fields,this.options,options);};Legend.prototype.redraw=function(){var activeGroups=0;var groupArray=Object.keys(this.groups);groupArray.sort(function(a,b){return a<b?-1:1;});for(var i=0;i<groupArray.length;i++){var groupId=groupArray[i];if(this.groups[groupId].visible==true&&(this.linegraphOptions.visibility[groupId]===undefined||this.linegraphOptions.visibility[groupId]==true)){activeGroups++;}}if(this.options[this.side].visible==false||this.amountOfGroups==0||this.options.enabled==false||activeGroups==0){this.hide();}else{this.show();if(this.options[this.side].position=='top-left'||this.options[this.side].position=='bottom-left'){this.dom.frame.style.left='4px';this.dom.frame.style.textAlign="left";this.dom.textArea.style.textAlign="left";this.dom.textArea.style.left=this.options.iconSize+15+'px';this.dom.textArea.style.right='';this.svg.style.left=0+'px';this.svg.style.right='';}else{this.dom.frame.style.right='4px';this.dom.frame.style.textAlign="right";this.dom.textArea.style.textAlign="right";this.dom.textArea.style.right=this.options.iconSize+15+'px';this.dom.textArea.style.left='';this.svg.style.right=0+'px';this.svg.style.left='';}if(this.options[this.side].position=='top-left'||this.options[this.side].position=='top-right'){this.dom.frame.style.top=4-Number(this.body.dom.center.style.top.replace("px",""))+'px';this.dom.frame.style.bottom='';}else{var scrollableHeight=this.body.domProps.center.height-this.body.domProps.centerContainer.height;this.dom.frame.style.bottom=4+scrollableHeight+Number(this.body.dom.center.style.top.replace("px",""))+'px';this.dom.frame.style.top='';}if(this.options.icons==false){this.dom.frame.style.width=this.dom.textArea.offsetWidth+10+'px';this.dom.textArea.style.right='';this.dom.textArea.style.left='';this.svg.style.width='0px';}else{this.dom.frame.style.width=this.options.iconSize+15+this.dom.textArea.offsetWidth+10+'px';this.drawLegendIcons();}var content='';for(var i=0;i<groupArray.length;i++){var groupId=groupArray[i];if(this.groups[groupId].visible==true&&(this.linegraphOptions.visibility[groupId]===undefined||this.linegraphOptions.visibility[groupId]==true)){content+=this.groups[groupId].content+'<br />';}}this.dom.textArea.innerHTML=content;this.dom.textArea.style.lineHeight=0.75*this.options.iconSize+this.options.iconSpacing+'px';}};Legend.prototype.drawLegendIcons=function(){if(this.dom.frame.parentNode){var groupArray=Object.keys(this.groups);groupArray.sort(function(a,b){return a<b?-1:1;});// this resets the elements so the order is maintained
	DOMutil.resetElements(this.svgElements);var padding=window.getComputedStyle(this.dom.frame).paddingTop;var iconOffset=Number(padding.replace('px',''));var x=iconOffset;var iconWidth=this.options.iconSize;var iconHeight=0.75*this.options.iconSize;var y=iconOffset+0.5*iconHeight+3;this.svg.style.width=iconWidth+5+iconOffset+'px';for(var i=0;i<groupArray.length;i++){var groupId=groupArray[i];if(this.groups[groupId].visible==true&&(this.linegraphOptions.visibility[groupId]===undefined||this.linegraphOptions.visibility[groupId]==true)){this.groups[groupId].getLegend(iconWidth,iconHeight,this.framework,x,y);y+=iconHeight+this.options.iconSpacing;}}}};module.exports=Legend;/***/},/* 61 *//***/function(module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});/**
	   * This object contains all possible options. It will check if the types are correct, if required if the option is one
	   * of the allowed values.
	   *
	   * __any__ means that the name of the property does not matter.
	   * __type__ is a required field for all objects and contains the allowed types of all objects
	   */var string='string';var boolean='boolean';var number='number';var array='array';var date='date';var object='object';// should only be in a __type__ property
	var dom='dom';var moment='moment';var any='any';var allOptions={configure:{enabled:{boolean:boolean},filter:{boolean:boolean,'function':'function'},container:{dom:dom},__type__:{object:object,boolean:boolean,'function':'function'}},//globals :
	yAxisOrientation:{string:['left','right']},defaultGroup:{string:string},sort:{boolean:boolean},sampling:{boolean:boolean},stack:{boolean:boolean},graphHeight:{string:string,number:number},shaded:{enabled:{boolean:boolean},orientation:{string:['bottom','top','zero','group']},// top, bottom, zero, group
	groupId:{object:object},__type__:{boolean:boolean,object:object}},style:{string:['line','bar','points']},// line, bar
	barChart:{width:{number:number},minWidth:{number:number},sideBySide:{boolean:boolean},align:{string:['left','center','right']},__type__:{object:object}},interpolation:{enabled:{boolean:boolean},parametrization:{string:['centripetal','chordal','uniform']},// uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	alpha:{number:number},__type__:{object:object,boolean:boolean}},drawPoints:{enabled:{boolean:boolean},onRender:{'function':'function'},size:{number:number},style:{string:['square','circle']},// square, circle
	__type__:{object:object,boolean:boolean,'function':'function'}},dataAxis:{showMinorLabels:{boolean:boolean},showMajorLabels:{boolean:boolean},icons:{boolean:boolean},width:{string:string,number:number},visible:{boolean:boolean},alignZeros:{boolean:boolean},left:{range:{min:{number:number},max:{number:number},__type__:{object:object}},format:{'function':'function'},title:{text:{string:string,number:number},style:{string:string},__type__:{object:object}},__type__:{object:object}},right:{range:{min:{number:number},max:{number:number},__type__:{object:object}},format:{'function':'function'},title:{text:{string:string,number:number},style:{string:string},__type__:{object:object}},__type__:{object:object}},__type__:{object:object}},legend:{enabled:{boolean:boolean},icons:{boolean:boolean},left:{visible:{boolean:boolean},position:{string:['top-right','bottom-right','top-left','bottom-left']},__type__:{object:object}},right:{visible:{boolean:boolean},position:{string:['top-right','bottom-right','top-left','bottom-left']},__type__:{object:object}},__type__:{object:object,boolean:boolean}},groups:{visibility:{any:any},__type__:{object:object}},autoResize:{boolean:boolean},clickToUse:{boolean:boolean},end:{number:number,date:date,string:string,moment:moment},format:{minorLabels:{millisecond:{string:string,'undefined':'undefined'},second:{string:string,'undefined':'undefined'},minute:{string:string,'undefined':'undefined'},hour:{string:string,'undefined':'undefined'},weekday:{string:string,'undefined':'undefined'},day:{string:string,'undefined':'undefined'},month:{string:string,'undefined':'undefined'},year:{string:string,'undefined':'undefined'},__type__:{object:object}},majorLabels:{millisecond:{string:string,'undefined':'undefined'},second:{string:string,'undefined':'undefined'},minute:{string:string,'undefined':'undefined'},hour:{string:string,'undefined':'undefined'},weekday:{string:string,'undefined':'undefined'},day:{string:string,'undefined':'undefined'},month:{string:string,'undefined':'undefined'},year:{string:string,'undefined':'undefined'},__type__:{object:object}},__type__:{object:object}},moment:{'function':'function'},height:{string:string,number:number},hiddenDates:{start:{date:date,number:number,string:string,moment:moment},end:{date:date,number:number,string:string,moment:moment},repeat:{string:string},__type__:{object:object,array:array}},locale:{string:string},locales:{__any__:{any:any},__type__:{object:object}},max:{date:date,number:number,string:string,moment:moment},maxHeight:{number:number,string:string},maxMinorChars:{number:number},min:{date:date,number:number,string:string,moment:moment},minHeight:{number:number,string:string},moveable:{boolean:boolean},multiselect:{boolean:boolean},orientation:{string:string},showCurrentTime:{boolean:boolean},showMajorLabels:{boolean:boolean},showMinorLabels:{boolean:boolean},start:{date:date,number:number,string:string,moment:moment},timeAxis:{scale:{string:string,'undefined':'undefined'},step:{number:number,'undefined':'undefined'},__type__:{object:object}},width:{string:string,number:number},zoomable:{boolean:boolean},zoomKey:{string:['ctrlKey','altKey','metaKey','']},zoomMax:{number:number},zoomMin:{number:number},zIndex:{number:number},__type__:{object:object}};var configureOptions={global:{//yAxisOrientation: ['left','right'], // TDOO: enable as soon as Grahp2d doesn't crash when changing this on the fly
	sort:true,sampling:true,stack:false,shaded:{enabled:false,orientation:['zero','top','bottom','group']// zero, top, bottom
	},style:['line','bar','points'],// line, bar
	barChart:{width:[50,5,100,5],minWidth:[50,5,100,5],sideBySide:false,align:['left','center','right']// left, center, right
	},interpolation:{enabled:true,parametrization:['centripetal','chordal','uniform']// uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	},drawPoints:{enabled:true,size:[6,2,30,1],style:['square','circle']// square, circle
	},dataAxis:{showMinorLabels:true,showMajorLabels:true,icons:false,width:[40,0,200,1],visible:true,alignZeros:true,left:{//range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
	//format: function (value) {return value;},
	title:{text:'',style:''}},right:{//range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
	//format: function (value) {return value;},
	title:{text:'',style:''}}},legend:{enabled:false,icons:true,left:{visible:true,position:['top-right','bottom-right','top-left','bottom-left']// top/bottom - left,right
	},right:{visible:true,position:['top-right','bottom-right','top-left','bottom-left']// top/bottom - left,right
	}},autoResize:true,clickToUse:false,end:'',format:{minorLabels:{millisecond:'SSS',second:'s',minute:'HH:mm',hour:'HH:mm',weekday:'ddd D',day:'D',month:'MMM',year:'YYYY'},majorLabels:{millisecond:'HH:mm:ss',second:'D MMMM HH:mm',minute:'ddd D MMMM',hour:'ddd D MMMM',weekday:'MMMM YYYY',day:'MMMM YYYY',month:'YYYY',year:''}},height:'',locale:'',max:'',maxHeight:'',maxMinorChars:[7,0,20,1],min:'',minHeight:'',moveable:true,orientation:['both','bottom','top'],showCurrentTime:false,showMajorLabels:true,showMinorLabels:true,start:'',width:'100%',zoomable:true,zoomKey:['ctrlKey','altKey','metaKey',''],zoomMax:[315360000000000,10,315360000000000,1],zoomMin:[10,10,315360000000000,1],zIndex:0}};exports.allOptions=allOptions;exports.configureOptions=configureOptions;/***/},/* 62 *//***/function(module,exports,__webpack_require__){'use strict';// utils
	exports.util=__webpack_require__(1);exports.DOMutil=__webpack_require__(8);// data
	exports.DataSet=__webpack_require__(9);exports.DataView=__webpack_require__(11);exports.Queue=__webpack_require__(10);// Network
	exports.Network=__webpack_require__(63);exports.network={Images:__webpack_require__(64),dotparser:__webpack_require__(120),gephiParser:__webpack_require__(121),allOptions:__webpack_require__(116)};exports.network.convertDot=function(input){return exports.network.dotparser.DOTToGraph(input);};exports.network.convertGephi=function(input,options){return exports.network.gephiParser.parseGephi(input,options);};// bundled external libraries
	exports.moment=__webpack_require__(2);exports.Hammer=__webpack_require__(22);exports.keycharm=__webpack_require__(25);/***/},/* 63 *//***/function(module,exports,__webpack_require__){'use strict';var _Images=__webpack_require__(64);var _Images2=_interopRequireDefault(_Images);var _Groups=__webpack_require__(65);var _Groups2=_interopRequireDefault(_Groups);var _NodesHandler=__webpack_require__(66);var _NodesHandler2=_interopRequireDefault(_NodesHandler);var _EdgesHandler=__webpack_require__(86);var _EdgesHandler2=_interopRequireDefault(_EdgesHandler);var _PhysicsEngine=__webpack_require__(95);var _PhysicsEngine2=_interopRequireDefault(_PhysicsEngine);var _Clustering=__webpack_require__(104);var _Clustering2=_interopRequireDefault(_Clustering);var _CanvasRenderer=__webpack_require__(107);var _CanvasRenderer2=_interopRequireDefault(_CanvasRenderer);var _Canvas=__webpack_require__(108);var _Canvas2=_interopRequireDefault(_Canvas);var _View=__webpack_require__(109);var _View2=_interopRequireDefault(_View);var _InteractionHandler=__webpack_require__(110);var _InteractionHandler2=_interopRequireDefault(_InteractionHandler);var _SelectionHandler=__webpack_require__(113);var _SelectionHandler2=_interopRequireDefault(_SelectionHandler);var _LayoutEngine=__webpack_require__(114);var _LayoutEngine2=_interopRequireDefault(_LayoutEngine);var _ManipulationSystem=__webpack_require__(115);var _ManipulationSystem2=_interopRequireDefault(_ManipulationSystem);var _Configurator=__webpack_require__(28);var _Configurator2=_interopRequireDefault(_Configurator);var _Validator=__webpack_require__(31);var _Validator2=_interopRequireDefault(_Validator);var _options=__webpack_require__(116);var _KamadaKawai=__webpack_require__(117);var _KamadaKawai2=_interopRequireDefault(_KamadaKawai);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// Load custom shapes into CanvasRenderingContext2D
	__webpack_require__(119);var Emitter=__webpack_require__(13);var util=__webpack_require__(1);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var dotparser=__webpack_require__(120);var gephiParser=__webpack_require__(121);var Activator=__webpack_require__(47);var locales=__webpack_require__(122);/**
	   * @constructor Network
	   * Create a network visualization, displaying nodes and edges.
	   *
	   * @param {Element} container   The DOM element in which the Network will
	   *                                  be created. Normally a div element.
	   * @param {Object} data         An object containing parameters
	   *                              {Array} nodes
	   *                              {Array} edges
	   * @param {Object} options      Options
	   */function Network(container,data,options){var _this=this;if(!(this instanceof Network)){throw new SyntaxError('Constructor must be called with the new operator');}// set constant values
	this.options={};this.defaultOptions={locale:'en',locales:locales,clickToUse:false};util.extend(this.options,this.defaultOptions);// containers for nodes and edges
	this.body={container:container,nodes:{},nodeIndices:[],edges:{},edgeIndices:[],emitter:{on:this.on.bind(this),off:this.off.bind(this),emit:this.emit.bind(this),once:this.once.bind(this)},eventListeners:{onTap:function onTap(){},onTouch:function onTouch(){},onDoubleTap:function onDoubleTap(){},onHold:function onHold(){},onDragStart:function onDragStart(){},onDrag:function onDrag(){},onDragEnd:function onDragEnd(){},onMouseWheel:function onMouseWheel(){},onPinch:function onPinch(){},onMouseMove:function onMouseMove(){},onRelease:function onRelease(){},onContext:function onContext(){}},data:{nodes:null,// A DataSet or DataView
	edges:null// A DataSet or DataView
	},functions:{createNode:function createNode(){},createEdge:function createEdge(){},getPointer:function getPointer(){}},modules:{},view:{scale:1,translation:{x:0,y:0}}};// bind the event listeners
	this.bindEventListeners();// setting up all modules
	this.images=new _Images2.default(function(){return _this.body.emitter.emit("_requestRedraw");});// object with images
	this.groups=new _Groups2.default();// object with groups
	this.canvas=new _Canvas2.default(this.body);// DOM handler
	this.selectionHandler=new _SelectionHandler2.default(this.body,this.canvas);// Selection handler
	this.interactionHandler=new _InteractionHandler2.default(this.body,this.canvas,this.selectionHandler);// Interaction handler handles all the hammer bindings (that are bound by canvas), key
	this.view=new _View2.default(this.body,this.canvas);// camera handler, does animations and zooms
	this.renderer=new _CanvasRenderer2.default(this.body,this.canvas);// renderer, starts renderloop, has events that modules can hook into
	this.physics=new _PhysicsEngine2.default(this.body);// physics engine, does all the simulations
	this.layoutEngine=new _LayoutEngine2.default(this.body);// layout engine for inital layout and hierarchical layout
	this.clustering=new _Clustering2.default(this.body);// clustering api
	this.manipulation=new _ManipulationSystem2.default(this.body,this.canvas,this.selectionHandler);// data manipulation system
	this.nodesHandler=new _NodesHandler2.default(this.body,this.images,this.groups,this.layoutEngine);// Handle adding, deleting and updating of nodes as well as global options
	this.edgesHandler=new _EdgesHandler2.default(this.body,this.images,this.groups);// Handle adding, deleting and updating of edges as well as global options
	this.body.modules["kamadaKawai"]=new _KamadaKawai2.default(this.body,150,0.05);// Layouting algorithm.
	this.body.modules["clustering"]=this.clustering;// create the DOM elements
	this.canvas._create();// apply options
	this.setOptions(options);// load data (the disable start variable will be the same as the enabled clustering)
	this.setData(data);}// Extend Network with an Emitter mixin
	Emitter(Network.prototype);/**
	   * Set options
	   * @param {Object} options
	   */Network.prototype.setOptions=function(options){var _this2=this;if(options!==undefined){var errorFound=_Validator2.default.validate(options,_options.allOptions);if(errorFound===true){console.log('%cErrors have been found in the supplied options object.',_Validator.printStyle);}// copy the global fields over
	var fields=['locale','locales','clickToUse'];util.selectiveDeepExtend(fields,this.options,options);// the hierarchical system can adapt the edges and the physics to it's own options because not all combinations work with the hierarichical system.
	options=this.layoutEngine.setOptions(options.layout,options);this.canvas.setOptions(options);// options for canvas are in globals
	// pass the options to the modules
	this.groups.setOptions(options.groups);this.nodesHandler.setOptions(options.nodes);this.edgesHandler.setOptions(options.edges);this.physics.setOptions(options.physics);this.manipulation.setOptions(options.manipulation,options,this.options);// manipulation uses the locales in the globals
	this.interactionHandler.setOptions(options.interaction);this.renderer.setOptions(options.interaction);// options for rendering are in interaction
	this.selectionHandler.setOptions(options.interaction);// options for selection are in interaction
	// reload the settings of the nodes to apply changes in groups that are not referenced by pointer.
	if(options.groups!==undefined){this.body.emitter.emit("refreshNodes");}// these two do not have options at the moment, here for completeness
	//this.view.setOptions(options.view);
	//this.clustering.setOptions(options.clustering);
	if('configure'in options){if(!this.configurator){this.configurator=new _Configurator2.default(this,this.body.container,_options.configureOptions,this.canvas.pixelRatio);}this.configurator.setOptions(options.configure);}// if the configuration system is enabled, copy all options and put them into the config system
	if(this.configurator&&this.configurator.options.enabled===true){var networkOptions={nodes:{},edges:{},layout:{},interaction:{},manipulation:{},physics:{},global:{}};util.deepExtend(networkOptions.nodes,this.nodesHandler.options);util.deepExtend(networkOptions.edges,this.edgesHandler.options);util.deepExtend(networkOptions.layout,this.layoutEngine.options);// load the selectionHandler and render default options in to the interaction group
	util.deepExtend(networkOptions.interaction,this.selectionHandler.options);util.deepExtend(networkOptions.interaction,this.renderer.options);util.deepExtend(networkOptions.interaction,this.interactionHandler.options);util.deepExtend(networkOptions.manipulation,this.manipulation.options);util.deepExtend(networkOptions.physics,this.physics.options);// load globals into the global object
	util.deepExtend(networkOptions.global,this.canvas.options);util.deepExtend(networkOptions.global,this.options);this.configurator.setModuleOptions(networkOptions);}// handle network global options
	if(options.clickToUse!==undefined){if(options.clickToUse===true){if(this.activator===undefined){this.activator=new Activator(this.canvas.frame);this.activator.on('change',function(){_this2.body.emitter.emit("activate");});}}else{if(this.activator!==undefined){this.activator.destroy();delete this.activator;}this.body.emitter.emit("activate");}}else{this.body.emitter.emit("activate");}this.canvas.setSize();// start the physics simulation. Can be safely called multiple times.
	this.body.emitter.emit("startSimulation");}};/**
	   * Update the this.body.nodeIndices with the most recent node index list
	   * @private
	   */Network.prototype._updateVisibleIndices=function(){var nodes=this.body.nodes;var edges=this.body.edges;this.body.nodeIndices=[];this.body.edgeIndices=[];for(var nodeId in nodes){if(nodes.hasOwnProperty(nodeId)){if(nodes[nodeId].options.hidden===false){this.body.nodeIndices.push(nodes[nodeId].id);}}}for(var edgeId in edges){if(edges.hasOwnProperty(edgeId)){if(edges[edgeId].options.hidden===false){this.body.edgeIndices.push(edges[edgeId].id);}}}};/**
	   * Bind all events
	   */Network.prototype.bindEventListeners=function(){var _this3=this;// this event will trigger a rebuilding of the cache everything. Used when nodes or edges have been added or removed.
	this.body.emitter.on("_dataChanged",function(){// update shortcut lists
	_this3._updateVisibleIndices();_this3.body.emitter.emit("_requestRedraw");// call the dataUpdated event because the only difference between the two is the updating of the indices
	_this3.body.emitter.emit("_dataUpdated");});// this is called when options of EXISTING nodes or edges have changed.
	this.body.emitter.on("_dataUpdated",function(){// update values
	_this3._updateValueRange(_this3.body.nodes);_this3._updateValueRange(_this3.body.edges);// start simulation (can be called safely, even if already running)
	_this3.body.emitter.emit("startSimulation");_this3.body.emitter.emit("_requestRedraw");});};/**
	   * Set nodes and edges, and optionally options as well.
	   *
	   * @param {Object} data              Object containing parameters:
	   *                                   {Array | DataSet | DataView} [nodes] Array with nodes
	   *                                   {Array | DataSet | DataView} [edges] Array with edges
	   *                                   {String} [dot] String containing data in DOT format
	   *                                   {String} [gephi] String containing data in gephi JSON format
	   *                                   {Options} [options] Object with options
	   */Network.prototype.setData=function(data){// reset the physics engine.
	this.body.emitter.emit("resetPhysics");this.body.emitter.emit("_resetData");// unselect all to ensure no selections from old data are carried over.
	this.selectionHandler.unselectAll();if(data&&data.dot&&(data.nodes||data.edges)){throw new SyntaxError('Data must contain either parameter "dot" or '+' parameter pair "nodes" and "edges", but not both.');}// set options
	this.setOptions(data&&data.options);// set all data
	if(data&&data.dot){console.log('The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);');// parse DOT file
	var dotData=dotparser.DOTToGraph(data.dot);this.setData(dotData);return;}else if(data&&data.gephi){// parse DOT file
	console.log('The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);');var gephiData=gephiParser.parseGephi(data.gephi);this.setData(gephiData);return;}else{this.nodesHandler.setData(data&&data.nodes,true);this.edgesHandler.setData(data&&data.edges,true);}// emit change in data
	this.body.emitter.emit("_dataChanged");// emit data loaded
	this.body.emitter.emit("_dataLoaded");// find a stable position or start animating to a stable position
	this.body.emitter.emit("initPhysics");};/**
	   * Cleans up all bindings of the network, removing it fully from the memory IF the variable is set to null after calling this function.
	   * var network = new vis.Network(..);
	   * network.destroy();
	   * network = null;
	   */Network.prototype.destroy=function(){this.body.emitter.emit("destroy");// clear events
	this.body.emitter.off();this.off();// delete modules
	delete this.groups;delete this.canvas;delete this.selectionHandler;delete this.interactionHandler;delete this.view;delete this.renderer;delete this.physics;delete this.layoutEngine;delete this.clustering;delete this.manipulation;delete this.nodesHandler;delete this.edgesHandler;delete this.configurator;delete this.images;for(var nodeId in this.body.nodes){delete this.body.nodes[nodeId];}for(var edgeId in this.body.edges){delete this.body.edges[edgeId];}// remove the container and everything inside it recursively
	util.recursiveDOMDelete(this.body.container);};/**
	   * Update the values of all object in the given array according to the current
	   * value range of the objects in the array.
	   * @param {Object} obj    An object containing a set of Edges or Nodes
	   *                        The objects must have a method getValue() and
	   *                        setValueRange(min, max).
	   * @private
	   */Network.prototype._updateValueRange=function(obj){var id;// determine the range of the objects
	var valueMin=undefined;var valueMax=undefined;var valueTotal=0;for(id in obj){if(obj.hasOwnProperty(id)){var value=obj[id].getValue();if(value!==undefined){valueMin=valueMin===undefined?value:Math.min(value,valueMin);valueMax=valueMax===undefined?value:Math.max(value,valueMax);valueTotal+=value;}}}// adjust the range of all objects
	if(valueMin!==undefined&&valueMax!==undefined){for(id in obj){if(obj.hasOwnProperty(id)){obj[id].setValueRange(valueMin,valueMax,valueTotal);}}}};/**
	   * Returns true when the Network is active.
	   * @returns {boolean}
	   */Network.prototype.isActive=function(){return!this.activator||this.activator.active;};Network.prototype.setSize=function(){return this.canvas.setSize.apply(this.canvas,arguments);};Network.prototype.canvasToDOM=function(){return this.canvas.canvasToDOM.apply(this.canvas,arguments);};Network.prototype.DOMtoCanvas=function(){return this.canvas.DOMtoCanvas.apply(this.canvas,arguments);};Network.prototype.findNode=function(){return this.clustering.findNode.apply(this.clustering,arguments);};Network.prototype.isCluster=function(){return this.clustering.isCluster.apply(this.clustering,arguments);};Network.prototype.openCluster=function(){return this.clustering.openCluster.apply(this.clustering,arguments);};Network.prototype.cluster=function(){return this.clustering.cluster.apply(this.clustering,arguments);};Network.prototype.getNodesInCluster=function(){return this.clustering.getNodesInCluster.apply(this.clustering,arguments);};Network.prototype.clusterByConnection=function(){return this.clustering.clusterByConnection.apply(this.clustering,arguments);};Network.prototype.clusterByHubsize=function(){return this.clustering.clusterByHubsize.apply(this.clustering,arguments);};Network.prototype.clusterOutliers=function(){return this.clustering.clusterOutliers.apply(this.clustering,arguments);};Network.prototype.getSeed=function(){return this.layoutEngine.getSeed.apply(this.layoutEngine,arguments);};Network.prototype.enableEditMode=function(){return this.manipulation.enableEditMode.apply(this.manipulation,arguments);};Network.prototype.disableEditMode=function(){return this.manipulation.disableEditMode.apply(this.manipulation,arguments);};Network.prototype.addNodeMode=function(){return this.manipulation.addNodeMode.apply(this.manipulation,arguments);};Network.prototype.editNode=function(){return this.manipulation.editNode.apply(this.manipulation,arguments);};Network.prototype.editNodeMode=function(){console.log("Deprecated: Please use editNode instead of editNodeMode.");return this.manipulation.editNode.apply(this.manipulation,arguments);};Network.prototype.addEdgeMode=function(){return this.manipulation.addEdgeMode.apply(this.manipulation,arguments);};Network.prototype.editEdgeMode=function(){return this.manipulation.editEdgeMode.apply(this.manipulation,arguments);};Network.prototype.deleteSelected=function(){return this.manipulation.deleteSelected.apply(this.manipulation,arguments);};Network.prototype.getPositions=function(){return this.nodesHandler.getPositions.apply(this.nodesHandler,arguments);};Network.prototype.storePositions=function(){return this.nodesHandler.storePositions.apply(this.nodesHandler,arguments);};Network.prototype.moveNode=function(){return this.nodesHandler.moveNode.apply(this.nodesHandler,arguments);};Network.prototype.getBoundingBox=function(){return this.nodesHandler.getBoundingBox.apply(this.nodesHandler,arguments);};Network.prototype.getConnectedNodes=function(objectId){if(this.body.nodes[objectId]!==undefined){return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler,arguments);}else{return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler,arguments);}};Network.prototype.getConnectedEdges=function(){return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler,arguments);};Network.prototype.startSimulation=function(){return this.physics.startSimulation.apply(this.physics,arguments);};Network.prototype.stopSimulation=function(){return this.physics.stopSimulation.apply(this.physics,arguments);};Network.prototype.stabilize=function(){return this.physics.stabilize.apply(this.physics,arguments);};Network.prototype.getSelection=function(){return this.selectionHandler.getSelection.apply(this.selectionHandler,arguments);};Network.prototype.setSelection=function(){return this.selectionHandler.setSelection.apply(this.selectionHandler,arguments);};Network.prototype.getSelectedNodes=function(){return this.selectionHandler.getSelectedNodes.apply(this.selectionHandler,arguments);};Network.prototype.getSelectedEdges=function(){return this.selectionHandler.getSelectedEdges.apply(this.selectionHandler,arguments);};Network.prototype.getNodeAt=function(){var node=this.selectionHandler.getNodeAt.apply(this.selectionHandler,arguments);if(node!==undefined&&node.id!==undefined){return node.id;}return node;};Network.prototype.getEdgeAt=function(){var edge=this.selectionHandler.getEdgeAt.apply(this.selectionHandler,arguments);if(edge!==undefined&&edge.id!==undefined){return edge.id;}return edge;};Network.prototype.selectNodes=function(){return this.selectionHandler.selectNodes.apply(this.selectionHandler,arguments);};Network.prototype.selectEdges=function(){return this.selectionHandler.selectEdges.apply(this.selectionHandler,arguments);};Network.prototype.unselectAll=function(){this.selectionHandler.unselectAll.apply(this.selectionHandler,arguments);this.redraw();};Network.prototype.redraw=function(){return this.renderer.redraw.apply(this.renderer,arguments);};Network.prototype.getScale=function(){return this.view.getScale.apply(this.view,arguments);};Network.prototype.getViewPosition=function(){return this.view.getViewPosition.apply(this.view,arguments);};Network.prototype.fit=function(){return this.view.fit.apply(this.view,arguments);};Network.prototype.moveTo=function(){return this.view.moveTo.apply(this.view,arguments);};Network.prototype.focus=function(){return this.view.focus.apply(this.view,arguments);};Network.prototype.releaseNode=function(){return this.view.releaseNode.apply(this.view,arguments);};Network.prototype.getOptionsFromConfigurator=function(){var options={};if(this.configurator){options=this.configurator.getOptions.apply(this.configurator);}return options;};module.exports=Network;/***/},/* 64 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
	   * @class Images
	   * This class loads images and keeps them stored.
	   */var Images=function(){function Images(callback){_classCallCheck(this,Images);this.images={};this.imageBroken={};this.callback=callback;}/**
	       * @param {string} url                      The Url to cache the image as 
	        * @return {Image} imageToLoadBrokenUrlOn  The image object
	       */_createClass(Images,[{key:"_addImageToCache",value:function _addImageToCache(url,imageToCache){// IE11 fix -- thanks dponch!
	if(imageToCache.width===0){document.body.appendChild(imageToCache);imageToCache.width=imageToCache.offsetWidth;imageToCache.height=imageToCache.offsetHeight;document.body.removeChild(imageToCache);}this.images[url]=imageToCache;}/**
	           * @param {string} url                      The original Url that failed to load, if the broken image is successfully loaded it will be added to the cache using this Url as the key so that subsequent requests for this Url will return the broken image
	           * @param {string} brokenUrl                Url the broken image to try and load
	           * @return {Image} imageToLoadBrokenUrlOn   The image object
	           */},{key:"_tryloadBrokenUrl",value:function _tryloadBrokenUrl(url,brokenUrl,imageToLoadBrokenUrlOn){var _this=this;//If any of the parameters aren't specified then exit the function because nothing constructive can be done
	if(url===undefined||brokenUrl===undefined||imageToLoadBrokenUrlOn===undefined)return;//Clear the old subscription to the error event and put a new in place that only handle errors in loading the brokenImageUrl
	imageToLoadBrokenUrlOn.onerror=function(){console.error("Could not load brokenImage:",brokenUrl);//Add an empty image to the cache so that when subsequent load calls are made for the url we don't try load the image and broken image again
	_this._addImageToCache(url,new Image());};//Set the source of the image to the brokenUrl, this is actually what kicks off the loading of the broken image
	imageToLoadBrokenUrlOn.src=brokenUrl;}/**
	           * @return {Image} imageToRedrawWith The images that will be passed to the callback when it is invoked
	           */},{key:"_redrawWithImage",value:function _redrawWithImage(imageToRedrawWith){if(this.callback){this.callback(imageToRedrawWith);}}/**
	           * @param {string} url          Url of the image
	           * @param {string} brokenUrl    Url of an image to use if the url image is not found
	           * @return {Image} img          The image object
	           */},{key:"load",value:function load(url,brokenUrl,id){var _this2=this;//Try and get the image from the cache, if successful then return the cached image   
	var cachedImage=this.images[url];if(cachedImage)return cachedImage;//Create a new image
	var img=new Image();//Subscribe to the event that is raised if the image loads successfully 
	img.onload=function(){//Add the image to the cache and then request a redraw
	_this2._addImageToCache(url,img);_this2._redrawWithImage(img);};//Subscribe to the event that is raised if the image fails to load
	img.onerror=function(){console.error("Could not load image:",url);//Try and load the image specified by the brokenUrl using
	_this2._tryloadBrokenUrl(url,brokenUrl,img);};//Set the source of the image to the url, this is actuall what kicks off the loading of the image
	img.src=url;//Return the new image
	return img;}}]);return Images;}();exports.default=Images;/***/},/* 65 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);/**
	   * @class Groups
	   * This class can store groups and options specific for groups.
	   */var Groups=function(){function Groups(){_classCallCheck(this,Groups);this.clear();this.defaultIndex=0;this.groupsArray=[];this.groupIndex=0;this.defaultGroups=[{border:"#2B7CE9",background:"#97C2FC",highlight:{border:"#2B7CE9",background:"#D2E5FF"},hover:{border:"#2B7CE9",background:"#D2E5FF"}},// 0: blue
	{border:"#FFA500",background:"#FFFF00",highlight:{border:"#FFA500",background:"#FFFFA3"},hover:{border:"#FFA500",background:"#FFFFA3"}},// 1: yellow
	{border:"#FA0A10",background:"#FB7E81",highlight:{border:"#FA0A10",background:"#FFAFB1"},hover:{border:"#FA0A10",background:"#FFAFB1"}},// 2: red
	{border:"#41A906",background:"#7BE141",highlight:{border:"#41A906",background:"#A1EC76"},hover:{border:"#41A906",background:"#A1EC76"}},// 3: green
	{border:"#E129F0",background:"#EB7DF4",highlight:{border:"#E129F0",background:"#F0B3F5"},hover:{border:"#E129F0",background:"#F0B3F5"}},// 4: magenta
	{border:"#7C29F0",background:"#AD85E4",highlight:{border:"#7C29F0",background:"#D3BDF0"},hover:{border:"#7C29F0",background:"#D3BDF0"}},// 5: purple
	{border:"#C37F00",background:"#FFA807",highlight:{border:"#C37F00",background:"#FFCA66"},hover:{border:"#C37F00",background:"#FFCA66"}},// 6: orange
	{border:"#4220FB",background:"#6E6EFD",highlight:{border:"#4220FB",background:"#9B9BFD"},hover:{border:"#4220FB",background:"#9B9BFD"}},// 7: darkblue
	{border:"#FD5A77",background:"#FFC0CB",highlight:{border:"#FD5A77",background:"#FFD1D9"},hover:{border:"#FD5A77",background:"#FFD1D9"}},// 8: pink
	{border:"#4AD63A",background:"#C2FABC",highlight:{border:"#4AD63A",background:"#E6FFE3"},hover:{border:"#4AD63A",background:"#E6FFE3"}},// 9: mint
	{border:"#990000",background:"#EE0000",highlight:{border:"#BB0000",background:"#FF3333"},hover:{border:"#BB0000",background:"#FF3333"}},// 10:bright red
	{border:"#FF6000",background:"#FF6000",highlight:{border:"#FF6000",background:"#FF6000"},hover:{border:"#FF6000",background:"#FF6000"}},// 12: real orange
	{border:"#97C2FC",background:"#2B7CE9",highlight:{border:"#D2E5FF",background:"#2B7CE9"},hover:{border:"#D2E5FF",background:"#2B7CE9"}},// 13: blue
	{border:"#399605",background:"#255C03",highlight:{border:"#399605",background:"#255C03"},hover:{border:"#399605",background:"#255C03"}},// 14: green
	{border:"#B70054",background:"#FF007E",highlight:{border:"#B70054",background:"#FF007E"},hover:{border:"#B70054",background:"#FF007E"}},// 15: magenta
	{border:"#AD85E4",background:"#7C29F0",highlight:{border:"#D3BDF0",background:"#7C29F0"},hover:{border:"#D3BDF0",background:"#7C29F0"}},// 16: purple
	{border:"#4557FA",background:"#000EA1",highlight:{border:"#6E6EFD",background:"#000EA1"},hover:{border:"#6E6EFD",background:"#000EA1"}},// 17: darkblue
	{border:"#FFC0CB",background:"#FD5A77",highlight:{border:"#FFD1D9",background:"#FD5A77"},hover:{border:"#FFD1D9",background:"#FD5A77"}},// 18: pink
	{border:"#C2FABC",background:"#74D66A",highlight:{border:"#E6FFE3",background:"#74D66A"},hover:{border:"#E6FFE3",background:"#74D66A"}},// 19: mint
	{border:"#EE0000",background:"#990000",highlight:{border:"#FF3333",background:"#BB0000"},hover:{border:"#FF3333",background:"#BB0000"}}// 20:bright red
	];this.options={};this.defaultOptions={useDefaultGroups:true};util.extend(this.options,this.defaultOptions);}_createClass(Groups,[{key:"setOptions",value:function setOptions(options){var optionFields=['useDefaultGroups'];if(options!==undefined){for(var groupName in options){if(options.hasOwnProperty(groupName)){if(optionFields.indexOf(groupName)===-1){var group=options[groupName];this.add(groupName,group);}}}}}/**
	       * Clear all groups
	       */},{key:"clear",value:function clear(){this.groups={};this.groupsArray=[];}/**
	       * get group options of a groupname. If groupname is not found, a new group
	       * is added.
	       * @param {*} groupname        Can be a number, string, Date, etc.
	       * @return {Object} group      The created group, containing all group options
	       */},{key:"get",value:function get(groupname){var group=this.groups[groupname];if(group===undefined){if(this.options.useDefaultGroups===false&&this.groupsArray.length>0){// create new group
	var index=this.groupIndex%this.groupsArray.length;this.groupIndex++;group={};group.color=this.groups[this.groupsArray[index]];this.groups[groupname]=group;}else{// create new group
	var _index=this.defaultIndex%this.defaultGroups.length;this.defaultIndex++;group={};group.color=this.defaultGroups[_index];this.groups[groupname]=group;}}return group;}/**
	       * Add a custom group style
	       * @param {String} groupName
	       * @param {Object} style       An object containing borderColor,
	       *                             backgroundColor, etc.
	       * @return {Object} group      The created group object
	       */},{key:"add",value:function add(groupName,style){this.groups[groupName]=style;this.groupsArray.push(groupName);return style;}}]);return Groups;}();exports.default=Groups;/***/},/* 66 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _Node=__webpack_require__(67);var _Node2=_interopRequireDefault(_Node);var _Label=__webpack_require__(68);var _Label2=_interopRequireDefault(_Label);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var NodesHandler=function(){function NodesHandler(body,images,groups,layoutEngine){var _this=this;_classCallCheck(this,NodesHandler);this.body=body;this.images=images;this.groups=groups;this.layoutEngine=layoutEngine;// create the node API in the body container
	this.body.functions.createNode=this.create.bind(this);this.nodesListeners={add:function add(event,params){_this.add(params.items);},update:function update(event,params){_this.update(params.items,params.data);},remove:function remove(event,params){_this.remove(params.items);}};this.options={};this.defaultOptions={borderWidth:1,borderWidthSelected:2,brokenImage:undefined,color:{border:'#2B7CE9',background:'#97C2FC',highlight:{border:'#2B7CE9',background:'#D2E5FF'},hover:{border:'#2B7CE9',background:'#D2E5FF'}},fixed:{x:false,y:false},font:{color:'#343434',size:14,// px
	face:'arial',background:'none',strokeWidth:0,// px
	strokeColor:'#ffffff',align:'center'},group:undefined,hidden:false,icon:{face:'FontAwesome',//'FontAwesome',
	code:undefined,//'\uf007',
	size:50,//50,
	color:'#2B7CE9'//'#aa00ff'
	},image:undefined,// --> URL
	label:undefined,labelHighlightBold:true,level:undefined,mass:1,physics:true,scaling:{min:10,max:30,label:{enabled:false,min:14,max:30,maxVisible:30,drawThreshold:5},customScalingFunction:function customScalingFunction(min,max,total,value){if(max===min){return 0.5;}else{var scale=1/(max-min);return Math.max(0,(value-min)*scale);}}},shadow:{enabled:false,color:'rgba(0,0,0,0.5)',size:10,x:5,y:5},shape:'ellipse',shapeProperties:{borderDashes:false,// only for borders
	borderRadius:6,// only for box shape
	interpolation:true,// only for image and circularImage shapes
	useImageSize:false,// only for image and circularImage shapes
	useBorderWithImage:false// only for image shape
	},size:25,title:undefined,value:undefined,x:undefined,y:undefined};util.extend(this.options,this.defaultOptions);this.bindEventListeners();}_createClass(NodesHandler,[{key:'bindEventListeners',value:function bindEventListeners(){var _this2=this;// refresh the nodes. Used when reverting from hierarchical layout
	this.body.emitter.on('refreshNodes',this.refresh.bind(this));this.body.emitter.on('refresh',this.refresh.bind(this));this.body.emitter.on('destroy',function(){util.forEach(_this2.nodesListeners,function(callback,event){if(_this2.body.data.nodes)_this2.body.data.nodes.off(event,callback);});delete _this2.body.functions.createNode;delete _this2.nodesListeners.add;delete _this2.nodesListeners.update;delete _this2.nodesListeners.remove;delete _this2.nodesListeners;});}},{key:'setOptions',value:function setOptions(options){if(options!==undefined){_Node2.default.parseOptions(this.options,options);// update the shape in all nodes
	if(options.shape!==undefined){for(var nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(nodeId)){this.body.nodes[nodeId].updateShape();}}}// update the font in all nodes
	if(options.font!==undefined){_Label2.default.parseOptions(this.options.font,options);for(var _nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(_nodeId)){this.body.nodes[_nodeId].updateLabelModule();this.body.nodes[_nodeId]._reset();}}}// update the shape size in all nodes
	if(options.size!==undefined){for(var _nodeId2 in this.body.nodes){if(this.body.nodes.hasOwnProperty(_nodeId2)){this.body.nodes[_nodeId2]._reset();}}}// update the state of the letiables if needed
	if(options.hidden!==undefined||options.physics!==undefined){this.body.emitter.emit('_dataChanged');}}}/**
	       * Set a data set with nodes for the network
	       * @param {Array | DataSet | DataView} nodes         The data containing the nodes.
	       * @private
	       */},{key:'setData',value:function setData(nodes){var _this3=this;var doNotEmit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var oldNodesData=this.body.data.nodes;if(nodes instanceof DataSet||nodes instanceof DataView){this.body.data.nodes=nodes;}else if(Array.isArray(nodes)){this.body.data.nodes=new DataSet();this.body.data.nodes.add(nodes);}else if(!nodes){this.body.data.nodes=new DataSet();}else{throw new TypeError('Array or DataSet expected');}if(oldNodesData){// unsubscribe from old dataset
	util.forEach(this.nodesListeners,function(callback,event){oldNodesData.off(event,callback);});}// remove drawn nodes
	this.body.nodes={};if(this.body.data.nodes){(function(){// subscribe to new dataset
	var me=_this3;util.forEach(_this3.nodesListeners,function(callback,event){me.body.data.nodes.on(event,callback);});// draw all new nodes
	var ids=_this3.body.data.nodes.getIds();_this3.add(ids,true);})();}if(doNotEmit===false){this.body.emitter.emit("_dataChanged");}}/**
	       * Add nodes
	       * @param {Number[] | String[]} ids
	       * @private
	       */},{key:'add',value:function add(ids){var doNotEmit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var id=void 0;var newNodes=[];for(var i=0;i<ids.length;i++){id=ids[i];var properties=this.body.data.nodes.get(id);var node=this.create(properties);newNodes.push(node);this.body.nodes[id]=node;// note: this may replace an existing node
	}this.layoutEngine.positionInitially(newNodes);if(doNotEmit===false){this.body.emitter.emit("_dataChanged");}}/**
	       * Update existing nodes, or create them when not yet existing
	       * @param {Number[] | String[]} ids
	       * @private
	       */},{key:'update',value:function update(ids,changedData){var nodes=this.body.nodes;var dataChanged=false;for(var i=0;i<ids.length;i++){var id=ids[i];var node=nodes[id];var data=changedData[i];if(node!==undefined){// update node
	dataChanged=node.setOptions(data);}else{dataChanged=true;// create node
	node=this.create(data);nodes[id]=node;}}if(dataChanged===true){this.body.emitter.emit("_dataChanged");}else{this.body.emitter.emit("_dataUpdated");}}/**
	       * Remove existing nodes. If nodes do not exist, the method will just ignore it.
	       * @param {Number[] | String[]} ids
	       * @private
	       */},{key:'remove',value:function remove(ids){var nodes=this.body.nodes;for(var i=0;i<ids.length;i++){var id=ids[i];delete nodes[id];}this.body.emitter.emit("_dataChanged");}/**
	       * create a node
	       * @param properties
	       * @param constructorClass
	       */},{key:'create',value:function create(properties){var constructorClass=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_Node2.default;return new constructorClass(properties,this.body,this.images,this.groups,this.options);}},{key:'refresh',value:function refresh(){var clearPositions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var nodes=this.body.nodes;for(var nodeId in nodes){var node=undefined;if(nodes.hasOwnProperty(nodeId)){node=nodes[nodeId];}var data=this.body.data.nodes._data[nodeId];if(node!==undefined&&data!==undefined){if(clearPositions===true){node.setOptions({x:null,y:null});}node.setOptions({fixed:false});node.setOptions(data);}}}/**
	       * Returns the positions of the nodes.
	       * @param ids  --> optional, can be array of nodeIds, can be string
	       * @returns {{}}
	       */},{key:'getPositions',value:function getPositions(ids){var dataArray={};if(ids!==undefined){if(Array.isArray(ids)===true){for(var i=0;i<ids.length;i++){if(this.body.nodes[ids[i]]!==undefined){var node=this.body.nodes[ids[i]];dataArray[ids[i]]={x:Math.round(node.x),y:Math.round(node.y)};}}}else{if(this.body.nodes[ids]!==undefined){var _node=this.body.nodes[ids];dataArray[ids]={x:Math.round(_node.x),y:Math.round(_node.y)};}}}else{for(var _i=0;_i<this.body.nodeIndices.length;_i++){var _node2=this.body.nodes[this.body.nodeIndices[_i]];dataArray[this.body.nodeIndices[_i]]={x:Math.round(_node2.x),y:Math.round(_node2.y)};}}return dataArray;}/**
	       * Load the XY positions of the nodes into the dataset.
	       */},{key:'storePositions',value:function storePositions(){// todo: add support for clusters and hierarchical.
	var dataArray=[];var dataset=this.body.data.nodes.getDataSet();for(var nodeId in dataset._data){if(dataset._data.hasOwnProperty(nodeId)){var node=this.body.nodes[nodeId];if(dataset._data[nodeId].x!=Math.round(node.x)||dataset._data[nodeId].y!=Math.round(node.y)){dataArray.push({id:node.id,x:Math.round(node.x),y:Math.round(node.y)});}}}dataset.update(dataArray);}/**
	       * get the bounding box of a node.
	       * @param nodeId
	       * @returns {j|*}
	       */},{key:'getBoundingBox',value:function getBoundingBox(nodeId){if(this.body.nodes[nodeId]!==undefined){return this.body.nodes[nodeId].shape.boundingBox;}}/**
	       * Get the Ids of nodes connected to this node.
	       * @param nodeId
	       * @returns {Array}
	       */},{key:'getConnectedNodes',value:function getConnectedNodes(nodeId){var nodeList=[];if(this.body.nodes[nodeId]!==undefined){var node=this.body.nodes[nodeId];var nodeObj={};// used to quickly check if node already exists
	for(var i=0;i<node.edges.length;i++){var edge=node.edges[i];if(edge.toId==node.id){// these are double equals since ids can be numeric or string
	if(nodeObj[edge.fromId]===undefined){nodeList.push(edge.fromId);nodeObj[edge.fromId]=true;}}else if(edge.fromId==node.id){// these are double equals since ids can be numeric or string
	if(nodeObj[edge.toId]===undefined){nodeList.push(edge.toId);nodeObj[edge.toId]=true;}}}}return nodeList;}/**
	       * Get the ids of the edges connected to this node.
	       * @param nodeId
	       * @returns {*}
	       */},{key:'getConnectedEdges',value:function getConnectedEdges(nodeId){var edgeList=[];if(this.body.nodes[nodeId]!==undefined){var node=this.body.nodes[nodeId];for(var i=0;i<node.edges.length;i++){edgeList.push(node.edges[i].id);}}else{console.log("NodeId provided for getConnectedEdges does not exist. Provided: ",nodeId);}return edgeList;}/**
	       * Move a node.
	       * @param String nodeId
	       * @param Number x
	       * @param Number y
	       */},{key:'moveNode',value:function moveNode(nodeId,x,y){var _this4=this;if(this.body.nodes[nodeId]!==undefined){this.body.nodes[nodeId].x=Number(x);this.body.nodes[nodeId].y=Number(y);setTimeout(function(){_this4.body.emitter.emit("startSimulation");},0);}else{console.log("Node id supplied to moveNode does not exist. Provided: ",nodeId);}}}]);return NodesHandler;}();exports.default=NodesHandler;/***/},/* 67 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _Label=__webpack_require__(68);var _Label2=_interopRequireDefault(_Label);var _Box=__webpack_require__(69);var _Box2=_interopRequireDefault(_Box);var _Circle=__webpack_require__(71);var _Circle2=_interopRequireDefault(_Circle);var _CircularImage=__webpack_require__(73);var _CircularImage2=_interopRequireDefault(_CircularImage);var _Database=__webpack_require__(74);var _Database2=_interopRequireDefault(_Database);var _Diamond=__webpack_require__(75);var _Diamond2=_interopRequireDefault(_Diamond);var _Dot=__webpack_require__(77);var _Dot2=_interopRequireDefault(_Dot);var _Ellipse=__webpack_require__(78);var _Ellipse2=_interopRequireDefault(_Ellipse);var _Icon=__webpack_require__(79);var _Icon2=_interopRequireDefault(_Icon);var _Image=__webpack_require__(80);var _Image2=_interopRequireDefault(_Image);var _Square=__webpack_require__(81);var _Square2=_interopRequireDefault(_Square);var _Star=__webpack_require__(82);var _Star2=_interopRequireDefault(_Star);var _Text=__webpack_require__(83);var _Text2=_interopRequireDefault(_Text);var _Triangle=__webpack_require__(84);var _Triangle2=_interopRequireDefault(_Triangle);var _TriangleDown=__webpack_require__(85);var _TriangleDown2=_interopRequireDefault(_TriangleDown);var _Validator=__webpack_require__(31);var _Validator2=_interopRequireDefault(_Validator);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);/**
	   * @class Node
	   * A node. A node can be connected to other nodes via one or multiple edges.
	   * @param {object} options An object containing options for the node. All
	   *                            options are optional, except for the id.
	   *                              {number} id     Id of the node. Required
	   *                              {string} label  Text label for the node
	   *                              {number} x      Horizontal position of the node
	   *                              {number} y      Vertical position of the node
	   *                              {string} shape  Node shape, available:
	   *                                              "database", "circle", "ellipse",
	   *                                              "box", "image", "text", "dot",
	   *                                              "star", "triangle", "triangleDown",
	   *                                              "square", "icon"
	   *                              {string} image  An image url
	   *                              {string} title  An title text, can be HTML
	   *                              {anytype} group A group name or number
	   * @param {Network.Images} imagelist    A list with images. Only needed
	   *                                            when the node has an image
	   * @param {Network.Groups} grouplist    A list with groups. Needed for
	   *                                            retrieving group options
	   * @param {Object}               constants    An object with default values for
	   *                                            example for the color
	   *
	   */var Node=function(){function Node(options,body,imagelist,grouplist,globalOptions){_classCallCheck(this,Node);this.options=util.bridgeObject(globalOptions);this.globalOptions=globalOptions;this.body=body;this.edges=[];// all edges connected to this node
	// set defaults for the options
	this.id=undefined;this.imagelist=imagelist;this.grouplist=grouplist;// state options
	this.x=undefined;this.y=undefined;this.baseSize=this.options.size;this.baseFontSize=this.options.font.size;this.predefinedPosition=false;// used to check if initial fit should just take the range or approximate
	this.selected=false;this.hover=false;this.labelModule=new _Label2.default(this.body,this.options,false/* Not edge label */);this.setOptions(options);}/**
	     * Attach a edge to the node
	     * @param {Edge} edge
	     */_createClass(Node,[{key:'attachEdge',value:function attachEdge(edge){if(this.edges.indexOf(edge)===-1){this.edges.push(edge);}}/**
	       * Detach a edge from the node
	       * @param {Edge} edge
	       */},{key:'detachEdge',value:function detachEdge(edge){var index=this.edges.indexOf(edge);if(index!=-1){this.edges.splice(index,1);}}/**
	       * Set or overwrite options for the node
	       * @param {Object} options an object with options
	       * @param {Object} constants  and object with default, global options
	       */},{key:'setOptions',value:function setOptions(options){var currentShape=this.options.shape;if(!options){return;}// basic options
	if(options.id!==undefined){this.id=options.id;}if(this.id===undefined){throw"Node must have an id";}// set these options locally
	// clear x and y positions
	if(options.x!==undefined){if(options.x===null){this.x=undefined;this.predefinedPosition=false;}else{this.x=parseInt(options.x);this.predefinedPosition=true;}}if(options.y!==undefined){if(options.y===null){this.y=undefined;this.predefinedPosition=false;}else{this.y=parseInt(options.y);this.predefinedPosition=true;}}if(options.size!==undefined){this.baseSize=options.size;}if(options.value!==undefined){options.value=parseFloat(options.value);}// copy group options
	if(typeof options.group==='number'||typeof options.group==='string'&&options.group!=''){var groupObj=this.grouplist.get(options.group);util.deepExtend(this.options,groupObj);// the color object needs to be completely defined. Since groups can partially overwrite the colors, we parse it again, just in case.
	this.options.color=util.parseColor(this.options.color);}// this transforms all shorthands into fully defined options
	Node.parseOptions(this.options,options,true,this.globalOptions);// load the images
	if(this.options.image!==undefined){if(this.imagelist){this.imageObj=this.imagelist.load(this.options.image,this.options.brokenImage,this.id);}else{throw"No imagelist provided";}}this.updateLabelModule();this.updateShape(currentShape);if(options.hidden!==undefined||options.physics!==undefined){return true;}return false;}/**
	       * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.
	       * Static so it can also be used by the handler.
	       * @param parentOptions
	       * @param newOptions
	       * @param allowDeletion
	       * @param globalOptions
	       */},{key:'updateLabelModule',value:function updateLabelModule(){if(this.options.label===undefined||this.options.label===null){this.options.label='';}this.labelModule.setOptions(this.options,true);if(this.labelModule.baseSize!==undefined){this.baseFontSize=this.labelModule.baseSize;}}},{key:'updateShape',value:function updateShape(currentShape){if(currentShape===this.options.shape&&this.shape){this.shape.setOptions(this.options,this.imageObj);}else{// choose draw method depending on the shape
	switch(this.options.shape){case'box':this.shape=new _Box2.default(this.options,this.body,this.labelModule);break;case'circle':this.shape=new _Circle2.default(this.options,this.body,this.labelModule);break;case'circularImage':this.shape=new _CircularImage2.default(this.options,this.body,this.labelModule,this.imageObj);break;case'database':this.shape=new _Database2.default(this.options,this.body,this.labelModule);break;case'diamond':this.shape=new _Diamond2.default(this.options,this.body,this.labelModule);break;case'dot':this.shape=new _Dot2.default(this.options,this.body,this.labelModule);break;case'ellipse':this.shape=new _Ellipse2.default(this.options,this.body,this.labelModule);break;case'icon':this.shape=new _Icon2.default(this.options,this.body,this.labelModule);break;case'image':this.shape=new _Image2.default(this.options,this.body,this.labelModule,this.imageObj);break;case'square':this.shape=new _Square2.default(this.options,this.body,this.labelModule);break;case'star':this.shape=new _Star2.default(this.options,this.body,this.labelModule);break;case'text':this.shape=new _Text2.default(this.options,this.body,this.labelModule);break;case'triangle':this.shape=new _Triangle2.default(this.options,this.body,this.labelModule);break;case'triangleDown':this.shape=new _TriangleDown2.default(this.options,this.body,this.labelModule);break;default:this.shape=new _Ellipse2.default(this.options,this.body,this.labelModule);break;}}this._reset();}/**
	       * select this node
	       */},{key:'select',value:function select(){this.selected=true;this._reset();}/**
	       * unselect this node
	       */},{key:'unselect',value:function unselect(){this.selected=false;this._reset();}/**
	       * Reset the calculated size of the node, forces it to recalculate its size
	       * @private
	       */},{key:'_reset',value:function _reset(){this.shape.width=undefined;this.shape.height=undefined;}/**
	       * get the title of this node.
	       * @return {string} title    The title of the node, or undefined when no title
	       *                           has been set.
	       */},{key:'getTitle',value:function getTitle(){return this.options.title;}/**
	       * Calculate the distance to the border of the Node
	       * @param {CanvasRenderingContext2D}   ctx
	       * @param {Number} angle        Angle in radians
	       * @returns {number} distance   Distance to the border in pixels
	       */},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this.shape.distanceToBorder(ctx,angle);}/**
	       * Check if this node has a fixed x and y position
	       * @return {boolean}      true if fixed, false if not
	       */},{key:'isFixed',value:function isFixed(){return this.options.fixed.x&&this.options.fixed.y;}/**
	       * check if this node is selecte
	       * @return {boolean} selected   True if node is selected, else false
	       */},{key:'isSelected',value:function isSelected(){return this.selected;}/**
	       * Retrieve the value of the node. Can be undefined
	       * @return {Number} value
	       */},{key:'getValue',value:function getValue(){return this.options.value;}/**
	       * Adjust the value range of the node. The node will adjust it's size
	       * based on its value.
	       * @param {Number} min
	       * @param {Number} max
	       */},{key:'setValueRange',value:function setValueRange(min,max,total){if(this.options.value!==undefined){var scale=this.options.scaling.customScalingFunction(min,max,total,this.options.value);var sizeDiff=this.options.scaling.max-this.options.scaling.min;if(this.options.scaling.label.enabled===true){var fontDiff=this.options.scaling.label.max-this.options.scaling.label.min;this.options.font.size=this.options.scaling.label.min+scale*fontDiff;}this.options.size=this.options.scaling.min+scale*sizeDiff;}else{this.options.size=this.baseSize;this.options.font.size=this.baseFontSize;}this.updateLabelModule();}/**
	       * Draw this node in the given canvas
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	       * @param {CanvasRenderingContext2D}   ctx
	       */},{key:'draw',value:function draw(ctx){this.shape.draw(ctx,this.x,this.y,this.selected,this.hover);}/**
	       * Update the bounding box of the shape
	       */},{key:'updateBoundingBox',value:function updateBoundingBox(ctx){this.shape.updateBoundingBox(this.x,this.y,ctx);}/**
	       * Recalculate the size of this node in the given canvas
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	       * @param {CanvasRenderingContext2D}   ctx
	       */},{key:'resize',value:function resize(ctx){this.shape.resize(ctx,this.selected);}/**
	       * Check if this object is overlapping with the provided object
	       * @param {Object} obj   an object with parameters left, top, right, bottom
	       * @return {boolean}     True if location is located on node
	       */},{key:'isOverlappingWith',value:function isOverlappingWith(obj){return this.shape.left<obj.right&&this.shape.left+this.shape.width>obj.left&&this.shape.top<obj.bottom&&this.shape.top+this.shape.height>obj.top;}/**
	       * Check if this object is overlapping with the provided object
	       * @param {Object} obj   an object with parameters left, top, right, bottom
	       * @return {boolean}     True if location is located on node
	       */},{key:'isBoundingBoxOverlappingWith',value:function isBoundingBoxOverlappingWith(obj){return this.shape.boundingBox.left<obj.right&&this.shape.boundingBox.right>obj.left&&this.shape.boundingBox.top<obj.bottom&&this.shape.boundingBox.bottom>obj.top;}}],[{key:'parseOptions',value:function parseOptions(parentOptions,newOptions){var allowDeletion=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var globalOptions=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var fields=['color','font','fixed','shadow'];util.selectiveNotDeepExtend(fields,parentOptions,newOptions,allowDeletion);// merge the shadow options into the parent.
	util.mergeOptions(parentOptions,newOptions,'shadow',allowDeletion,globalOptions);// individual shape newOptions
	if(newOptions.color!==undefined&&newOptions.color!==null){var parsedColor=util.parseColor(newOptions.color);util.fillIfDefined(parentOptions.color,parsedColor);}else if(allowDeletion===true&&newOptions.color===null){parentOptions.color=util.bridgeObject(globalOptions.color);// set the object back to the global options
	}// handle the fixed options
	if(newOptions.fixed!==undefined&&newOptions.fixed!==null){if(typeof newOptions.fixed==='boolean'){parentOptions.fixed.x=newOptions.fixed;parentOptions.fixed.y=newOptions.fixed;}else{if(newOptions.fixed.x!==undefined&&typeof newOptions.fixed.x==='boolean'){parentOptions.fixed.x=newOptions.fixed.x;}if(newOptions.fixed.y!==undefined&&typeof newOptions.fixed.y==='boolean'){parentOptions.fixed.y=newOptions.fixed.y;}}}// handle the font options
	if(newOptions.font!==undefined&&newOptions.font!==null){_Label2.default.parseOptions(parentOptions.font,newOptions);}else if(allowDeletion===true&&newOptions.font===null){parentOptions.font=util.bridgeObject(globalOptions.font);// set the object back to the global options
	}// handle the scaling options, specifically the label part
	if(newOptions.scaling!==undefined){util.mergeOptions(parentOptions.scaling,newOptions.scaling,'label',allowDeletion,globalOptions.scaling);}}}]);return Node;}();exports.default=Node;/***/},/* 68 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var Label=function(){function Label(body,options){var edgelabel=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;_classCallCheck(this,Label);this.body=body;this.pointToSelf=false;this.baseSize=undefined;this.fontOptions={};this.setOptions(options);this.size={top:0,left:0,width:0,height:0,yLine:0};// could be cached
	this.isEdgeLabel=edgelabel;}_createClass(Label,[{key:'setOptions',value:function setOptions(options){var allowDeletion=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.nodeOptions=options;// We want to keep the font options seperated from the node options.
	// The node options have to mirror the globals when they are not overruled.
	this.fontOptions=util.deepExtend({},options.font,true);if(options.label!==undefined){this.labelDirty=true;}if(options.font!==undefined){Label.parseOptions(this.fontOptions,options,allowDeletion);if(typeof options.font==='string'){this.baseSize=this.fontOptions.size;}else if(_typeof(options.font)==='object'){if(options.font.size!==undefined){this.baseSize=options.font.size;}}}}},{key:'draw',/**
	       * Main function. This is called from anything that wants to draw a label.
	       * @param ctx
	       * @param x
	       * @param y
	       * @param selected
	       * @param baseline
	       */value:function draw(ctx,x,y,selected){var baseline=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'middle';// if no label, return
	if(this.nodeOptions.label===undefined)return;// check if we have to render the label
	var viewFontSize=this.fontOptions.size*this.body.view.scale;if(this.nodeOptions.label&&viewFontSize<this.nodeOptions.scaling.label.drawThreshold-1)return;// update the size cache if required
	this.calculateLabelSize(ctx,selected,x,y,baseline);// create the fontfill background
	this._drawBackground(ctx);// draw text
	this._drawText(ctx,selected,x,y,baseline);}/**
	       * Draws the label background
	       * @param {CanvasRenderingContext2D} ctx
	       * @private
	       */},{key:'_drawBackground',value:function _drawBackground(ctx){if(this.fontOptions.background!==undefined&&this.fontOptions.background!=="none"){ctx.fillStyle=this.fontOptions.background;var lineMargin=2;if(this.isEdgeLabel){switch(this.fontOptions.align){case'middle':ctx.fillRect(-this.size.width*0.5,-this.size.height*0.5,this.size.width,this.size.height);break;case'top':ctx.fillRect(-this.size.width*0.5,-(this.size.height+lineMargin),this.size.width,this.size.height);break;case'bottom':ctx.fillRect(-this.size.width*0.5,lineMargin,this.size.width,this.size.height);break;default:ctx.fillRect(this.size.left,this.size.top-0.5*lineMargin,this.size.width,this.size.height);break;}}else{ctx.fillRect(this.size.left,this.size.top-0.5*lineMargin,this.size.width,this.size.height);}}}/**
	       *
	       * @param ctx
	       * @param x
	       * @param baseline
	       * @private
	       */},{key:'_drawText',value:function _drawText(ctx,selected,x,y){var baseline=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'middle';var fontSize=this.fontOptions.size;var viewFontSize=fontSize*this.body.view.scale;// this ensures that there will not be HUGE letters on screen by setting an upper limit on the visible text size (regardless of zoomLevel)
	if(viewFontSize>=this.nodeOptions.scaling.label.maxVisible){fontSize=Number(this.nodeOptions.scaling.label.maxVisible)/this.body.view.scale;}var yLine=this.size.yLine;var _getColor2=this._getColor(viewFontSize),_getColor3=_slicedToArray(_getColor2,2),fontColor=_getColor3[0],strokeColor=_getColor3[1];// configure context for drawing the text
	var _setAlignment2=this._setAlignment(ctx,x,yLine,baseline);var _setAlignment3=_slicedToArray(_setAlignment2,2);x=_setAlignment3[0];yLine=_setAlignment3[1];ctx.font=(selected&&this.nodeOptions.labelHighlightBold?'bold ':'')+fontSize+"px "+this.fontOptions.face;ctx.fillStyle=fontColor;// When the textAlign property is 'left', make label left-justified
	if(!this.isEdgeLabel&&this.fontOptions.align==='left'){ctx.textAlign=this.fontOptions.align;x=x-0.5*this.size.width;// Shift label 1/2-distance to the left
	}else{ctx.textAlign='center';}// set the strokeWidth
	if(this.fontOptions.strokeWidth>0){ctx.lineWidth=this.fontOptions.strokeWidth;ctx.strokeStyle=strokeColor;ctx.lineJoin='round';}// draw the text
	for(var i=0;i<this.lineCount;i++){if(this.fontOptions.strokeWidth>0){ctx.strokeText(this.lines[i],x,yLine);}ctx.fillText(this.lines[i],x,yLine);yLine+=fontSize;}}},{key:'_setAlignment',value:function _setAlignment(ctx,x,yLine,baseline){// check for label alignment (for edges)
	// TODO: make alignment for nodes
	if(this.isEdgeLabel&&this.fontOptions.align!=='horizontal'&&this.pointToSelf===false){x=0;yLine=0;var lineMargin=2;if(this.fontOptions.align==='top'){ctx.textBaseline='alphabetic';yLine-=2*lineMargin;// distance from edge, required because we use alphabetic. Alphabetic has less difference between browsers
	}else if(this.fontOptions.align==='bottom'){ctx.textBaseline='hanging';yLine+=2*lineMargin;// distance from edge, required because we use hanging. Hanging has less difference between browsers
	}else{ctx.textBaseline='middle';}}else{ctx.textBaseline=baseline;}return[x,yLine];}/**
	       * fade in when relative scale is between threshold and threshold - 1.
	       * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.
	       *
	       * @param viewFontSize
	       * @returns {*[]}
	       * @private
	       */},{key:'_getColor',value:function _getColor(viewFontSize){var fontColor=this.fontOptions.color||'#000000';var strokeColor=this.fontOptions.strokeColor||'#ffffff';if(viewFontSize<=this.nodeOptions.scaling.label.drawThreshold){var opacity=Math.max(0,Math.min(1,1-(this.nodeOptions.scaling.label.drawThreshold-viewFontSize)));fontColor=util.overrideOpacity(fontColor,opacity);strokeColor=util.overrideOpacity(strokeColor,opacity);}return[fontColor,strokeColor];}/**
	       *
	       * @param ctx
	       * @param selected
	       * @returns {{width: number, height: number}}
	       */},{key:'getTextSize',value:function getTextSize(ctx){var selected=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var size={width:this._processLabel(ctx,selected),height:this.fontOptions.size*this.lineCount,lineCount:this.lineCount};return size;}/**
	       *
	       * @param ctx
	       * @param selected
	       * @param x
	       * @param y
	       * @param baseline
	       */},{key:'calculateLabelSize',value:function calculateLabelSize(ctx,selected){var x=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var y=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var baseline=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'middle';if(this.labelDirty===true){this.size.width=this._processLabel(ctx,selected);}this.size.height=this.fontOptions.size*this.lineCount;this.size.left=x-this.size.width*0.5;this.size.top=y-this.size.height*0.5;this.size.yLine=y+(1-this.lineCount)*0.5*this.fontOptions.size;if(baseline==="hanging"){this.size.top+=0.5*this.fontOptions.size;this.size.top+=4;// distance from node, required because we use hanging. Hanging has less difference between browsers
	this.size.yLine+=4;// distance from node
	}this.labelDirty=false;}/**
	       * This calculates the width as well as explodes the label string and calculates the amount of lines.
	       * @param ctx
	       * @param selected
	       * @returns {number}
	       * @private
	       */},{key:'_processLabel',value:function _processLabel(ctx,selected){var width=0;var lines=[''];var lineCount=0;if(this.nodeOptions.label!==undefined){lines=String(this.nodeOptions.label).split('\n');lineCount=lines.length;ctx.font=(selected&&this.nodeOptions.labelHighlightBold?'bold ':'')+this.fontOptions.size+"px "+this.fontOptions.face;width=ctx.measureText(lines[0]).width;for(var i=1;i<lineCount;i++){var lineWidth=ctx.measureText(lines[i]).width;width=lineWidth>width?lineWidth:width;}}this.lines=lines;this.lineCount=lineCount;return width;}}],[{key:'parseOptions',value:function parseOptions(parentOptions,newOptions){var allowDeletion=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(typeof newOptions.font==='string'){var newOptionsArray=newOptions.font.split(" ");parentOptions.size=newOptionsArray[0].replace("px",'');parentOptions.face=newOptionsArray[1];parentOptions.color=newOptionsArray[2];}else if(_typeof(newOptions.font)==='object'){util.fillIfDefined(parentOptions,newOptions.font,allowDeletion);}parentOptions.size=Number(parentOptions.size);}}]);return Label;}();exports.default=Label;/***/},/* 69 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NodeBase2=__webpack_require__(70);var _NodeBase3=_interopRequireDefault(_NodeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Box=function(_NodeBase){_inherits(Box,_NodeBase);function Box(options,body,labelModule){_classCallCheck(this,Box);return _possibleConstructorReturn(this,(Box.__proto__||Object.getPrototypeOf(Box)).call(this,options,body,labelModule));}_createClass(Box,[{key:'resize',value:function resize(ctx,selected){if(this.width===undefined){var margin=5;var textSize=this.labelModule.getTextSize(ctx,selected);this.width=textSize.width+2*margin;this.height=textSize.height+2*margin;this.radius=0.5*this.width;}}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this.resize(ctx,selected);this.left=x-this.width/2;this.top=y-this.height/2;var borderWidth=this.options.borderWidth;var selectionLineWidth=this.options.borderWidthSelected||2*this.options.borderWidth;ctx.strokeStyle=selected?this.options.color.highlight.border:hover?this.options.color.hover.border:this.options.color.border;ctx.lineWidth=selected?selectionLineWidth:borderWidth;ctx.lineWidth/=this.body.view.scale;ctx.lineWidth=Math.min(this.width,ctx.lineWidth);ctx.fillStyle=selected?this.options.color.highlight.background:hover?this.options.color.hover.background:this.options.color.background;var borderRadius=this.options.shapeProperties.borderRadius;// only effective for box
	ctx.roundRect(this.left,this.top,this.width,this.height,borderRadius);// draw shadow if enabled
	this.enableShadow(ctx);// draw the background
	ctx.fill();// disable shadows for other elements.
	this.disableShadow(ctx);//draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	ctx.save();// if borders are zero width, they will be drawn with width 1 by default. This prevents that
	if(borderWidth>0){this.enableBorderDashes(ctx);//draw the border
	ctx.stroke();//disable dashed border for other elements
	this.disableBorderDashes(ctx);}ctx.restore();this.updateBoundingBox(x,y,ctx,selected);this.labelModule.draw(ctx,x,y,selected);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y,ctx,selected){this.resize(ctx,selected);this.left=x-this.width*0.5;this.top=y-this.height*0.5;var borderRadius=this.options.shapeProperties.borderRadius;// only effective for box
	this.boundingBox.left=this.left-borderRadius;this.boundingBox.top=this.top-borderRadius;this.boundingBox.bottom=this.top+this.height+borderRadius;this.boundingBox.right=this.left+this.width+borderRadius;}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){this.resize(ctx);var borderWidth=this.options.borderWidth;return Math.min(Math.abs(this.width/2/Math.cos(angle)),Math.abs(this.height/2/Math.sin(angle)))+borderWidth;}}]);return Box;}(_NodeBase3.default);exports.default=Box;/***/},/* 70 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var NodeBase=function(){function NodeBase(options,body,labelModule){_classCallCheck(this,NodeBase);this.body=body;this.labelModule=labelModule;this.setOptions(options);this.top=undefined;this.left=undefined;this.height=undefined;this.width=undefined;this.radius=undefined;this.boundingBox={top:0,left:0,right:0,bottom:0};}_createClass(NodeBase,[{key:"setOptions",value:function setOptions(options){this.options=options;}},{key:"_distanceToBorder",value:function _distanceToBorder(ctx,angle){var borderWidth=this.options.borderWidth;this.resize(ctx);return Math.min(Math.abs(this.width/2/Math.cos(angle)),Math.abs(this.height/2/Math.sin(angle)))+borderWidth;}},{key:"enableShadow",value:function enableShadow(ctx){if(this.options.shadow.enabled===true){ctx.shadowColor=this.options.shadow.color;ctx.shadowBlur=this.options.shadow.size;ctx.shadowOffsetX=this.options.shadow.x;ctx.shadowOffsetY=this.options.shadow.y;}}},{key:"disableShadow",value:function disableShadow(ctx){if(this.options.shadow.enabled===true){ctx.shadowColor='rgba(0,0,0,0)';ctx.shadowBlur=0;ctx.shadowOffsetX=0;ctx.shadowOffsetY=0;}}},{key:"enableBorderDashes",value:function enableBorderDashes(ctx){if(this.options.shapeProperties.borderDashes!==false){if(ctx.setLineDash!==undefined){var dashes=this.options.shapeProperties.borderDashes;if(dashes===true){dashes=[5,15];}ctx.setLineDash(dashes);}else{console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");this.options.shapeProperties.borderDashes=false;}}}},{key:"disableBorderDashes",value:function disableBorderDashes(ctx){if(this.options.shapeProperties.borderDashes!==false){if(ctx.setLineDash!==undefined){ctx.setLineDash([0]);}else{console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");this.options.shapeProperties.borderDashes=false;}}}}]);return NodeBase;}();exports.default=NodeBase;/***/},/* 71 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _CircleImageBase2=__webpack_require__(72);var _CircleImageBase3=_interopRequireDefault(_CircleImageBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Circle=function(_CircleImageBase){_inherits(Circle,_CircleImageBase);function Circle(options,body,labelModule){_classCallCheck(this,Circle);return _possibleConstructorReturn(this,(Circle.__proto__||Object.getPrototypeOf(Circle)).call(this,options,body,labelModule));}_createClass(Circle,[{key:'resize',value:function resize(ctx,selected){if(this.width===undefined){var margin=5;var textSize=this.labelModule.getTextSize(ctx,selected);var diameter=Math.max(textSize.width,textSize.height)+2*margin;this.options.size=diameter/2;this.width=diameter;this.height=diameter;this.radius=0.5*this.width;}}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this.resize(ctx,selected);this.left=x-this.width/2;this.top=y-this.height/2;this._drawRawCircle(ctx,x,y,selected,hover,this.options.size);this.boundingBox.top=y-this.options.size;this.boundingBox.left=x-this.options.size;this.boundingBox.right=x+this.options.size;this.boundingBox.bottom=y+this.options.size;this.updateBoundingBox(x,y);this.labelModule.draw(ctx,x,y,selected);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y){this.boundingBox.top=y-this.options.size;this.boundingBox.left=x-this.options.size;this.boundingBox.right=x+this.options.size;this.boundingBox.bottom=y+this.options.size;}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){this.resize(ctx);return this.width*0.5;}}]);return Circle;}(_CircleImageBase3.default);exports.default=Circle;/***/},/* 72 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NodeBase2=__webpack_require__(70);var _NodeBase3=_interopRequireDefault(_NodeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var CircleImageBase=function(_NodeBase){_inherits(CircleImageBase,_NodeBase);function CircleImageBase(options,body,labelModule){_classCallCheck(this,CircleImageBase);var _this=_possibleConstructorReturn(this,(CircleImageBase.__proto__||Object.getPrototypeOf(CircleImageBase)).call(this,options,body,labelModule));_this.labelOffset=0;_this.imageLoaded=false;return _this;}_createClass(CircleImageBase,[{key:'setOptions',value:function setOptions(options,imageObj){this.options=options;if(imageObj){this.imageObj=imageObj;}}/**
	       * This function resizes the image by the options size when the image has not yet loaded. If the image has loaded, we
	       * force the update of the size again.
	       *
	       * @private
	       */},{key:'_resizeImage',value:function _resizeImage(){var force=false;if(!this.imageObj.width||!this.imageObj.height){// undefined or 0
	this.imageLoaded=false;}else if(this.imageLoaded===false){this.imageLoaded=true;force=true;}if(!this.width||!this.height||force===true){// undefined or 0
	var width,height,ratio;if(this.imageObj.width&&this.imageObj.height){// not undefined or 0
	width=0;height=0;}if(this.options.shapeProperties.useImageSize===false){if(this.imageObj.width>this.imageObj.height){ratio=this.imageObj.width/this.imageObj.height;width=this.options.size*2*ratio||this.imageObj.width;height=this.options.size*2||this.imageObj.height;}else{if(this.imageObj.width&&this.imageObj.height){// not undefined or 0
	ratio=this.imageObj.height/this.imageObj.width;}else{ratio=1;}width=this.options.size*2;height=this.options.size*2*ratio;}}else{// when not using the size property, we use the image size
	width=this.imageObj.width;height=this.imageObj.height;}this.width=width;this.height=height;this.radius=0.5*this.width;}}},{key:'_drawRawCircle',value:function _drawRawCircle(ctx,x,y,selected,hover,size){var neutralborderWidth=this.options.borderWidth;var selectionLineWidth=this.options.borderWidthSelected||2*this.options.borderWidth;var borderWidth=(selected?selectionLineWidth:neutralborderWidth)/this.body.view.scale;ctx.lineWidth=Math.min(this.width,borderWidth);ctx.strokeStyle=selected?this.options.color.highlight.border:hover?this.options.color.hover.border:this.options.color.border;ctx.fillStyle=selected?this.options.color.highlight.background:hover?this.options.color.hover.background:this.options.color.background;ctx.circle(x,y,size);// draw shadow if enabled
	this.enableShadow(ctx);// draw the background
	ctx.fill();// disable shadows for other elements.
	this.disableShadow(ctx);//draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	ctx.save();// if borders are zero width, they will be drawn with width 1 by default. This prevents that
	if(borderWidth>0){this.enableBorderDashes(ctx);//draw the border
	ctx.stroke();//disable dashed border for other elements
	this.disableBorderDashes(ctx);}ctx.restore();}},{key:'_drawImageAtPosition',value:function _drawImageAtPosition(ctx){if(this.imageObj.width!=0){// draw the image
	ctx.globalAlpha=1.0;// draw shadow if enabled
	this.enableShadow(ctx);var factor=this.imageObj.width/this.width/this.body.view.scale;if(factor>2&&this.options.shapeProperties.interpolation===true){var w=this.imageObj.width;var h=this.imageObj.height;var can2=document.createElement('canvas');can2.width=w;can2.height=w;var ctx2=can2.getContext('2d');factor*=0.5;w*=0.5;h*=0.5;ctx2.drawImage(this.imageObj,0,0,w,h);var distance=0;var iterations=1;while(factor>2&&iterations<4){ctx2.drawImage(can2,distance,0,w,h,distance+w,0,w/2,h/2);distance+=w;factor*=0.5;w*=0.5;h*=0.5;iterations+=1;}ctx.drawImage(can2,distance,0,w,h,this.left,this.top,this.width,this.height);}else{// draw image
	ctx.drawImage(this.imageObj,this.left,this.top,this.width,this.height);}// disable shadows for other elements.
	this.disableShadow(ctx);}}},{key:'_drawImageLabel',value:function _drawImageLabel(ctx,x,y,selected){var yLabel;var offset=0;if(this.height!==undefined){offset=this.height*0.5;var labelDimensions=this.labelModule.getTextSize(ctx);if(labelDimensions.lineCount>=1){offset+=labelDimensions.height/2;}}yLabel=y+offset;if(this.options.label){this.labelOffset=offset;}this.labelModule.draw(ctx,x,yLabel,selected,'hanging');}}]);return CircleImageBase;}(_NodeBase3.default);exports.default=CircleImageBase;/***/},/* 73 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _CircleImageBase2=__webpack_require__(72);var _CircleImageBase3=_interopRequireDefault(_CircleImageBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var CircularImage=function(_CircleImageBase){_inherits(CircularImage,_CircleImageBase);function CircularImage(options,body,labelModule,imageObj){_classCallCheck(this,CircularImage);var _this=_possibleConstructorReturn(this,(CircularImage.__proto__||Object.getPrototypeOf(CircularImage)).call(this,options,body,labelModule));_this.imageObj=imageObj;_this._swapToImageResizeWhenImageLoaded=true;return _this;}_createClass(CircularImage,[{key:'resize',value:function resize(){if(this.imageObj.src===undefined||this.imageObj.width===undefined||this.imageObj.height===undefined){if(!this.width){var diameter=this.options.size*2;this.width=diameter;this.height=diameter;this._swapToImageResizeWhenImageLoaded=true;this.radius=0.5*this.width;}}else{if(this._swapToImageResizeWhenImageLoaded){this.width=undefined;this.height=undefined;this._swapToImageResizeWhenImageLoaded=false;}this._resizeImage();}}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this.resize();this.left=x-this.width/2;this.top=y-this.height/2;var size=Math.min(0.5*this.height,0.5*this.width);// draw the background circle. IMPORTANT: the stroke in this method is used by the clip method below.
	this._drawRawCircle(ctx,x,y,selected,hover,size);// now we draw in the circle, we save so we can revert the clip operation after drawing.
	ctx.save();// clip is used to use the stroke in drawRawCircle as an area that we can draw in.
	ctx.clip();// draw the image
	this._drawImageAtPosition(ctx);// restore so we can again draw on the full canvas
	ctx.restore();this._drawImageLabel(ctx,x,y,selected);this.updateBoundingBox(x,y);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y){this.boundingBox.top=y-this.options.size;this.boundingBox.left=x-this.options.size;this.boundingBox.right=x+this.options.size;this.boundingBox.bottom=y+this.options.size;this.boundingBox.left=Math.min(this.boundingBox.left,this.labelModule.size.left);this.boundingBox.right=Math.max(this.boundingBox.right,this.labelModule.size.left+this.labelModule.size.width);this.boundingBox.bottom=Math.max(this.boundingBox.bottom,this.boundingBox.bottom+this.labelOffset);}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){this.resize(ctx);return this.width*0.5;}}]);return CircularImage;}(_CircleImageBase3.default);exports.default=CircularImage;/***/},/* 74 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NodeBase2=__webpack_require__(70);var _NodeBase3=_interopRequireDefault(_NodeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Database=function(_NodeBase){_inherits(Database,_NodeBase);function Database(options,body,labelModule){_classCallCheck(this,Database);return _possibleConstructorReturn(this,(Database.__proto__||Object.getPrototypeOf(Database)).call(this,options,body,labelModule));}_createClass(Database,[{key:'resize',value:function resize(ctx,selected){if(this.width===undefined){var margin=5;var textSize=this.labelModule.getTextSize(ctx,selected);var size=textSize.width+2*margin;this.width=size;this.height=size;this.radius=0.5*this.width;}}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this.resize(ctx,selected);this.left=x-this.width/2;this.top=y-this.height/2;var neutralborderWidth=this.options.borderWidth;var selectionLineWidth=this.options.borderWidthSelected||2*this.options.borderWidth;var borderWidth=(selected?selectionLineWidth:neutralborderWidth)/this.body.view.scale;ctx.lineWidth=Math.min(this.width,borderWidth);ctx.strokeStyle=selected?this.options.color.highlight.border:hover?this.options.color.hover.border:this.options.color.border;ctx.fillStyle=selected?this.options.color.highlight.background:hover?this.options.color.hover.background:this.options.color.background;ctx.database(x-this.width/2,y-this.height*0.5,this.width,this.height);// draw shadow if enabled
	this.enableShadow(ctx);// draw the background
	ctx.fill();// disable shadows for other elements.
	this.disableShadow(ctx);//draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	ctx.save();// if borders are zero width, they will be drawn with width 1 by default. This prevents that
	if(borderWidth>0){this.enableBorderDashes(ctx);//draw the border
	ctx.stroke();//disable dashed border for other elements
	this.disableBorderDashes(ctx);}ctx.restore();this.updateBoundingBox(x,y,ctx,selected);this.labelModule.draw(ctx,x,y,selected);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y,ctx,selected){this.resize(ctx,selected);this.left=x-this.width*0.5;this.top=y-this.height*0.5;this.boundingBox.left=this.left;this.boundingBox.top=this.top;this.boundingBox.bottom=this.top+this.height;this.boundingBox.right=this.left+this.width;}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return Database;}(_NodeBase3.default);exports.default=Database;/***/},/* 75 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _ShapeBase2=__webpack_require__(76);var _ShapeBase3=_interopRequireDefault(_ShapeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Diamond=function(_ShapeBase){_inherits(Diamond,_ShapeBase);function Diamond(options,body,labelModule){_classCallCheck(this,Diamond);return _possibleConstructorReturn(this,(Diamond.__proto__||Object.getPrototypeOf(Diamond)).call(this,options,body,labelModule));}_createClass(Diamond,[{key:'resize',value:function resize(ctx){this._resizeShape();}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this._drawShape(ctx,'diamond',4,x,y,selected,hover);}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return Diamond;}(_ShapeBase3.default);exports.default=Diamond;/***/},/* 76 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NodeBase2=__webpack_require__(70);var _NodeBase3=_interopRequireDefault(_NodeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var ShapeBase=function(_NodeBase){_inherits(ShapeBase,_NodeBase);function ShapeBase(options,body,labelModule){_classCallCheck(this,ShapeBase);return _possibleConstructorReturn(this,(ShapeBase.__proto__||Object.getPrototypeOf(ShapeBase)).call(this,options,body,labelModule));}_createClass(ShapeBase,[{key:'_resizeShape',value:function _resizeShape(){if(this.width===undefined){var size=2*this.options.size;this.width=size;this.height=size;this.radius=0.5*this.width;}}},{key:'_drawShape',value:function _drawShape(ctx,shape,sizeMultiplier,x,y,selected,hover){this._resizeShape();this.left=x-this.width/2;this.top=y-this.height/2;var neutralborderWidth=this.options.borderWidth;var selectionLineWidth=this.options.borderWidthSelected||2*this.options.borderWidth;var borderWidth=(selected?selectionLineWidth:neutralborderWidth)/this.body.view.scale;ctx.lineWidth=Math.min(this.width,borderWidth);ctx.strokeStyle=selected?this.options.color.highlight.border:hover?this.options.color.hover.border:this.options.color.border;ctx.fillStyle=selected?this.options.color.highlight.background:hover?this.options.color.hover.background:this.options.color.background;ctx[shape](x,y,this.options.size);// draw shadow if enabled
	this.enableShadow(ctx);// draw the background
	ctx.fill();// disable shadows for other elements.
	this.disableShadow(ctx);//draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	ctx.save();// if borders are zero width, they will be drawn with width 1 by default. This prevents that
	if(borderWidth>0){this.enableBorderDashes(ctx);//draw the border
	ctx.stroke();//disable dashed border for other elements
	this.disableBorderDashes(ctx);}ctx.restore();if(this.options.label!==undefined){var yLabel=y+0.5*this.height+3;// the + 3 is to offset it a bit below the node.
	this.labelModule.draw(ctx,x,yLabel,selected,'hanging');}this.updateBoundingBox(x,y);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y){this.boundingBox.top=y-this.options.size;this.boundingBox.left=x-this.options.size;this.boundingBox.right=x+this.options.size;this.boundingBox.bottom=y+this.options.size;if(this.options.label!==undefined&&this.labelModule.size.width>0){this.boundingBox.left=Math.min(this.boundingBox.left,this.labelModule.size.left);this.boundingBox.right=Math.max(this.boundingBox.right,this.labelModule.size.left+this.labelModule.size.width);this.boundingBox.bottom=Math.max(this.boundingBox.bottom,this.boundingBox.bottom+this.labelModule.size.height+3);}}}]);return ShapeBase;}(_NodeBase3.default);exports.default=ShapeBase;/***/},/* 77 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _ShapeBase2=__webpack_require__(76);var _ShapeBase3=_interopRequireDefault(_ShapeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Dot=function(_ShapeBase){_inherits(Dot,_ShapeBase);function Dot(options,body,labelModule){_classCallCheck(this,Dot);return _possibleConstructorReturn(this,(Dot.__proto__||Object.getPrototypeOf(Dot)).call(this,options,body,labelModule));}_createClass(Dot,[{key:'resize',value:function resize(ctx){this._resizeShape();}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this._drawShape(ctx,'circle',2,x,y,selected,hover);}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){this.resize(ctx);return this.options.size;}}]);return Dot;}(_ShapeBase3.default);exports.default=Dot;/***/},/* 78 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NodeBase2=__webpack_require__(70);var _NodeBase3=_interopRequireDefault(_NodeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Ellipse=function(_NodeBase){_inherits(Ellipse,_NodeBase);function Ellipse(options,body,labelModule){_classCallCheck(this,Ellipse);return _possibleConstructorReturn(this,(Ellipse.__proto__||Object.getPrototypeOf(Ellipse)).call(this,options,body,labelModule));}_createClass(Ellipse,[{key:'resize',value:function resize(ctx,selected){if(this.width===undefined){var textSize=this.labelModule.getTextSize(ctx,selected);this.height=textSize.height*2;this.width=textSize.width+this.height;this.radius=0.5*this.width;}}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this.resize(ctx,selected);this.left=x-this.width*0.5;this.top=y-this.height*0.5;var neutralborderWidth=this.options.borderWidth;var selectionLineWidth=this.options.borderWidthSelected||2*this.options.borderWidth;var borderWidth=(selected?selectionLineWidth:neutralborderWidth)/this.body.view.scale;ctx.lineWidth=Math.min(this.width,borderWidth);ctx.strokeStyle=selected?this.options.color.highlight.border:hover?this.options.color.hover.border:this.options.color.border;ctx.fillStyle=selected?this.options.color.highlight.background:hover?this.options.color.hover.background:this.options.color.background;ctx.ellipse(this.left,this.top,this.width,this.height);// draw shadow if enabled
	this.enableShadow(ctx);// draw the background
	ctx.fill();// disable shadows for other elements.
	this.disableShadow(ctx);//draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	ctx.save();// if borders are zero width, they will be drawn with width 1 by default. This prevents that
	if(borderWidth>0){this.enableBorderDashes(ctx);//draw the border
	ctx.stroke();//disable dashed border for other elements
	this.disableBorderDashes(ctx);}ctx.restore();this.updateBoundingBox(x,y,ctx,selected);this.labelModule.draw(ctx,x,y,selected);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y,ctx,selected){this.resize(ctx,selected);// just in case
	this.left=x-this.width*0.5;this.top=y-this.height*0.5;this.boundingBox.left=this.left;this.boundingBox.top=this.top;this.boundingBox.bottom=this.top+this.height;this.boundingBox.right=this.left+this.width;}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){this.resize(ctx);var a=this.width*0.5;var b=this.height*0.5;var w=Math.sin(angle)*a;var h=Math.cos(angle)*b;return a*b/Math.sqrt(w*w+h*h);}}]);return Ellipse;}(_NodeBase3.default);exports.default=Ellipse;/***/},/* 79 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NodeBase2=__webpack_require__(70);var _NodeBase3=_interopRequireDefault(_NodeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Icon=function(_NodeBase){_inherits(Icon,_NodeBase);function Icon(options,body,labelModule){_classCallCheck(this,Icon);return _possibleConstructorReturn(this,(Icon.__proto__||Object.getPrototypeOf(Icon)).call(this,options,body,labelModule));}_createClass(Icon,[{key:'resize',value:function resize(ctx){if(this.width===undefined){var margin=5;var iconSize={width:Number(this.options.icon.size),height:Number(this.options.icon.size)};this.width=iconSize.width+2*margin;this.height=iconSize.height+2*margin;this.radius=0.5*this.width;}}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this.resize(ctx);this.options.icon.size=this.options.icon.size||50;this.left=x-this.width*0.5;this.top=y-this.height*0.5;this._icon(ctx,x,y,selected);if(this.options.label!==undefined){var iconTextSpacing=5;this.labelModule.draw(ctx,x,y+this.height*0.5+iconTextSpacing,selected);}this.updateBoundingBox(x,y);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y){this.boundingBox.top=y-this.options.icon.size*0.5;this.boundingBox.left=x-this.options.icon.size*0.5;this.boundingBox.right=x+this.options.icon.size*0.5;this.boundingBox.bottom=y+this.options.icon.size*0.5;if(this.options.label!==undefined&&this.labelModule.size.width>0){var iconTextSpacing=5;this.boundingBox.left=Math.min(this.boundingBox.left,this.labelModule.size.left);this.boundingBox.right=Math.max(this.boundingBox.right,this.labelModule.size.left+this.labelModule.size.width);this.boundingBox.bottom=Math.max(this.boundingBox.bottom,this.boundingBox.bottom+this.labelModule.size.height+iconTextSpacing);}}},{key:'_icon',value:function _icon(ctx,x,y,selected){var iconSize=Number(this.options.icon.size);if(this.options.icon.code!==undefined){ctx.font=(selected?"bold ":"")+iconSize+"px "+this.options.icon.face;// draw icon
	ctx.fillStyle=this.options.icon.color||"black";ctx.textAlign="center";ctx.textBaseline="middle";// draw shadow if enabled
	this.enableShadow(ctx);ctx.fillText(this.options.icon.code,x,y);// disable shadows for other elements.
	this.disableShadow(ctx);}else{console.error('When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.');}}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return Icon;}(_NodeBase3.default);exports.default=Icon;/***/},/* 80 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _CircleImageBase2=__webpack_require__(72);var _CircleImageBase3=_interopRequireDefault(_CircleImageBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Image=function(_CircleImageBase){_inherits(Image,_CircleImageBase);function Image(options,body,labelModule,imageObj){_classCallCheck(this,Image);var _this=_possibleConstructorReturn(this,(Image.__proto__||Object.getPrototypeOf(Image)).call(this,options,body,labelModule));_this.imageObj=imageObj;return _this;}_createClass(Image,[{key:'resize',value:function resize(){this._resizeImage();}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this.resize();this.left=x-this.width/2;this.top=y-this.height/2;if(this.options.shapeProperties.useBorderWithImage===true){var neutralborderWidth=this.options.borderWidth;var selectionLineWidth=this.options.borderWidthSelected||2*this.options.borderWidth;var borderWidth=(selected?selectionLineWidth:neutralborderWidth)/this.body.view.scale;ctx.lineWidth=Math.min(this.width,borderWidth);ctx.beginPath();// setup the line properties.
	ctx.strokeStyle=selected?this.options.color.highlight.border:hover?this.options.color.hover.border:this.options.color.border;// set a fillstyle
	ctx.fillStyle=selected?this.options.color.highlight.background:hover?this.options.color.hover.background:this.options.color.background;// draw a rectangle to form the border around. This rectangle is filled so the opacity of a picture (in future vis releases?) can be used to tint the image
	ctx.rect(this.left-0.5*ctx.lineWidth,this.top-0.5*ctx.lineWidth,this.width+ctx.lineWidth,this.height+ctx.lineWidth);ctx.fill();//draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	ctx.save();// if borders are zero width, they will be drawn with width 1 by default. This prevents that
	if(borderWidth>0){this.enableBorderDashes(ctx);//draw the border
	ctx.stroke();//disable dashed border for other elements
	this.disableBorderDashes(ctx);}ctx.restore();ctx.closePath();}this._drawImageAtPosition(ctx);this._drawImageLabel(ctx,x,y,selected||hover);this.updateBoundingBox(x,y);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y){this.resize();this.left=x-this.width/2;this.top=y-this.height/2;this.boundingBox.top=this.top;this.boundingBox.left=this.left;this.boundingBox.right=this.left+this.width;this.boundingBox.bottom=this.top+this.height;if(this.options.label!==undefined&&this.labelModule.size.width>0){this.boundingBox.left=Math.min(this.boundingBox.left,this.labelModule.size.left);this.boundingBox.right=Math.max(this.boundingBox.right,this.labelModule.size.left+this.labelModule.size.width);this.boundingBox.bottom=Math.max(this.boundingBox.bottom,this.boundingBox.bottom+this.labelOffset);}}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return Image;}(_CircleImageBase3.default);exports.default=Image;/***/},/* 81 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _ShapeBase2=__webpack_require__(76);var _ShapeBase3=_interopRequireDefault(_ShapeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Square=function(_ShapeBase){_inherits(Square,_ShapeBase);function Square(options,body,labelModule){_classCallCheck(this,Square);return _possibleConstructorReturn(this,(Square.__proto__||Object.getPrototypeOf(Square)).call(this,options,body,labelModule));}_createClass(Square,[{key:'resize',value:function resize(){this._resizeShape();}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this._drawShape(ctx,'square',2,x,y,selected,hover);}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return Square;}(_ShapeBase3.default);exports.default=Square;/***/},/* 82 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _ShapeBase2=__webpack_require__(76);var _ShapeBase3=_interopRequireDefault(_ShapeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Star=function(_ShapeBase){_inherits(Star,_ShapeBase);function Star(options,body,labelModule){_classCallCheck(this,Star);return _possibleConstructorReturn(this,(Star.__proto__||Object.getPrototypeOf(Star)).call(this,options,body,labelModule));}_createClass(Star,[{key:'resize',value:function resize(ctx){this._resizeShape();}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this._drawShape(ctx,'star',4,x,y,selected,hover);}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return Star;}(_ShapeBase3.default);exports.default=Star;/***/},/* 83 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NodeBase2=__webpack_require__(70);var _NodeBase3=_interopRequireDefault(_NodeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Text=function(_NodeBase){_inherits(Text,_NodeBase);function Text(options,body,labelModule){_classCallCheck(this,Text);return _possibleConstructorReturn(this,(Text.__proto__||Object.getPrototypeOf(Text)).call(this,options,body,labelModule));}_createClass(Text,[{key:'resize',value:function resize(ctx,selected){if(this.width===undefined){var margin=5;var textSize=this.labelModule.getTextSize(ctx,selected);this.width=textSize.width+2*margin;this.height=textSize.height+2*margin;this.radius=0.5*this.width;}}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this.resize(ctx,selected||hover);this.left=x-this.width/2;this.top=y-this.height/2;// draw shadow if enabled
	this.enableShadow(ctx);this.labelModule.draw(ctx,x,y,selected||hover);// disable shadows for other elements.
	this.disableShadow(ctx);this.updateBoundingBox(x,y,ctx,selected);}},{key:'updateBoundingBox',value:function updateBoundingBox(x,y,ctx,selected){this.resize(ctx,selected);this.left=x-this.width/2;this.top=y-this.height/2;this.boundingBox.top=this.top;this.boundingBox.left=this.left;this.boundingBox.right=this.left+this.width;this.boundingBox.bottom=this.top+this.height;}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return Text;}(_NodeBase3.default);exports.default=Text;/***/},/* 84 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _ShapeBase2=__webpack_require__(76);var _ShapeBase3=_interopRequireDefault(_ShapeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Triangle=function(_ShapeBase){_inherits(Triangle,_ShapeBase);function Triangle(options,body,labelModule){_classCallCheck(this,Triangle);return _possibleConstructorReturn(this,(Triangle.__proto__||Object.getPrototypeOf(Triangle)).call(this,options,body,labelModule));}_createClass(Triangle,[{key:'resize',value:function resize(ctx){this._resizeShape();}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this._drawShape(ctx,'triangle',3,x,y,selected,hover);}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return Triangle;}(_ShapeBase3.default);exports.default=Triangle;/***/},/* 85 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _ShapeBase2=__webpack_require__(76);var _ShapeBase3=_interopRequireDefault(_ShapeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var TriangleDown=function(_ShapeBase){_inherits(TriangleDown,_ShapeBase);function TriangleDown(options,body,labelModule){_classCallCheck(this,TriangleDown);return _possibleConstructorReturn(this,(TriangleDown.__proto__||Object.getPrototypeOf(TriangleDown)).call(this,options,body,labelModule));}_createClass(TriangleDown,[{key:'resize',value:function resize(ctx){this._resizeShape();}},{key:'draw',value:function draw(ctx,x,y,selected,hover){this._drawShape(ctx,'triangleDown',3,x,y,selected,hover);}},{key:'distanceToBorder',value:function distanceToBorder(ctx,angle){return this._distanceToBorder(ctx,angle);}}]);return TriangleDown;}(_ShapeBase3.default);exports.default=TriangleDown;/***/},/* 86 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _Edge=__webpack_require__(87);var _Edge2=_interopRequireDefault(_Edge);var _Label=__webpack_require__(68);var _Label2=_interopRequireDefault(_Label);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var DataSet=__webpack_require__(9);var DataView=__webpack_require__(11);var EdgesHandler=function(){function EdgesHandler(body,images,groups){var _this=this;_classCallCheck(this,EdgesHandler);this.body=body;this.images=images;this.groups=groups;// create the edge API in the body container
	this.body.functions.createEdge=this.create.bind(this);this.edgesListeners={add:function add(event,params){_this.add(params.items);},update:function update(event,params){_this.update(params.items);},remove:function remove(event,params){_this.remove(params.items);}};this.options={};this.defaultOptions={arrows:{to:{enabled:false,scaleFactor:1,type:'arrow'},// boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}
	middle:{enabled:false,scaleFactor:1,type:'arrow'},from:{enabled:false,scaleFactor:1,type:'arrow'}},arrowStrikethrough:true,color:{color:'#848484',highlight:'#848484',hover:'#848484',inherit:'from',opacity:1.0},dashes:false,font:{color:'#343434',size:14,// px
	face:'arial',background:'none',strokeWidth:2,// px
	strokeColor:'#ffffff',align:'horizontal'},hidden:false,hoverWidth:1.5,label:undefined,labelHighlightBold:true,length:undefined,physics:true,scaling:{min:1,max:15,label:{enabled:true,min:14,max:30,maxVisible:30,drawThreshold:5},customScalingFunction:function customScalingFunction(min,max,total,value){if(max===min){return 0.5;}else{var scale=1/(max-min);return Math.max(0,(value-min)*scale);}}},selectionWidth:1.5,selfReferenceSize:20,shadow:{enabled:false,color:'rgba(0,0,0,0.5)',size:10,x:5,y:5},smooth:{enabled:true,type:"dynamic",forceDirection:'none',roundness:0.5},title:undefined,width:1,value:undefined};util.extend(this.options,this.defaultOptions);this.bindEventListeners();}_createClass(EdgesHandler,[{key:'bindEventListeners',value:function bindEventListeners(){var _this2=this;// this allows external modules to force all dynamic curves to turn static.
	this.body.emitter.on("_forceDisableDynamicCurves",function(type){if(type==='dynamic'){type='continuous';}var emitChange=false;for(var edgeId in _this2.body.edges){if(_this2.body.edges.hasOwnProperty(edgeId)){var edge=_this2.body.edges[edgeId];var edgeData=_this2.body.data.edges._data[edgeId];// only forcibly remove the smooth curve if the data has been set of the edge has the smooth curves defined.
	// this is because a change in the global would not affect these curves.
	if(edgeData!==undefined){var edgeOptions=edgeData.smooth;if(edgeOptions!==undefined){if(edgeOptions.enabled===true&&edgeOptions.type==='dynamic'){if(type===undefined){edge.setOptions({smooth:false});}else{edge.setOptions({smooth:{type:type}});}emitChange=true;}}}}}if(emitChange===true){_this2.body.emitter.emit("_dataChanged");}});// this is called when options of EXISTING nodes or edges have changed.
	this.body.emitter.on("_dataUpdated",function(){_this2.reconnectEdges();_this2.markAllEdgesAsDirty();});// refresh the edges. Used when reverting from hierarchical layout
	this.body.emitter.on("refreshEdges",this.refresh.bind(this));this.body.emitter.on("refresh",this.refresh.bind(this));this.body.emitter.on("destroy",function(){util.forEach(_this2.edgesListeners,function(callback,event){if(_this2.body.data.edges)_this2.body.data.edges.off(event,callback);});delete _this2.body.functions.createEdge;delete _this2.edgesListeners.add;delete _this2.edgesListeners.update;delete _this2.edgesListeners.remove;delete _this2.edgesListeners;});}},{key:'setOptions',value:function setOptions(options){if(options!==undefined){// use the parser from the Edge class to fill in all shorthand notations
	_Edge2.default.parseOptions(this.options,options);// handle multiple input cases for color
	if(options.color!==undefined){this.markAllEdgesAsDirty();}// update smooth settings in all edges
	var dataChanged=false;if(options.smooth!==undefined){for(var edgeId in this.body.edges){if(this.body.edges.hasOwnProperty(edgeId)){dataChanged=this.body.edges[edgeId].updateEdgeType()||dataChanged;}}}// update fonts in all edges
	if(options.font!==undefined){// use the parser from the Label class to fill in all shorthand notations
	_Label2.default.parseOptions(this.options.font,options);for(var _edgeId in this.body.edges){if(this.body.edges.hasOwnProperty(_edgeId)){this.body.edges[_edgeId].updateLabelModule();}}}// update the state of the variables if needed
	if(options.hidden!==undefined||options.physics!==undefined||dataChanged===true){this.body.emitter.emit('_dataChanged');}}}/**
	       * Load edges by reading the data table
	       * @param {Array | DataSet | DataView} edges    The data containing the edges.
	       * @private
	       * @private
	       */},{key:'setData',value:function setData(edges){var _this3=this;var doNotEmit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var oldEdgesData=this.body.data.edges;if(edges instanceof DataSet||edges instanceof DataView){this.body.data.edges=edges;}else if(Array.isArray(edges)){this.body.data.edges=new DataSet();this.body.data.edges.add(edges);}else if(!edges){this.body.data.edges=new DataSet();}else{throw new TypeError('Array or DataSet expected');}// TODO: is this null or undefined or false?
	if(oldEdgesData){// unsubscribe from old dataset
	util.forEach(this.edgesListeners,function(callback,event){oldEdgesData.off(event,callback);});}// remove drawn edges
	this.body.edges={};// TODO: is this null or undefined or false?
	if(this.body.data.edges){// subscribe to new dataset
	util.forEach(this.edgesListeners,function(callback,event){_this3.body.data.edges.on(event,callback);});// draw all new nodes
	var ids=this.body.data.edges.getIds();this.add(ids,true);}if(doNotEmit===false){this.body.emitter.emit("_dataChanged");}}/**
	       * Add edges
	       * @param {Number[] | String[]} ids
	       * @private
	       */},{key:'add',value:function add(ids){var doNotEmit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var edges=this.body.edges;var edgesData=this.body.data.edges;for(var i=0;i<ids.length;i++){var id=ids[i];var oldEdge=edges[id];if(oldEdge){oldEdge.disconnect();}var data=edgesData.get(id,{"showInternalIds":true});edges[id]=this.create(data);}if(doNotEmit===false){this.body.emitter.emit("_dataChanged");}}/**
	       * Update existing edges, or create them when not yet existing
	       * @param {Number[] | String[]} ids
	       * @private
	       */},{key:'update',value:function update(ids){var edges=this.body.edges;var edgesData=this.body.data.edges;var dataChanged=false;for(var i=0;i<ids.length;i++){var id=ids[i];var data=edgesData.get(id);var edge=edges[id];if(edge!==undefined){// update edge
	edge.disconnect();dataChanged=edge.setOptions(data)||dataChanged;// if a support node is added, data can be changed.
	edge.connect();}else{// create edge
	this.body.edges[id]=this.create(data);dataChanged=true;}}if(dataChanged===true){this.body.emitter.emit("_dataChanged");}else{this.body.emitter.emit("_dataUpdated");}}/**
	       * Remove existing edges. Non existing ids will be ignored
	       * @param {Number[] | String[]} ids
	       * @private
	       */},{key:'remove',value:function remove(ids){var edges=this.body.edges;for(var i=0;i<ids.length;i++){var id=ids[i];var edge=edges[id];if(edge!==undefined){edge.cleanup();edge.disconnect();delete edges[id];}}this.body.emitter.emit("_dataChanged");}},{key:'refresh',value:function refresh(){var edges=this.body.edges;for(var edgeId in edges){var edge=undefined;if(edges.hasOwnProperty(edgeId)){edge=edges[edgeId];}var data=this.body.data.edges._data[edgeId];if(edge!==undefined&&data!==undefined){edge.setOptions(data);}}}},{key:'create',value:function create(properties){return new _Edge2.default(properties,this.body,this.options);}},{key:'markAllEdgesAsDirty',value:function markAllEdgesAsDirty(){for(var edgeId in this.body.edges){this.body.edges[edgeId].edgeType.colorDirty=true;}}/**
	       * Reconnect all edges
	       * @private
	       */},{key:'reconnectEdges',value:function reconnectEdges(){var id;var nodes=this.body.nodes;var edges=this.body.edges;for(id in nodes){if(nodes.hasOwnProperty(id)){nodes[id].edges=[];}}for(id in edges){if(edges.hasOwnProperty(id)){var edge=edges[id];edge.from=null;edge.to=null;edge.connect();}}}},{key:'getConnectedNodes',value:function getConnectedNodes(edgeId){var nodeList=[];if(this.body.edges[edgeId]!==undefined){var edge=this.body.edges[edgeId];if(edge.fromId){nodeList.push(edge.fromId);}if(edge.toId){nodeList.push(edge.toId);}}return nodeList;}}]);return EdgesHandler;}();exports.default=EdgesHandler;/***/},/* 87 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _Label=__webpack_require__(68);var _Label2=_interopRequireDefault(_Label);var _CubicBezierEdge=__webpack_require__(88);var _CubicBezierEdge2=_interopRequireDefault(_CubicBezierEdge);var _BezierEdgeDynamic=__webpack_require__(92);var _BezierEdgeDynamic2=_interopRequireDefault(_BezierEdgeDynamic);var _BezierEdgeStatic=__webpack_require__(93);var _BezierEdgeStatic2=_interopRequireDefault(_BezierEdgeStatic);var _StraightEdge=__webpack_require__(94);var _StraightEdge2=_interopRequireDefault(_StraightEdge);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);/**
	   * @class Edge
	   *
	   * A edge connects two nodes
	   * @param {Object} properties     Object with options. Must contain
	   *                                At least options from and to.
	   *                                Available options: from (number),
	   *                                to (number), label (string, color (string),
	   *                                width (number), style (string),
	   *                                length (number), title (string)
	   * @param {Network} network       A Network object, used to find and edge to
	   *                                nodes.
	   * @param {Object} constants      An object with default values for
	   *                                example for the color
	   */var Edge=function(){function Edge(options,body,globalOptions){_classCallCheck(this,Edge);if(body===undefined){throw"No body provided";}this.options=util.bridgeObject(globalOptions);this.globalOptions=globalOptions;this.body=body;// initialize variables
	this.id=undefined;this.fromId=undefined;this.toId=undefined;this.selected=false;this.hover=false;this.labelDirty=true;this.colorDirty=true;this.baseWidth=this.options.width;this.baseFontSize=this.options.font.size;this.from=undefined;// a node
	this.to=undefined;// a node
	this.edgeType=undefined;this.connected=false;this.labelModule=new _Label2.default(this.body,this.options,true/* It's an edge label */);this.setOptions(options);}/**
	     * Set or overwrite options for the edge
	     * @param {Object} options  an object with options
	     * @param doNotEmit
	     */_createClass(Edge,[{key:'setOptions',value:function setOptions(options){if(!options){return;}this.colorDirty=true;Edge.parseOptions(this.options,options,true,this.globalOptions);if(options.id!==undefined){this.id=options.id;}if(options.from!==undefined){this.fromId=options.from;}if(options.to!==undefined){this.toId=options.to;}if(options.title!==undefined){this.title=options.title;}if(options.value!==undefined){options.value=parseFloat(options.value);}// update label Module
	this.updateLabelModule();var dataChanged=this.updateEdgeType();// if anything has been updates, reset the selection width and the hover width
	this._setInteractionWidths();// A node is connected when it has a from and to node that both exist in the network.body.nodes.
	this.connect();if(options.hidden!==undefined||options.physics!==undefined){dataChanged=true;}return dataChanged;}},{key:'updateLabelModule',/**
	       * update the options in the label module
	       */value:function updateLabelModule(){this.labelModule.setOptions(this.options,true);if(this.labelModule.baseSize!==undefined){this.baseFontSize=this.labelModule.baseSize;}}/**
	       * update the edge type, set the options
	       * @returns {boolean}
	       */},{key:'updateEdgeType',value:function updateEdgeType(){var dataChanged=false;var changeInType=true;var smooth=this.options.smooth;if(this.edgeType!==undefined){if(this.edgeType instanceof _BezierEdgeDynamic2.default&&smooth.enabled===true&&smooth.type==='dynamic'){changeInType=false;}if(this.edgeType instanceof _CubicBezierEdge2.default&&smooth.enabled===true&&smooth.type==='cubicBezier'){changeInType=false;}if(this.edgeType instanceof _BezierEdgeStatic2.default&&smooth.enabled===true&&smooth.type!=='dynamic'&&smooth.type!=='cubicBezier'){changeInType=false;}if(this.edgeType instanceof _StraightEdge2.default&&smooth.enabled===false){changeInType=false;}if(changeInType===true){dataChanged=this.cleanup();}}if(changeInType===true){if(this.options.smooth.enabled===true){if(this.options.smooth.type==='dynamic'){dataChanged=true;this.edgeType=new _BezierEdgeDynamic2.default(this.options,this.body,this.labelModule);}else if(this.options.smooth.type==='cubicBezier'){this.edgeType=new _CubicBezierEdge2.default(this.options,this.body,this.labelModule);}else{this.edgeType=new _BezierEdgeStatic2.default(this.options,this.body,this.labelModule);}}else{this.edgeType=new _StraightEdge2.default(this.options,this.body,this.labelModule);}}else{// if nothing changes, we just set the options.
	this.edgeType.setOptions(this.options);}return dataChanged;}/**
	       * Connect an edge to its nodes
	       */},{key:'connect',value:function connect(){this.disconnect();this.from=this.body.nodes[this.fromId]||undefined;this.to=this.body.nodes[this.toId]||undefined;this.connected=this.from!==undefined&&this.to!==undefined;if(this.connected===true){this.from.attachEdge(this);this.to.attachEdge(this);}else{if(this.from){this.from.detachEdge(this);}if(this.to){this.to.detachEdge(this);}}this.edgeType.connect();}/**
	       * Disconnect an edge from its nodes
	       */},{key:'disconnect',value:function disconnect(){if(this.from){this.from.detachEdge(this);this.from=undefined;}if(this.to){this.to.detachEdge(this);this.to=undefined;}this.connected=false;}/**
	       * get the title of this edge.
	       * @return {string} title    The title of the edge, or undefined when no title
	       *                           has been set.
	       */},{key:'getTitle',value:function getTitle(){return this.title;}/**
	       * check if this node is selecte
	       * @return {boolean} selected   True if node is selected, else false
	       */},{key:'isSelected',value:function isSelected(){return this.selected;}/**
	       * Retrieve the value of the edge. Can be undefined
	       * @return {Number} value
	       */},{key:'getValue',value:function getValue(){return this.options.value;}/**
	       * Adjust the value range of the edge. The edge will adjust it's width
	       * based on its value.
	       * @param {Number} min
	       * @param {Number} max
	       * @param total
	       */},{key:'setValueRange',value:function setValueRange(min,max,total){if(this.options.value!==undefined){var scale=this.options.scaling.customScalingFunction(min,max,total,this.options.value);var widthDiff=this.options.scaling.max-this.options.scaling.min;if(this.options.scaling.label.enabled===true){var fontDiff=this.options.scaling.label.max-this.options.scaling.label.min;this.options.font.size=this.options.scaling.label.min+scale*fontDiff;}this.options.width=this.options.scaling.min+scale*widthDiff;}else{this.options.width=this.baseWidth;this.options.font.size=this.baseFontSize;}this._setInteractionWidths();this.updateLabelModule();}},{key:'_setInteractionWidths',value:function _setInteractionWidths(){if(typeof this.options.hoverWidth==='function'){this.edgeType.hoverWidth=this.options.hoverWidth(this.options.width);}else{this.edgeType.hoverWidth=this.options.hoverWidth+this.options.width;}if(typeof this.options.selectionWidth==='function'){this.edgeType.selectionWidth=this.options.selectionWidth(this.options.width);}else{this.edgeType.selectionWidth=this.options.selectionWidth+this.options.width;}}/**
	       * Redraw a edge
	       * Draw this edge in the given canvas
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	       * @param {CanvasRenderingContext2D}   ctx
	       */},{key:'draw',value:function draw(ctx){// get the via node from the edge type
	var viaNode=this.edgeType.getViaNode();var arrowData={};// restore edge targets to defaults
	this.edgeType.fromPoint=this.edgeType.from;this.edgeType.toPoint=this.edgeType.to;// from and to arrows give a different end point for edges. we set them here
	if(this.options.arrows.from.enabled===true){arrowData.from=this.edgeType.getArrowData(ctx,'from',viaNode,this.selected,this.hover);if(this.options.arrowStrikethrough===false)this.edgeType.fromPoint=arrowData.from.core;}if(this.options.arrows.to.enabled===true){arrowData.to=this.edgeType.getArrowData(ctx,'to',viaNode,this.selected,this.hover);if(this.options.arrowStrikethrough===false)this.edgeType.toPoint=arrowData.to.core;}// the middle arrow depends on the line, which can depend on the to and from arrows so we do this one lastly.
	if(this.options.arrows.middle.enabled===true){arrowData.middle=this.edgeType.getArrowData(ctx,'middle',viaNode,this.selected,this.hover);}// draw everything
	this.edgeType.drawLine(ctx,this.selected,this.hover,viaNode);this.drawArrows(ctx,arrowData);this.drawLabel(ctx,viaNode);}},{key:'drawArrows',value:function drawArrows(ctx,arrowData){if(this.options.arrows.from.enabled===true){this.edgeType.drawArrowHead(ctx,this.selected,this.hover,arrowData.from);}if(this.options.arrows.middle.enabled===true){this.edgeType.drawArrowHead(ctx,this.selected,this.hover,arrowData.middle);}if(this.options.arrows.to.enabled===true){this.edgeType.drawArrowHead(ctx,this.selected,this.hover,arrowData.to);}}},{key:'drawLabel',value:function drawLabel(ctx,viaNode){if(this.options.label!==undefined){// set style
	var node1=this.from;var node2=this.to;var selected=this.from.selected||this.to.selected||this.selected;if(node1.id!=node2.id){this.labelModule.pointToSelf=false;var point=this.edgeType.getPoint(0.5,viaNode);ctx.save();// if the label has to be rotated:
	if(this.options.font.align!=="horizontal"){this.labelModule.calculateLabelSize(ctx,selected,point.x,point.y);ctx.translate(point.x,this.labelModule.size.yLine);this._rotateForLabelAlignment(ctx);}// draw the label
	this.labelModule.draw(ctx,point.x,point.y,selected);ctx.restore();}else{// Ignore the orientations.
	this.labelModule.pointToSelf=true;var x,y;var radius=this.options.selfReferenceSize;if(node1.shape.width>node1.shape.height){x=node1.x+node1.shape.width*0.5;y=node1.y-radius;}else{x=node1.x+radius;y=node1.y-node1.shape.height*0.5;}point=this._pointOnCircle(x,y,radius,0.125);this.labelModule.draw(ctx,point.x,point.y,selected);}}}/**
	       * Check if this object is overlapping with the provided object
	       * @param {Object} obj   an object with parameters left, top
	       * @return {boolean}     True if location is located on the edge
	       */},{key:'isOverlappingWith',value:function isOverlappingWith(obj){if(this.connected){var distMax=10;var xFrom=this.from.x;var yFrom=this.from.y;var xTo=this.to.x;var yTo=this.to.y;var xObj=obj.left;var yObj=obj.top;var dist=this.edgeType.getDistanceToEdge(xFrom,yFrom,xTo,yTo,xObj,yObj);return dist<distMax;}else{return false;}}/**
	       * Rotates the canvas so the text is most readable
	       * @param {CanvasRenderingContext2D} ctx
	       * @private
	       */},{key:'_rotateForLabelAlignment',value:function _rotateForLabelAlignment(ctx){var dy=this.from.y-this.to.y;var dx=this.from.x-this.to.x;var angleInDegrees=Math.atan2(dy,dx);// rotate so label it is readable
	if(angleInDegrees<-1&&dx<0||angleInDegrees>0&&dx<0){angleInDegrees=angleInDegrees+Math.PI;}ctx.rotate(angleInDegrees);}/**
	       * Get a point on a circle
	       * @param {Number} x
	       * @param {Number} y
	       * @param {Number} radius
	       * @param {Number} percentage. Value between 0 (line start) and 1 (line end)
	       * @return {Object} point
	       * @private
	       */},{key:'_pointOnCircle',value:function _pointOnCircle(x,y,radius,percentage){var angle=percentage*2*Math.PI;return{x:x+radius*Math.cos(angle),y:y-radius*Math.sin(angle)};}},{key:'select',value:function select(){this.selected=true;}},{key:'unselect',value:function unselect(){this.selected=false;}/**
	       * cleans all required things on delete
	       * @returns {*}
	       */},{key:'cleanup',value:function cleanup(){return this.edgeType.cleanup();}}],[{key:'parseOptions',value:function parseOptions(parentOptions,newOptions){var allowDeletion=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var globalOptions=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var fields=['arrowStrikethrough','id','from','hidden','hoverWidth','label','labelHighlightBold','length','line','opacity','physics','scaling','selectionWidth','selfReferenceSize','to','title','value','width'];// only deep extend the items in the field array. These do not have shorthand.
	util.selectiveDeepExtend(fields,parentOptions,newOptions,allowDeletion);util.mergeOptions(parentOptions,newOptions,'smooth',allowDeletion,globalOptions);util.mergeOptions(parentOptions,newOptions,'shadow',allowDeletion,globalOptions);if(newOptions.dashes!==undefined&&newOptions.dashes!==null){parentOptions.dashes=newOptions.dashes;}else if(allowDeletion===true&&newOptions.dashes===null){parentOptions.dashes=Object.create(globalOptions.dashes);// this sets the pointer of the option back to the global option.
	}// set the scaling newOptions
	if(newOptions.scaling!==undefined&&newOptions.scaling!==null){if(newOptions.scaling.min!==undefined){parentOptions.scaling.min=newOptions.scaling.min;}if(newOptions.scaling.max!==undefined){parentOptions.scaling.max=newOptions.scaling.max;}util.mergeOptions(parentOptions.scaling,newOptions.scaling,'label',allowDeletion,globalOptions.scaling);}else if(allowDeletion===true&&newOptions.scaling===null){parentOptions.scaling=Object.create(globalOptions.scaling);// this sets the pointer of the option back to the global option.
	}// handle multiple input cases for arrows
	if(newOptions.arrows!==undefined&&newOptions.arrows!==null){if(typeof newOptions.arrows==='string'){var arrows=newOptions.arrows.toLowerCase();parentOptions.arrows.to.enabled=arrows.indexOf("to")!=-1;parentOptions.arrows.middle.enabled=arrows.indexOf("middle")!=-1;parentOptions.arrows.from.enabled=arrows.indexOf("from")!=-1;}else if(_typeof(newOptions.arrows)==='object'){util.mergeOptions(parentOptions.arrows,newOptions.arrows,'to',allowDeletion,globalOptions.arrows);util.mergeOptions(parentOptions.arrows,newOptions.arrows,'middle',allowDeletion,globalOptions.arrows);util.mergeOptions(parentOptions.arrows,newOptions.arrows,'from',allowDeletion,globalOptions.arrows);}else{throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:"+JSON.stringify(newOptions.arrows));}}else if(allowDeletion===true&&newOptions.arrows===null){parentOptions.arrows=Object.create(globalOptions.arrows);// this sets the pointer of the option back to the global option.
	}// handle multiple input cases for color
	if(newOptions.color!==undefined&&newOptions.color!==null){// make a copy of the parent object in case this is referring to the global one (due to object create once, then update)
	parentOptions.color=util.deepExtend({},parentOptions.color,true);if(util.isString(newOptions.color)){parentOptions.color.color=newOptions.color;parentOptions.color.highlight=newOptions.color;parentOptions.color.hover=newOptions.color;parentOptions.color.inherit=false;}else{var colorsDefined=false;if(newOptions.color.color!==undefined){parentOptions.color.color=newOptions.color.color;colorsDefined=true;}if(newOptions.color.highlight!==undefined){parentOptions.color.highlight=newOptions.color.highlight;colorsDefined=true;}if(newOptions.color.hover!==undefined){parentOptions.color.hover=newOptions.color.hover;colorsDefined=true;}if(newOptions.color.inherit!==undefined){parentOptions.color.inherit=newOptions.color.inherit;}if(newOptions.color.opacity!==undefined){parentOptions.color.opacity=Math.min(1,Math.max(0,newOptions.color.opacity));}if(newOptions.color.inherit===undefined&&colorsDefined===true){parentOptions.color.inherit=false;}}}else if(allowDeletion===true&&newOptions.color===null){parentOptions.color=util.bridgeObject(globalOptions.color);// set the object back to the global options
	}// handle the font settings
	if(newOptions.font!==undefined&&newOptions.font!==null){_Label2.default.parseOptions(parentOptions.font,newOptions);}else if(allowDeletion===true&&newOptions.font===null){parentOptions.font=util.bridgeObject(globalOptions.font);// set the object back to the global options
	}}}]);return Edge;}();exports.default=Edge;/***/},/* 88 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _CubicBezierEdgeBase2=__webpack_require__(89);var _CubicBezierEdgeBase3=_interopRequireDefault(_CubicBezierEdgeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var CubicBezierEdge=function(_CubicBezierEdgeBase){_inherits(CubicBezierEdge,_CubicBezierEdgeBase);function CubicBezierEdge(options,body,labelModule){_classCallCheck(this,CubicBezierEdge);return _possibleConstructorReturn(this,(CubicBezierEdge.__proto__||Object.getPrototypeOf(CubicBezierEdge)).call(this,options,body,labelModule));}/**
	     * Draw a line between two nodes
	     * @param {CanvasRenderingContext2D} ctx
	     * @private
	     */_createClass(CubicBezierEdge,[{key:'_line',value:function _line(ctx,viaNodes){// get the coordinates of the support points.
	var via1=viaNodes[0];var via2=viaNodes[1];// start drawing the line.
	ctx.beginPath();ctx.moveTo(this.fromPoint.x,this.fromPoint.y);// fallback to normal straight edges
	if(viaNodes===undefined||via1.x===undefined){ctx.lineTo(this.toPoint.x,this.toPoint.y);}else{ctx.bezierCurveTo(via1.x,via1.y,via2.x,via2.y,this.toPoint.x,this.toPoint.y);}// draw shadow if enabled
	this.enableShadow(ctx);ctx.stroke();this.disableShadow(ctx);}},{key:'_getViaCoordinates',value:function _getViaCoordinates(){var dx=this.from.x-this.to.x;var dy=this.from.y-this.to.y;var x1=void 0,y1=void 0,x2=void 0,y2=void 0;var roundness=this.options.smooth.roundness;// horizontal if x > y or if direction is forced or if direction is horizontal
	if((Math.abs(dx)>Math.abs(dy)||this.options.smooth.forceDirection===true||this.options.smooth.forceDirection==='horizontal')&&this.options.smooth.forceDirection!=='vertical'){y1=this.from.y;y2=this.to.y;x1=this.from.x-roundness*dx;x2=this.to.x+roundness*dx;}else{y1=this.from.y-roundness*dy;y2=this.to.y+roundness*dy;x1=this.from.x;x2=this.to.x;}return[{x:x1,y:y1},{x:x2,y:y2}];}},{key:'getViaNode',value:function getViaNode(){return this._getViaCoordinates();}},{key:'_findBorderPosition',value:function _findBorderPosition(nearNode,ctx){return this._findBorderPositionBezier(nearNode,ctx);}},{key:'_getDistanceToEdge',value:function _getDistanceToEdge(x1,y1,x2,y2,x3,y3){var _ref=arguments.length>6&&arguments[6]!==undefined?arguments[6]:this._getViaCoordinates(),_ref2=_slicedToArray(_ref,2),via1=_ref2[0],via2=_ref2[1];// x3,y3 is the point
	return this._getDistanceToBezierEdge(x1,y1,x2,y2,x3,y3,via1,via2);}/**
	       * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	       * @param percentage
	       * @param via
	       * @returns {{x: number, y: number}}
	       * @private
	       */},{key:'getPoint',value:function getPoint(percentage){var _ref3=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this._getViaCoordinates(),_ref4=_slicedToArray(_ref3,2),via1=_ref4[0],via2=_ref4[1];var t=percentage;var vec=[];vec[0]=Math.pow(1-t,3);vec[1]=3*t*Math.pow(1-t,2);vec[2]=3*Math.pow(t,2)*(1-t);vec[3]=Math.pow(t,3);var x=vec[0]*this.fromPoint.x+vec[1]*via1.x+vec[2]*via2.x+vec[3]*this.toPoint.x;var y=vec[0]*this.fromPoint.y+vec[1]*via1.y+vec[2]*via2.y+vec[3]*this.toPoint.y;return{x:x,y:y};}}]);return CubicBezierEdge;}(_CubicBezierEdgeBase3.default);exports.default=CubicBezierEdge;/***/},/* 89 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _BezierEdgeBase2=__webpack_require__(90);var _BezierEdgeBase3=_interopRequireDefault(_BezierEdgeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var CubicBezierEdgeBase=function(_BezierEdgeBase){_inherits(CubicBezierEdgeBase,_BezierEdgeBase);function CubicBezierEdgeBase(options,body,labelModule){_classCallCheck(this,CubicBezierEdgeBase);return _possibleConstructorReturn(this,(CubicBezierEdgeBase.__proto__||Object.getPrototypeOf(CubicBezierEdgeBase)).call(this,options,body,labelModule));}/**
	     * Calculate the distance between a point (x3,y3) and a line segment from
	     * (x1,y1) to (x2,y2).
	     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	     * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
	     * @param {number} x1 from x
	     * @param {number} y1 from y
	     * @param {number} x2 to x
	     * @param {number} y2 to y
	     * @param {number} x3 point to check x
	     * @param {number} y3 point to check y
	     * @private
	     */_createClass(CubicBezierEdgeBase,[{key:'_getDistanceToBezierEdge',value:function _getDistanceToBezierEdge(x1,y1,x2,y2,x3,y3,via1,via2){// x3,y3 is the point
	var minDistance=1e9;var distance=void 0;var i=void 0,t=void 0,x=void 0,y=void 0;var lastX=x1;var lastY=y1;var vec=[0,0,0,0];for(i=1;i<10;i++){t=0.1*i;vec[0]=Math.pow(1-t,3);vec[1]=3*t*Math.pow(1-t,2);vec[2]=3*Math.pow(t,2)*(1-t);vec[3]=Math.pow(t,3);x=vec[0]*x1+vec[1]*via1.x+vec[2]*via2.x+vec[3]*x2;y=vec[0]*y1+vec[1]*via1.y+vec[2]*via2.y+vec[3]*y2;if(i>0){distance=this._getDistanceToLine(lastX,lastY,x,y,x3,y3);minDistance=distance<minDistance?distance:minDistance;}lastX=x;lastY=y;}return minDistance;}}]);return CubicBezierEdgeBase;}(_BezierEdgeBase3.default);exports.default=CubicBezierEdgeBase;/***/},/* 90 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _EdgeBase2=__webpack_require__(91);var _EdgeBase3=_interopRequireDefault(_EdgeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var BezierEdgeBase=function(_EdgeBase){_inherits(BezierEdgeBase,_EdgeBase);function BezierEdgeBase(options,body,labelModule){_classCallCheck(this,BezierEdgeBase);return _possibleConstructorReturn(this,(BezierEdgeBase.__proto__||Object.getPrototypeOf(BezierEdgeBase)).call(this,options,body,labelModule));}/**
	     * This function uses binary search to look for the point where the bezier curve crosses the border of the node.
	     *
	     * @param nearNode
	     * @param ctx
	     * @param viaNode
	     * @param nearNode
	     * @param ctx
	     * @param viaNode
	     * @param nearNode
	     * @param ctx
	     * @param viaNode
	     */_createClass(BezierEdgeBase,[{key:'_findBorderPositionBezier',value:function _findBorderPositionBezier(nearNode,ctx){var viaNode=arguments.length>2&&arguments[2]!==undefined?arguments[2]:this._getViaCoordinates();var maxIterations=10;var iteration=0;var low=0;var high=1;var pos,angle,distanceToBorder,distanceToPoint,difference;var threshold=0.2;var node=this.to;var from=false;if(nearNode.id===this.from.id){node=this.from;from=true;}while(low<=high&&iteration<maxIterations){var middle=(low+high)*0.5;pos=this.getPoint(middle,viaNode);angle=Math.atan2(node.y-pos.y,node.x-pos.x);distanceToBorder=node.distanceToBorder(ctx,angle);distanceToPoint=Math.sqrt(Math.pow(pos.x-node.x,2)+Math.pow(pos.y-node.y,2));difference=distanceToBorder-distanceToPoint;if(Math.abs(difference)<threshold){break;// found
	}else if(difference<0){// distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
	if(from===false){low=middle;}else{high=middle;}}else{if(from===false){high=middle;}else{low=middle;}}iteration++;}pos.t=middle;return pos;}/**
	       * Calculate the distance between a point (x3,y3) and a line segment from
	       * (x1,y1) to (x2,y2).
	       * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	       * @param {number} x1 from x
	       * @param {number} y1 from y
	       * @param {number} x2 to x
	       * @param {number} y2 to y
	       * @param {number} x3 point to check x
	       * @param {number} y3 point to check y
	       * @private
	       */},{key:'_getDistanceToBezierEdge',value:function _getDistanceToBezierEdge(x1,y1,x2,y2,x3,y3,via){// x3,y3 is the point
	var minDistance=1e9;var distance=void 0;var i=void 0,t=void 0,x=void 0,y=void 0;var lastX=x1;var lastY=y1;for(i=1;i<10;i++){t=0.1*i;x=Math.pow(1-t,2)*x1+2*t*(1-t)*via.x+Math.pow(t,2)*x2;y=Math.pow(1-t,2)*y1+2*t*(1-t)*via.y+Math.pow(t,2)*y2;if(i>0){distance=this._getDistanceToLine(lastX,lastY,x,y,x3,y3);minDistance=distance<minDistance?distance:minDistance;}lastX=x;lastY=y;}return minDistance;}}]);return BezierEdgeBase;}(_EdgeBase3.default);exports.default=BezierEdgeBase;/***/},/* 91 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var EdgeBase=function(){function EdgeBase(options,body,labelModule){_classCallCheck(this,EdgeBase);this.body=body;this.labelModule=labelModule;this.options={};this.setOptions(options);this.colorDirty=true;this.color={};this.selectionWidth=2;this.hoverWidth=1.5;this.fromPoint=this.from;this.toPoint=this.to;}_createClass(EdgeBase,[{key:'connect',value:function connect(){this.from=this.body.nodes[this.options.from];this.to=this.body.nodes[this.options.to];}},{key:'cleanup',value:function cleanup(){return false;}},{key:'setOptions',value:function setOptions(options){this.options=options;this.from=this.body.nodes[this.options.from];this.to=this.body.nodes[this.options.to];this.id=this.options.id;}/**
	       * Redraw a edge as a line
	       * Draw this edge in the given canvas
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	       * @param {CanvasRenderingContext2D}   ctx
	       * @private
	       */},{key:'drawLine',value:function drawLine(ctx,selected,hover,viaNode){// set style
	ctx.strokeStyle=this.getColor(ctx,selected,hover);ctx.lineWidth=this.getLineWidth(selected,hover);if(this.options.dashes!==false){this._drawDashedLine(ctx,viaNode);}else{this._drawLine(ctx,viaNode);}}},{key:'_drawLine',value:function _drawLine(ctx,viaNode,fromPoint,toPoint){if(this.from!=this.to){// draw line
	this._line(ctx,viaNode,fromPoint,toPoint);}else{var _getCircleData2=this._getCircleData(ctx),_getCircleData3=_slicedToArray(_getCircleData2,3),x=_getCircleData3[0],y=_getCircleData3[1],radius=_getCircleData3[2];this._circle(ctx,x,y,radius);}}},{key:'_drawDashedLine',value:function _drawDashedLine(ctx,viaNode,fromPoint,toPoint){ctx.lineCap='round';var pattern=[5,5];if(Array.isArray(this.options.dashes)===true){pattern=this.options.dashes;}// only firefox and chrome support this method, else we use the legacy one.
	if(ctx.setLineDash!==undefined){ctx.save();// set dash settings for chrome or firefox
	ctx.setLineDash(pattern);ctx.lineDashOffset=0;// draw the line
	if(this.from!=this.to){// draw line
	this._line(ctx,viaNode);}else{var _getCircleData4=this._getCircleData(ctx),_getCircleData5=_slicedToArray(_getCircleData4,3),x=_getCircleData5[0],y=_getCircleData5[1],radius=_getCircleData5[2];this._circle(ctx,x,y,radius);}// restore the dash settings.
	ctx.setLineDash([0]);ctx.lineDashOffset=0;ctx.restore();}else{// unsupporting smooth lines
	if(this.from!=this.to){// draw line
	ctx.dashedLine(this.from.x,this.from.y,this.to.x,this.to.y,pattern);}else{var _getCircleData6=this._getCircleData(ctx),_getCircleData7=_slicedToArray(_getCircleData6,3),_x=_getCircleData7[0],_y=_getCircleData7[1],_radius=_getCircleData7[2];this._circle(ctx,_x,_y,_radius);}// draw shadow if enabled
	this.enableShadow(ctx);ctx.stroke();// disable shadows for other elements.
	this.disableShadow(ctx);}}},{key:'findBorderPosition',value:function findBorderPosition(nearNode,ctx,options){if(this.from!=this.to){return this._findBorderPosition(nearNode,ctx,options);}else{return this._findBorderPositionCircle(nearNode,ctx,options);}}},{key:'findBorderPositions',value:function findBorderPositions(ctx){var from={};var to={};if(this.from!=this.to){from=this._findBorderPosition(this.from,ctx);to=this._findBorderPosition(this.to,ctx);}else{var _getCircleData8=this._getCircleData(ctx),_getCircleData9=_slicedToArray(_getCircleData8,3),x=_getCircleData9[0],y=_getCircleData9[1],radius=_getCircleData9[2];from=this._findBorderPositionCircle(this.from,ctx,{x:x,y:y,low:0.25,high:0.6,direction:-1});to=this._findBorderPositionCircle(this.from,ctx,{x:x,y:y,low:0.6,high:0.8,direction:1});}return{from:from,to:to};}},{key:'_getCircleData',value:function _getCircleData(ctx){var x=void 0,y=void 0;var node=this.from;var radius=this.options.selfReferenceSize;if(ctx!==undefined){if(node.shape.width===undefined){node.shape.resize(ctx);}}// get circle coordinates
	if(node.shape.width>node.shape.height){x=node.x+node.shape.width*0.5;y=node.y-radius;}else{x=node.x+radius;y=node.y-node.shape.height*0.5;}return[x,y,radius];}/**
	       * Get a point on a circle
	       * @param {Number} x
	       * @param {Number} y
	       * @param {Number} radius
	       * @param {Number} percentage. Value between 0 (line start) and 1 (line end)
	       * @return {Object} point
	       * @private
	       */},{key:'_pointOnCircle',value:function _pointOnCircle(x,y,radius,percentage){var angle=percentage*2*Math.PI;return{x:x+radius*Math.cos(angle),y:y-radius*Math.sin(angle)};}/**
	       * This function uses binary search to look for the point where the circle crosses the border of the node.
	       * @param node
	       * @param ctx
	       * @param options
	       * @returns {*}
	       * @private
	       */},{key:'_findBorderPositionCircle',value:function _findBorderPositionCircle(node,ctx,options){var x=options.x;var y=options.y;var low=options.low;var high=options.high;var direction=options.direction;var maxIterations=10;var iteration=0;var radius=this.options.selfReferenceSize;var pos=void 0,angle=void 0,distanceToBorder=void 0,distanceToPoint=void 0,difference=void 0;var threshold=0.05;var middle=(low+high)*0.5;while(low<=high&&iteration<maxIterations){middle=(low+high)*0.5;pos=this._pointOnCircle(x,y,radius,middle);angle=Math.atan2(node.y-pos.y,node.x-pos.x);distanceToBorder=node.distanceToBorder(ctx,angle);distanceToPoint=Math.sqrt(Math.pow(pos.x-node.x,2)+Math.pow(pos.y-node.y,2));difference=distanceToBorder-distanceToPoint;if(Math.abs(difference)<threshold){break;// found
	}else if(difference>0){// distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
	if(direction>0){low=middle;}else{high=middle;}}else{if(direction>0){high=middle;}else{low=middle;}}iteration++;}pos.t=middle;return pos;}/**
	       * Get the line width of the edge. Depends on width and whether one of the
	       * connected nodes is selected.
	       * @return {Number} width
	       * @private
	       */},{key:'getLineWidth',value:function getLineWidth(selected,hover){if(selected===true){return Math.max(this.selectionWidth,0.3/this.body.view.scale);}else{if(hover===true){return Math.max(this.hoverWidth,0.3/this.body.view.scale);}else{return Math.max(this.options.width,0.3/this.body.view.scale);}}}},{key:'getColor',value:function getColor(ctx,selected,hover){var colorOptions=this.options.color;if(colorOptions.inherit!==false){// when this is a loop edge, just use the 'from' method
	if(colorOptions.inherit==='both'&&this.from.id!==this.to.id){var grd=ctx.createLinearGradient(this.from.x,this.from.y,this.to.x,this.to.y);var fromColor=void 0,toColor=void 0;fromColor=this.from.options.color.highlight.border;toColor=this.to.options.color.highlight.border;if(this.from.selected===false&&this.to.selected===false){fromColor=util.overrideOpacity(this.from.options.color.border,this.options.color.opacity);toColor=util.overrideOpacity(this.to.options.color.border,this.options.color.opacity);}else if(this.from.selected===true&&this.to.selected===false){toColor=this.to.options.color.border;}else if(this.from.selected===false&&this.to.selected===true){fromColor=this.from.options.color.border;}grd.addColorStop(0,fromColor);grd.addColorStop(1,toColor);// -------------------- this returns -------------------- //
	return grd;}if(this.colorDirty===true){if(colorOptions.inherit==="to"){this.color.highlight=this.to.options.color.highlight.border;this.color.hover=this.to.options.color.hover.border;this.color.color=util.overrideOpacity(this.to.options.color.border,colorOptions.opacity);}else{// (this.options.color.inherit.source === "from") {
	this.color.highlight=this.from.options.color.highlight.border;this.color.hover=this.from.options.color.hover.border;this.color.color=util.overrideOpacity(this.from.options.color.border,colorOptions.opacity);}}}else if(this.colorDirty===true){this.color.highlight=colorOptions.highlight;this.color.hover=colorOptions.hover;this.color.color=util.overrideOpacity(colorOptions.color,colorOptions.opacity);}// if color inherit is on and gradients are used, the function has already returned by now.
	this.colorDirty=false;if(selected===true){return this.color.highlight;}else if(hover===true){return this.color.hover;}else{return this.color.color;}}/**
	       * Draw a line from a node to itself, a circle
	       * @param {CanvasRenderingContext2D} ctx
	       * @param {Number} x
	       * @param {Number} y
	       * @param {Number} radius
	       * @private
	       */},{key:'_circle',value:function _circle(ctx,x,y,radius){// draw shadow if enabled
	this.enableShadow(ctx);// draw a circle
	ctx.beginPath();ctx.arc(x,y,radius,0,2*Math.PI,false);ctx.stroke();// disable shadows for other elements.
	this.disableShadow(ctx);}/**
	       * Calculate the distance between a point (x3,y3) and a line segment from
	       * (x1,y1) to (x2,y2).
	       * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	       * @param {number} x1
	       * @param {number} y1
	       * @param {number} x2
	       * @param {number} y2
	       * @param {number} x3
	       * @param {number} y3
	       * @private
	       */},{key:'getDistanceToEdge',value:function getDistanceToEdge(x1,y1,x2,y2,x3,y3,via){// x3,y3 is the point
	var returnValue=0;if(this.from!=this.to){returnValue=this._getDistanceToEdge(x1,y1,x2,y2,x3,y3,via);}else{var _getCircleData10=this._getCircleData(),_getCircleData11=_slicedToArray(_getCircleData10,3),x=_getCircleData11[0],y=_getCircleData11[1],radius=_getCircleData11[2];var dx=x-x3;var dy=y-y3;returnValue=Math.abs(Math.sqrt(dx*dx+dy*dy)-radius);}if(this.labelModule.size.left<x3&&this.labelModule.size.left+this.labelModule.size.width>x3&&this.labelModule.size.top<y3&&this.labelModule.size.top+this.labelModule.size.height>y3){return 0;}else{return returnValue;}}},{key:'_getDistanceToLine',value:function _getDistanceToLine(x1,y1,x2,y2,x3,y3){var px=x2-x1;var py=y2-y1;var something=px*px+py*py;var u=((x3-x1)*px+(y3-y1)*py)/something;if(u>1){u=1;}else if(u<0){u=0;}var x=x1+u*px;var y=y1+u*py;var dx=x-x3;var dy=y-y3;//# Note: If the actual distance does not matter,
	//# if you only want to compare what this function
	//# returns to other results of this function, you
	//# can just return the squared distance instead
	//# (i.e. remove the sqrt) to gain a little performance
	return Math.sqrt(dx*dx+dy*dy);}/**
	       *
	       * @param ctx
	       * @param position
	       * @param viaNode
	       */},{key:'getArrowData',value:function getArrowData(ctx,position,viaNode,selected,hover){// set lets
	var angle=void 0;var arrowPoint=void 0;var node1=void 0;var node2=void 0;var guideOffset=void 0;var scaleFactor=void 0;var type=void 0;var lineWidth=this.getLineWidth(selected,hover);if(position==='from'){node1=this.from;node2=this.to;guideOffset=0.1;scaleFactor=this.options.arrows.from.scaleFactor;type=this.options.arrows.from.type;}else if(position==='to'){node1=this.to;node2=this.from;guideOffset=-0.1;scaleFactor=this.options.arrows.to.scaleFactor;type=this.options.arrows.to.type;}else{node1=this.to;node2=this.from;scaleFactor=this.options.arrows.middle.scaleFactor;type=this.options.arrows.middle.type;}// if not connected to itself
	if(node1!=node2){if(position!=='middle'){// draw arrow head
	if(this.options.smooth.enabled===true){arrowPoint=this.findBorderPosition(node1,ctx,{via:viaNode});var guidePos=this.getPoint(Math.max(0.0,Math.min(1.0,arrowPoint.t+guideOffset)),viaNode);angle=Math.atan2(arrowPoint.y-guidePos.y,arrowPoint.x-guidePos.x);}else{angle=Math.atan2(node1.y-node2.y,node1.x-node2.x);arrowPoint=this.findBorderPosition(node1,ctx);}}else{angle=Math.atan2(node1.y-node2.y,node1.x-node2.x);arrowPoint=this.getPoint(0.5,viaNode);// this is 0.6 to account for the size of the arrow.
	}}else{// draw circle
	var _getCircleData12=this._getCircleData(ctx),_getCircleData13=_slicedToArray(_getCircleData12,3),x=_getCircleData13[0],y=_getCircleData13[1],radius=_getCircleData13[2];if(position==='from'){arrowPoint=this.findBorderPosition(this.from,ctx,{x:x,y:y,low:0.25,high:0.6,direction:-1});angle=arrowPoint.t*-2*Math.PI+1.5*Math.PI+0.1*Math.PI;}else if(position==='to'){arrowPoint=this.findBorderPosition(this.from,ctx,{x:x,y:y,low:0.6,high:1.0,direction:1});angle=arrowPoint.t*-2*Math.PI+1.5*Math.PI-1.1*Math.PI;}else{arrowPoint=this._pointOnCircle(x,y,radius,0.175);angle=3.9269908169872414;// === 0.175 * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
	}}var length=15*scaleFactor+3*lineWidth;// 3* lineWidth is the width of the edge.
	var xi=arrowPoint.x-length*0.9*Math.cos(angle);var yi=arrowPoint.y-length*0.9*Math.sin(angle);var arrowCore={x:xi,y:yi};return{point:arrowPoint,core:arrowCore,angle:angle,length:length,type:type};}/**
	       *
	       * @param ctx
	       * @param selected
	       * @param hover
	       * @param arrowData
	       */},{key:'drawArrowHead',value:function drawArrowHead(ctx,selected,hover,arrowData){// set style
	ctx.strokeStyle=this.getColor(ctx,selected,hover);ctx.fillStyle=ctx.strokeStyle;ctx.lineWidth=this.getLineWidth(selected,hover);if(arrowData.type&&arrowData.type.toLowerCase()==='circle'){// draw circle at the end of the line
	ctx.circleEndpoint(arrowData.point.x,arrowData.point.y,arrowData.angle,arrowData.length);}else{// draw arrow at the end of the line
	ctx.arrowEndpoint(arrowData.point.x,arrowData.point.y,arrowData.angle,arrowData.length);}// draw shadow if enabled
	this.enableShadow(ctx);ctx.fill();// disable shadows for other elements.
	this.disableShadow(ctx);}},{key:'enableShadow',value:function enableShadow(ctx){if(this.options.shadow.enabled===true){ctx.shadowColor=this.options.shadow.color;ctx.shadowBlur=this.options.shadow.size;ctx.shadowOffsetX=this.options.shadow.x;ctx.shadowOffsetY=this.options.shadow.y;}}},{key:'disableShadow',value:function disableShadow(ctx){if(this.options.shadow.enabled===true){ctx.shadowColor='rgba(0,0,0,0)';ctx.shadowBlur=0;ctx.shadowOffsetX=0;ctx.shadowOffsetY=0;}}}]);return EdgeBase;}();exports.default=EdgeBase;/***/},/* 92 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _BezierEdgeBase2=__webpack_require__(90);var _BezierEdgeBase3=_interopRequireDefault(_BezierEdgeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var BezierEdgeDynamic=function(_BezierEdgeBase){_inherits(BezierEdgeDynamic,_BezierEdgeBase);function BezierEdgeDynamic(options,body,labelModule){_classCallCheck(this,BezierEdgeDynamic);// --> this calls the setOptions below
	var _this=_possibleConstructorReturn(this,(BezierEdgeDynamic.__proto__||Object.getPrototypeOf(BezierEdgeDynamic)).call(this,options,body,labelModule));//this.via = undefined; // Here for completeness but not allowed to defined before super() is invoked.
	_this._boundFunction=function(){_this.positionBezierNode();};_this.body.emitter.on("_repositionBezierNodes",_this._boundFunction);return _this;}_createClass(BezierEdgeDynamic,[{key:"setOptions",value:function setOptions(options){// check if the physics has changed.
	var physicsChange=false;if(this.options.physics!==options.physics){physicsChange=true;}// set the options and the to and from nodes
	this.options=options;this.id=this.options.id;this.from=this.body.nodes[this.options.from];this.to=this.body.nodes[this.options.to];// setup the support node and connect
	this.setupSupportNode();this.connect();// when we change the physics state of the edge, we reposition the support node.
	if(physicsChange===true){this.via.setOptions({physics:this.options.physics});this.positionBezierNode();}}},{key:"connect",value:function connect(){this.from=this.body.nodes[this.options.from];this.to=this.body.nodes[this.options.to];if(this.from===undefined||this.to===undefined||this.options.physics===false){this.via.setOptions({physics:false});}else{// fix weird behaviour where a self referencing node has physics enabled
	if(this.from.id===this.to.id){this.via.setOptions({physics:false});}else{this.via.setOptions({physics:true});}}}/**
	       * remove the support nodes
	       * @returns {boolean}
	       */},{key:"cleanup",value:function cleanup(){this.body.emitter.off("_repositionBezierNodes",this._boundFunction);if(this.via!==undefined){delete this.body.nodes[this.via.id];this.via=undefined;return true;}return false;}/**
	       * Bezier curves require an anchor point to calculate the smooth flow. These points are nodes. These nodes are invisible but
	       * are used for the force calculation.
	       *
	       * The changed data is not called, if needed, it is returned by the main edge constructor.
	       * @private
	       */},{key:"setupSupportNode",value:function setupSupportNode(){if(this.via===undefined){var nodeId="edgeId:"+this.id;var node=this.body.functions.createNode({id:nodeId,shape:'circle',physics:true,hidden:true});this.body.nodes[nodeId]=node;this.via=node;this.via.parentEdgeId=this.id;this.positionBezierNode();}}},{key:"positionBezierNode",value:function positionBezierNode(){if(this.via!==undefined&&this.from!==undefined&&this.to!==undefined){this.via.x=0.5*(this.from.x+this.to.x);this.via.y=0.5*(this.from.y+this.to.y);}else if(this.via!==undefined){this.via.x=0;this.via.y=0;}}/**
	       * Draw a line between two nodes
	       * @param {CanvasRenderingContext2D} ctx
	       * @private
	       */},{key:"_line",value:function _line(ctx,viaNode){// draw a straight line
	ctx.beginPath();ctx.moveTo(this.fromPoint.x,this.fromPoint.y);// fallback to normal straight edges
	if(viaNode.x===undefined){ctx.lineTo(this.toPoint.x,this.toPoint.y);}else{ctx.quadraticCurveTo(viaNode.x,viaNode.y,this.toPoint.x,this.toPoint.y);}// draw shadow if enabled
	this.enableShadow(ctx);ctx.stroke();this.disableShadow(ctx);}},{key:"getViaNode",value:function getViaNode(){return this.via;}/**
	       * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	       * @param percentage
	       * @param viaNode
	       * @returns {{x: number, y: number}}
	       * @private
	       */},{key:"getPoint",value:function getPoint(percentage){var viaNode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.via;var t=percentage;var x=void 0,y=void 0;if(this.from===this.to){var _getCircleData=this._getCircleData(this.from),_getCircleData2=_slicedToArray(_getCircleData,3),cx=_getCircleData2[0],cy=_getCircleData2[1],cr=_getCircleData2[2];var a=2*Math.PI*(1-t);x=cx+cr*Math.sin(a);y=cy+cr-cr*(1-Math.cos(a));}else{x=Math.pow(1-t,2)*this.fromPoint.x+2*t*(1-t)*viaNode.x+Math.pow(t,2)*this.toPoint.x;y=Math.pow(1-t,2)*this.fromPoint.y+2*t*(1-t)*viaNode.y+Math.pow(t,2)*this.toPoint.y;}return{x:x,y:y};}},{key:"_findBorderPosition",value:function _findBorderPosition(nearNode,ctx){return this._findBorderPositionBezier(nearNode,ctx,this.via);}},{key:"_getDistanceToEdge",value:function _getDistanceToEdge(x1,y1,x2,y2,x3,y3){// x3,y3 is the point
	return this._getDistanceToBezierEdge(x1,y1,x2,y2,x3,y3,this.via);}}]);return BezierEdgeDynamic;}(_BezierEdgeBase3.default);exports.default=BezierEdgeDynamic;/***/},/* 93 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _BezierEdgeBase2=__webpack_require__(90);var _BezierEdgeBase3=_interopRequireDefault(_BezierEdgeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var BezierEdgeStatic=function(_BezierEdgeBase){_inherits(BezierEdgeStatic,_BezierEdgeBase);function BezierEdgeStatic(options,body,labelModule){_classCallCheck(this,BezierEdgeStatic);return _possibleConstructorReturn(this,(BezierEdgeStatic.__proto__||Object.getPrototypeOf(BezierEdgeStatic)).call(this,options,body,labelModule));}/**
	     * Draw a line between two nodes
	     * @param {CanvasRenderingContext2D} ctx
	     * @private
	     */_createClass(BezierEdgeStatic,[{key:'_line',value:function _line(ctx,viaNode){// draw a straight line
	ctx.beginPath();ctx.moveTo(this.fromPoint.x,this.fromPoint.y);// fallback to normal straight edges
	if(viaNode.x===undefined){ctx.lineTo(this.toPoint.x,this.toPoint.y);}else{ctx.quadraticCurveTo(viaNode.x,viaNode.y,this.toPoint.x,this.toPoint.y);}// draw shadow if enabled
	this.enableShadow(ctx);ctx.stroke();this.disableShadow(ctx);}},{key:'getViaNode',value:function getViaNode(){return this._getViaCoordinates();}/**
	       * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.
	       * @returns {{x: undefined, y: undefined}}
	       * @private
	       */},{key:'_getViaCoordinates',value:function _getViaCoordinates(){var xVia=undefined;var yVia=undefined;var factor=this.options.smooth.roundness;var type=this.options.smooth.type;var dx=Math.abs(this.from.x-this.to.x);var dy=Math.abs(this.from.y-this.to.y);if(type==='discrete'||type==='diagonalCross'){if(Math.abs(this.from.x-this.to.x)<=Math.abs(this.from.y-this.to.y)){if(this.from.y>=this.to.y){if(this.from.x<=this.to.x){xVia=this.from.x+factor*dy;yVia=this.from.y-factor*dy;}else if(this.from.x>this.to.x){xVia=this.from.x-factor*dy;yVia=this.from.y-factor*dy;}}else if(this.from.y<this.to.y){if(this.from.x<=this.to.x){xVia=this.from.x+factor*dy;yVia=this.from.y+factor*dy;}else if(this.from.x>this.to.x){xVia=this.from.x-factor*dy;yVia=this.from.y+factor*dy;}}if(type==="discrete"){xVia=dx<factor*dy?this.from.x:xVia;}}else if(Math.abs(this.from.x-this.to.x)>Math.abs(this.from.y-this.to.y)){if(this.from.y>=this.to.y){if(this.from.x<=this.to.x){xVia=this.from.x+factor*dx;yVia=this.from.y-factor*dx;}else if(this.from.x>this.to.x){xVia=this.from.x-factor*dx;yVia=this.from.y-factor*dx;}}else if(this.from.y<this.to.y){if(this.from.x<=this.to.x){xVia=this.from.x+factor*dx;yVia=this.from.y+factor*dx;}else if(this.from.x>this.to.x){xVia=this.from.x-factor*dx;yVia=this.from.y+factor*dx;}}if(type==="discrete"){yVia=dy<factor*dx?this.from.y:yVia;}}}else if(type==="straightCross"){if(Math.abs(this.from.x-this.to.x)<=Math.abs(this.from.y-this.to.y)){// up - down
	xVia=this.from.x;if(this.from.y<this.to.y){yVia=this.to.y-(1-factor)*dy;}else{yVia=this.to.y+(1-factor)*dy;}}else if(Math.abs(this.from.x-this.to.x)>Math.abs(this.from.y-this.to.y)){// left - right
	if(this.from.x<this.to.x){xVia=this.to.x-(1-factor)*dx;}else{xVia=this.to.x+(1-factor)*dx;}yVia=this.from.y;}}else if(type==='horizontal'){if(this.from.x<this.to.x){xVia=this.to.x-(1-factor)*dx;}else{xVia=this.to.x+(1-factor)*dx;}yVia=this.from.y;}else if(type==='vertical'){xVia=this.from.x;if(this.from.y<this.to.y){yVia=this.to.y-(1-factor)*dy;}else{yVia=this.to.y+(1-factor)*dy;}}else if(type==='curvedCW'){dx=this.to.x-this.from.x;dy=this.from.y-this.to.y;var radius=Math.sqrt(dx*dx+dy*dy);var pi=Math.PI;var originalAngle=Math.atan2(dy,dx);var myAngle=(originalAngle+(factor*0.5+0.5)*pi)%(2*pi);xVia=this.from.x+(factor*0.5+0.5)*radius*Math.sin(myAngle);yVia=this.from.y+(factor*0.5+0.5)*radius*Math.cos(myAngle);}else if(type==='curvedCCW'){dx=this.to.x-this.from.x;dy=this.from.y-this.to.y;var _radius=Math.sqrt(dx*dx+dy*dy);var _pi=Math.PI;var _originalAngle=Math.atan2(dy,dx);var _myAngle=(_originalAngle+(-factor*0.5+0.5)*_pi)%(2*_pi);xVia=this.from.x+(factor*0.5+0.5)*_radius*Math.sin(_myAngle);yVia=this.from.y+(factor*0.5+0.5)*_radius*Math.cos(_myAngle);}else{// continuous
	if(Math.abs(this.from.x-this.to.x)<=Math.abs(this.from.y-this.to.y)){if(this.from.y>=this.to.y){if(this.from.x<=this.to.x){xVia=this.from.x+factor*dy;yVia=this.from.y-factor*dy;xVia=this.to.x<xVia?this.to.x:xVia;}else if(this.from.x>this.to.x){xVia=this.from.x-factor*dy;yVia=this.from.y-factor*dy;xVia=this.to.x>xVia?this.to.x:xVia;}}else if(this.from.y<this.to.y){if(this.from.x<=this.to.x){xVia=this.from.x+factor*dy;yVia=this.from.y+factor*dy;xVia=this.to.x<xVia?this.to.x:xVia;}else if(this.from.x>this.to.x){xVia=this.from.x-factor*dy;yVia=this.from.y+factor*dy;xVia=this.to.x>xVia?this.to.x:xVia;}}}else if(Math.abs(this.from.x-this.to.x)>Math.abs(this.from.y-this.to.y)){if(this.from.y>=this.to.y){if(this.from.x<=this.to.x){xVia=this.from.x+factor*dx;yVia=this.from.y-factor*dx;yVia=this.to.y>yVia?this.to.y:yVia;}else if(this.from.x>this.to.x){xVia=this.from.x-factor*dx;yVia=this.from.y-factor*dx;yVia=this.to.y>yVia?this.to.y:yVia;}}else if(this.from.y<this.to.y){if(this.from.x<=this.to.x){xVia=this.from.x+factor*dx;yVia=this.from.y+factor*dx;yVia=this.to.y<yVia?this.to.y:yVia;}else if(this.from.x>this.to.x){xVia=this.from.x-factor*dx;yVia=this.from.y+factor*dx;yVia=this.to.y<yVia?this.to.y:yVia;}}}}return{x:xVia,y:yVia};}},{key:'_findBorderPosition',value:function _findBorderPosition(nearNode,ctx){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return this._findBorderPositionBezier(nearNode,ctx,options.via);}},{key:'_getDistanceToEdge',value:function _getDistanceToEdge(x1,y1,x2,y2,x3,y3){var viaNode=arguments.length>6&&arguments[6]!==undefined?arguments[6]:this._getViaCoordinates();// x3,y3 is the point
	return this._getDistanceToBezierEdge(x1,y1,x2,y2,x3,y3,viaNode);}/**
	       * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	       * @param percentage
	       * @param viaNode
	       * @returns {{x: number, y: number}}
	       * @private
	       */},{key:'getPoint',value:function getPoint(percentage){var viaNode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this._getViaCoordinates();var t=percentage;var x=Math.pow(1-t,2)*this.fromPoint.x+2*t*(1-t)*viaNode.x+Math.pow(t,2)*this.toPoint.x;var y=Math.pow(1-t,2)*this.fromPoint.y+2*t*(1-t)*viaNode.y+Math.pow(t,2)*this.toPoint.y;return{x:x,y:y};}}]);return BezierEdgeStatic;}(_BezierEdgeBase3.default);exports.default=BezierEdgeStatic;/***/},/* 94 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _EdgeBase2=__webpack_require__(91);var _EdgeBase3=_interopRequireDefault(_EdgeBase2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var StraightEdge=function(_EdgeBase){_inherits(StraightEdge,_EdgeBase);function StraightEdge(options,body,labelModule){_classCallCheck(this,StraightEdge);return _possibleConstructorReturn(this,(StraightEdge.__proto__||Object.getPrototypeOf(StraightEdge)).call(this,options,body,labelModule));}/**
	     * Draw a line between two nodes
	     * @param {CanvasRenderingContext2D} ctx
	     * @private
	     */_createClass(StraightEdge,[{key:'_line',value:function _line(ctx){// draw a straight line
	ctx.beginPath();ctx.moveTo(this.fromPoint.x,this.fromPoint.y);ctx.lineTo(this.toPoint.x,this.toPoint.y);// draw shadow if enabled
	this.enableShadow(ctx);ctx.stroke();this.disableShadow(ctx);}},{key:'getViaNode',value:function getViaNode(){return undefined;}/**
	       * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	       * @param percentage
	       * @param via
	       * @returns {{x: number, y: number}}
	       * @private
	       */},{key:'getPoint',value:function getPoint(percentage){return{x:(1-percentage)*this.fromPoint.x+percentage*this.toPoint.x,y:(1-percentage)*this.fromPoint.y+percentage*this.toPoint.y};}},{key:'_findBorderPosition',value:function _findBorderPosition(nearNode,ctx){var node1=this.to;var node2=this.from;if(nearNode.id===this.from.id){node1=this.from;node2=this.to;}var angle=Math.atan2(node1.y-node2.y,node1.x-node2.x);var dx=node1.x-node2.x;var dy=node1.y-node2.y;var edgeSegmentLength=Math.sqrt(dx*dx+dy*dy);var toBorderDist=nearNode.distanceToBorder(ctx,angle);var toBorderPoint=(edgeSegmentLength-toBorderDist)/edgeSegmentLength;var borderPos={};borderPos.x=(1-toBorderPoint)*node2.x+toBorderPoint*node1.x;borderPos.y=(1-toBorderPoint)*node2.y+toBorderPoint*node1.y;return borderPos;}},{key:'_getDistanceToEdge',value:function _getDistanceToEdge(x1,y1,x2,y2,x3,y3){// x3,y3 is the point
	return this._getDistanceToLine(x1,y1,x2,y2,x3,y3);}}]);return StraightEdge;}(_EdgeBase3.default);exports.default=StraightEdge;/***/},/* 95 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _BarnesHutSolver=__webpack_require__(96);var _BarnesHutSolver2=_interopRequireDefault(_BarnesHutSolver);var _RepulsionSolver=__webpack_require__(97);var _RepulsionSolver2=_interopRequireDefault(_RepulsionSolver);var _HierarchicalRepulsionSolver=__webpack_require__(98);var _HierarchicalRepulsionSolver2=_interopRequireDefault(_HierarchicalRepulsionSolver);var _SpringSolver=__webpack_require__(99);var _SpringSolver2=_interopRequireDefault(_SpringSolver);var _HierarchicalSpringSolver=__webpack_require__(100);var _HierarchicalSpringSolver2=_interopRequireDefault(_HierarchicalSpringSolver);var _CentralGravitySolver=__webpack_require__(101);var _CentralGravitySolver2=_interopRequireDefault(_CentralGravitySolver);var _FA2BasedRepulsionSolver=__webpack_require__(102);var _FA2BasedRepulsionSolver2=_interopRequireDefault(_FA2BasedRepulsionSolver);var _FA2BasedCentralGravitySolver=__webpack_require__(103);var _FA2BasedCentralGravitySolver2=_interopRequireDefault(_FA2BasedCentralGravitySolver);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var PhysicsEngine=function(){function PhysicsEngine(body){_classCallCheck(this,PhysicsEngine);this.body=body;this.physicsBody={physicsNodeIndices:[],physicsEdgeIndices:[],forces:{},velocities:{}};this.physicsEnabled=true;this.simulationInterval=1000/60;this.requiresTimeout=true;this.previousStates={};this.referenceState={};this.freezeCache={};this.renderTimer=undefined;// parameters for the adaptive timestep
	this.adaptiveTimestep=false;this.adaptiveTimestepEnabled=false;this.adaptiveCounter=0;this.adaptiveInterval=3;this.stabilized=false;this.startedStabilization=false;this.stabilizationIterations=0;this.ready=false;// will be set to true if the stabilize
	// default options
	this.options={};this.defaultOptions={enabled:true,barnesHut:{theta:0.5,gravitationalConstant:-2000,centralGravity:0.3,springLength:95,springConstant:0.04,damping:0.09,avoidOverlap:0},forceAtlas2Based:{theta:0.5,gravitationalConstant:-50,centralGravity:0.01,springConstant:0.08,springLength:100,damping:0.4,avoidOverlap:0},repulsion:{centralGravity:0.2,springLength:200,springConstant:0.05,nodeDistance:100,damping:0.09,avoidOverlap:0},hierarchicalRepulsion:{centralGravity:0.0,springLength:100,springConstant:0.01,nodeDistance:120,damping:0.09},maxVelocity:50,minVelocity:0.75,// px/s
	solver:'barnesHut',stabilization:{enabled:true,iterations:1000,// maximum number of iteration to stabilize
	updateInterval:50,onlyDynamicEdges:false,fit:true},timestep:0.5,adaptiveTimestep:true};util.extend(this.options,this.defaultOptions);this.timestep=0.5;this.layoutFailed=false;this.bindEventListeners();}_createClass(PhysicsEngine,[{key:'bindEventListeners',value:function bindEventListeners(){var _this=this;this.body.emitter.on('initPhysics',function(){_this.initPhysics();});this.body.emitter.on('_layoutFailed',function(){_this.layoutFailed=true;});this.body.emitter.on('resetPhysics',function(){_this.stopSimulation();_this.ready=false;});this.body.emitter.on('disablePhysics',function(){_this.physicsEnabled=false;_this.stopSimulation();});this.body.emitter.on('restorePhysics',function(){_this.setOptions(_this.options);if(_this.ready===true){_this.startSimulation();}});this.body.emitter.on('startSimulation',function(){if(_this.ready===true){_this.startSimulation();}});this.body.emitter.on('stopSimulation',function(){_this.stopSimulation();});this.body.emitter.on('destroy',function(){_this.stopSimulation(false);_this.body.emitter.off();});// this event will trigger a rebuilding of the cache everything. Used when nodes or edges have been added or removed.
	this.body.emitter.on("_dataChanged",function(){// update shortcut lists
	_this.updatePhysicsData();});// debug: show forces
	// this.body.emitter.on("afterDrawing", (ctx) => {this._drawForces(ctx);});
	}/**
	       * set the physics options
	       * @param options
	       */},{key:'setOptions',value:function setOptions(options){if(options!==undefined){if(options===false){this.options.enabled=false;this.physicsEnabled=false;this.stopSimulation();}else{this.physicsEnabled=true;util.selectiveNotDeepExtend(['stabilization'],this.options,options);util.mergeOptions(this.options,options,'stabilization');if(options.enabled===undefined){this.options.enabled=true;}if(this.options.enabled===false){this.physicsEnabled=false;this.stopSimulation();}// set the timestep
	this.timestep=this.options.timestep;}}this.init();}/**
	       * configure the engine.
	       */},{key:'init',value:function init(){var options;if(this.options.solver==='forceAtlas2Based'){options=this.options.forceAtlas2Based;this.nodesSolver=new _FA2BasedRepulsionSolver2.default(this.body,this.physicsBody,options);this.edgesSolver=new _SpringSolver2.default(this.body,this.physicsBody,options);this.gravitySolver=new _FA2BasedCentralGravitySolver2.default(this.body,this.physicsBody,options);}else if(this.options.solver==='repulsion'){options=this.options.repulsion;this.nodesSolver=new _RepulsionSolver2.default(this.body,this.physicsBody,options);this.edgesSolver=new _SpringSolver2.default(this.body,this.physicsBody,options);this.gravitySolver=new _CentralGravitySolver2.default(this.body,this.physicsBody,options);}else if(this.options.solver==='hierarchicalRepulsion'){options=this.options.hierarchicalRepulsion;this.nodesSolver=new _HierarchicalRepulsionSolver2.default(this.body,this.physicsBody,options);this.edgesSolver=new _HierarchicalSpringSolver2.default(this.body,this.physicsBody,options);this.gravitySolver=new _CentralGravitySolver2.default(this.body,this.physicsBody,options);}else{// barnesHut
	options=this.options.barnesHut;this.nodesSolver=new _BarnesHutSolver2.default(this.body,this.physicsBody,options);this.edgesSolver=new _SpringSolver2.default(this.body,this.physicsBody,options);this.gravitySolver=new _CentralGravitySolver2.default(this.body,this.physicsBody,options);}this.modelOptions=options;}/**
	       * initialize the engine
	       */},{key:'initPhysics',value:function initPhysics(){if(this.physicsEnabled===true&&this.options.enabled===true){if(this.options.stabilization.enabled===true){this.stabilize();}else{this.stabilized=false;this.ready=true;this.body.emitter.emit('fit',{},this.layoutFailed);// if the layout failed, we use the approximation for the zoom
	this.startSimulation();}}else{this.ready=true;this.body.emitter.emit('fit');}}/**
	       * Start the simulation
	       */},{key:'startSimulation',value:function startSimulation(){if(this.physicsEnabled===true&&this.options.enabled===true){this.stabilized=false;// when visible, adaptivity is disabled.
	this.adaptiveTimestep=false;// this sets the width of all nodes initially which could be required for the avoidOverlap
	this.body.emitter.emit("_resizeNodes");if(this.viewFunction===undefined){this.viewFunction=this.simulationStep.bind(this);this.body.emitter.on('initRedraw',this.viewFunction);this.body.emitter.emit('_startRendering');}}else{this.body.emitter.emit('_redraw');}}/**
	       * Stop the simulation, force stabilization.
	       */},{key:'stopSimulation',value:function stopSimulation(){var emit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;this.stabilized=true;if(emit===true){this._emitStabilized();}if(this.viewFunction!==undefined){this.body.emitter.off('initRedraw',this.viewFunction);this.viewFunction=undefined;if(emit===true){this.body.emitter.emit('_stopRendering');}}}/**
	       * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.
	       *
	       */},{key:'simulationStep',value:function simulationStep(){// check if the physics have settled
	var startTime=Date.now();this.physicsTick();var physicsTime=Date.now()-startTime;// run double speed if it is a little graph
	if((physicsTime<0.4*this.simulationInterval||this.runDoubleSpeed===true)&&this.stabilized===false){this.physicsTick();// this makes sure there is no jitter. The decision is taken once to run it at double speed.
	this.runDoubleSpeed=true;}if(this.stabilized===true){this.stopSimulation();}}/**
	       * trigger the stabilized event.
	       * @private
	       */},{key:'_emitStabilized',value:function _emitStabilized(){var _this2=this;var amountOfIterations=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.stabilizationIterations;if(this.stabilizationIterations>1||this.startedStabilization===true){setTimeout(function(){_this2.body.emitter.emit('stabilized',{iterations:amountOfIterations});_this2.startedStabilization=false;_this2.stabilizationIterations=0;},0);}}/**
	       * A single simulation step (or 'tick') in the physics simulation
	       *
	       * @private
	       */},{key:'physicsTick',value:function physicsTick(){// this is here to ensure that there is no start event when the network is already stable.
	if(this.startedStabilization===false){this.body.emitter.emit('startStabilizing');this.startedStabilization=true;}if(this.stabilized===false){// adaptivity means the timestep adapts to the situation, only applicable for stabilization
	if(this.adaptiveTimestep===true&&this.adaptiveTimestepEnabled===true){// this is the factor for increasing the timestep on success.
	var factor=1.2;// we assume the adaptive interval is
	if(this.adaptiveCounter%this.adaptiveInterval===0){// we leave the timestep stable for "interval" iterations.
	// first the big step and revert. Revert saves the reference state.
	this.timestep=2*this.timestep;this.calculateForces();this.moveNodes();this.revert();// now the normal step. Since this is the last step, it is the more stable one and we will take this.
	this.timestep=0.5*this.timestep;// since it's half the step, we do it twice.
	this.calculateForces();this.moveNodes();this.calculateForces();this.moveNodes();// we compare the two steps. if it is acceptable we double the step.
	if(this._evaluateStepQuality()===true){this.timestep=factor*this.timestep;}else{// if not, we decrease the step to a minimum of the options timestep.
	// if the decreased timestep is smaller than the options step, we do not reset the counter
	// we assume that the options timestep is stable enough.
	if(this.timestep/factor<this.options.timestep){this.timestep=this.options.timestep;}else{// if the timestep was larger than 2 times the option one we check the adaptivity again to ensure
	// that large instabilities do not form.
	this.adaptiveCounter=-1;// check again next iteration
	this.timestep=Math.max(this.options.timestep,this.timestep/factor);}}}else{// normal step, keeping timestep constant
	this.calculateForces();this.moveNodes();}// increment the counter
	this.adaptiveCounter+=1;}else{// case for the static timestep, we reset it to the one in options and take a normal step.
	this.timestep=this.options.timestep;this.calculateForces();this.moveNodes();}// determine if the network has stabilzied
	if(this.stabilized===true){this.revert();}this.stabilizationIterations++;}}/**
	       * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.
	       *
	       * @private
	       */},{key:'updatePhysicsData',value:function updatePhysicsData(){this.physicsBody.forces={};this.physicsBody.physicsNodeIndices=[];this.physicsBody.physicsEdgeIndices=[];var nodes=this.body.nodes;var edges=this.body.edges;// get node indices for physics
	for(var nodeId in nodes){if(nodes.hasOwnProperty(nodeId)){if(nodes[nodeId].options.physics===true){this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);}}}// get edge indices for physics
	for(var edgeId in edges){if(edges.hasOwnProperty(edgeId)){if(edges[edgeId].options.physics===true){this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);}}}// get the velocity and the forces vector
	for(var i=0;i<this.physicsBody.physicsNodeIndices.length;i++){var _nodeId=this.physicsBody.physicsNodeIndices[i];this.physicsBody.forces[_nodeId]={x:0,y:0};// forces can be reset because they are recalculated. Velocities have to persist.
	if(this.physicsBody.velocities[_nodeId]===undefined){this.physicsBody.velocities[_nodeId]={x:0,y:0};}}// clean deleted nodes from the velocity vector
	for(var _nodeId2 in this.physicsBody.velocities){if(nodes[_nodeId2]===undefined){delete this.physicsBody.velocities[_nodeId2];}}}/**
	       * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.
	       */},{key:'revert',value:function revert(){var nodeIds=Object.keys(this.previousStates);var nodes=this.body.nodes;var velocities=this.physicsBody.velocities;this.referenceState={};for(var i=0;i<nodeIds.length;i++){var nodeId=nodeIds[i];if(nodes[nodeId]!==undefined){if(nodes[nodeId].options.physics===true){this.referenceState[nodeId]={positions:{x:nodes[nodeId].x,y:nodes[nodeId].y}};velocities[nodeId].x=this.previousStates[nodeId].vx;velocities[nodeId].y=this.previousStates[nodeId].vy;nodes[nodeId].x=this.previousStates[nodeId].x;nodes[nodeId].y=this.previousStates[nodeId].y;}}else{delete this.previousStates[nodeId];}}}/**
	       * This compares the reference state to the current state
	       */},{key:'_evaluateStepQuality',value:function _evaluateStepQuality(){var dx=void 0,dy=void 0,dpos=void 0;var nodes=this.body.nodes;var reference=this.referenceState;var posThreshold=0.3;for(var nodeId in this.referenceState){if(this.referenceState.hasOwnProperty(nodeId)&&nodes[nodeId]!==undefined){dx=nodes[nodeId].x-reference[nodeId].positions.x;dy=nodes[nodeId].y-reference[nodeId].positions.y;dpos=Math.sqrt(Math.pow(dx,2)+Math.pow(dy,2));if(dpos>posThreshold){return false;}}}return true;}/**
	       * move the nodes one timestep and check if they are stabilized
	       * @returns {boolean}
	       */},{key:'moveNodes',value:function moveNodes(){var nodeIndices=this.physicsBody.physicsNodeIndices;var maxVelocity=this.options.maxVelocity?this.options.maxVelocity:1e9;var maxNodeVelocity=0;var averageNodeVelocity=0;// the velocity threshold (energy in the system) for the adaptivity toggle
	var velocityAdaptiveThreshold=5;for(var i=0;i<nodeIndices.length;i++){var nodeId=nodeIndices[i];var nodeVelocity=this._performStep(nodeId,maxVelocity);// stabilized is true if stabilized is true and velocity is smaller than vmin --> all nodes must be stabilized
	maxNodeVelocity=Math.max(maxNodeVelocity,nodeVelocity);averageNodeVelocity+=nodeVelocity;}// evaluating the stabilized and adaptiveTimestepEnabled conditions
	this.adaptiveTimestepEnabled=averageNodeVelocity/nodeIndices.length<velocityAdaptiveThreshold;this.stabilized=maxNodeVelocity<this.options.minVelocity;}/**
	       * Perform the actual step
	       *
	       * @param nodeId
	       * @param maxVelocity
	       * @returns {number}
	       * @private
	       */},{key:'_performStep',value:function _performStep(nodeId,maxVelocity){var node=this.body.nodes[nodeId];var timestep=this.timestep;var forces=this.physicsBody.forces;var velocities=this.physicsBody.velocities;// store the state so we can revert
	this.previousStates[nodeId]={x:node.x,y:node.y,vx:velocities[nodeId].x,vy:velocities[nodeId].y};if(node.options.fixed.x===false){var dx=this.modelOptions.damping*velocities[nodeId].x;// damping force
	var ax=(forces[nodeId].x-dx)/node.options.mass;// acceleration
	velocities[nodeId].x+=ax*timestep;// velocity
	velocities[nodeId].x=Math.abs(velocities[nodeId].x)>maxVelocity?velocities[nodeId].x>0?maxVelocity:-maxVelocity:velocities[nodeId].x;node.x+=velocities[nodeId].x*timestep;// position
	}else{forces[nodeId].x=0;velocities[nodeId].x=0;}if(node.options.fixed.y===false){var dy=this.modelOptions.damping*velocities[nodeId].y;// damping force
	var ay=(forces[nodeId].y-dy)/node.options.mass;// acceleration
	velocities[nodeId].y+=ay*timestep;// velocity
	velocities[nodeId].y=Math.abs(velocities[nodeId].y)>maxVelocity?velocities[nodeId].y>0?maxVelocity:-maxVelocity:velocities[nodeId].y;node.y+=velocities[nodeId].y*timestep;// position
	}else{forces[nodeId].y=0;velocities[nodeId].y=0;}var totalVelocity=Math.sqrt(Math.pow(velocities[nodeId].x,2)+Math.pow(velocities[nodeId].y,2));return totalVelocity;}/**
	       * calculate the forces for one physics iteration.
	       */},{key:'calculateForces',value:function calculateForces(){this.gravitySolver.solve();this.nodesSolver.solve();this.edgesSolver.solve();}/**
	       * When initializing and stabilizing, we can freeze nodes with a predefined position. This greatly speeds up stabilization
	       * because only the supportnodes for the smoothCurves have to settle.
	       *
	       * @private
	       */},{key:'_freezeNodes',value:function _freezeNodes(){var nodes=this.body.nodes;for(var id in nodes){if(nodes.hasOwnProperty(id)){if(nodes[id].x&&nodes[id].y){this.freezeCache[id]={x:nodes[id].options.fixed.x,y:nodes[id].options.fixed.y};nodes[id].options.fixed.x=true;nodes[id].options.fixed.y=true;}}}}/**
	       * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.
	       *
	       * @private
	       */},{key:'_restoreFrozenNodes',value:function _restoreFrozenNodes(){var nodes=this.body.nodes;for(var id in nodes){if(nodes.hasOwnProperty(id)){if(this.freezeCache[id]!==undefined){nodes[id].options.fixed.x=this.freezeCache[id].x;nodes[id].options.fixed.y=this.freezeCache[id].y;}}}this.freezeCache={};}/**
	       * Find a stable position for all nodes
	       */},{key:'stabilize',value:function stabilize(){var _this3=this;var iterations=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.options.stabilization.iterations;if(typeof iterations!=='number'){console.log('The stabilize method needs a numeric amount of iterations. Switching to default: ',this.options.stabilization.iterations);iterations=this.options.stabilization.iterations;}if(this.physicsBody.physicsNodeIndices.length===0){this.ready=true;return;}// enable adaptive timesteps
	this.adaptiveTimestep=true&&this.options.adaptiveTimestep;// this sets the width of all nodes initially which could be required for the avoidOverlap
	this.body.emitter.emit("_resizeNodes");// stop the render loop
	this.stopSimulation();// set stabilze to false
	this.stabilized=false;// block redraw requests
	this.body.emitter.emit('_blockRedraw');this.targetIterations=iterations;// start the stabilization
	if(this.options.stabilization.onlyDynamicEdges===true){this._freezeNodes();}this.stabilizationIterations=0;setTimeout(function(){return _this3._stabilizationBatch();},0);}/**
	       * One batch of stabilization
	       * @private
	       */},{key:'_stabilizationBatch',value:function _stabilizationBatch(){// this is here to ensure that there is at least one start event.
	if(this.startedStabilization===false){this.body.emitter.emit('startStabilizing');this.startedStabilization=true;}var count=0;while(this.stabilized===false&&count<this.options.stabilization.updateInterval&&this.stabilizationIterations<this.targetIterations){this.physicsTick();count++;}if(this.stabilized===false&&this.stabilizationIterations<this.targetIterations){this.body.emitter.emit('stabilizationProgress',{iterations:this.stabilizationIterations,total:this.targetIterations});setTimeout(this._stabilizationBatch.bind(this),0);}else{this._finalizeStabilization();}}/**
	       * Wrap up the stabilization, fit and emit the events.
	       * @private
	       */},{key:'_finalizeStabilization',value:function _finalizeStabilization(){this.body.emitter.emit('_allowRedraw');if(this.options.stabilization.fit===true){this.body.emitter.emit('fit');}if(this.options.stabilization.onlyDynamicEdges===true){this._restoreFrozenNodes();}this.body.emitter.emit('stabilizationIterationsDone');this.body.emitter.emit('_requestRedraw');if(this.stabilized===true){this._emitStabilized();}else{this.startSimulation();}this.ready=true;}},{key:'_drawForces',value:function _drawForces(ctx){for(var i=0;i<this.physicsBody.physicsNodeIndices.length;i++){var node=this.body.nodes[this.physicsBody.physicsNodeIndices[i]];var force=this.physicsBody.forces[this.physicsBody.physicsNodeIndices[i]];var factor=20;var colorFactor=0.03;var forceSize=Math.sqrt(Math.pow(force.x,2)+Math.pow(force.x,2));var size=Math.min(Math.max(5,forceSize),15);var arrowSize=3*size;var color=util.HSVToHex((180-Math.min(1,Math.max(0,colorFactor*forceSize))*180)/360,1,1);ctx.lineWidth=size;ctx.strokeStyle=color;ctx.beginPath();ctx.moveTo(node.x,node.y);ctx.lineTo(node.x+factor*force.x,node.y+factor*force.y);ctx.stroke();var angle=Math.atan2(force.y,force.x);ctx.fillStyle=color;ctx.arrowEndpoint(node.x+factor*force.x+Math.cos(angle)*arrowSize,node.y+factor*force.y+Math.sin(angle)*arrowSize,angle,arrowSize);ctx.fill();}}}]);return PhysicsEngine;}();exports.default=PhysicsEngine;/***/},/* 96 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var BarnesHutSolver=function(){function BarnesHutSolver(body,physicsBody,options){_classCallCheck(this,BarnesHutSolver);this.body=body;this.physicsBody=physicsBody;this.barnesHutTree;this.setOptions(options);this.randomSeed=5;// debug: show grid
	//this.body.emitter.on("afterDrawing", (ctx) => {this._debug(ctx,'#ff0000')})
	}_createClass(BarnesHutSolver,[{key:"setOptions",value:function setOptions(options){this.options=options;this.thetaInversed=1/this.options.theta;this.overlapAvoidanceFactor=1-Math.max(0,Math.min(1,this.options.avoidOverlap));// if 1 then min distance = 0.5, if 0.5 then min distance = 0.5 + 0.5*node.shape.radius
	}},{key:"seededRandom",value:function seededRandom(){var x=Math.sin(this.randomSeed++)*10000;return x-Math.floor(x);}/**
	       * This function calculates the forces the nodes apply on each other based on a gravitational model.
	       * The Barnes Hut method is used to speed up this N-body simulation.
	       *
	       * @private
	       */},{key:"solve",value:function solve(){if(this.options.gravitationalConstant!==0&&this.physicsBody.physicsNodeIndices.length>0){var node=void 0;var nodes=this.body.nodes;var nodeIndices=this.physicsBody.physicsNodeIndices;var nodeCount=nodeIndices.length;// create the tree
	var barnesHutTree=this._formBarnesHutTree(nodes,nodeIndices);// for debugging
	this.barnesHutTree=barnesHutTree;// place the nodes one by one recursively
	for(var i=0;i<nodeCount;i++){node=nodes[nodeIndices[i]];if(node.options.mass>0){// starting with root is irrelevant, it never passes the BarnesHutSolver condition
	this._getForceContribution(barnesHutTree.root.children.NW,node);this._getForceContribution(barnesHutTree.root.children.NE,node);this._getForceContribution(barnesHutTree.root.children.SW,node);this._getForceContribution(barnesHutTree.root.children.SE,node);}}}}/**
	       * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.
	       * If a region contains a single node, we check if it is not itself, then we apply the force.
	       *
	       * @param parentBranch
	       * @param node
	       * @private
	       */},{key:"_getForceContribution",value:function _getForceContribution(parentBranch,node){// we get no force contribution from an empty region
	if(parentBranch.childrenCount>0){var dx=void 0,dy=void 0,distance=void 0;// get the distance from the center of mass to the node.
	dx=parentBranch.centerOfMass.x-node.x;dy=parentBranch.centerOfMass.y-node.y;distance=Math.sqrt(dx*dx+dy*dy);// BarnesHutSolver condition
	// original condition : s/d < theta = passed  ===  d/s > 1/theta = passed
	// calcSize = 1/s --> d * 1/s > 1/theta = passed
	if(distance*parentBranch.calcSize>this.thetaInversed){this._calculateForces(distance,dx,dy,node,parentBranch);}else{// Did not pass the condition, go into children if available
	if(parentBranch.childrenCount===4){this._getForceContribution(parentBranch.children.NW,node);this._getForceContribution(parentBranch.children.NE,node);this._getForceContribution(parentBranch.children.SW,node);this._getForceContribution(parentBranch.children.SE,node);}else{// parentBranch must have only one node, if it was empty we wouldnt be here
	if(parentBranch.children.data.id!=node.id){// if it is not self
	this._calculateForces(distance,dx,dy,node,parentBranch);}}}}}/**
	       * Calculate the forces based on the distance.
	       *
	       * @param distance
	       * @param dx
	       * @param dy
	       * @param node
	       * @param parentBranch
	       * @private
	       */},{key:"_calculateForces",value:function _calculateForces(distance,dx,dy,node,parentBranch){if(distance===0){distance=0.1;dx=distance;}if(this.overlapAvoidanceFactor<1&&node.shape.radius){distance=Math.max(0.1+this.overlapAvoidanceFactor*node.shape.radius,distance-node.shape.radius);}// the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
	// it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
	var gravityForce=this.options.gravitationalConstant*parentBranch.mass*node.options.mass/Math.pow(distance,3);var fx=dx*gravityForce;var fy=dy*gravityForce;this.physicsBody.forces[node.id].x+=fx;this.physicsBody.forces[node.id].y+=fy;}/**
	       * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.
	       *
	       * @param nodes
	       * @param nodeIndices
	       * @private
	       */},{key:"_formBarnesHutTree",value:function _formBarnesHutTree(nodes,nodeIndices){var node=void 0;var nodeCount=nodeIndices.length;var minX=nodes[nodeIndices[0]].x;var minY=nodes[nodeIndices[0]].y;var maxX=nodes[nodeIndices[0]].x;var maxY=nodes[nodeIndices[0]].y;// get the range of the nodes
	for(var i=1;i<nodeCount;i++){var x=nodes[nodeIndices[i]].x;var y=nodes[nodeIndices[i]].y;if(nodes[nodeIndices[i]].options.mass>0){if(x<minX){minX=x;}if(x>maxX){maxX=x;}if(y<minY){minY=y;}if(y>maxY){maxY=y;}}}// make the range a square
	var sizeDiff=Math.abs(maxX-minX)-Math.abs(maxY-minY);// difference between X and Y
	if(sizeDiff>0){minY-=0.5*sizeDiff;maxY+=0.5*sizeDiff;}// xSize > ySize
	else{minX+=0.5*sizeDiff;maxX-=0.5*sizeDiff;}// xSize < ySize
	var minimumTreeSize=1e-5;var rootSize=Math.max(minimumTreeSize,Math.abs(maxX-minX));var halfRootSize=0.5*rootSize;var centerX=0.5*(minX+maxX),centerY=0.5*(minY+maxY);// construct the barnesHutTree
	var barnesHutTree={root:{centerOfMass:{x:0,y:0},mass:0,range:{minX:centerX-halfRootSize,maxX:centerX+halfRootSize,minY:centerY-halfRootSize,maxY:centerY+halfRootSize},size:rootSize,calcSize:1/rootSize,children:{data:null},maxWidth:0,level:0,childrenCount:4}};this._splitBranch(barnesHutTree.root);// place the nodes one by one recursively
	for(var _i=0;_i<nodeCount;_i++){node=nodes[nodeIndices[_i]];if(node.options.mass>0){this._placeInTree(barnesHutTree.root,node);}}// make global
	return barnesHutTree;}/**
	       * this updates the mass of a branch. this is increased by adding a node.
	       *
	       * @param parentBranch
	       * @param node
	       * @private
	       */},{key:"_updateBranchMass",value:function _updateBranchMass(parentBranch,node){var totalMass=parentBranch.mass+node.options.mass;var totalMassInv=1/totalMass;parentBranch.centerOfMass.x=parentBranch.centerOfMass.x*parentBranch.mass+node.x*node.options.mass;parentBranch.centerOfMass.x*=totalMassInv;parentBranch.centerOfMass.y=parentBranch.centerOfMass.y*parentBranch.mass+node.y*node.options.mass;parentBranch.centerOfMass.y*=totalMassInv;parentBranch.mass=totalMass;var biggestSize=Math.max(Math.max(node.height,node.radius),node.width);parentBranch.maxWidth=parentBranch.maxWidth<biggestSize?biggestSize:parentBranch.maxWidth;}/**
	       * determine in which branch the node will be placed.
	       *
	       * @param parentBranch
	       * @param node
	       * @param skipMassUpdate
	       * @private
	       */},{key:"_placeInTree",value:function _placeInTree(parentBranch,node,skipMassUpdate){if(skipMassUpdate!=true||skipMassUpdate===undefined){// update the mass of the branch.
	this._updateBranchMass(parentBranch,node);}if(parentBranch.children.NW.range.maxX>node.x){// in NW or SW
	if(parentBranch.children.NW.range.maxY>node.y){// in NW
	this._placeInRegion(parentBranch,node,"NW");}else{// in SW
	this._placeInRegion(parentBranch,node,"SW");}}else{// in NE or SE
	if(parentBranch.children.NW.range.maxY>node.y){// in NE
	this._placeInRegion(parentBranch,node,"NE");}else{// in SE
	this._placeInRegion(parentBranch,node,"SE");}}}/**
	       * actually place the node in a region (or branch)
	       *
	       * @param parentBranch
	       * @param node
	       * @param region
	       * @private
	       */},{key:"_placeInRegion",value:function _placeInRegion(parentBranch,node,region){switch(parentBranch.children[region].childrenCount){case 0:// place node here
	parentBranch.children[region].children.data=node;parentBranch.children[region].childrenCount=1;this._updateBranchMass(parentBranch.children[region],node);break;case 1:// convert into children
	// if there are two nodes exactly overlapping (on init, on opening of cluster etc.)
	// we move one node a little bit and we do not put it in the tree.
	if(parentBranch.children[region].children.data.x===node.x&&parentBranch.children[region].children.data.y===node.y){node.x+=this.seededRandom();node.y+=this.seededRandom();}else{this._splitBranch(parentBranch.children[region]);this._placeInTree(parentBranch.children[region],node);}break;case 4:// place in branch
	this._placeInTree(parentBranch.children[region],node);break;}}/**
	       * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch
	       * after the split is complete.
	       *
	       * @param parentBranch
	       * @private
	       */},{key:"_splitBranch",value:function _splitBranch(parentBranch){// if the branch is shaded with a node, replace the node in the new subset.
	var containedNode=null;if(parentBranch.childrenCount===1){containedNode=parentBranch.children.data;parentBranch.mass=0;parentBranch.centerOfMass.x=0;parentBranch.centerOfMass.y=0;}parentBranch.childrenCount=4;parentBranch.children.data=null;this._insertRegion(parentBranch,"NW");this._insertRegion(parentBranch,"NE");this._insertRegion(parentBranch,"SW");this._insertRegion(parentBranch,"SE");if(containedNode!=null){this._placeInTree(parentBranch,containedNode);}}/**
	       * This function subdivides the region into four new segments.
	       * Specifically, this inserts a single new segment.
	       * It fills the children section of the parentBranch
	       *
	       * @param parentBranch
	       * @param region
	       * @param parentRange
	       * @private
	       */},{key:"_insertRegion",value:function _insertRegion(parentBranch,region){var minX=void 0,maxX=void 0,minY=void 0,maxY=void 0;var childSize=0.5*parentBranch.size;switch(region){case"NW":minX=parentBranch.range.minX;maxX=parentBranch.range.minX+childSize;minY=parentBranch.range.minY;maxY=parentBranch.range.minY+childSize;break;case"NE":minX=parentBranch.range.minX+childSize;maxX=parentBranch.range.maxX;minY=parentBranch.range.minY;maxY=parentBranch.range.minY+childSize;break;case"SW":minX=parentBranch.range.minX;maxX=parentBranch.range.minX+childSize;minY=parentBranch.range.minY+childSize;maxY=parentBranch.range.maxY;break;case"SE":minX=parentBranch.range.minX+childSize;maxX=parentBranch.range.maxX;minY=parentBranch.range.minY+childSize;maxY=parentBranch.range.maxY;break;}parentBranch.children[region]={centerOfMass:{x:0,y:0},mass:0,range:{minX:minX,maxX:maxX,minY:minY,maxY:maxY},size:0.5*parentBranch.size,calcSize:2*parentBranch.calcSize,children:{data:null},maxWidth:0,level:parentBranch.level+1,childrenCount:0};}//---------------------------  DEBUGGING BELOW  ---------------------------//
	/**
	       * This function is for debugging purposed, it draws the tree.
	       *
	       * @param ctx
	       * @param color
	       * @private
	       */},{key:"_debug",value:function _debug(ctx,color){if(this.barnesHutTree!==undefined){ctx.lineWidth=1;this._drawBranch(this.barnesHutTree.root,ctx,color);}}/**
	       * This function is for debugging purposes. It draws the branches recursively.
	       *
	       * @param branch
	       * @param ctx
	       * @param color
	       * @private
	       */},{key:"_drawBranch",value:function _drawBranch(branch,ctx,color){if(color===undefined){color="#FF0000";}if(branch.childrenCount===4){this._drawBranch(branch.children.NW,ctx);this._drawBranch(branch.children.NE,ctx);this._drawBranch(branch.children.SE,ctx);this._drawBranch(branch.children.SW,ctx);}ctx.strokeStyle=color;ctx.beginPath();ctx.moveTo(branch.range.minX,branch.range.minY);ctx.lineTo(branch.range.maxX,branch.range.minY);ctx.stroke();ctx.beginPath();ctx.moveTo(branch.range.maxX,branch.range.minY);ctx.lineTo(branch.range.maxX,branch.range.maxY);ctx.stroke();ctx.beginPath();ctx.moveTo(branch.range.maxX,branch.range.maxY);ctx.lineTo(branch.range.minX,branch.range.maxY);ctx.stroke();ctx.beginPath();ctx.moveTo(branch.range.minX,branch.range.maxY);ctx.lineTo(branch.range.minX,branch.range.minY);ctx.stroke();/*
	         if (branch.mass > 0) {
	         ctx.circle(branch.centerOfMass.x, branch.centerOfMass.y, 3*branch.mass);
	         ctx.stroke();
	         }
	         */}}]);return BarnesHutSolver;}();exports.default=BarnesHutSolver;/***/},/* 97 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var RepulsionSolver=function(){function RepulsionSolver(body,physicsBody,options){_classCallCheck(this,RepulsionSolver);this.body=body;this.physicsBody=physicsBody;this.setOptions(options);}_createClass(RepulsionSolver,[{key:"setOptions",value:function setOptions(options){this.options=options;}/**
	       * Calculate the forces the nodes apply on each other based on a repulsion field.
	       * This field is linearly approximated.
	       *
	       * @private
	       */},{key:"solve",value:function solve(){var dx,dy,distance,fx,fy,repulsingForce,node1,node2;var nodes=this.body.nodes;var nodeIndices=this.physicsBody.physicsNodeIndices;var forces=this.physicsBody.forces;// repulsing forces between nodes
	var nodeDistance=this.options.nodeDistance;// approximation constants
	var a=-2/3/nodeDistance;var b=4/3;// we loop from i over all but the last entree in the array
	// j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
	for(var i=0;i<nodeIndices.length-1;i++){node1=nodes[nodeIndices[i]];for(var j=i+1;j<nodeIndices.length;j++){node2=nodes[nodeIndices[j]];dx=node2.x-node1.x;dy=node2.y-node1.y;distance=Math.sqrt(dx*dx+dy*dy);// same condition as BarnesHutSolver, making sure nodes are never 100% overlapping.
	if(distance===0){distance=0.1*Math.random();dx=distance;}if(distance<2*nodeDistance){if(distance<0.5*nodeDistance){repulsingForce=1.0;}else{repulsingForce=a*distance+b;// linear approx of  1 / (1 + Math.exp((distance / nodeDistance - 1) * steepness))
	}repulsingForce=repulsingForce/distance;fx=dx*repulsingForce;fy=dy*repulsingForce;forces[node1.id].x-=fx;forces[node1.id].y-=fy;forces[node2.id].x+=fx;forces[node2.id].y+=fy;}}}}}]);return RepulsionSolver;}();exports.default=RepulsionSolver;/***/},/* 98 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var HierarchicalRepulsionSolver=function(){function HierarchicalRepulsionSolver(body,physicsBody,options){_classCallCheck(this,HierarchicalRepulsionSolver);this.body=body;this.physicsBody=physicsBody;this.setOptions(options);}_createClass(HierarchicalRepulsionSolver,[{key:"setOptions",value:function setOptions(options){this.options=options;}/**
	       * Calculate the forces the nodes apply on each other based on a repulsion field.
	       * This field is linearly approximated.
	       *
	       * @private
	       */},{key:"solve",value:function solve(){var dx,dy,distance,fx,fy,repulsingForce,node1,node2,i,j;var nodes=this.body.nodes;var nodeIndices=this.physicsBody.physicsNodeIndices;var forces=this.physicsBody.forces;// repulsing forces between nodes
	var nodeDistance=this.options.nodeDistance;// we loop from i over all but the last entree in the array
	// j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
	for(i=0;i<nodeIndices.length-1;i++){node1=nodes[nodeIndices[i]];for(j=i+1;j<nodeIndices.length;j++){node2=nodes[nodeIndices[j]];// nodes only affect nodes on their level
	if(node1.level===node2.level){dx=node2.x-node1.x;dy=node2.y-node1.y;distance=Math.sqrt(dx*dx+dy*dy);var steepness=0.05;if(distance<nodeDistance){repulsingForce=-Math.pow(steepness*distance,2)+Math.pow(steepness*nodeDistance,2);}else{repulsingForce=0;}// normalize force with
	if(distance===0){distance=0.01;}else{repulsingForce=repulsingForce/distance;}fx=dx*repulsingForce;fy=dy*repulsingForce;forces[node1.id].x-=fx;forces[node1.id].y-=fy;forces[node2.id].x+=fx;forces[node2.id].y+=fy;}}}}}]);return HierarchicalRepulsionSolver;}();exports.default=HierarchicalRepulsionSolver;/***/},/* 99 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var SpringSolver=function(){function SpringSolver(body,physicsBody,options){_classCallCheck(this,SpringSolver);this.body=body;this.physicsBody=physicsBody;this.setOptions(options);}_createClass(SpringSolver,[{key:"setOptions",value:function setOptions(options){this.options=options;}/**
	       * This function calculates the springforces on the nodes, accounting for the support nodes.
	       *
	       * @private
	       */},{key:"solve",value:function solve(){var edgeLength=void 0,edge=void 0;var edgeIndices=this.physicsBody.physicsEdgeIndices;var edges=this.body.edges;var node1=void 0,node2=void 0,node3=void 0;// forces caused by the edges, modelled as springs
	for(var i=0;i<edgeIndices.length;i++){edge=edges[edgeIndices[i]];if(edge.connected===true&&edge.toId!==edge.fromId){// only calculate forces if nodes are in the same sector
	if(this.body.nodes[edge.toId]!==undefined&&this.body.nodes[edge.fromId]!==undefined){if(edge.edgeType.via!==undefined){edgeLength=edge.options.length===undefined?this.options.springLength:edge.options.length;node1=edge.to;node2=edge.edgeType.via;node3=edge.from;this._calculateSpringForce(node1,node2,0.5*edgeLength);this._calculateSpringForce(node2,node3,0.5*edgeLength);}else{// the * 1.5 is here so the edge looks as large as a smooth edge. It does not initially because the smooth edges use
	// the support nodes which exert a repulsive force on the to and from nodes, making the edge appear larger.
	edgeLength=edge.options.length===undefined?this.options.springLength*1.5:edge.options.length;this._calculateSpringForce(edge.from,edge.to,edgeLength);}}}}}/**
	       * This is the code actually performing the calculation for the function above.
	       *
	       * @param node1
	       * @param node2
	       * @param edgeLength
	       * @private
	       */},{key:"_calculateSpringForce",value:function _calculateSpringForce(node1,node2,edgeLength){var dx=node1.x-node2.x;var dy=node1.y-node2.y;var distance=Math.max(Math.sqrt(dx*dx+dy*dy),0.01);// the 1/distance is so the fx and fy can be calculated without sine or cosine.
	var springForce=this.options.springConstant*(edgeLength-distance)/distance;var fx=dx*springForce;var fy=dy*springForce;// handle the case where one node is not part of the physcis
	if(this.physicsBody.forces[node1.id]!==undefined){this.physicsBody.forces[node1.id].x+=fx;this.physicsBody.forces[node1.id].y+=fy;}if(this.physicsBody.forces[node2.id]!==undefined){this.physicsBody.forces[node2.id].x-=fx;this.physicsBody.forces[node2.id].y-=fy;}}}]);return SpringSolver;}();exports.default=SpringSolver;/***/},/* 100 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var HierarchicalSpringSolver=function(){function HierarchicalSpringSolver(body,physicsBody,options){_classCallCheck(this,HierarchicalSpringSolver);this.body=body;this.physicsBody=physicsBody;this.setOptions(options);}_createClass(HierarchicalSpringSolver,[{key:"setOptions",value:function setOptions(options){this.options=options;}/**
	       * This function calculates the springforces on the nodes, accounting for the support nodes.
	       *
	       * @private
	       */},{key:"solve",value:function solve(){var edgeLength,edge;var dx,dy,fx,fy,springForce,distance;var edges=this.body.edges;var factor=0.5;var edgeIndices=this.physicsBody.physicsEdgeIndices;var nodeIndices=this.physicsBody.physicsNodeIndices;var forces=this.physicsBody.forces;// initialize the spring force counters
	for(var i=0;i<nodeIndices.length;i++){var nodeId=nodeIndices[i];forces[nodeId].springFx=0;forces[nodeId].springFy=0;}// forces caused by the edges, modelled as springs
	for(var _i=0;_i<edgeIndices.length;_i++){edge=edges[edgeIndices[_i]];if(edge.connected===true){edgeLength=edge.options.length===undefined?this.options.springLength:edge.options.length;dx=edge.from.x-edge.to.x;dy=edge.from.y-edge.to.y;distance=Math.sqrt(dx*dx+dy*dy);distance=distance===0?0.01:distance;// the 1/distance is so the fx and fy can be calculated without sine or cosine.
	springForce=this.options.springConstant*(edgeLength-distance)/distance;fx=dx*springForce;fy=dy*springForce;if(edge.to.level!=edge.from.level){if(forces[edge.toId]!==undefined){forces[edge.toId].springFx-=fx;forces[edge.toId].springFy-=fy;}if(forces[edge.fromId]!==undefined){forces[edge.fromId].springFx+=fx;forces[edge.fromId].springFy+=fy;}}else{if(forces[edge.toId]!==undefined){forces[edge.toId].x-=factor*fx;forces[edge.toId].y-=factor*fy;}if(forces[edge.fromId]!==undefined){forces[edge.fromId].x+=factor*fx;forces[edge.fromId].y+=factor*fy;}}}}// normalize spring forces
	var springForce=1;var springFx,springFy;for(var _i2=0;_i2<nodeIndices.length;_i2++){var _nodeId=nodeIndices[_i2];springFx=Math.min(springForce,Math.max(-springForce,forces[_nodeId].springFx));springFy=Math.min(springForce,Math.max(-springForce,forces[_nodeId].springFy));forces[_nodeId].x+=springFx;forces[_nodeId].y+=springFy;}// retain energy balance
	var totalFx=0;var totalFy=0;for(var _i3=0;_i3<nodeIndices.length;_i3++){var _nodeId2=nodeIndices[_i3];totalFx+=forces[_nodeId2].x;totalFy+=forces[_nodeId2].y;}var correctionFx=totalFx/nodeIndices.length;var correctionFy=totalFy/nodeIndices.length;for(var _i4=0;_i4<nodeIndices.length;_i4++){var _nodeId3=nodeIndices[_i4];forces[_nodeId3].x-=correctionFx;forces[_nodeId3].y-=correctionFy;}}}]);return HierarchicalSpringSolver;}();exports.default=HierarchicalSpringSolver;/***/},/* 101 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var CentralGravitySolver=function(){function CentralGravitySolver(body,physicsBody,options){_classCallCheck(this,CentralGravitySolver);this.body=body;this.physicsBody=physicsBody;this.setOptions(options);}_createClass(CentralGravitySolver,[{key:"setOptions",value:function setOptions(options){this.options=options;}},{key:"solve",value:function solve(){var dx=void 0,dy=void 0,distance=void 0,node=void 0;var nodes=this.body.nodes;var nodeIndices=this.physicsBody.physicsNodeIndices;var forces=this.physicsBody.forces;for(var i=0;i<nodeIndices.length;i++){var nodeId=nodeIndices[i];node=nodes[nodeId];dx=-node.x;dy=-node.y;distance=Math.sqrt(dx*dx+dy*dy);this._calculateForces(distance,dx,dy,forces,node);}}/**
	       * Calculate the forces based on the distance.
	       * @private
	       */},{key:"_calculateForces",value:function _calculateForces(distance,dx,dy,forces,node){var gravityForce=distance===0?0:this.options.centralGravity/distance;forces[node.id].x=dx*gravityForce;forces[node.id].y=dy*gravityForce;}}]);return CentralGravitySolver;}();exports.default=CentralGravitySolver;/***/},/* 102 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _BarnesHutSolver2=__webpack_require__(96);var _BarnesHutSolver3=_interopRequireDefault(_BarnesHutSolver2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var ForceAtlas2BasedRepulsionSolver=function(_BarnesHutSolver){_inherits(ForceAtlas2BasedRepulsionSolver,_BarnesHutSolver);function ForceAtlas2BasedRepulsionSolver(body,physicsBody,options){_classCallCheck(this,ForceAtlas2BasedRepulsionSolver);return _possibleConstructorReturn(this,(ForceAtlas2BasedRepulsionSolver.__proto__||Object.getPrototypeOf(ForceAtlas2BasedRepulsionSolver)).call(this,body,physicsBody,options));}/**
	     * Calculate the forces based on the distance.
	     *
	     * @param distance
	     * @param dx
	     * @param dy
	     * @param node
	     * @param parentBranch
	     * @private
	     */_createClass(ForceAtlas2BasedRepulsionSolver,[{key:"_calculateForces",value:function _calculateForces(distance,dx,dy,node,parentBranch){if(distance===0){distance=0.1*Math.random();dx=distance;}if(this.overlapAvoidanceFactor<1&&node.shape.radius){distance=Math.max(0.1+this.overlapAvoidanceFactor*node.shape.radius,distance-node.shape.radius);}var degree=node.edges.length+1;// the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
	// it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
	var gravityForce=this.options.gravitationalConstant*parentBranch.mass*node.options.mass*degree/Math.pow(distance,2);var fx=dx*gravityForce;var fy=dy*gravityForce;this.physicsBody.forces[node.id].x+=fx;this.physicsBody.forces[node.id].y+=fy;}}]);return ForceAtlas2BasedRepulsionSolver;}(_BarnesHutSolver3.default);exports.default=ForceAtlas2BasedRepulsionSolver;/***/},/* 103 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _CentralGravitySolver2=__webpack_require__(101);var _CentralGravitySolver3=_interopRequireDefault(_CentralGravitySolver2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var ForceAtlas2BasedCentralGravitySolver=function(_CentralGravitySolver){_inherits(ForceAtlas2BasedCentralGravitySolver,_CentralGravitySolver);function ForceAtlas2BasedCentralGravitySolver(body,physicsBody,options){_classCallCheck(this,ForceAtlas2BasedCentralGravitySolver);return _possibleConstructorReturn(this,(ForceAtlas2BasedCentralGravitySolver.__proto__||Object.getPrototypeOf(ForceAtlas2BasedCentralGravitySolver)).call(this,body,physicsBody,options));}/**
	     * Calculate the forces based on the distance.
	     * @private
	     */_createClass(ForceAtlas2BasedCentralGravitySolver,[{key:"_calculateForces",value:function _calculateForces(distance,dx,dy,forces,node){if(distance>0){var degree=node.edges.length+1;var gravityForce=this.options.centralGravity*degree*node.options.mass;forces[node.id].x=dx*gravityForce;forces[node.id].y=dy*gravityForce;}}}]);return ForceAtlas2BasedCentralGravitySolver;}(_CentralGravitySolver3.default);exports.default=ForceAtlas2BasedCentralGravitySolver;/***/},/* 104 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NetworkUtil=__webpack_require__(105);var _NetworkUtil2=_interopRequireDefault(_NetworkUtil);var _Cluster=__webpack_require__(106);var _Cluster2=_interopRequireDefault(_Cluster);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var ClusterEngine=function(){function ClusterEngine(body){var _this=this;_classCallCheck(this,ClusterEngine);this.body=body;this.clusteredNodes={};this.clusteredEdges={};this.options={};this.defaultOptions={};util.extend(this.options,this.defaultOptions);this.body.emitter.on('_resetData',function(){_this.clusteredNodes={};_this.clusteredEdges={};});}/**
	    *
	    * @param hubsize
	    * @param options
	    */_createClass(ClusterEngine,[{key:'clusterByHubsize',value:function clusterByHubsize(hubsize,options){if(hubsize===undefined){hubsize=this._getHubSize();}else if((typeof hubsize==='undefined'?'undefined':_typeof(hubsize))==="object"){options=this._checkOptions(hubsize);hubsize=this._getHubSize();}var nodesToCluster=[];for(var i=0;i<this.body.nodeIndices.length;i++){var node=this.body.nodes[this.body.nodeIndices[i]];if(node.edges.length>=hubsize){nodesToCluster.push(node.id);}}for(var _i=0;_i<nodesToCluster.length;_i++){this.clusterByConnection(nodesToCluster[_i],options,true);}this.body.emitter.emit('_dataChanged');}/**
	      * loop over all nodes, check if they adhere to the condition and cluster if needed.
	      * @param options
	      * @param refreshData
	      */},{key:'cluster',value:function cluster(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var refreshData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(options.joinCondition===undefined){throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");}// check if the options object is fine, append if needed
	options=this._checkOptions(options);var childNodesObj={};var childEdgesObj={};// collect the nodes that will be in the cluster
	for(var i=0;i<this.body.nodeIndices.length;i++){var nodeId=this.body.nodeIndices[i];var node=this.body.nodes[nodeId];var clonedOptions=_NetworkUtil2.default.cloneOptions(node);if(options.joinCondition(clonedOptions)===true){childNodesObj[nodeId]=this.body.nodes[nodeId];// collect the nodes that will be in the cluster
	for(var _i2=0;_i2<node.edges.length;_i2++){var edge=node.edges[_i2];if(this.clusteredEdges[edge.id]===undefined){childEdgesObj[edge.id]=edge;}}}}this._cluster(childNodesObj,childEdgesObj,options,refreshData);}/**
	       * Cluster all nodes in the network that have only X edges
	       * @param edgeCount
	       * @param options
	       * @param refreshData
	       */},{key:'clusterByEdgeCount',value:function clusterByEdgeCount(edgeCount,options){var refreshData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;options=this._checkOptions(options);var clusters=[];var usedNodes={};var edge=void 0,edges=void 0,node=void 0,nodeId=void 0,relevantEdgeCount=void 0;// collect the nodes that will be in the cluster
	for(var i=0;i<this.body.nodeIndices.length;i++){var childNodesObj={};var childEdgesObj={};nodeId=this.body.nodeIndices[i];// if this node is already used in another cluster this session, we do not have to re-evaluate it.
	if(usedNodes[nodeId]===undefined){relevantEdgeCount=0;node=this.body.nodes[nodeId];edges=[];for(var j=0;j<node.edges.length;j++){edge=node.edges[j];if(this.clusteredEdges[edge.id]===undefined){if(edge.toId!==edge.fromId){relevantEdgeCount++;}edges.push(edge);}}// this node qualifies, we collect its neighbours to start the clustering process.
	if(relevantEdgeCount===edgeCount){var gatheringSuccessful=true;for(var _j=0;_j<edges.length;_j++){edge=edges[_j];var childNodeId=this._getConnectedId(edge,nodeId);// add the nodes to the list by the join condition.
	if(options.joinCondition===undefined){childEdgesObj[edge.id]=edge;childNodesObj[nodeId]=this.body.nodes[nodeId];childNodesObj[childNodeId]=this.body.nodes[childNodeId];usedNodes[nodeId]=true;}else{var clonedOptions=_NetworkUtil2.default.cloneOptions(this.body.nodes[nodeId]);if(options.joinCondition(clonedOptions)===true){childEdgesObj[edge.id]=edge;childNodesObj[nodeId]=this.body.nodes[nodeId];usedNodes[nodeId]=true;}else{// this node does not qualify after all.
	gatheringSuccessful=false;break;}}}// add to the cluster queue
	if(Object.keys(childNodesObj).length>0&&Object.keys(childEdgesObj).length>0&&gatheringSuccessful===true){clusters.push({nodes:childNodesObj,edges:childEdgesObj});}}}}for(var _i3=0;_i3<clusters.length;_i3++){this._cluster(clusters[_i3].nodes,clusters[_i3].edges,options,false);}if(refreshData===true){this.body.emitter.emit('_dataChanged');}}/**
	      * Cluster all nodes in the network that have only 1 edge
	      * @param options
	      * @param refreshData
	      */},{key:'clusterOutliers',value:function clusterOutliers(options){var refreshData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.clusterByEdgeCount(1,options,refreshData);}/**
	       * Cluster all nodes in the network that have only 2 edge
	       * @param options
	       * @param refreshData
	       */},{key:'clusterBridges',value:function clusterBridges(options){var refreshData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.clusterByEdgeCount(2,options,refreshData);}/**
	      * suck all connected nodes of a node into the node.
	      * @param nodeId
	      * @param options
	      * @param refreshData
	      */},{key:'clusterByConnection',value:function clusterByConnection(nodeId,options){var refreshData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;// kill conditions
	if(nodeId===undefined){throw new Error("No nodeId supplied to clusterByConnection!");}if(this.body.nodes[nodeId]===undefined){throw new Error("The nodeId given to clusterByConnection does not exist!");}var node=this.body.nodes[nodeId];options=this._checkOptions(options,node);if(options.clusterNodeProperties.x===undefined){options.clusterNodeProperties.x=node.x;}if(options.clusterNodeProperties.y===undefined){options.clusterNodeProperties.y=node.y;}if(options.clusterNodeProperties.fixed===undefined){options.clusterNodeProperties.fixed={};options.clusterNodeProperties.fixed.x=node.options.fixed.x;options.clusterNodeProperties.fixed.y=node.options.fixed.y;}var childNodesObj={};var childEdgesObj={};var parentNodeId=node.id;var parentClonedOptions=_NetworkUtil2.default.cloneOptions(node);childNodesObj[parentNodeId]=node;// collect the nodes that will be in the cluster
	for(var i=0;i<node.edges.length;i++){var edge=node.edges[i];if(this.clusteredEdges[edge.id]===undefined){var childNodeId=this._getConnectedId(edge,parentNodeId);// if the child node is not in a cluster
	if(this.clusteredNodes[childNodeId]===undefined){if(childNodeId!==parentNodeId){if(options.joinCondition===undefined){childEdgesObj[edge.id]=edge;childNodesObj[childNodeId]=this.body.nodes[childNodeId];}else{// clone the options and insert some additional parameters that could be interesting.
	var childClonedOptions=_NetworkUtil2.default.cloneOptions(this.body.nodes[childNodeId]);if(options.joinCondition(parentClonedOptions,childClonedOptions)===true){childEdgesObj[edge.id]=edge;childNodesObj[childNodeId]=this.body.nodes[childNodeId];}}}else{// swallow the edge if it is self-referencing.
	childEdgesObj[edge.id]=edge;}}}}var childNodeIDs=Object.keys(childNodesObj).map(function(childNode){return childNodesObj[childNode].id;});for(childNode in childNodesObj){var childNode=childNodesObj[childNode];for(var y=0;y<childNode.edges.length;y++){var childEdge=childNode.edges[y];if(childNodeIDs.indexOf(this._getConnectedId(childEdge,childNode.id))>-1){childEdgesObj[childEdge.id]=childEdge;}}}this._cluster(childNodesObj,childEdgesObj,options,refreshData);}/**
	      * This function creates the edges that will be attached to the cluster
	      * It looks for edges that are connected to the nodes from the "outside' of the cluster.
	      *
	      * @param childNodesObj
	      * @param childEdgesObj
	      * @param clusterNodeProperties
	      * @param clusterEdgeProperties
	      * @private
	      */},{key:'_createClusterEdges',value:function _createClusterEdges(childNodesObj,childEdgesObj,clusterNodeProperties,clusterEdgeProperties){var edge=void 0,childNodeId=void 0,childNode=void 0,toId=void 0,fromId=void 0,otherNodeId=void 0;// loop over all child nodes and their edges to find edges going out of the cluster
	// these edges will be replaced by clusterEdges.
	var childKeys=Object.keys(childNodesObj);var createEdges=[];for(var i=0;i<childKeys.length;i++){childNodeId=childKeys[i];childNode=childNodesObj[childNodeId];// construct new edges from the cluster to others
	for(var j=0;j<childNode.edges.length;j++){edge=childNode.edges[j];// we only handle edges that are visible to the system, not the disabled ones from the clustering process.
	if(this.clusteredEdges[edge.id]===undefined){// self-referencing edges will be added to the "hidden" list
	if(edge.toId==edge.fromId){childEdgesObj[edge.id]=edge;}else{// set up the from and to.
	if(edge.toId==childNodeId){// this is a double equals because ints and strings can be interchanged here.
	toId=clusterNodeProperties.id;fromId=edge.fromId;otherNodeId=fromId;}else{toId=edge.toId;fromId=clusterNodeProperties.id;otherNodeId=toId;}}// Only edges from the cluster outwards are being replaced.
	if(childNodesObj[otherNodeId]===undefined){createEdges.push({edge:edge,fromId:fromId,toId:toId});}}}}// here we actually create the replacement edges. We could not do this in the loop above as the creation process
	// would add an edge to the edges array we are iterating over.
	for(var _j2=0;_j2<createEdges.length;_j2++){var _edge=createEdges[_j2].edge;// copy the options of the edge we will replace
	var clonedOptions=_NetworkUtil2.default.cloneOptions(_edge,'edge');// make sure the properties of clusterEdges are superimposed on it
	util.deepExtend(clonedOptions,clusterEdgeProperties);// set up the edge
	clonedOptions.from=createEdges[_j2].fromId;clonedOptions.to=createEdges[_j2].toId;clonedOptions.id='clusterEdge:'+util.randomUUID();//clonedOptions.id = '(cf: ' + createEdges[j].fromId + " to: " + createEdges[j].toId + ")" + Math.random();
	// create the edge and give a reference to the one it replaced.
	var newEdge=this.body.functions.createEdge(clonedOptions);newEdge.clusteringEdgeReplacingId=_edge.id;// also reference the new edge in the old edge
	this.body.edges[_edge.id].edgeReplacedById=newEdge.id;// connect the edge.
	this.body.edges[newEdge.id]=newEdge;newEdge.connect();// hide the replaced edge
	this._backupEdgeOptions(_edge);_edge.setOptions({physics:false,hidden:true});}}/**
	      * This function checks the options that can be supplied to the different cluster functions
	      * for certain fields and inserts defaults if needed
	      * @param options
	      * @returns {*}
	      * @private
	      */},{key:'_checkOptions',value:function _checkOptions(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(options.clusterEdgeProperties===undefined){options.clusterEdgeProperties={};}if(options.clusterNodeProperties===undefined){options.clusterNodeProperties={};}return options;}/**
	      *
	      * @param {Object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node
	      * @param {Object}    childEdgesObj         | object with edge objects, id as keys
	      * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}
	      * @param {Boolean}   refreshData | when true, do not wrap up
	      * @private
	      */},{key:'_cluster',value:function _cluster(childNodesObj,childEdgesObj,options){var refreshData=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;// kill condition: no nodes don't bother
	if(Object.keys(childNodesObj).length==0){return;}// allow clusters of 1 if options allow
	if(Object.keys(childNodesObj).length==1&&options.clusterNodeProperties.allowSingleNodeCluster!=true){return;}// check if this cluster call is not trying to cluster anything that is in another cluster.
	for(var nodeId in childNodesObj){if(childNodesObj.hasOwnProperty(nodeId)){if(this.clusteredNodes[nodeId]!==undefined){return;}}}var clusterNodeProperties=util.deepExtend({},options.clusterNodeProperties);// construct the clusterNodeProperties
	if(options.processProperties!==undefined){// get the childNode options
	var childNodesOptions=[];for(var _nodeId in childNodesObj){if(childNodesObj.hasOwnProperty(_nodeId)){var clonedOptions=_NetworkUtil2.default.cloneOptions(childNodesObj[_nodeId]);childNodesOptions.push(clonedOptions);}}// get cluster properties based on childNodes
	var childEdgesOptions=[];for(var edgeId in childEdgesObj){if(childEdgesObj.hasOwnProperty(edgeId)){// these cluster edges will be removed on creation of the cluster.
	if(edgeId.substr(0,12)!=="clusterEdge:"){var _clonedOptions=_NetworkUtil2.default.cloneOptions(childEdgesObj[edgeId],'edge');childEdgesOptions.push(_clonedOptions);}}}clusterNodeProperties=options.processProperties(clusterNodeProperties,childNodesOptions,childEdgesOptions);if(!clusterNodeProperties){throw new Error("The processProperties function does not return properties!");}}// check if we have an unique id;
	if(clusterNodeProperties.id===undefined){clusterNodeProperties.id='cluster:'+util.randomUUID();}var clusterId=clusterNodeProperties.id;if(clusterNodeProperties.label===undefined){clusterNodeProperties.label='cluster';}// give the clusterNode a position if it does not have one.
	var pos=undefined;if(clusterNodeProperties.x===undefined){pos=this._getClusterPosition(childNodesObj);clusterNodeProperties.x=pos.x;}if(clusterNodeProperties.y===undefined){if(pos===undefined){pos=this._getClusterPosition(childNodesObj);}clusterNodeProperties.y=pos.y;}// force the ID to remain the same
	clusterNodeProperties.id=clusterId;// create the clusterNode
	var clusterNode=this.body.functions.createNode(clusterNodeProperties,_Cluster2.default);clusterNode.isCluster=true;clusterNode.containedNodes=childNodesObj;clusterNode.containedEdges=childEdgesObj;// cache a copy from the cluster edge properties if we have to reconnect others later on
	clusterNode.clusterEdgeProperties=options.clusterEdgeProperties;// finally put the cluster node into global
	this.body.nodes[clusterNodeProperties.id]=clusterNode;// create the new edges that will connect to the cluster, all self-referencing edges will be added to childEdgesObject here.
	this._createClusterEdges(childNodesObj,childEdgesObj,clusterNodeProperties,options.clusterEdgeProperties);// disable the childEdges
	for(var _edgeId in childEdgesObj){if(childEdgesObj.hasOwnProperty(_edgeId)){if(this.body.edges[_edgeId]!==undefined){var edge=this.body.edges[_edgeId];// cache the options before changing
	this._backupEdgeOptions(edge);// disable physics and hide the edge
	edge.setOptions({physics:false,hidden:true});}}}// disable the childNodes
	for(var _nodeId2 in childNodesObj){if(childNodesObj.hasOwnProperty(_nodeId2)){this.clusteredNodes[_nodeId2]={clusterId:clusterNodeProperties.id,node:this.body.nodes[_nodeId2]};this.body.nodes[_nodeId2].setOptions({hidden:true,physics:false});}}// set ID to undefined so no duplicates arise
	clusterNodeProperties.id=undefined;// wrap up
	if(refreshData===true){this.body.emitter.emit('_dataChanged');}}},{key:'_backupEdgeOptions',value:function _backupEdgeOptions(edge){if(this.clusteredEdges[edge.id]===undefined){this.clusteredEdges[edge.id]={physics:edge.options.physics,hidden:edge.options.hidden};}}},{key:'_restoreEdge',value:function _restoreEdge(edge){var originalOptions=this.clusteredEdges[edge.id];if(originalOptions!==undefined){edge.setOptions({physics:originalOptions.physics,hidden:originalOptions.hidden});delete this.clusteredEdges[edge.id];}}/**
	      * Check if a node is a cluster.
	      * @param nodeId
	      * @returns {*}
	      */},{key:'isCluster',value:function isCluster(nodeId){if(this.body.nodes[nodeId]!==undefined){return this.body.nodes[nodeId].isCluster===true;}else{console.log("Node does not exist.");return false;}}/**
	      * get the position of the cluster node based on what's inside
	      * @param {object} childNodesObj    | object with node objects, id as keys
	      * @returns {{x: number, y: number}}
	      * @private
	      */},{key:'_getClusterPosition',value:function _getClusterPosition(childNodesObj){var childKeys=Object.keys(childNodesObj);var minX=childNodesObj[childKeys[0]].x;var maxX=childNodesObj[childKeys[0]].x;var minY=childNodesObj[childKeys[0]].y;var maxY=childNodesObj[childKeys[0]].y;var node=void 0;for(var i=1;i<childKeys.length;i++){node=childNodesObj[childKeys[i]];minX=node.x<minX?node.x:minX;maxX=node.x>maxX?node.x:maxX;minY=node.y<minY?node.y:minY;maxY=node.y>maxY?node.y:maxY;}return{x:0.5*(minX+maxX),y:0.5*(minY+maxY)};}/**
	      * Open a cluster by calling this function.
	      * @param {String}  clusterNodeId | the ID of the cluster node
	      * @param {Boolean} refreshData | wrap up afterwards if not true
	      */},{key:'openCluster',value:function openCluster(clusterNodeId,options){var refreshData=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;// kill conditions
	if(clusterNodeId===undefined){throw new Error("No clusterNodeId supplied to openCluster.");}if(this.body.nodes[clusterNodeId]===undefined){throw new Error("The clusterNodeId supplied to openCluster does not exist.");}if(this.body.nodes[clusterNodeId].containedNodes===undefined){console.log("The node:"+clusterNodeId+" is not a cluster.");return;}var clusterNode=this.body.nodes[clusterNodeId];var containedNodes=clusterNode.containedNodes;var containedEdges=clusterNode.containedEdges;// allow the user to position the nodes after release.
	if(options!==undefined&&options.releaseFunction!==undefined&&typeof options.releaseFunction==='function'){var positions={};var clusterPosition={x:clusterNode.x,y:clusterNode.y};for(var nodeId in containedNodes){if(containedNodes.hasOwnProperty(nodeId)){var containedNode=this.body.nodes[nodeId];positions[nodeId]={x:containedNode.x,y:containedNode.y};}}var newPositions=options.releaseFunction(clusterPosition,positions);for(var _nodeId3 in containedNodes){if(containedNodes.hasOwnProperty(_nodeId3)){var _containedNode=this.body.nodes[_nodeId3];if(newPositions[_nodeId3]!==undefined){_containedNode.x=newPositions[_nodeId3].x===undefined?clusterNode.x:newPositions[_nodeId3].x;_containedNode.y=newPositions[_nodeId3].y===undefined?clusterNode.y:newPositions[_nodeId3].y;}}}}else{// copy the position from the cluster
	for(var _nodeId4 in containedNodes){if(containedNodes.hasOwnProperty(_nodeId4)){var _containedNode2=this.body.nodes[_nodeId4];_containedNode2=containedNodes[_nodeId4];// inherit position
	if(_containedNode2.options.fixed.x===false){_containedNode2.x=clusterNode.x;}if(_containedNode2.options.fixed.y===false){_containedNode2.y=clusterNode.y;}}}}// release nodes
	for(var _nodeId5 in containedNodes){if(containedNodes.hasOwnProperty(_nodeId5)){var _containedNode3=this.body.nodes[_nodeId5];// inherit speed
	_containedNode3.vx=clusterNode.vx;_containedNode3.vy=clusterNode.vy;// we use these methods to avoid re-instantiating the shape, which happens with setOptions.
	_containedNode3.setOptions({hidden:false,physics:true});delete this.clusteredNodes[_nodeId5];}}// copy the clusterNode edges because we cannot iterate over an object that we add or remove from.
	var edgesToBeDeleted=[];for(var i=0;i<clusterNode.edges.length;i++){edgesToBeDeleted.push(clusterNode.edges[i]);}// actually handling the deleting.
	for(var _i4=0;_i4<edgesToBeDeleted.length;_i4++){var edge=edgesToBeDeleted[_i4];var otherNodeId=this._getConnectedId(edge,clusterNodeId);// if the other node is in another cluster, we transfer ownership of this edge to the other cluster
	if(this.clusteredNodes[otherNodeId]!==undefined){// transfer ownership:
	var otherCluster=this.body.nodes[this.clusteredNodes[otherNodeId].clusterId];var transferEdge=this.body.edges[edge.clusteringEdgeReplacingId];if(transferEdge!==undefined){otherCluster.containedEdges[transferEdge.id]=transferEdge;// delete local reference
	delete containedEdges[transferEdge.id];// create new cluster edge from the otherCluster:
	// get to and from
	var fromId=transferEdge.fromId;var toId=transferEdge.toId;if(transferEdge.toId==otherNodeId){toId=this.clusteredNodes[otherNodeId].clusterId;}else{fromId=this.clusteredNodes[otherNodeId].clusterId;}// clone the options and apply the cluster options to them
	var clonedOptions=_NetworkUtil2.default.cloneOptions(transferEdge,'edge');util.deepExtend(clonedOptions,otherCluster.clusterEdgeProperties);// apply the edge specific options to it.
	var id='clusterEdge:'+util.randomUUID();util.deepExtend(clonedOptions,{from:fromId,to:toId,hidden:false,physics:true,id:id});// create it
	var newEdge=this.body.functions.createEdge(clonedOptions);newEdge.clusteringEdgeReplacingId=transferEdge.id;this.body.edges[id]=newEdge;this.body.edges[id].connect();}}else{var replacedEdge=this.body.edges[edge.clusteringEdgeReplacingId];if(replacedEdge!==undefined){this._restoreEdge(replacedEdge);}}edge.cleanup();// this removes the edge from node.edges, which is why edgeIds is formed
	edge.disconnect();delete this.body.edges[edge.id];}// handle the releasing of the edges
	for(var edgeId in containedEdges){if(containedEdges.hasOwnProperty(edgeId)){this._restoreEdge(containedEdges[edgeId]);}}// remove clusterNode
	delete this.body.nodes[clusterNodeId];if(refreshData===true){this.body.emitter.emit('_dataChanged');}}},{key:'getNodesInCluster',value:function getNodesInCluster(clusterId){var nodesArray=[];if(this.isCluster(clusterId)===true){var containedNodes=this.body.nodes[clusterId].containedNodes;for(var nodeId in containedNodes){if(containedNodes.hasOwnProperty(nodeId)){nodesArray.push(this.body.nodes[nodeId].id);}}}return nodesArray;}/**
	      * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node
	      * @param nodeId
	      * @returns {Array}
	      */},{key:'findNode',value:function findNode(nodeId){var stack=[];var max=100;var counter=0;while(this.clusteredNodes[nodeId]!==undefined&&counter<max){stack.push(this.body.nodes[nodeId].id);nodeId=this.clusteredNodes[nodeId].clusterId;counter++;}stack.push(this.body.nodes[nodeId].id);stack.reverse();return stack;}/**
	      * Using a clustered nodeId, update with the new options
	      * @param clusteredNodeId
	      * @param {object} newOptions
	      */},{key:'updateClusteredNode',value:function updateClusteredNode(clusteredNodeId,newOptions){if(clusteredNodeId===undefined){throw new Error("No clusteredNodeId supplied to updateClusteredNode.");}if(newOptions===undefined){throw new Error("No newOptions supplied to updateClusteredNode.");}if(this.body.nodes[clusteredNodeId]===undefined){throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");}this.body.nodes[clusteredNodeId].setOptions(newOptions);this.body.emitter.emit('_dataChanged');}/**
	      * Using a base edgeId, update all related clustered edges with the new options
	      * @param startEdgeId
	      * @param {object} newOptions
	      */},{key:'updateEdge',value:function updateEdge(startEdgeId,newOptions){if(startEdgeId===undefined){throw new Error("No startEdgeId supplied to updateEdge.");}if(newOptions===undefined){throw new Error("No newOptions supplied to updateEdge.");}if(this.body.edges[startEdgeId]===undefined){throw new Error("The startEdgeId supplied to updateEdge does not exist.");}var allEdgeIds=this.getClusteredEdges(startEdgeId);for(var i=0;i<allEdgeIds.length;i++){var edge=this.body.edges[allEdgeIds[i]];edge.setOptions(newOptions);}this.body.emitter.emit('_dataChanged');}/**
	      * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)
	      * @param edgeId
	      * @returns {Array}
	      */},{key:'getClusteredEdges',value:function getClusteredEdges(edgeId){var stack=[];var max=100;var counter=0;while(edgeId!==undefined&&this.body.edges[edgeId]!==undefined&&counter<max){stack.push(this.body.edges[edgeId].id);edgeId=this.body.edges[edgeId].edgeReplacedById;counter++;}stack.reverse();return stack;}/**
	      * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge
	      * @param clusteredEdgeId
	      * @returns baseEdgeId
	      */},{key:'getBaseEdge',value:function getBaseEdge(clusteredEdgeId){var baseEdgeId=clusteredEdgeId;var max=100;var counter=0;while(clusteredEdgeId!==undefined&&this.body.edges[clusteredEdgeId]!==undefined&&counter<max){clusteredEdgeId=this.body.edges[clusteredEdgeId].clusteringEdgeReplacingId;counter++;if(clusteredEdgeId!==undefined){baseEdgeId=clusteredEdgeId;}}return baseEdgeId;}/**
	      * Get the Id the node is connected to
	      * @param edge
	      * @param nodeId
	      * @returns {*}
	      * @private
	      */},{key:'_getConnectedId',value:function _getConnectedId(edge,nodeId){if(edge.toId!=nodeId){return edge.toId;}else if(edge.fromId!=nodeId){return edge.fromId;}else{return edge.fromId;}}/**
	      * We determine how many connections denote an important hub.
	      * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)
	      *
	      * @private
	      */},{key:'_getHubSize',value:function _getHubSize(){var average=0;var averageSquared=0;var hubCounter=0;var largestHub=0;for(var i=0;i<this.body.nodeIndices.length;i++){var node=this.body.nodes[this.body.nodeIndices[i]];if(node.edges.length>largestHub){largestHub=node.edges.length;}average+=node.edges.length;averageSquared+=Math.pow(node.edges.length,2);hubCounter+=1;}average=average/hubCounter;averageSquared=averageSquared/hubCounter;var variance=averageSquared-Math.pow(average,2);var standardDeviation=Math.sqrt(variance);var hubThreshold=Math.floor(average+2*standardDeviation);// always have at least one to cluster
	if(hubThreshold>largestHub){hubThreshold=largestHub;}return hubThreshold;}}]);return ClusterEngine;}();exports.default=ClusterEngine;/***/},/* 105 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var NetworkUtil=function(){function NetworkUtil(){_classCallCheck(this,NetworkUtil);}/**
	     * Find the center position of the network considering the bounding boxes
	     */_createClass(NetworkUtil,null,[{key:"getRange",value:function getRange(allNodes){var specificNodes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var minY=1e9,maxY=-1e9,minX=1e9,maxX=-1e9,node;if(specificNodes.length>0){for(var i=0;i<specificNodes.length;i++){node=allNodes[specificNodes[i]];if(minX>node.shape.boundingBox.left){minX=node.shape.boundingBox.left;}if(maxX<node.shape.boundingBox.right){maxX=node.shape.boundingBox.right;}if(minY>node.shape.boundingBox.top){minY=node.shape.boundingBox.top;}// top is negative, bottom is positive
	if(maxY<node.shape.boundingBox.bottom){maxY=node.shape.boundingBox.bottom;}// top is negative, bottom is positive
	}}if(minX===1e9&&maxX===-1e9&&minY===1e9&&maxY===-1e9){minY=0,maxY=0,minX=0,maxX=0;}return{minX:minX,maxX:maxX,minY:minY,maxY:maxY};}/**
	       * Find the center position of the network
	       */},{key:"getRangeCore",value:function getRangeCore(allNodes){var specificNodes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var minY=1e9,maxY=-1e9,minX=1e9,maxX=-1e9,node;if(specificNodes.length>0){for(var i=0;i<specificNodes.length;i++){node=allNodes[specificNodes[i]];if(minX>node.x){minX=node.x;}if(maxX<node.x){maxX=node.x;}if(minY>node.y){minY=node.y;}// top is negative, bottom is positive
	if(maxY<node.y){maxY=node.y;}// top is negative, bottom is positive
	}}if(minX===1e9&&maxX===-1e9&&minY===1e9&&maxY===-1e9){minY=0,maxY=0,minX=0,maxX=0;}return{minX:minX,maxX:maxX,minY:minY,maxY:maxY};}/**
	       * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};
	       * @returns {{x: number, y: number}}
	       */},{key:"findCenter",value:function findCenter(range){return{x:0.5*(range.maxX+range.minX),y:0.5*(range.maxY+range.minY)};}/**
	       * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.
	       * @param item
	       * @param type
	       * @returns {{}}
	       */},{key:"cloneOptions",value:function cloneOptions(item,type){var clonedOptions={};if(type===undefined||type==='node'){util.deepExtend(clonedOptions,item.options,true);clonedOptions.x=item.x;clonedOptions.y=item.y;clonedOptions.amountOfConnections=item.edges.length;}else{util.deepExtend(clonedOptions,item.options,true);}return clonedOptions;}}]);return NetworkUtil;}();exports.default=NetworkUtil;/***/},/* 106 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _Node2=__webpack_require__(67);var _Node3=_interopRequireDefault(_Node2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&((typeof call==='undefined'?'undefined':_typeof2(call))==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+(typeof superClass==='undefined'?'undefined':_typeof2(superClass)));}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**
	   *
	   */var Cluster=function(_Node){_inherits(Cluster,_Node);function Cluster(options,body,imagelist,grouplist,globalOptions){_classCallCheck(this,Cluster);var _this=_possibleConstructorReturn(this,(Cluster.__proto__||Object.getPrototypeOf(Cluster)).call(this,options,body,imagelist,grouplist,globalOptions));_this.isCluster=true;_this.containedNodes={};_this.containedEdges={};return _this;}return Cluster;}(_Node3.default);exports.default=Cluster;/***/},/* 107 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}if(typeof window!=='undefined'){window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;}var util=__webpack_require__(1);var CanvasRenderer=function(){function CanvasRenderer(body,canvas){_classCallCheck(this,CanvasRenderer);this.body=body;this.canvas=canvas;this.redrawRequested=false;this.renderTimer=undefined;this.requiresTimeout=true;this.renderingActive=false;this.renderRequests=0;this.pixelRatio=undefined;this.allowRedraw=true;this.dragging=false;this.options={};this.defaultOptions={hideEdgesOnDrag:false,hideNodesOnDrag:false};util.extend(this.options,this.defaultOptions);this._determineBrowserMethod();this.bindEventListeners();}_createClass(CanvasRenderer,[{key:'bindEventListeners',value:function bindEventListeners(){var _this=this;this.body.emitter.on("dragStart",function(){_this.dragging=true;});this.body.emitter.on("dragEnd",function(){return _this.dragging=false;});this.body.emitter.on("_resizeNodes",function(){return _this._resizeNodes();});this.body.emitter.on("_redraw",function(){if(_this.renderingActive===false){_this._redraw();}});this.body.emitter.on("_blockRedraw",function(){_this.allowRedraw=false;});this.body.emitter.on("_allowRedraw",function(){_this.allowRedraw=true;_this.redrawRequested=false;});this.body.emitter.on("_requestRedraw",this._requestRedraw.bind(this));this.body.emitter.on("_startRendering",function(){_this.renderRequests+=1;_this.renderingActive=true;_this._startRendering();});this.body.emitter.on("_stopRendering",function(){_this.renderRequests-=1;_this.renderingActive=_this.renderRequests>0;_this.renderTimer=undefined;});this.body.emitter.on('destroy',function(){_this.renderRequests=0;_this.allowRedraw=false;_this.renderingActive=false;if(_this.requiresTimeout===true){clearTimeout(_this.renderTimer);}else{cancelAnimationFrame(_this.renderTimer);}_this.body.emitter.off();});}},{key:'setOptions',value:function setOptions(options){if(options!==undefined){var fields=['hideEdgesOnDrag','hideNodesOnDrag'];util.selectiveDeepExtend(fields,this.options,options);}}},{key:'_startRendering',value:function _startRendering(){if(this.renderingActive===true){if(this.renderTimer===undefined){if(this.requiresTimeout===true){this.renderTimer=window.setTimeout(this._renderStep.bind(this),this.simulationInterval);// wait this.renderTimeStep milliseconds and perform the animation step function
	}else{this.renderTimer=window.requestAnimationFrame(this._renderStep.bind(this));// wait this.renderTimeStep milliseconds and perform the animation step function
	}}}}},{key:'_renderStep',value:function _renderStep(){if(this.renderingActive===true){// reset the renderTimer so a new scheduled animation step can be set
	this.renderTimer=undefined;if(this.requiresTimeout===true){// this schedules a new simulation step
	this._startRendering();}this._redraw();if(this.requiresTimeout===false){// this schedules a new simulation step
	this._startRendering();}}}/**
	       * Redraw the network with the current data
	       * chart will be resized too.
	       */},{key:'redraw',value:function redraw(){this.body.emitter.emit('setSize');this._redraw();}/**
	       * Redraw the network with the current data
	       * @param hidden | used to get the first estimate of the node sizes. only the nodes are drawn after which they are quickly drawn over.
	       * @private
	       */},{key:'_requestRedraw',value:function _requestRedraw(){var _this2=this;if(this.redrawRequested!==true&&this.renderingActive===false&&this.allowRedraw===true){this.redrawRequested=true;if(this.requiresTimeout===true){window.setTimeout(function(){_this2._redraw(false);},0);}else{window.requestAnimationFrame(function(){_this2._redraw(false);});}}}},{key:'_redraw',value:function _redraw(){var hidden=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(this.allowRedraw===true){this.body.emitter.emit("initRedraw");this.redrawRequested=false;var ctx=this.canvas.frame.canvas.getContext('2d');// when the container div was hidden, this fixes it back up!
	if(this.canvas.frame.canvas.width===0||this.canvas.frame.canvas.height===0){this.canvas.setSize();}this.pixelRatio=(window.devicePixelRatio||1)/(ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1);ctx.setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0);// clear the canvas
	var w=this.canvas.frame.canvas.clientWidth;var h=this.canvas.frame.canvas.clientHeight;ctx.clearRect(0,0,w,h);// if the div is hidden, we stop the redraw here for performance.
	if(this.canvas.frame.clientWidth===0){return;}// set scaling and translation
	ctx.save();ctx.translate(this.body.view.translation.x,this.body.view.translation.y);ctx.scale(this.body.view.scale,this.body.view.scale);ctx.beginPath();this.body.emitter.emit("beforeDrawing",ctx);ctx.closePath();if(hidden===false){if(this.dragging===false||this.dragging===true&&this.options.hideEdgesOnDrag===false){this._drawEdges(ctx);}}if(this.dragging===false||this.dragging===true&&this.options.hideNodesOnDrag===false){this._drawNodes(ctx,hidden);}ctx.beginPath();this.body.emitter.emit("afterDrawing",ctx);ctx.closePath();// restore original scaling and translation
	ctx.restore();if(hidden===true){ctx.clearRect(0,0,w,h);}}}/**
	       * Redraw all nodes
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
	       * @param {CanvasRenderingContext2D}   ctx
	       * @param {Boolean} [alwaysShow]
	       * @private
	       */},{key:'_resizeNodes',value:function _resizeNodes(){var ctx=this.canvas.frame.canvas.getContext('2d');if(this.pixelRatio===undefined){this.pixelRatio=(window.devicePixelRatio||1)/(ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1);}ctx.setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0);ctx.save();ctx.translate(this.body.view.translation.x,this.body.view.translation.y);ctx.scale(this.body.view.scale,this.body.view.scale);var nodes=this.body.nodes;var node=void 0;// resize all nodes
	for(var nodeId in nodes){if(nodes.hasOwnProperty(nodeId)){node=nodes[nodeId];node.resize(ctx);node.updateBoundingBox(ctx,node.selected);}}// restore original scaling and translation
	ctx.restore();}/**
	       * Redraw all nodes
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
	       * @param {CanvasRenderingContext2D}   ctx
	       * @param {Boolean} [alwaysShow]
	       * @private
	       */},{key:'_drawNodes',value:function _drawNodes(ctx){var alwaysShow=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var nodes=this.body.nodes;var nodeIndices=this.body.nodeIndices;var node=void 0;var selected=[];var margin=20;var topLeft=this.canvas.DOMtoCanvas({x:-margin,y:-margin});var bottomRight=this.canvas.DOMtoCanvas({x:this.canvas.frame.canvas.clientWidth+margin,y:this.canvas.frame.canvas.clientHeight+margin});var viewableArea={top:topLeft.y,left:topLeft.x,bottom:bottomRight.y,right:bottomRight.x};// draw unselected nodes;
	for(var i=0;i<nodeIndices.length;i++){node=nodes[nodeIndices[i]];// set selected nodes aside
	if(node.isSelected()){selected.push(nodeIndices[i]);}else{if(alwaysShow===true){node.draw(ctx);}else if(node.isBoundingBoxOverlappingWith(viewableArea)===true){node.draw(ctx);}else{node.updateBoundingBox(ctx,node.selected);}}}// draw the selected nodes on top
	for(var _i=0;_i<selected.length;_i++){node=nodes[selected[_i]];node.draw(ctx);}}/**
	       * Redraw all edges
	       * The 2d context of a HTML canvas can be retrieved by canvas.getContext('2d');
	       * @param {CanvasRenderingContext2D}   ctx
	       * @private
	       */},{key:'_drawEdges',value:function _drawEdges(ctx){var edges=this.body.edges;var edgeIndices=this.body.edgeIndices;var edge=void 0;for(var i=0;i<edgeIndices.length;i++){edge=edges[edgeIndices[i]];if(edge.connected===true){edge.draw(ctx);}}}/**
	       * Determine if the browser requires a setTimeout or a requestAnimationFrame. This was required because
	       * some implementations (safari and IE9) did not support requestAnimationFrame
	       * @private
	       */},{key:'_determineBrowserMethod',value:function _determineBrowserMethod(){if(typeof window!=='undefined'){var browserType=navigator.userAgent.toLowerCase();this.requiresTimeout=false;if(browserType.indexOf('msie 9.0')!=-1){// IE 9
	this.requiresTimeout=true;}else if(browserType.indexOf('safari')!=-1){// safari
	if(browserType.indexOf('chrome')<=-1){this.requiresTimeout=true;}}}else{this.requiresTimeout=true;}}}]);return CanvasRenderer;}();exports.default=CanvasRenderer;/***/},/* 108 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Hammer=__webpack_require__(22);var hammerUtil=__webpack_require__(30);var util=__webpack_require__(1);/**
	   * Create the main frame for the Network.
	   * This function is executed once when a Network object is created. The frame
	   * contains a canvas, and this canvas contains all objects like the axis and
	   * nodes.
	   * @private
	   */var Canvas=function(){function Canvas(body){_classCallCheck(this,Canvas);this.body=body;this.pixelRatio=1;this.resizeTimer=undefined;this.resizeFunction=this._onResize.bind(this);this.cameraState={};this.initialized=false;this.canvasViewCenter={};this.options={};this.defaultOptions={autoResize:true,height:'100%',width:'100%'};util.extend(this.options,this.defaultOptions);this.bindEventListeners();}_createClass(Canvas,[{key:'bindEventListeners',value:function bindEventListeners(){var _this=this;// bind the events
	this.body.emitter.once("resize",function(obj){if(obj.width!==0){_this.body.view.translation.x=obj.width*0.5;}if(obj.height!==0){_this.body.view.translation.y=obj.height*0.5;}});this.body.emitter.on("setSize",this.setSize.bind(this));this.body.emitter.on("destroy",function(){_this.hammerFrame.destroy();_this.hammer.destroy();_this._cleanUp();});}},{key:'setOptions',value:function setOptions(options){var _this2=this;if(options!==undefined){var fields=['width','height','autoResize'];util.selectiveDeepExtend(fields,this.options,options);}if(this.options.autoResize===true){// automatically adapt to a changing size of the browser.
	this._cleanUp();this.resizeTimer=setInterval(function(){var changed=_this2.setSize();if(changed===true){_this2.body.emitter.emit("_requestRedraw");}},1000);this.resizeFunction=this._onResize.bind(this);util.addEventListener(window,'resize',this.resizeFunction);}}},{key:'_cleanUp',value:function _cleanUp(){// automatically adapt to a changing size of the browser.
	if(this.resizeTimer!==undefined){clearInterval(this.resizeTimer);}util.removeEventListener(window,'resize',this.resizeFunction);this.resizeFunction=undefined;}},{key:'_onResize',value:function _onResize(){this.setSize();this.body.emitter.emit("_redraw");}/**
	       * Get and store the cameraState
	       * @private
	       */},{key:'_getCameraState',value:function _getCameraState(){var pixelRatio=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.pixelRatio;if(this.initialized===true){this.cameraState.previousWidth=this.frame.canvas.width/pixelRatio;this.cameraState.previousHeight=this.frame.canvas.height/pixelRatio;this.cameraState.scale=this.body.view.scale;this.cameraState.position=this.DOMtoCanvas({x:0.5*this.frame.canvas.width/pixelRatio,y:0.5*this.frame.canvas.height/pixelRatio});}}/**
	       * Set the cameraState
	       * @private
	       */},{key:'_setCameraState',value:function _setCameraState(){if(this.cameraState.scale!==undefined&&this.frame.canvas.clientWidth!==0&&this.frame.canvas.clientHeight!==0&&this.pixelRatio!==0&&this.cameraState.previousWidth>0){var widthRatio=this.frame.canvas.width/this.pixelRatio/this.cameraState.previousWidth;var heightRatio=this.frame.canvas.height/this.pixelRatio/this.cameraState.previousHeight;var newScale=this.cameraState.scale;if(widthRatio!=1&&heightRatio!=1){newScale=this.cameraState.scale*0.5*(widthRatio+heightRatio);}else if(widthRatio!=1){newScale=this.cameraState.scale*widthRatio;}else if(heightRatio!=1){newScale=this.cameraState.scale*heightRatio;}this.body.view.scale=newScale;// this comes from the view module.
	var currentViewCenter=this.DOMtoCanvas({x:0.5*this.frame.canvas.clientWidth,y:0.5*this.frame.canvas.clientHeight});var distanceFromCenter={// offset from view, distance view has to change by these x and y to center the node
	x:currentViewCenter.x-this.cameraState.position.x,y:currentViewCenter.y-this.cameraState.position.y};this.body.view.translation.x+=distanceFromCenter.x*this.body.view.scale;this.body.view.translation.y+=distanceFromCenter.y*this.body.view.scale;}}},{key:'_prepareValue',value:function _prepareValue(value){if(typeof value==='number'){return value+'px';}else if(typeof value==='string'){if(value.indexOf('%')!==-1||value.indexOf('px')!==-1){return value;}else if(value.indexOf('%')===-1){return value+'px';}}throw new Error('Could not use the value supplied for width or height:'+value);}/**
	       * Create the HTML
	       */},{key:'_create',value:function _create(){// remove all elements from the container element.
	while(this.body.container.hasChildNodes()){this.body.container.removeChild(this.body.container.firstChild);}this.frame=document.createElement('div');this.frame.className='vis-network';this.frame.style.position='relative';this.frame.style.overflow='hidden';this.frame.tabIndex=900;// tab index is required for keycharm to bind keystrokes to the div instead of the window
	//////////////////////////////////////////////////////////////////
	this.frame.canvas=document.createElement("canvas");this.frame.canvas.style.position='relative';this.frame.appendChild(this.frame.canvas);if(!this.frame.canvas.getContext){var noCanvas=document.createElement('DIV');noCanvas.style.color='red';noCanvas.style.fontWeight='bold';noCanvas.style.padding='10px';noCanvas.innerHTML='Error: your browser does not support HTML canvas';this.frame.canvas.appendChild(noCanvas);}else{var ctx=this.frame.canvas.getContext("2d");this.pixelRatio=(window.devicePixelRatio||1)/(ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1);this.frame.canvas.getContext("2d").setTransform(this.pixelRatio,0,0,this.pixelRatio,0,0);}// add the frame to the container element
	this.body.container.appendChild(this.frame);this.body.view.scale=1;this.body.view.translation={x:0.5*this.frame.canvas.clientWidth,y:0.5*this.frame.canvas.clientHeight};this._bindHammer();}/**
	       * This function binds hammer, it can be repeated over and over due to the uniqueness check.
	       * @private
	       */},{key:'_bindHammer',value:function _bindHammer(){var _this3=this;if(this.hammer!==undefined){this.hammer.destroy();}this.drag={};this.pinch={};// init hammer
	this.hammer=new Hammer(this.frame.canvas);this.hammer.get('pinch').set({enable:true});// enable to get better response, todo: test on mobile.
	this.hammer.get('pan').set({threshold:5,direction:Hammer.DIRECTION_ALL});hammerUtil.onTouch(this.hammer,function(event){_this3.body.eventListeners.onTouch(event);});this.hammer.on('tap',function(event){_this3.body.eventListeners.onTap(event);});this.hammer.on('doubletap',function(event){_this3.body.eventListeners.onDoubleTap(event);});this.hammer.on('press',function(event){_this3.body.eventListeners.onHold(event);});this.hammer.on('panstart',function(event){_this3.body.eventListeners.onDragStart(event);});this.hammer.on('panmove',function(event){_this3.body.eventListeners.onDrag(event);});this.hammer.on('panend',function(event){_this3.body.eventListeners.onDragEnd(event);});this.hammer.on('pinch',function(event){_this3.body.eventListeners.onPinch(event);});// TODO: neatly cleanup these handlers when re-creating the Canvas, IF these are done with hammer, event.stopPropagation will not work?
	this.frame.canvas.addEventListener('mousewheel',function(event){_this3.body.eventListeners.onMouseWheel(event);});this.frame.canvas.addEventListener('DOMMouseScroll',function(event){_this3.body.eventListeners.onMouseWheel(event);});this.frame.canvas.addEventListener('mousemove',function(event){_this3.body.eventListeners.onMouseMove(event);});this.frame.canvas.addEventListener('contextmenu',function(event){_this3.body.eventListeners.onContext(event);});this.hammerFrame=new Hammer(this.frame);hammerUtil.onRelease(this.hammerFrame,function(event){_this3.body.eventListeners.onRelease(event);});}/**
	       * Set a new size for the network
	       * @param {string} width   Width in pixels or percentage (for example '800px'
	       *                         or '50%')
	       * @param {string} height  Height in pixels or percentage  (for example '400px'
	       *                         or '30%')
	       */},{key:'setSize',value:function setSize(){var width=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.options.width;var height=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.options.height;width=this._prepareValue(width);height=this._prepareValue(height);var emitEvent=false;var oldWidth=this.frame.canvas.width;var oldHeight=this.frame.canvas.height;// update the pixel ratio
	var ctx=this.frame.canvas.getContext("2d");var previousRatio=this.pixelRatio;// we cache this because the camera state storage needs the old value
	this.pixelRatio=(window.devicePixelRatio||1)/(ctx.webkitBackingStorePixelRatio||ctx.mozBackingStorePixelRatio||ctx.msBackingStorePixelRatio||ctx.oBackingStorePixelRatio||ctx.backingStorePixelRatio||1);if(width!=this.options.width||height!=this.options.height||this.frame.style.width!=width||this.frame.style.height!=height){this._getCameraState(previousRatio);this.frame.style.width=width;this.frame.style.height=height;this.frame.canvas.style.width='100%';this.frame.canvas.style.height='100%';this.frame.canvas.width=Math.round(this.frame.canvas.clientWidth*this.pixelRatio);this.frame.canvas.height=Math.round(this.frame.canvas.clientHeight*this.pixelRatio);this.options.width=width;this.options.height=height;this.canvasViewCenter={x:0.5*this.frame.clientWidth,y:0.5*this.frame.clientHeight};emitEvent=true;}else{// this would adapt the width of the canvas to the width from 100% if and only if
	// there is a change.
	// store the camera if there is a change in size.
	if(this.frame.canvas.width!=Math.round(this.frame.canvas.clientWidth*this.pixelRatio)||this.frame.canvas.height!=Math.round(this.frame.canvas.clientHeight*this.pixelRatio)){this._getCameraState(previousRatio);}if(this.frame.canvas.width!=Math.round(this.frame.canvas.clientWidth*this.pixelRatio)){this.frame.canvas.width=Math.round(this.frame.canvas.clientWidth*this.pixelRatio);emitEvent=true;}if(this.frame.canvas.height!=Math.round(this.frame.canvas.clientHeight*this.pixelRatio)){this.frame.canvas.height=Math.round(this.frame.canvas.clientHeight*this.pixelRatio);emitEvent=true;}}if(emitEvent===true){this.body.emitter.emit('resize',{width:Math.round(this.frame.canvas.width/this.pixelRatio),height:Math.round(this.frame.canvas.height/this.pixelRatio),oldWidth:Math.round(oldWidth/this.pixelRatio),oldHeight:Math.round(oldHeight/this.pixelRatio)});// restore the camera on change.
	this._setCameraState();}// set initialized so the get and set camera will work from now on.
	this.initialized=true;return emitEvent;}},{key:'_XconvertDOMtoCanvas',/**
	       * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to
	       * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
	       * @param {number} x
	       * @returns {number}
	       * @private
	       */value:function _XconvertDOMtoCanvas(x){return(x-this.body.view.translation.x)/this.body.view.scale;}/**
	       * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
	       * the X coordinate in DOM-space (coordinate point in browser relative to the container div)
	       * @param {number} x
	       * @returns {number}
	       * @private
	       */},{key:'_XconvertCanvasToDOM',value:function _XconvertCanvasToDOM(x){return x*this.body.view.scale+this.body.view.translation.x;}/**
	       * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to
	       * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
	       * @param {number} y
	       * @returns {number}
	       * @private
	       */},{key:'_YconvertDOMtoCanvas',value:function _YconvertDOMtoCanvas(y){return(y-this.body.view.translation.y)/this.body.view.scale;}/**
	       * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
	       * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)
	       * @param {number} y
	       * @returns {number}
	       * @private
	       */},{key:'_YconvertCanvasToDOM',value:function _YconvertCanvasToDOM(y){return y*this.body.view.scale+this.body.view.translation.y;}/**
	       *
	       * @param {object} pos   = {x: number, y: number}
	       * @returns {{x: number, y: number}}
	       * @constructor
	       */},{key:'canvasToDOM',value:function canvasToDOM(pos){return{x:this._XconvertCanvasToDOM(pos.x),y:this._YconvertCanvasToDOM(pos.y)};}/**
	       *
	       * @param {object} pos   = {x: number, y: number}
	       * @returns {{x: number, y: number}}
	       * @constructor
	       */},{key:'DOMtoCanvas',value:function DOMtoCanvas(pos){return{x:this._XconvertDOMtoCanvas(pos.x),y:this._YconvertDOMtoCanvas(pos.y)};}}]);return Canvas;}();exports.default=Canvas;/***/},/* 109 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NetworkUtil=__webpack_require__(105);var _NetworkUtil2=_interopRequireDefault(_NetworkUtil);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var View=function(){function View(body,canvas){var _this=this;_classCallCheck(this,View);this.body=body;this.canvas=canvas;this.animationSpeed=1/this.renderRefreshRate;this.animationEasingFunction="easeInOutQuint";this.easingTime=0;this.sourceScale=0;this.targetScale=0;this.sourceTranslation=0;this.targetTranslation=0;this.lockedOnNodeId=undefined;this.lockedOnNodeOffset=undefined;this.touchTime=0;this.viewFunction=undefined;this.body.emitter.on("fit",this.fit.bind(this));this.body.emitter.on("animationFinished",function(){_this.body.emitter.emit("_stopRendering");});this.body.emitter.on("unlockNode",this.releaseNode.bind(this));}_createClass(View,[{key:'setOptions',value:function setOptions(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.options=options;}/**
	       * This function zooms out to fit all data on screen based on amount of nodes
	       * @param {Object} Options
	       * @param {Boolean} [initialZoom]  | zoom based on fitted formula or range, true = fitted, default = false;
	       */},{key:'fit',value:function fit(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{nodes:[]};var initialZoom=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var range=void 0;var zoomLevel=void 0;if(options.nodes===undefined||options.nodes.length===0){options.nodes=this.body.nodeIndices;}if(initialZoom===true){// check if more than half of the nodes have a predefined position. If so, we use the range, not the approximation.
	var positionDefined=0;for(var nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(nodeId)){var node=this.body.nodes[nodeId];if(node.predefinedPosition===true){positionDefined+=1;}}}if(positionDefined>0.5*this.body.nodeIndices.length){this.fit(options,false);return;}range=_NetworkUtil2.default.getRange(this.body.nodes,options.nodes);var numberOfNodes=this.body.nodeIndices.length;zoomLevel=12.662/(numberOfNodes+7.4147)+0.0964822;// this is obtained from fitting a dataset from 5 points with scale levels that looked good.
	// correct for larger canvasses.
	var factor=Math.min(this.canvas.frame.canvas.clientWidth/600,this.canvas.frame.canvas.clientHeight/600);zoomLevel*=factor;}else{this.body.emitter.emit("_resizeNodes");range=_NetworkUtil2.default.getRange(this.body.nodes,options.nodes);var xDistance=Math.abs(range.maxX-range.minX)*1.1;var yDistance=Math.abs(range.maxY-range.minY)*1.1;var xZoomLevel=this.canvas.frame.canvas.clientWidth/xDistance;var yZoomLevel=this.canvas.frame.canvas.clientHeight/yDistance;zoomLevel=xZoomLevel<=yZoomLevel?xZoomLevel:yZoomLevel;}if(zoomLevel>1.0){zoomLevel=1.0;}else if(zoomLevel===0){zoomLevel=1.0;}var center=_NetworkUtil2.default.findCenter(range);var animationOptions={position:center,scale:zoomLevel,animation:options.animation};this.moveTo(animationOptions);}// animation
	/**
	       * Center a node in view.
	       *
	       * @param {Number} nodeId
	       * @param {Number} [options]
	       */},{key:'focus',value:function focus(nodeId){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(this.body.nodes[nodeId]!==undefined){var nodePosition={x:this.body.nodes[nodeId].x,y:this.body.nodes[nodeId].y};options.position=nodePosition;options.lockedOnNode=nodeId;this.moveTo(options);}else{console.log("Node: "+nodeId+" cannot be found.");}}/**
	       *
	       * @param {Object} options  |  options.offset   = {x:Number, y:Number}   // offset from the center in DOM pixels
	       *                          |  options.scale    = Number                 // scale to move to
	       *                          |  options.position = {x:Number, y:Number}   // position to move to
	       *                          |  options.animation = {duration:Number, easingFunction:String} || Boolean   // position to move to
	       */},{key:'moveTo',value:function moveTo(options){if(options===undefined){options={};return;}if(options.offset===undefined){options.offset={x:0,y:0};}if(options.offset.x===undefined){options.offset.x=0;}if(options.offset.y===undefined){options.offset.y=0;}if(options.scale===undefined){options.scale=this.body.view.scale;}if(options.position===undefined){options.position=this.getViewPosition();}if(options.animation===undefined){options.animation={duration:0};}if(options.animation===false){options.animation={duration:0};}if(options.animation===true){options.animation={};}if(options.animation.duration===undefined){options.animation.duration=1000;}// default duration
	if(options.animation.easingFunction===undefined){options.animation.easingFunction="easeInOutQuad";}// default easing function
	this.animateView(options);}/**
	       *
	       * @param {Object} options  |  options.offset   = {x:Number, y:Number}   // offset from the center in DOM pixels
	       *                          |  options.time     = Number                 // animation time in milliseconds
	       *                          |  options.scale    = Number                 // scale to animate to
	       *                          |  options.position = {x:Number, y:Number}   // position to animate to
	       *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,
	       *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,
	       *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,
	       *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint
	       */},{key:'animateView',value:function animateView(options){if(options===undefined){return;}this.animationEasingFunction=options.animation.easingFunction;// release if something focussed on the node
	this.releaseNode();if(options.locked===true){this.lockedOnNodeId=options.lockedOnNode;this.lockedOnNodeOffset=options.offset;}// forcefully complete the old animation if it was still running
	if(this.easingTime!=0){this._transitionRedraw(true);// by setting easingtime to 1, we finish the animation.
	}this.sourceScale=this.body.view.scale;this.sourceTranslation=this.body.view.translation;this.targetScale=options.scale;// set the scale so the viewCenter is based on the correct zoom level. This is overridden in the transitionRedraw
	// but at least then we'll have the target transition
	this.body.view.scale=this.targetScale;var viewCenter=this.canvas.DOMtoCanvas({x:0.5*this.canvas.frame.canvas.clientWidth,y:0.5*this.canvas.frame.canvas.clientHeight});var distanceFromCenter={// offset from view, distance view has to change by these x and y to center the node
	x:viewCenter.x-options.position.x,y:viewCenter.y-options.position.y};this.targetTranslation={x:this.sourceTranslation.x+distanceFromCenter.x*this.targetScale+options.offset.x,y:this.sourceTranslation.y+distanceFromCenter.y*this.targetScale+options.offset.y};// if the time is set to 0, don't do an animation
	if(options.animation.duration===0){if(this.lockedOnNodeId!=undefined){this.viewFunction=this._lockedRedraw.bind(this);this.body.emitter.on("initRedraw",this.viewFunction);}else{this.body.view.scale=this.targetScale;this.body.view.translation=this.targetTranslation;this.body.emitter.emit("_requestRedraw");}}else{this.animationSpeed=1/(60*options.animation.duration*0.001)||1/60;// 60 for 60 seconds, 0.001 for milli's
	this.animationEasingFunction=options.animation.easingFunction;this.viewFunction=this._transitionRedraw.bind(this);this.body.emitter.on("initRedraw",this.viewFunction);this.body.emitter.emit("_startRendering");}}/**
	       * used to animate smoothly by hijacking the redraw function.
	       * @private
	       */},{key:'_lockedRedraw',value:function _lockedRedraw(){var nodePosition={x:this.body.nodes[this.lockedOnNodeId].x,y:this.body.nodes[this.lockedOnNodeId].y};var viewCenter=this.canvas.DOMtoCanvas({x:0.5*this.canvas.frame.canvas.clientWidth,y:0.5*this.canvas.frame.canvas.clientHeight});var distanceFromCenter={// offset from view, distance view has to change by these x and y to center the node
	x:viewCenter.x-nodePosition.x,y:viewCenter.y-nodePosition.y};var sourceTranslation=this.body.view.translation;var targetTranslation={x:sourceTranslation.x+distanceFromCenter.x*this.body.view.scale+this.lockedOnNodeOffset.x,y:sourceTranslation.y+distanceFromCenter.y*this.body.view.scale+this.lockedOnNodeOffset.y};this.body.view.translation=targetTranslation;}},{key:'releaseNode',value:function releaseNode(){if(this.lockedOnNodeId!==undefined&&this.viewFunction!==undefined){this.body.emitter.off("initRedraw",this.viewFunction);this.lockedOnNodeId=undefined;this.lockedOnNodeOffset=undefined;}}/**
	       *
	       * @param easingTime
	       * @private
	       */},{key:'_transitionRedraw',value:function _transitionRedraw(){var finished=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;this.easingTime+=this.animationSpeed;this.easingTime=finished===true?1.0:this.easingTime;var progress=util.easingFunctions[this.animationEasingFunction](this.easingTime);this.body.view.scale=this.sourceScale+(this.targetScale-this.sourceScale)*progress;this.body.view.translation={x:this.sourceTranslation.x+(this.targetTranslation.x-this.sourceTranslation.x)*progress,y:this.sourceTranslation.y+(this.targetTranslation.y-this.sourceTranslation.y)*progress};// cleanup
	if(this.easingTime>=1.0){this.body.emitter.off("initRedraw",this.viewFunction);this.easingTime=0;if(this.lockedOnNodeId!=undefined){this.viewFunction=this._lockedRedraw.bind(this);this.body.emitter.on("initRedraw",this.viewFunction);}this.body.emitter.emit("animationFinished");}}},{key:'getScale',value:function getScale(){return this.body.view.scale;}},{key:'getViewPosition',value:function getViewPosition(){return this.canvas.DOMtoCanvas({x:0.5*this.canvas.frame.canvas.clientWidth,y:0.5*this.canvas.frame.canvas.clientHeight});}}]);return View;}();exports.default=View;/***/},/* 110 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NavigationHandler=__webpack_require__(111);var _NavigationHandler2=_interopRequireDefault(_NavigationHandler);var _Popup=__webpack_require__(112);var _Popup2=_interopRequireDefault(_Popup);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var InteractionHandler=function(){function InteractionHandler(body,canvas,selectionHandler){_classCallCheck(this,InteractionHandler);this.body=body;this.canvas=canvas;this.selectionHandler=selectionHandler;this.navigationHandler=new _NavigationHandler2.default(body,canvas);// bind the events from hammer to functions in this object
	this.body.eventListeners.onTap=this.onTap.bind(this);this.body.eventListeners.onTouch=this.onTouch.bind(this);this.body.eventListeners.onDoubleTap=this.onDoubleTap.bind(this);this.body.eventListeners.onHold=this.onHold.bind(this);this.body.eventListeners.onDragStart=this.onDragStart.bind(this);this.body.eventListeners.onDrag=this.onDrag.bind(this);this.body.eventListeners.onDragEnd=this.onDragEnd.bind(this);this.body.eventListeners.onMouseWheel=this.onMouseWheel.bind(this);this.body.eventListeners.onPinch=this.onPinch.bind(this);this.body.eventListeners.onMouseMove=this.onMouseMove.bind(this);this.body.eventListeners.onRelease=this.onRelease.bind(this);this.body.eventListeners.onContext=this.onContext.bind(this);this.touchTime=0;this.drag={};this.pinch={};this.popup=undefined;this.popupObj=undefined;this.popupTimer=undefined;this.body.functions.getPointer=this.getPointer.bind(this);this.options={};this.defaultOptions={dragNodes:true,dragView:true,hover:false,keyboard:{enabled:false,speed:{x:10,y:10,zoom:0.02},bindToWindow:true},navigationButtons:false,tooltipDelay:300,zoomView:true};util.extend(this.options,this.defaultOptions);this.bindEventListeners();}_createClass(InteractionHandler,[{key:'bindEventListeners',value:function bindEventListeners(){var _this=this;this.body.emitter.on('destroy',function(){clearTimeout(_this.popupTimer);delete _this.body.functions.getPointer;});}},{key:'setOptions',value:function setOptions(options){if(options!==undefined){// extend all but the values in fields
	var fields=['hideEdgesOnDrag','hideNodesOnDrag','keyboard','multiselect','selectable','selectConnectedEdges'];util.selectiveNotDeepExtend(fields,this.options,options);// merge the keyboard options in.
	util.mergeOptions(this.options,options,'keyboard');if(options.tooltip){util.extend(this.options.tooltip,options.tooltip);if(options.tooltip.color){this.options.tooltip.color=util.parseColor(options.tooltip.color);}}}this.navigationHandler.setOptions(this.options);}/**
	       * Get the pointer location from a touch location
	       * @param {{x: Number, y: Number}} touch
	       * @return {{x: Number, y: Number}} pointer
	       * @private
	       */},{key:'getPointer',value:function getPointer(touch){return{x:touch.x-util.getAbsoluteLeft(this.canvas.frame.canvas),y:touch.y-util.getAbsoluteTop(this.canvas.frame.canvas)};}/**
	       * On start of a touch gesture, store the pointer
	       * @param event
	       * @private
	       */},{key:'onTouch',value:function onTouch(event){if(new Date().valueOf()-this.touchTime>50){this.drag.pointer=this.getPointer(event.center);this.drag.pinched=false;this.pinch.scale=this.body.view.scale;// to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
	this.touchTime=new Date().valueOf();}}/**
	       * handle tap/click event: select/unselect a node
	       * @private
	       */},{key:'onTap',value:function onTap(event){var pointer=this.getPointer(event.center);var multiselect=this.selectionHandler.options.multiselect&&(event.changedPointers[0].ctrlKey||event.changedPointers[0].metaKey);this.checkSelectionChanges(pointer,event,multiselect);this.selectionHandler._generateClickEvent('click',event,pointer);}/**
	       * handle doubletap event
	       * @private
	       */},{key:'onDoubleTap',value:function onDoubleTap(event){var pointer=this.getPointer(event.center);this.selectionHandler._generateClickEvent('doubleClick',event,pointer);}/**
	       * handle long tap event: multi select nodes
	       * @private
	       */},{key:'onHold',value:function onHold(event){var pointer=this.getPointer(event.center);var multiselect=this.selectionHandler.options.multiselect;this.checkSelectionChanges(pointer,event,multiselect);this.selectionHandler._generateClickEvent('click',event,pointer);this.selectionHandler._generateClickEvent('hold',event,pointer);}/**
	       * handle the release of the screen
	       *
	       * @private
	       */},{key:'onRelease',value:function onRelease(event){if(new Date().valueOf()-this.touchTime>10){var pointer=this.getPointer(event.center);this.selectionHandler._generateClickEvent('release',event,pointer);// to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
	this.touchTime=new Date().valueOf();}}},{key:'onContext',value:function onContext(event){var pointer=this.getPointer({x:event.clientX,y:event.clientY});this.selectionHandler._generateClickEvent('oncontext',event,pointer);}/**
	       *
	       * @param pointer
	       * @param add
	       */},{key:'checkSelectionChanges',value:function checkSelectionChanges(pointer,event){var add=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var previouslySelectedEdgeCount=this.selectionHandler._getSelectedEdgeCount();var previouslySelectedNodeCount=this.selectionHandler._getSelectedNodeCount();var previousSelection=this.selectionHandler.getSelection();var selected=void 0;if(add===true){selected=this.selectionHandler.selectAdditionalOnPoint(pointer);}else{selected=this.selectionHandler.selectOnPoint(pointer);}var selectedEdgesCount=this.selectionHandler._getSelectedEdgeCount();var selectedNodesCount=this.selectionHandler._getSelectedNodeCount();var currentSelection=this.selectionHandler.getSelection();var _determineIfDifferent2=this._determineIfDifferent(previousSelection,currentSelection),nodesChanged=_determineIfDifferent2.nodesChanged,edgesChanged=_determineIfDifferent2.edgesChanged;var nodeSelected=false;if(selectedNodesCount-previouslySelectedNodeCount>0){// node was selected
	this.selectionHandler._generateClickEvent('selectNode',event,pointer);selected=true;nodeSelected=true;}else if(nodesChanged===true&&selectedNodesCount>0){this.selectionHandler._generateClickEvent('deselectNode',event,pointer,previousSelection);this.selectionHandler._generateClickEvent('selectNode',event,pointer);nodeSelected=true;selected=true;}else if(selectedNodesCount-previouslySelectedNodeCount<0){// node was deselected
	this.selectionHandler._generateClickEvent('deselectNode',event,pointer,previousSelection);selected=true;}// handle the selected edges
	if(selectedEdgesCount-previouslySelectedEdgeCount>0&&nodeSelected===false){// edge was selected
	this.selectionHandler._generateClickEvent('selectEdge',event,pointer);selected=true;}else if(selectedEdgesCount>0&&edgesChanged===true){this.selectionHandler._generateClickEvent('deselectEdge',event,pointer,previousSelection);this.selectionHandler._generateClickEvent('selectEdge',event,pointer);selected=true;}else if(selectedEdgesCount-previouslySelectedEdgeCount<0){// edge was deselected
	this.selectionHandler._generateClickEvent('deselectEdge',event,pointer,previousSelection);selected=true;}// fire the select event if anything has been selected or deselected
	if(selected===true){// select or unselect
	this.selectionHandler._generateClickEvent('select',event,pointer);}}/**
	       * This function checks if the nodes and edges previously selected have changed.
	       * @param previousSelection
	       * @param currentSelection
	       * @returns {{nodesChanged: boolean, edgesChanged: boolean}}
	       * @private
	       */},{key:'_determineIfDifferent',value:function _determineIfDifferent(previousSelection,currentSelection){var nodesChanged=false;var edgesChanged=false;for(var i=0;i<previousSelection.nodes.length;i++){if(currentSelection.nodes.indexOf(previousSelection.nodes[i])===-1){nodesChanged=true;}}for(var _i=0;_i<currentSelection.nodes.length;_i++){if(previousSelection.nodes.indexOf(previousSelection.nodes[_i])===-1){nodesChanged=true;}}for(var _i2=0;_i2<previousSelection.edges.length;_i2++){if(currentSelection.edges.indexOf(previousSelection.edges[_i2])===-1){edgesChanged=true;}}for(var _i3=0;_i3<currentSelection.edges.length;_i3++){if(previousSelection.edges.indexOf(previousSelection.edges[_i3])===-1){edgesChanged=true;}}return{nodesChanged:nodesChanged,edgesChanged:edgesChanged};}/**
	       * This function is called by onDragStart.
	       * It is separated out because we can then overload it for the datamanipulation system.
	       *
	       * @private
	       */},{key:'onDragStart',value:function onDragStart(event){//in case the touch event was triggered on an external div, do the initial touch now.
	if(this.drag.pointer===undefined){this.onTouch(event);}// note: drag.pointer is set in onTouch to get the initial touch location
	var node=this.selectionHandler.getNodeAt(this.drag.pointer);this.drag.dragging=true;this.drag.selection=[];this.drag.translation=util.extend({},this.body.view.translation);// copy the object
	this.drag.nodeId=undefined;if(node!==undefined&&this.options.dragNodes===true){this.drag.nodeId=node.id;// select the clicked node if not yet selected
	if(node.isSelected()===false){this.selectionHandler.unselectAll();this.selectionHandler.selectObject(node);}// after select to contain the node
	this.selectionHandler._generateClickEvent('dragStart',event,this.drag.pointer);var selection=this.selectionHandler.selectionObj.nodes;// create an array with the selected nodes and their original location and status
	for(var nodeId in selection){if(selection.hasOwnProperty(nodeId)){var object=selection[nodeId];var s={id:object.id,node:object,// store original x, y, xFixed and yFixed, make the node temporarily Fixed
	x:object.x,y:object.y,xFixed:object.options.fixed.x,yFixed:object.options.fixed.y};object.options.fixed.x=true;object.options.fixed.y=true;this.drag.selection.push(s);}}}else{// fallback if no node is selected and thus the view is dragged.
	this.selectionHandler._generateClickEvent('dragStart',event,this.drag.pointer,undefined,true);}}/**
	       * handle drag event
	       * @private
	       */},{key:'onDrag',value:function onDrag(event){var _this2=this;if(this.drag.pinched===true){return;}// remove the focus on node if it is focussed on by the focusOnNode
	this.body.emitter.emit('unlockNode');var pointer=this.getPointer(event.center);var selection=this.drag.selection;if(selection&&selection.length&&this.options.dragNodes===true){(function(){_this2.selectionHandler._generateClickEvent('dragging',event,pointer);// calculate delta's and new location
	var deltaX=pointer.x-_this2.drag.pointer.x;var deltaY=pointer.y-_this2.drag.pointer.y;// update position of all selected nodes
	selection.forEach(function(selection){var node=selection.node;// only move the node if it was not fixed initially
	if(selection.xFixed===false){node.x=_this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection.x)+deltaX);}// only move the node if it was not fixed initially
	if(selection.yFixed===false){node.y=_this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection.y)+deltaY);}});// start the simulation of the physics
	_this2.body.emitter.emit('startSimulation');})();}else{// move the network
	if(this.options.dragView===true){this.selectionHandler._generateClickEvent('dragging',event,pointer,undefined,true);// if the drag was not started properly because the click started outside the network div, start it now.
	if(this.drag.pointer===undefined){this.onDragStart(event);return;}var diffX=pointer.x-this.drag.pointer.x;var diffY=pointer.y-this.drag.pointer.y;this.body.view.translation={x:this.drag.translation.x+diffX,y:this.drag.translation.y+diffY};this.body.emitter.emit('_redraw');}}}/**
	       * handle drag start event
	       * @private
	       */},{key:'onDragEnd',value:function onDragEnd(event){this.drag.dragging=false;var selection=this.drag.selection;if(selection&&selection.length){selection.forEach(function(s){// restore original xFixed and yFixed
	s.node.options.fixed.x=s.xFixed;s.node.options.fixed.y=s.yFixed;});this.selectionHandler._generateClickEvent('dragEnd',event,this.getPointer(event.center));this.body.emitter.emit('startSimulation');}else{this.selectionHandler._generateClickEvent('dragEnd',event,this.getPointer(event.center),undefined,true);this.body.emitter.emit('_requestRedraw');}}/**
	       * Handle pinch event
	       * @param event
	       * @private
	       */},{key:'onPinch',value:function onPinch(event){var pointer=this.getPointer(event.center);this.drag.pinched=true;if(this.pinch['scale']===undefined){this.pinch.scale=1;}// TODO: enabled moving while pinching?
	var scale=this.pinch.scale*event.scale;this.zoom(scale,pointer);}/**
	       * Zoom the network in or out
	       * @param {Number} scale a number around 1, and between 0.01 and 10
	       * @param {{x: Number, y: Number}} pointer    Position on screen
	       * @return {Number} appliedScale    scale is limited within the boundaries
	       * @private
	       */},{key:'zoom',value:function zoom(scale,pointer){if(this.options.zoomView===true){var scaleOld=this.body.view.scale;if(scale<0.00001){scale=0.00001;}if(scale>10){scale=10;}var preScaleDragPointer=undefined;if(this.drag!==undefined){if(this.drag.dragging===true){preScaleDragPointer=this.canvas.DOMtoCanvas(this.drag.pointer);}}// + this.canvas.frame.canvas.clientHeight / 2
	var translation=this.body.view.translation;var scaleFrac=scale/scaleOld;var tx=(1-scaleFrac)*pointer.x+translation.x*scaleFrac;var ty=(1-scaleFrac)*pointer.y+translation.y*scaleFrac;this.body.view.scale=scale;this.body.view.translation={x:tx,y:ty};if(preScaleDragPointer!=undefined){var postScaleDragPointer=this.canvas.canvasToDOM(preScaleDragPointer);this.drag.pointer.x=postScaleDragPointer.x;this.drag.pointer.y=postScaleDragPointer.y;}this.body.emitter.emit('_requestRedraw');if(scaleOld<scale){this.body.emitter.emit('zoom',{direction:'+',scale:this.body.view.scale});}else{this.body.emitter.emit('zoom',{direction:'-',scale:this.body.view.scale});}}}/**
	       * Event handler for mouse wheel event, used to zoom the timeline
	       * See http://adomas.org/javascript-mouse-wheel/
	       *     https://github.com/EightMedia/hammer.js/issues/256
	       * @param {MouseEvent}  event
	       * @private
	       */},{key:'onMouseWheel',value:function onMouseWheel(event){if(this.options.zoomView===true){// retrieve delta
	var delta=0;if(event.wheelDelta){/* IE/Opera. */delta=event.wheelDelta/120;}else if(event.detail){/* Mozilla case. */// In Mozilla, sign of delta is different than in IE.
	// Also, delta is multiple of 3.
	delta=-event.detail/3;}// If delta is nonzero, handle it.
	// Basically, delta is now positive if wheel was scrolled up,
	// and negative, if wheel was scrolled down.
	if(delta!==0){// calculate the new scale
	var scale=this.body.view.scale;var zoom=delta/10;if(delta<0){zoom=zoom/(1-zoom);}scale*=1+zoom;// calculate the pointer location
	var pointer=this.getPointer({x:event.clientX,y:event.clientY});// apply the new scale
	this.zoom(scale,pointer);}// Prevent default actions caused by mouse wheel.
	event.preventDefault();}}/**
	       * Mouse move handler for checking whether the title moves over a node with a title.
	       * @param  {Event} event
	       * @private
	       */},{key:'onMouseMove',value:function onMouseMove(event){var _this3=this;var pointer=this.getPointer({x:event.clientX,y:event.clientY});var popupVisible=false;// check if the previously selected node is still selected
	if(this.popup!==undefined){if(this.popup.hidden===false){this._checkHidePopup(pointer);}// if the popup was not hidden above
	if(this.popup.hidden===false){popupVisible=true;this.popup.setPosition(pointer.x+3,pointer.y-5);this.popup.show();}}// if we bind the keyboard to the div, we have to highlight it to use it. This highlights it on mouse over.
	if(this.options.keyboard.bindToWindow===false&&this.options.keyboard.enabled===true){this.canvas.frame.focus();}// start a timeout that will check if the mouse is positioned above an element
	if(popupVisible===false){if(this.popupTimer!==undefined){clearInterval(this.popupTimer);// stop any running calculationTimer
	this.popupTimer=undefined;}if(!this.drag.dragging){this.popupTimer=setTimeout(function(){return _this3._checkShowPopup(pointer);},this.options.tooltipDelay);}}/**
	        * Adding hover highlights
	        */if(this.options.hover===true){// adding hover highlights
	var obj=this.selectionHandler.getNodeAt(pointer);if(obj===undefined){obj=this.selectionHandler.getEdgeAt(pointer);}this.selectionHandler.hoverObject(obj);}}/**
	       * Check if there is an element on the given position in the network
	       * (a node or edge). If so, and if this element has a title,
	       * show a popup window with its title.
	       *
	       * @param {{x:Number, y:Number}} pointer
	       * @private
	       */},{key:'_checkShowPopup',value:function _checkShowPopup(pointer){var x=this.canvas._XconvertDOMtoCanvas(pointer.x);var y=this.canvas._YconvertDOMtoCanvas(pointer.y);var pointerObj={left:x,top:y,right:x,bottom:y};var previousPopupObjId=this.popupObj===undefined?undefined:this.popupObj.id;var nodeUnderCursor=false;var popupType='node';// check if a node is under the cursor.
	if(this.popupObj===undefined){// search the nodes for overlap, select the top one in case of multiple nodes
	var nodeIndices=this.body.nodeIndices;var nodes=this.body.nodes;var node=void 0;var overlappingNodes=[];for(var i=0;i<nodeIndices.length;i++){node=nodes[nodeIndices[i]];if(node.isOverlappingWith(pointerObj)===true){if(node.getTitle()!==undefined){overlappingNodes.push(nodeIndices[i]);}}}if(overlappingNodes.length>0){// if there are overlapping nodes, select the last one, this is the one which is drawn on top of the others
	this.popupObj=nodes[overlappingNodes[overlappingNodes.length-1]];// if you hover over a node, the title of the edge is not supposed to be shown.
	nodeUnderCursor=true;}}if(this.popupObj===undefined&&nodeUnderCursor===false){// search the edges for overlap
	var edgeIndices=this.body.edgeIndices;var edges=this.body.edges;var edge=void 0;var overlappingEdges=[];for(var _i4=0;_i4<edgeIndices.length;_i4++){edge=edges[edgeIndices[_i4]];if(edge.isOverlappingWith(pointerObj)===true){if(edge.connected===true&&edge.getTitle()!==undefined){overlappingEdges.push(edgeIndices[_i4]);}}}if(overlappingEdges.length>0){this.popupObj=edges[overlappingEdges[overlappingEdges.length-1]];popupType='edge';}}if(this.popupObj!==undefined){// show popup message window
	if(this.popupObj.id!==previousPopupObjId){if(this.popup===undefined){this.popup=new _Popup2.default(this.canvas.frame);}this.popup.popupTargetType=popupType;this.popup.popupTargetId=this.popupObj.id;// adjust a small offset such that the mouse cursor is located in the
	// bottom left location of the popup, and you can easily move over the
	// popup area
	this.popup.setPosition(pointer.x+3,pointer.y-5);this.popup.setText(this.popupObj.getTitle());this.popup.show();this.body.emitter.emit('showPopup',this.popupObj.id);}}else{if(this.popup!==undefined){this.popup.hide();this.body.emitter.emit('hidePopup');}}}/**
	       * Check if the popup must be hidden, which is the case when the mouse is no
	       * longer hovering on the object
	       * @param {{x:Number, y:Number}} pointer
	       * @private
	       */},{key:'_checkHidePopup',value:function _checkHidePopup(pointer){var pointerObj=this.selectionHandler._pointerToPositionObject(pointer);var stillOnObj=false;if(this.popup.popupTargetType==='node'){if(this.body.nodes[this.popup.popupTargetId]!==undefined){stillOnObj=this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);// if the mouse is still one the node, we have to check if it is not also on one that is drawn on top of it.
	// we initially only check stillOnObj because this is much faster.
	if(stillOnObj===true){var overNode=this.selectionHandler.getNodeAt(pointer);stillOnObj=overNode.id===this.popup.popupTargetId;}}}else{if(this.selectionHandler.getNodeAt(pointer)===undefined){if(this.body.edges[this.popup.popupTargetId]!==undefined){stillOnObj=this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);}}}if(stillOnObj===false){this.popupObj=undefined;this.popup.hide();this.body.emitter.emit('hidePopup');}}}]);return InteractionHandler;}();exports.default=InteractionHandler;/***/},/* 111 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var Hammer=__webpack_require__(22);var hammerUtil=__webpack_require__(30);var keycharm=__webpack_require__(25);var NavigationHandler=function(){function NavigationHandler(body,canvas){var _this=this;_classCallCheck(this,NavigationHandler);this.body=body;this.canvas=canvas;this.iconsCreated=false;this.navigationHammers=[];this.boundFunctions={};this.touchTime=0;this.activated=false;this.body.emitter.on("activate",function(){_this.activated=true;_this.configureKeyboardBindings();});this.body.emitter.on("deactivate",function(){_this.activated=false;_this.configureKeyboardBindings();});this.body.emitter.on("destroy",function(){if(_this.keycharm!==undefined){_this.keycharm.destroy();}});this.options={};}_createClass(NavigationHandler,[{key:'setOptions',value:function setOptions(options){if(options!==undefined){this.options=options;this.create();}}},{key:'create',value:function create(){if(this.options.navigationButtons===true){if(this.iconsCreated===false){this.loadNavigationElements();}}else if(this.iconsCreated===true){this.cleanNavigation();}this.configureKeyboardBindings();}},{key:'cleanNavigation',value:function cleanNavigation(){// clean hammer bindings
	if(this.navigationHammers.length!=0){for(var i=0;i<this.navigationHammers.length;i++){this.navigationHammers[i].destroy();}this.navigationHammers=[];}// clean up previous navigation items
	if(this.navigationDOM&&this.navigationDOM['wrapper']&&this.navigationDOM['wrapper'].parentNode){this.navigationDOM['wrapper'].parentNode.removeChild(this.navigationDOM['wrapper']);}this.iconsCreated=false;}/**
	       * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation
	       * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent
	       * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.
	       * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.
	       *
	       * @private
	       */},{key:'loadNavigationElements',value:function loadNavigationElements(){var _this2=this;this.cleanNavigation();this.navigationDOM={};var navigationDivs=['up','down','left','right','zoomIn','zoomOut','zoomExtends'];var navigationDivActions=['_moveUp','_moveDown','_moveLeft','_moveRight','_zoomIn','_zoomOut','_fit'];this.navigationDOM['wrapper']=document.createElement('div');this.navigationDOM['wrapper'].className='vis-navigation';this.canvas.frame.appendChild(this.navigationDOM['wrapper']);for(var i=0;i<navigationDivs.length;i++){this.navigationDOM[navigationDivs[i]]=document.createElement('div');this.navigationDOM[navigationDivs[i]].className='vis-button vis-'+navigationDivs[i];this.navigationDOM['wrapper'].appendChild(this.navigationDOM[navigationDivs[i]]);var hammer=new Hammer(this.navigationDOM[navigationDivs[i]]);if(navigationDivActions[i]==="_fit"){hammerUtil.onTouch(hammer,this._fit.bind(this));}else{hammerUtil.onTouch(hammer,this.bindToRedraw.bind(this,navigationDivActions[i]));}this.navigationHammers.push(hammer);}// use a hammer for the release so we do not require the one used in the rest of the network
	// the one the rest uses can be overloaded by the manipulation system.
	var hammerFrame=new Hammer(this.canvas.frame);hammerUtil.onRelease(hammerFrame,function(){_this2._stopMovement();});this.navigationHammers.push(hammerFrame);this.iconsCreated=true;}},{key:'bindToRedraw',value:function bindToRedraw(action){if(this.boundFunctions[action]===undefined){this.boundFunctions[action]=this[action].bind(this);this.body.emitter.on("initRedraw",this.boundFunctions[action]);this.body.emitter.emit("_startRendering");}}},{key:'unbindFromRedraw',value:function unbindFromRedraw(action){if(this.boundFunctions[action]!==undefined){this.body.emitter.off("initRedraw",this.boundFunctions[action]);this.body.emitter.emit("_stopRendering");delete this.boundFunctions[action];}}/**
	       * this stops all movement induced by the navigation buttons
	       *
	       * @private
	       */},{key:'_fit',value:function _fit(){if(new Date().valueOf()-this.touchTime>700){// TODO: fix ugly hack to avoid hammer's double fireing of event (because we use release?)
	this.body.emitter.emit("fit",{duration:700});this.touchTime=new Date().valueOf();}}/**
	       * this stops all movement induced by the navigation buttons
	       *
	       * @private
	       */},{key:'_stopMovement',value:function _stopMovement(){for(var boundAction in this.boundFunctions){if(this.boundFunctions.hasOwnProperty(boundAction)){this.body.emitter.off("initRedraw",this.boundFunctions[boundAction]);this.body.emitter.emit("_stopRendering");}}this.boundFunctions={};}},{key:'_moveUp',value:function _moveUp(){this.body.view.translation.y+=this.options.keyboard.speed.y;}},{key:'_moveDown',value:function _moveDown(){this.body.view.translation.y-=this.options.keyboard.speed.y;}},{key:'_moveLeft',value:function _moveLeft(){this.body.view.translation.x+=this.options.keyboard.speed.x;}},{key:'_moveRight',value:function _moveRight(){this.body.view.translation.x-=this.options.keyboard.speed.x;}},{key:'_zoomIn',value:function _zoomIn(){var scaleOld=this.body.view.scale;var scale=this.body.view.scale*(1+this.options.keyboard.speed.zoom);var translation=this.body.view.translation;var scaleFrac=scale/scaleOld;var tx=(1-scaleFrac)*this.canvas.canvasViewCenter.x+translation.x*scaleFrac;var ty=(1-scaleFrac)*this.canvas.canvasViewCenter.y+translation.y*scaleFrac;this.body.view.scale=scale;this.body.view.translation={x:tx,y:ty};this.body.emitter.emit('zoom',{direction:'+',scale:this.body.view.scale});}},{key:'_zoomOut',value:function _zoomOut(){var scaleOld=this.body.view.scale;var scale=this.body.view.scale/(1+this.options.keyboard.speed.zoom);var translation=this.body.view.translation;var scaleFrac=scale/scaleOld;var tx=(1-scaleFrac)*this.canvas.canvasViewCenter.x+translation.x*scaleFrac;var ty=(1-scaleFrac)*this.canvas.canvasViewCenter.y+translation.y*scaleFrac;this.body.view.scale=scale;this.body.view.translation={x:tx,y:ty};this.body.emitter.emit('zoom',{direction:'-',scale:this.body.view.scale});}/**
	       * bind all keys using keycharm.
	       */},{key:'configureKeyboardBindings',value:function configureKeyboardBindings(){var _this3=this;if(this.keycharm!==undefined){this.keycharm.destroy();}if(this.options.keyboard.enabled===true){if(this.options.keyboard.bindToWindow===true){this.keycharm=keycharm({container:window,preventDefault:true});}else{this.keycharm=keycharm({container:this.canvas.frame,preventDefault:true});}this.keycharm.reset();if(this.activated===true){this.keycharm.bind("up",function(){_this3.bindToRedraw("_moveUp");},"keydown");this.keycharm.bind("down",function(){_this3.bindToRedraw("_moveDown");},"keydown");this.keycharm.bind("left",function(){_this3.bindToRedraw("_moveLeft");},"keydown");this.keycharm.bind("right",function(){_this3.bindToRedraw("_moveRight");},"keydown");this.keycharm.bind("=",function(){_this3.bindToRedraw("_zoomIn");},"keydown");this.keycharm.bind("num+",function(){_this3.bindToRedraw("_zoomIn");},"keydown");this.keycharm.bind("num-",function(){_this3.bindToRedraw("_zoomOut");},"keydown");this.keycharm.bind("-",function(){_this3.bindToRedraw("_zoomOut");},"keydown");this.keycharm.bind("[",function(){_this3.bindToRedraw("_zoomOut");},"keydown");this.keycharm.bind("]",function(){_this3.bindToRedraw("_zoomIn");},"keydown");this.keycharm.bind("pageup",function(){_this3.bindToRedraw("_zoomIn");},"keydown");this.keycharm.bind("pagedown",function(){_this3.bindToRedraw("_zoomOut");},"keydown");this.keycharm.bind("up",function(){_this3.unbindFromRedraw("_moveUp");},"keyup");this.keycharm.bind("down",function(){_this3.unbindFromRedraw("_moveDown");},"keyup");this.keycharm.bind("left",function(){_this3.unbindFromRedraw("_moveLeft");},"keyup");this.keycharm.bind("right",function(){_this3.unbindFromRedraw("_moveRight");},"keyup");this.keycharm.bind("=",function(){_this3.unbindFromRedraw("_zoomIn");},"keyup");this.keycharm.bind("num+",function(){_this3.unbindFromRedraw("_zoomIn");},"keyup");this.keycharm.bind("num-",function(){_this3.unbindFromRedraw("_zoomOut");},"keyup");this.keycharm.bind("-",function(){_this3.unbindFromRedraw("_zoomOut");},"keyup");this.keycharm.bind("[",function(){_this3.unbindFromRedraw("_zoomOut");},"keyup");this.keycharm.bind("]",function(){_this3.unbindFromRedraw("_zoomIn");},"keyup");this.keycharm.bind("pageup",function(){_this3.unbindFromRedraw("_zoomIn");},"keyup");this.keycharm.bind("pagedown",function(){_this3.unbindFromRedraw("_zoomOut");},"keyup");}}}}]);return NavigationHandler;}();exports.default=NavigationHandler;/***/},/* 112 *//***/function(module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
	   * Popup is a class to create a popup window with some text
	   * @param {Element}  container     The container object.
	   * @param {Number} [x]
	   * @param {Number} [y]
	   * @param {String} [text]
	   * @param {Object} [style]     An object containing borderColor,
	   *                             backgroundColor, etc.
	   */var Popup=function(){function Popup(container){_classCallCheck(this,Popup);this.container=container;this.x=0;this.y=0;this.padding=5;this.hidden=false;// create the frame
	this.frame=document.createElement('div');this.frame.className='vis-network-tooltip';this.container.appendChild(this.frame);}/**
	     * @param {number} x   Horizontal position of the popup window
	     * @param {number} y   Vertical position of the popup window
	     */_createClass(Popup,[{key:'setPosition',value:function setPosition(x,y){this.x=parseInt(x);this.y=parseInt(y);}/**
	       * Set the content for the popup window. This can be HTML code or text.
	       * @param {string | Element} content
	       */},{key:'setText',value:function setText(content){if(content instanceof Element){this.frame.innerHTML='';this.frame.appendChild(content);}else{this.frame.innerHTML=content;// string containing text or HTML
	}}/**
	       * Show the popup window
	       * @param {boolean} [doShow]    Show or hide the window
	       */},{key:'show',value:function show(doShow){if(doShow===undefined){doShow=true;}if(doShow===true){var height=this.frame.clientHeight;var width=this.frame.clientWidth;var maxHeight=this.frame.parentNode.clientHeight;var maxWidth=this.frame.parentNode.clientWidth;var top=this.y-height;if(top+height+this.padding>maxHeight){top=maxHeight-height-this.padding;}if(top<this.padding){top=this.padding;}var left=this.x;if(left+width+this.padding>maxWidth){left=maxWidth-width-this.padding;}if(left<this.padding){left=this.padding;}this.frame.style.left=left+"px";this.frame.style.top=top+"px";this.frame.style.visibility="visible";this.hidden=false;}else{this.hide();}}/**
	       * Hide the popup window
	       */},{key:'hide',value:function hide(){this.hidden=true;this.frame.style.visibility="hidden";}}]);return Popup;}();exports.default=Popup;/***/},/* 113 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _Node=__webpack_require__(67);var _Node2=_interopRequireDefault(_Node);var _Edge=__webpack_require__(87);var _Edge2=_interopRequireDefault(_Edge);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var SelectionHandler=function(){function SelectionHandler(body,canvas){var _this=this;_classCallCheck(this,SelectionHandler);this.body=body;this.canvas=canvas;this.selectionObj={nodes:[],edges:[]};this.hoverObj={nodes:{},edges:{}};this.options={};this.defaultOptions={multiselect:false,selectable:true,selectConnectedEdges:true,hoverConnectedEdges:true};util.extend(this.options,this.defaultOptions);this.body.emitter.on("_dataChanged",function(){_this.updateSelection();});}_createClass(SelectionHandler,[{key:'setOptions',value:function setOptions(options){if(options!==undefined){var fields=['multiselect','hoverConnectedEdges','selectable','selectConnectedEdges'];util.selectiveDeepExtend(fields,this.options,options);}}/**
	       * handles the selection part of the tap;
	       *
	       * @param {Object} pointer
	       * @private
	       */},{key:'selectOnPoint',value:function selectOnPoint(pointer){var selected=false;if(this.options.selectable===true){var obj=this.getNodeAt(pointer)||this.getEdgeAt(pointer);// unselect after getting the objects in order to restore width and height.
	this.unselectAll();if(obj!==undefined){selected=this.selectObject(obj);}this.body.emitter.emit("_requestRedraw");}return selected;}},{key:'selectAdditionalOnPoint',value:function selectAdditionalOnPoint(pointer){var selectionChanged=false;if(this.options.selectable===true){var obj=this.getNodeAt(pointer)||this.getEdgeAt(pointer);if(obj!==undefined){selectionChanged=true;if(obj.isSelected()===true){this.deselectObject(obj);}else{this.selectObject(obj);}this.body.emitter.emit("_requestRedraw");}}return selectionChanged;}},{key:'_generateClickEvent',value:function _generateClickEvent(eventType,event,pointer,oldSelection){var emptySelection=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var properties=void 0;if(emptySelection===true){properties={nodes:[],edges:[]};}else{properties=this.getSelection();}properties['pointer']={DOM:{x:pointer.x,y:pointer.y},canvas:this.canvas.DOMtoCanvas(pointer)};properties['event']=event;if(oldSelection!==undefined){properties['previousSelection']=oldSelection;}this.body.emitter.emit(eventType,properties);}},{key:'selectObject',value:function selectObject(obj){var highlightEdges=arguments.length>1&&arguments[1]!==undefined?arguments[1]:this.options.selectConnectedEdges;if(obj!==undefined){if(obj instanceof _Node2.default){if(highlightEdges===true){this._selectConnectedEdges(obj);}}obj.select();this._addToSelection(obj);return true;}return false;}},{key:'deselectObject',value:function deselectObject(obj){if(obj.isSelected()===true){obj.selected=false;this._removeFromSelection(obj);}}/**
	       * retrieve all nodes overlapping with given object
	       * @param {Object} object  An object with parameters left, top, right, bottom
	       * @return {Number[]}   An array with id's of the overlapping nodes
	       * @private
	       */},{key:'_getAllNodesOverlappingWith',value:function _getAllNodesOverlappingWith(object){var overlappingNodes=[];var nodes=this.body.nodes;for(var i=0;i<this.body.nodeIndices.length;i++){var nodeId=this.body.nodeIndices[i];if(nodes[nodeId].isOverlappingWith(object)){overlappingNodes.push(nodeId);}}return overlappingNodes;}/**
	       * Return a position object in canvasspace from a single point in screenspace
	       *
	       * @param pointer
	       * @returns {{left: number, top: number, right: number, bottom: number}}
	       * @private
	       */},{key:'_pointerToPositionObject',value:function _pointerToPositionObject(pointer){var canvasPos=this.canvas.DOMtoCanvas(pointer);return{left:canvasPos.x-1,top:canvasPos.y+1,right:canvasPos.x+1,bottom:canvasPos.y-1};}/**
	       * Get the top node at the a specific point (like a click)
	       *
	       * @param {{x: Number, y: Number}} pointer
	       * @return {Node | undefined} node
	       */},{key:'getNodeAt',value:function getNodeAt(pointer){var returnNode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;// we first check if this is an navigation controls element
	var positionObject=this._pointerToPositionObject(pointer);var overlappingNodes=this._getAllNodesOverlappingWith(positionObject);// if there are overlapping nodes, select the last one, this is the
	// one which is drawn on top of the others
	if(overlappingNodes.length>0){if(returnNode===true){return this.body.nodes[overlappingNodes[overlappingNodes.length-1]];}else{return overlappingNodes[overlappingNodes.length-1];}}else{return undefined;}}/**
	       * retrieve all edges overlapping with given object, selector is around center
	       * @param {Object} object  An object with parameters left, top, right, bottom
	       * @return {Number[]}   An array with id's of the overlapping nodes
	       * @private
	       */},{key:'_getEdgesOverlappingWith',value:function _getEdgesOverlappingWith(object,overlappingEdges){var edges=this.body.edges;for(var i=0;i<this.body.edgeIndices.length;i++){var edgeId=this.body.edgeIndices[i];if(edges[edgeId].isOverlappingWith(object)){overlappingEdges.push(edgeId);}}}/**
	       * retrieve all nodes overlapping with given object
	       * @param {Object} object  An object with parameters left, top, right, bottom
	       * @return {Number[]}   An array with id's of the overlapping nodes
	       * @private
	       */},{key:'_getAllEdgesOverlappingWith',value:function _getAllEdgesOverlappingWith(object){var overlappingEdges=[];this._getEdgesOverlappingWith(object,overlappingEdges);return overlappingEdges;}/**
	       * Place holder. To implement change the getNodeAt to a _getObjectAt. Have the _getObjectAt call
	       * getNodeAt and _getEdgesAt, then priortize the selection to user preferences.
	       *
	       * @param pointer
	       * @returns {undefined}
	       */},{key:'getEdgeAt',value:function getEdgeAt(pointer){var returnEdge=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;// Iterate over edges, pick closest within 10
	var canvasPos=this.canvas.DOMtoCanvas(pointer);var mindist=10;var overlappingEdge=null;var edges=this.body.edges;for(var i=0;i<this.body.edgeIndices.length;i++){var edgeId=this.body.edgeIndices[i];var edge=edges[edgeId];if(edge.connected){var xFrom=edge.from.x;var yFrom=edge.from.y;var xTo=edge.to.x;var yTo=edge.to.y;var dist=edge.edgeType.getDistanceToEdge(xFrom,yFrom,xTo,yTo,canvasPos.x,canvasPos.y);if(dist<mindist){overlappingEdge=edgeId;mindist=dist;}}}if(overlappingEdge){if(returnEdge===true){return this.body.edges[overlappingEdge];}else{return overlappingEdge;}}else{return undefined;}}/**
	       * Add object to the selection array.
	       *
	       * @param obj
	       * @private
	       */},{key:'_addToSelection',value:function _addToSelection(obj){if(obj instanceof _Node2.default){this.selectionObj.nodes[obj.id]=obj;}else{this.selectionObj.edges[obj.id]=obj;}}/**
	       * Add object to the selection array.
	       *
	       * @param obj
	       * @private
	       */},{key:'_addToHover',value:function _addToHover(obj){if(obj instanceof _Node2.default){this.hoverObj.nodes[obj.id]=obj;}else{this.hoverObj.edges[obj.id]=obj;}}/**
	       * Remove a single option from selection.
	       *
	       * @param {Object} obj
	       * @private
	       */},{key:'_removeFromSelection',value:function _removeFromSelection(obj){if(obj instanceof _Node2.default){delete this.selectionObj.nodes[obj.id];this._unselectConnectedEdges(obj);}else{delete this.selectionObj.edges[obj.id];}}/**
	       * Unselect all. The selectionObj is useful for this.
	       */},{key:'unselectAll',value:function unselectAll(){for(var nodeId in this.selectionObj.nodes){if(this.selectionObj.nodes.hasOwnProperty(nodeId)){this.selectionObj.nodes[nodeId].unselect();}}for(var edgeId in this.selectionObj.edges){if(this.selectionObj.edges.hasOwnProperty(edgeId)){this.selectionObj.edges[edgeId].unselect();}}this.selectionObj={nodes:{},edges:{}};}/**
	       * return the number of selected nodes
	       *
	       * @returns {number}
	       * @private
	       */},{key:'_getSelectedNodeCount',value:function _getSelectedNodeCount(){var count=0;for(var nodeId in this.selectionObj.nodes){if(this.selectionObj.nodes.hasOwnProperty(nodeId)){count+=1;}}return count;}/**
	       * return the selected node
	       *
	       * @returns {number}
	       * @private
	       */},{key:'_getSelectedNode',value:function _getSelectedNode(){for(var nodeId in this.selectionObj.nodes){if(this.selectionObj.nodes.hasOwnProperty(nodeId)){return this.selectionObj.nodes[nodeId];}}return undefined;}/**
	       * return the selected edge
	       *
	       * @returns {number}
	       * @private
	       */},{key:'_getSelectedEdge',value:function _getSelectedEdge(){for(var edgeId in this.selectionObj.edges){if(this.selectionObj.edges.hasOwnProperty(edgeId)){return this.selectionObj.edges[edgeId];}}return undefined;}/**
	       * return the number of selected edges
	       *
	       * @returns {number}
	       * @private
	       */},{key:'_getSelectedEdgeCount',value:function _getSelectedEdgeCount(){var count=0;for(var edgeId in this.selectionObj.edges){if(this.selectionObj.edges.hasOwnProperty(edgeId)){count+=1;}}return count;}/**
	       * return the number of selected objects.
	       *
	       * @returns {number}
	       * @private
	       */},{key:'_getSelectedObjectCount',value:function _getSelectedObjectCount(){var count=0;for(var nodeId in this.selectionObj.nodes){if(this.selectionObj.nodes.hasOwnProperty(nodeId)){count+=1;}}for(var edgeId in this.selectionObj.edges){if(this.selectionObj.edges.hasOwnProperty(edgeId)){count+=1;}}return count;}/**
	       * Check if anything is selected
	       *
	       * @returns {boolean}
	       * @private
	       */},{key:'_selectionIsEmpty',value:function _selectionIsEmpty(){for(var nodeId in this.selectionObj.nodes){if(this.selectionObj.nodes.hasOwnProperty(nodeId)){return false;}}for(var edgeId in this.selectionObj.edges){if(this.selectionObj.edges.hasOwnProperty(edgeId)){return false;}}return true;}/**
	       * check if one of the selected nodes is a cluster.
	       *
	       * @returns {boolean}
	       * @private
	       */},{key:'_clusterInSelection',value:function _clusterInSelection(){for(var nodeId in this.selectionObj.nodes){if(this.selectionObj.nodes.hasOwnProperty(nodeId)){if(this.selectionObj.nodes[nodeId].clusterSize>1){return true;}}}return false;}/**
	       * select the edges connected to the node that is being selected
	       *
	       * @param {Node} node
	       * @private
	       */},{key:'_selectConnectedEdges',value:function _selectConnectedEdges(node){for(var i=0;i<node.edges.length;i++){var edge=node.edges[i];edge.select();this._addToSelection(edge);}}/**
	       * select the edges connected to the node that is being selected
	       *
	       * @param {Node} node
	       * @private
	       */},{key:'_hoverConnectedEdges',value:function _hoverConnectedEdges(node){for(var i=0;i<node.edges.length;i++){var edge=node.edges[i];edge.hover=true;this._addToHover(edge);}}/**
	       * unselect the edges connected to the node that is being selected
	       *
	       * @param {Node} node
	       * @private
	       */},{key:'_unselectConnectedEdges',value:function _unselectConnectedEdges(node){for(var i=0;i<node.edges.length;i++){var edge=node.edges[i];edge.unselect();this._removeFromSelection(edge);}}/**
	       * This is called when someone clicks on a node. either select or deselect it.
	       * If there is an existing selection and we don't want to append to it, clear the existing selection
	       *
	       * @param {Node || Edge} object
	       * @private
	       */},{key:'blurObject',value:function blurObject(object){if(object.hover===true){object.hover=false;if(object instanceof _Node2.default){this.body.emitter.emit("blurNode",{node:object.id});}else{this.body.emitter.emit("blurEdge",{edge:object.id});}}}/**
	       * This is called when someone clicks on a node. either select or deselect it.
	       * If there is an existing selection and we don't want to append to it, clear the existing selection
	       *
	       * @param {Node || Edge} object
	       * @private
	       */},{key:'hoverObject',value:function hoverObject(object){var hoverChanged=false;// remove all node hover highlights
	for(var nodeId in this.hoverObj.nodes){if(this.hoverObj.nodes.hasOwnProperty(nodeId)){if(object===undefined||object instanceof _Node2.default&&object.id!=nodeId||object instanceof _Edge2.default){this.blurObject(this.hoverObj.nodes[nodeId]);delete this.hoverObj.nodes[nodeId];hoverChanged=true;}}}// removing all edge hover highlights
	for(var edgeId in this.hoverObj.edges){if(this.hoverObj.edges.hasOwnProperty(edgeId)){// if the hover has been changed here it means that the node has been hovered over or off
	// we then do not use the blurObject method here.
	if(hoverChanged===true){this.hoverObj.edges[edgeId].hover=false;delete this.hoverObj.edges[edgeId];}// if the blur remains the same and the object is undefined (mouse off) or another
	// edge has been hovered, we blur the edge
	else if(object===undefined||object instanceof _Edge2.default){this.blurObject(this.hoverObj.edges[edgeId]);delete this.hoverObj.edges[edgeId];hoverChanged=true;}}}if(object!==undefined){if(object.hover===false){object.hover=true;this._addToHover(object);hoverChanged=true;if(object instanceof _Node2.default){this.body.emitter.emit("hoverNode",{node:object.id});}else{this.body.emitter.emit("hoverEdge",{edge:object.id});}}if(object instanceof _Node2.default&&this.options.hoverConnectedEdges===true){this._hoverConnectedEdges(object);}}if(hoverChanged===true){this.body.emitter.emit('_requestRedraw');}}/**
	       *
	       * retrieve the currently selected objects
	       * @return {{nodes: Array.<String>, edges: Array.<String>}} selection
	       */},{key:'getSelection',value:function getSelection(){var nodeIds=this.getSelectedNodes();var edgeIds=this.getSelectedEdges();return{nodes:nodeIds,edges:edgeIds};}/**
	       *
	       * retrieve the currently selected nodes
	       * @return {String[]} selection    An array with the ids of the
	       *                                            selected nodes.
	       */},{key:'getSelectedNodes',value:function getSelectedNodes(){var idArray=[];if(this.options.selectable===true){for(var nodeId in this.selectionObj.nodes){if(this.selectionObj.nodes.hasOwnProperty(nodeId)){idArray.push(this.selectionObj.nodes[nodeId].id);}}}return idArray;}/**
	       *
	       * retrieve the currently selected edges
	       * @return {Array} selection    An array with the ids of the
	       *                                            selected nodes.
	       */},{key:'getSelectedEdges',value:function getSelectedEdges(){var idArray=[];if(this.options.selectable===true){for(var edgeId in this.selectionObj.edges){if(this.selectionObj.edges.hasOwnProperty(edgeId)){idArray.push(this.selectionObj.edges[edgeId].id);}}}return idArray;}/**
	       * Updates the current selection
	       * @param {{nodes: Array.<String>, edges: Array.<String>}} Selection
	       * @param {Object} options                                 Options
	       */},{key:'setSelection',value:function setSelection(selection){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var i=void 0,id=void 0;if(!selection||!selection.nodes&&!selection.edges)throw'Selection must be an object with nodes and/or edges properties';// first unselect any selected node, if option is true or undefined
	if(options.unselectAll||options.unselectAll===undefined){this.unselectAll();}if(selection.nodes){for(i=0;i<selection.nodes.length;i++){id=selection.nodes[i];var node=this.body.nodes[id];if(!node){throw new RangeError('Node with id "'+id+'" not found');}// don't select edges with it
	this.selectObject(node,options.highlightEdges);}}if(selection.edges){for(i=0;i<selection.edges.length;i++){id=selection.edges[i];var edge=this.body.edges[id];if(!edge){throw new RangeError('Edge with id "'+id+'" not found');}this.selectObject(edge);}}this.body.emitter.emit('_requestRedraw');}/**
	       * select zero or more nodes with the option to highlight edges
	       * @param {Number[] | String[]} selection     An array with the ids of the
	       *                                            selected nodes.
	       * @param {boolean} [highlightEdges]
	       */},{key:'selectNodes',value:function selectNodes(selection){var highlightEdges=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(!selection||selection.length===undefined)throw'Selection must be an array with ids';this.setSelection({nodes:selection},{highlightEdges:highlightEdges});}/**
	       * select zero or more edges
	       * @param {Number[] | String[]} selection     An array with the ids of the
	       *                                            selected nodes.
	       */},{key:'selectEdges',value:function selectEdges(selection){if(!selection||selection.length===undefined)throw'Selection must be an array with ids';this.setSelection({edges:selection});}/**
	       * Validate the selection: remove ids of nodes which no longer exist
	       * @private
	       */},{key:'updateSelection',value:function updateSelection(){for(var nodeId in this.selectionObj.nodes){if(this.selectionObj.nodes.hasOwnProperty(nodeId)){if(!this.body.nodes.hasOwnProperty(nodeId)){delete this.selectionObj.nodes[nodeId];}}}for(var edgeId in this.selectionObj.edges){if(this.selectionObj.edges.hasOwnProperty(edgeId)){if(!this.body.edges.hasOwnProperty(edgeId)){delete this.selectionObj.edges[edgeId];}}}}}]);return SelectionHandler;}();exports.default=SelectionHandler;/***/},/* 114 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _typeof=typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"?function(obj){return typeof obj==='undefined'?'undefined':_typeof2(obj);}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj==='undefined'?'undefined':_typeof2(obj);};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _NetworkUtil=__webpack_require__(105);var _NetworkUtil2=_interopRequireDefault(_NetworkUtil);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var LayoutEngine=function(){function LayoutEngine(body){_classCallCheck(this,LayoutEngine);this.body=body;this.initialRandomSeed=Math.round(Math.random()*1000000);this.randomSeed=this.initialRandomSeed;this.setPhysics=false;this.options={};this.optionsBackup={physics:{}};this.defaultOptions={randomSeed:undefined,improvedLayout:true,hierarchical:{enabled:false,levelSeparation:150,nodeSpacing:100,treeSpacing:200,blockShifting:true,edgeMinimization:true,parentCentralization:true,direction:'UD',// UD, DU, LR, RL
	sortMethod:'hubsize'// hubsize, directed
	}};util.extend(this.options,this.defaultOptions);this.bindEventListeners();}_createClass(LayoutEngine,[{key:'bindEventListeners',value:function bindEventListeners(){var _this=this;this.body.emitter.on('_dataChanged',function(){_this.setupHierarchicalLayout();});this.body.emitter.on('_dataLoaded',function(){_this.layoutNetwork();});this.body.emitter.on('_resetHierarchicalLayout',function(){_this.setupHierarchicalLayout();});}},{key:'setOptions',value:function setOptions(options,allOptions){if(options!==undefined){var prevHierarchicalState=this.options.hierarchical.enabled;util.selectiveDeepExtend(["randomSeed","improvedLayout"],this.options,options);util.mergeOptions(this.options,options,'hierarchical');if(options.randomSeed!==undefined){this.initialRandomSeed=options.randomSeed;}if(this.options.hierarchical.enabled===true){if(prevHierarchicalState===true){// refresh the overridden options for nodes and edges.
	this.body.emitter.emit('refresh',true);}// make sure the level separation is the right way up
	if(this.options.hierarchical.direction==='RL'||this.options.hierarchical.direction==='DU'){if(this.options.hierarchical.levelSeparation>0){this.options.hierarchical.levelSeparation*=-1;}}else{if(this.options.hierarchical.levelSeparation<0){this.options.hierarchical.levelSeparation*=-1;}}this.body.emitter.emit('_resetHierarchicalLayout');// because the hierarchical system needs it's own physics and smooth curve settings, we adapt the other options if needed.
	return this.adaptAllOptionsForHierarchicalLayout(allOptions);}else{if(prevHierarchicalState===true){// refresh the overridden options for nodes and edges.
	this.body.emitter.emit('refresh');return util.deepExtend(allOptions,this.optionsBackup);}}}return allOptions;}},{key:'adaptAllOptionsForHierarchicalLayout',value:function adaptAllOptionsForHierarchicalLayout(allOptions){if(this.options.hierarchical.enabled===true){// set the physics
	if(allOptions.physics===undefined||allOptions.physics===true){allOptions.physics={enabled:this.optionsBackup.physics.enabled===undefined?true:this.optionsBackup.physics.enabled,solver:'hierarchicalRepulsion'};this.optionsBackup.physics.enabled=this.optionsBackup.physics.enabled===undefined?true:this.optionsBackup.physics.enabled;this.optionsBackup.physics.solver=this.optionsBackup.physics.solver||'barnesHut';}else if(_typeof(allOptions.physics)==='object'){this.optionsBackup.physics.enabled=allOptions.physics.enabled===undefined?true:allOptions.physics.enabled;this.optionsBackup.physics.solver=allOptions.physics.solver||'barnesHut';allOptions.physics.solver='hierarchicalRepulsion';}else if(allOptions.physics!==false){this.optionsBackup.physics.solver='barnesHut';allOptions.physics={solver:'hierarchicalRepulsion'};}// get the type of static smooth curve in case it is required
	var type='horizontal';if(this.options.hierarchical.direction==='RL'||this.options.hierarchical.direction==='LR'){type='vertical';}// disable smooth curves if nothing is defined. If smooth curves have been turned on, turn them into static smooth curves.
	if(allOptions.edges===undefined){this.optionsBackup.edges={smooth:{enabled:true,type:'dynamic'}};allOptions.edges={smooth:false};}else if(allOptions.edges.smooth===undefined){this.optionsBackup.edges={smooth:{enabled:true,type:'dynamic'}};allOptions.edges.smooth=false;}else{if(typeof allOptions.edges.smooth==='boolean'){this.optionsBackup.edges={smooth:allOptions.edges.smooth};allOptions.edges.smooth={enabled:allOptions.edges.smooth,type:type};}else{// allow custom types except for dynamic
	if(allOptions.edges.smooth.type!==undefined&&allOptions.edges.smooth.type!=='dynamic'){type=allOptions.edges.smooth.type;}this.optionsBackup.edges={smooth:allOptions.edges.smooth.enabled===undefined?true:allOptions.edges.smooth.enabled,type:allOptions.edges.smooth.type===undefined?'dynamic':allOptions.edges.smooth.type,roundness:allOptions.edges.smooth.roundness===undefined?0.5:allOptions.edges.smooth.roundness,forceDirection:allOptions.edges.smooth.forceDirection===undefined?false:allOptions.edges.smooth.forceDirection};allOptions.edges.smooth={enabled:allOptions.edges.smooth.enabled===undefined?true:allOptions.edges.smooth.enabled,type:type,roundness:allOptions.edges.smooth.roundness===undefined?0.5:allOptions.edges.smooth.roundness,forceDirection:allOptions.edges.smooth.forceDirection===undefined?false:allOptions.edges.smooth.forceDirection};}}// force all edges into static smooth curves. Only applies to edges that do not use the global options for smooth.
	this.body.emitter.emit('_forceDisableDynamicCurves',type);}return allOptions;}},{key:'seededRandom',value:function seededRandom(){var x=Math.sin(this.randomSeed++)*10000;return x-Math.floor(x);}},{key:'positionInitially',value:function positionInitially(nodesArray){if(this.options.hierarchical.enabled!==true){this.randomSeed=this.initialRandomSeed;for(var i=0;i<nodesArray.length;i++){var node=nodesArray[i];var radius=10*0.1*nodesArray.length+10;var angle=2*Math.PI*this.seededRandom();if(node.x===undefined){node.x=radius*Math.cos(angle);}if(node.y===undefined){node.y=radius*Math.sin(angle);}}}}/**
	       * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we
	       * cluster them first to reduce the amount.
	       */},{key:'layoutNetwork',value:function layoutNetwork(){if(this.options.hierarchical.enabled!==true&&this.options.improvedLayout===true){// first check if we should Kamada Kawai to layout. The threshold is if less than half of the visible
	// nodes have predefined positions we use this.
	var positionDefined=0;for(var i=0;i<this.body.nodeIndices.length;i++){var node=this.body.nodes[this.body.nodeIndices[i]];if(node.predefinedPosition===true){positionDefined+=1;}}// if less than half of the nodes have a predefined position we continue
	if(positionDefined<0.5*this.body.nodeIndices.length){var MAX_LEVELS=10;var level=0;var clusterThreshold=100;// if there are a lot of nodes, we cluster before we run the algorithm.
	if(this.body.nodeIndices.length>clusterThreshold){var startLength=this.body.nodeIndices.length;while(this.body.nodeIndices.length>clusterThreshold){//console.time("clustering")
	level+=1;var before=this.body.nodeIndices.length;// if there are many nodes we do a hubsize cluster
	if(level%3===0){this.body.modules.clustering.clusterBridges();}else{this.body.modules.clustering.clusterOutliers();}var after=this.body.nodeIndices.length;if(before==after&&level%3!==0||level>MAX_LEVELS){this._declusterAll();this.body.emitter.emit("_layoutFailed");console.info("This network could not be positioned by this version of the improved layout algorithm. Please disable improvedLayout for better performance.");return;}//console.timeEnd("clustering")
	//console.log(level,after)
	}// increase the size of the edges
	this.body.modules.kamadaKawai.setOptions({springLength:Math.max(150,2*startLength)});}// position the system for these nodes and edges
	this.body.modules.kamadaKawai.solve(this.body.nodeIndices,this.body.edgeIndices,true);// shift to center point
	this._shiftToCenter();// perturb the nodes a little bit to force the physics to kick in
	var offset=70;for(var _i=0;_i<this.body.nodeIndices.length;_i++){// Only perturb the nodes that aren't fixed
	if(this.body.nodes[this.body.nodeIndices[_i]].predefinedPosition===false){this.body.nodes[this.body.nodeIndices[_i]].x+=(0.5-this.seededRandom())*offset;this.body.nodes[this.body.nodeIndices[_i]].y+=(0.5-this.seededRandom())*offset;}}// uncluster all clusters
	this._declusterAll();// reposition all bezier nodes.
	this.body.emitter.emit("_repositionBezierNodes");}}}/**
	       * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view
	       * @private
	       */},{key:'_shiftToCenter',value:function _shiftToCenter(){var range=_NetworkUtil2.default.getRangeCore(this.body.nodes,this.body.nodeIndices);var center=_NetworkUtil2.default.findCenter(range);for(var i=0;i<this.body.nodeIndices.length;i++){this.body.nodes[this.body.nodeIndices[i]].x-=center.x;this.body.nodes[this.body.nodeIndices[i]].y-=center.y;}}},{key:'_declusterAll',value:function _declusterAll(){var clustersPresent=true;while(clustersPresent===true){clustersPresent=false;for(var i=0;i<this.body.nodeIndices.length;i++){if(this.body.nodes[this.body.nodeIndices[i]].isCluster===true){clustersPresent=true;this.body.modules.clustering.openCluster(this.body.nodeIndices[i],{},false);}}if(clustersPresent===true){this.body.emitter.emit('_dataChanged');}}}},{key:'getSeed',value:function getSeed(){return this.initialRandomSeed;}/**
	       * This is the main function to layout the nodes in a hierarchical way.
	       * It checks if the node details are supplied correctly
	       *
	       * @private
	       */},{key:'setupHierarchicalLayout',value:function setupHierarchicalLayout(){if(this.options.hierarchical.enabled===true&&this.body.nodeIndices.length>0){// get the size of the largest hubs and check if the user has defined a level for a node.
	var node=void 0,nodeId=void 0;var definedLevel=false;var definedPositions=true;var undefinedLevel=false;this.hierarchicalLevels={};this.lastNodeOnLevel={};this.hierarchicalChildrenReference={};this.hierarchicalParentReference={};this.hierarchicalTrees={};this.treeIndex=-1;this.distributionOrdering={};this.distributionIndex={};this.distributionOrderingPresence={};for(nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(nodeId)){node=this.body.nodes[nodeId];if(node.options.x===undefined&&node.options.y===undefined){definedPositions=false;}if(node.options.level!==undefined){definedLevel=true;this.hierarchicalLevels[nodeId]=node.options.level;}else{undefinedLevel=true;}}}// if the user defined some levels but not all, alert and run without hierarchical layout
	if(undefinedLevel===true&&definedLevel===true){throw new Error('To use the hierarchical layout, nodes require either no predefined levels or levels have to be defined for all nodes.');return;}else{// define levels if undefined by the users. Based on hubsize.
	if(undefinedLevel===true){if(this.options.hierarchical.sortMethod==='hubsize'){this._determineLevelsByHubsize();}else if(this.options.hierarchical.sortMethod==='directed'){this._determineLevelsDirected();}else if(this.options.hierarchical.sortMethod==='custom'){this._determineLevelsCustomCallback();}}// fallback for cases where there are nodes but no edges
	for(var _nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(_nodeId)){if(this.hierarchicalLevels[_nodeId]===undefined){this.hierarchicalLevels[_nodeId]=0;}}}// check the distribution of the nodes per level.
	var distribution=this._getDistribution();// get the parent children relations.
	this._generateMap();// place the nodes on the canvas.
	this._placeNodesByHierarchy(distribution);// condense the whitespace.
	this._condenseHierarchy();// shift to center so gravity does not have to do much
	this._shiftToCenter();}}}/**
	       * @private
	       */},{key:'_condenseHierarchy',value:function _condenseHierarchy(){var _this2=this;// Global var in this scope to define when the movement has stopped.
	var stillShifting=false;var branches={};// first we have some methods to help shifting trees around.
	// the main method to shift the trees
	var shiftTrees=function shiftTrees(){var treeSizes=getTreeSizes();for(var i=0;i<treeSizes.length-1;i++){var diff=treeSizes[i].max-treeSizes[i+1].min;shiftTree(i+1,diff+_this2.options.hierarchical.treeSpacing);}};// shift a single tree by an offset
	var shiftTree=function shiftTree(index,offset){for(var nodeId in _this2.hierarchicalTrees){if(_this2.hierarchicalTrees.hasOwnProperty(nodeId)){if(_this2.hierarchicalTrees[nodeId]===index){var node=_this2.body.nodes[nodeId];var pos=_this2._getPositionForHierarchy(node);_this2._setPositionForHierarchy(node,pos+offset,undefined,true);}}}};// get the width of a tree
	var getTreeSize=function getTreeSize(index){var min=1e9;var max=-1e9;for(var nodeId in _this2.hierarchicalTrees){if(_this2.hierarchicalTrees.hasOwnProperty(nodeId)){if(_this2.hierarchicalTrees[nodeId]===index){var pos=_this2._getPositionForHierarchy(_this2.body.nodes[nodeId]);min=Math.min(pos,min);max=Math.max(pos,max);}}}return{min:min,max:max};};// get the width of all trees
	var getTreeSizes=function getTreeSizes(){var treeWidths=[];for(var i=0;i<=_this2.treeIndex;i++){treeWidths.push(getTreeSize(i));}return treeWidths;};// get a map of all nodes in this branch
	var getBranchNodes=function getBranchNodes(source,map){map[source.id]=true;if(_this2.hierarchicalChildrenReference[source.id]){var children=_this2.hierarchicalChildrenReference[source.id];if(children.length>0){for(var i=0;i<children.length;i++){getBranchNodes(_this2.body.nodes[children[i]],map);}}}};// get a min max width as well as the maximum movement space it has on either sides
	// we use min max terminology because width and height can interchange depending on the direction of the layout
	var getBranchBoundary=function getBranchBoundary(branchMap){var maxLevel=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1e9;var minSpace=1e9;var maxSpace=1e9;var min=1e9;var max=-1e9;for(var branchNode in branchMap){if(branchMap.hasOwnProperty(branchNode)){var node=_this2.body.nodes[branchNode];var level=_this2.hierarchicalLevels[node.id];var position=_this2._getPositionForHierarchy(node);// get the space around the node.
	var _getSpaceAroundNode2=_this2._getSpaceAroundNode(node,branchMap),_getSpaceAroundNode3=_slicedToArray(_getSpaceAroundNode2,2),minSpaceNode=_getSpaceAroundNode3[0],maxSpaceNode=_getSpaceAroundNode3[1];minSpace=Math.min(minSpaceNode,minSpace);maxSpace=Math.min(maxSpaceNode,maxSpace);// the width is only relevant for the levels two nodes have in common. This is why we filter on this.
	if(level<=maxLevel){min=Math.min(position,min);max=Math.max(position,max);}}}return[min,max,minSpace,maxSpace];};// get the maximum level of a branch.
	var getMaxLevel=function getMaxLevel(nodeId){var level=_this2.hierarchicalLevels[nodeId];if(_this2.hierarchicalChildrenReference[nodeId]){var children=_this2.hierarchicalChildrenReference[nodeId];if(children.length>0){for(var i=0;i<children.length;i++){level=Math.max(level,getMaxLevel(children[i]));}}}return level;};// check what the maximum level is these nodes have in common.
	var getCollisionLevel=function getCollisionLevel(node1,node2){var maxLevel1=getMaxLevel(node1.id);var maxLevel2=getMaxLevel(node2.id);return Math.min(maxLevel1,maxLevel2);};// check if two nodes have the same parent(s)
	var hasSameParent=function hasSameParent(node1,node2){var parents1=_this2.hierarchicalParentReference[node1.id];var parents2=_this2.hierarchicalParentReference[node2.id];if(parents1===undefined||parents2===undefined){return false;}for(var i=0;i<parents1.length;i++){for(var j=0;j<parents2.length;j++){if(parents1[i]==parents2[j]){return true;}}}return false;};// condense elements. These can be nodes or branches depending on the callback.
	var shiftElementsCloser=function shiftElementsCloser(callback,levels,centerParents){for(var i=0;i<levels.length;i++){var level=levels[i];var levelNodes=_this2.distributionOrdering[level];if(levelNodes.length>1){for(var j=0;j<levelNodes.length-1;j++){if(hasSameParent(levelNodes[j],levelNodes[j+1])===true){if(_this2.hierarchicalTrees[levelNodes[j].id]===_this2.hierarchicalTrees[levelNodes[j+1].id]){callback(levelNodes[j],levelNodes[j+1],centerParents);}}}}}};// callback for shifting branches
	var branchShiftCallback=function branchShiftCallback(node1,node2){var centerParent=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;//window.CALLBACKS.push(() => {
	var pos1=_this2._getPositionForHierarchy(node1);var pos2=_this2._getPositionForHierarchy(node2);var diffAbs=Math.abs(pos2-pos1);//console.log("NOW CHEcKING:", node1.id, node2.id, diffAbs);
	if(diffAbs>_this2.options.hierarchical.nodeSpacing){var branchNodes1={};branchNodes1[node1.id]=true;var branchNodes2={};branchNodes2[node2.id]=true;getBranchNodes(node1,branchNodes1);getBranchNodes(node2,branchNodes2);// check the largest distance between the branches
	var maxLevel=getCollisionLevel(node1,node2);var _getBranchBoundary=getBranchBoundary(branchNodes1,maxLevel),_getBranchBoundary2=_slicedToArray(_getBranchBoundary,4),min1=_getBranchBoundary2[0],max1=_getBranchBoundary2[1],minSpace1=_getBranchBoundary2[2],maxSpace1=_getBranchBoundary2[3];var _getBranchBoundary3=getBranchBoundary(branchNodes2,maxLevel),_getBranchBoundary4=_slicedToArray(_getBranchBoundary3,4),min2=_getBranchBoundary4[0],max2=_getBranchBoundary4[1],minSpace2=_getBranchBoundary4[2],maxSpace2=_getBranchBoundary4[3];//console.log(node1.id, getBranchBoundary(branchNodes1, maxLevel), node2.id, getBranchBoundary(branchNodes2, maxLevel), maxLevel);
	var diffBranch=Math.abs(max1-min2);if(diffBranch>_this2.options.hierarchical.nodeSpacing){var offset=max1-min2+_this2.options.hierarchical.nodeSpacing;if(offset<-minSpace2+_this2.options.hierarchical.nodeSpacing){offset=-minSpace2+_this2.options.hierarchical.nodeSpacing;//console.log("RESETTING OFFSET", max1 - min2 + this.options.hierarchical.nodeSpacing, -minSpace2, offset);
	}if(offset<0){//console.log("SHIFTING", node2.id, offset);
	_this2._shiftBlock(node2.id,offset);stillShifting=true;if(centerParent===true)_this2._centerParent(node2);}}}//this.body.emitter.emit("_redraw");})
	};var minimizeEdgeLength=function minimizeEdgeLength(iterations,node){//window.CALLBACKS.push(() => {
	//  console.log("ts",node.id);
	var nodeId=node.id;var allEdges=node.edges;var nodeLevel=_this2.hierarchicalLevels[node.id];// gather constants
	var C2=_this2.options.hierarchical.levelSeparation*_this2.options.hierarchical.levelSeparation;var referenceNodes={};var aboveEdges=[];for(var i=0;i<allEdges.length;i++){var edge=allEdges[i];if(edge.toId!=edge.fromId){var otherNode=edge.toId==nodeId?edge.from:edge.to;referenceNodes[allEdges[i].id]=otherNode;if(_this2.hierarchicalLevels[otherNode.id]<nodeLevel){aboveEdges.push(edge);}}}// differentiated sum of lengths based on only moving one node over one axis
	var getFx=function getFx(point,edges){var sum=0;for(var _i2=0;_i2<edges.length;_i2++){if(referenceNodes[edges[_i2].id]!==undefined){var a=_this2._getPositionForHierarchy(referenceNodes[edges[_i2].id])-point;sum+=a/Math.sqrt(a*a+C2);}}return sum;};// doubly differentiated sum of lengths based on only moving one node over one axis
	var getDFx=function getDFx(point,edges){var sum=0;for(var _i3=0;_i3<edges.length;_i3++){if(referenceNodes[edges[_i3].id]!==undefined){var a=_this2._getPositionForHierarchy(referenceNodes[edges[_i3].id])-point;sum-=C2*Math.pow(a*a+C2,-1.5);}}return sum;};var getGuess=function getGuess(iterations,edges){var guess=_this2._getPositionForHierarchy(node);// Newton's method for optimization
	var guessMap={};for(var _i4=0;_i4<iterations;_i4++){var fx=getFx(guess,edges);var dfx=getDFx(guess,edges);// we limit the movement to avoid instability.
	var limit=40;var ratio=Math.max(-limit,Math.min(limit,Math.round(fx/dfx)));guess=guess-ratio;// reduce duplicates
	if(guessMap[guess]!==undefined){break;}guessMap[guess]=_i4;}return guess;};var moveBranch=function moveBranch(guess){// position node if there is space
	var nodePosition=_this2._getPositionForHierarchy(node);// check movable area of the branch
	if(branches[node.id]===undefined){var branchNodes={};branchNodes[node.id]=true;getBranchNodes(node,branchNodes);branches[node.id]=branchNodes;}var _getBranchBoundary5=getBranchBoundary(branches[node.id]),_getBranchBoundary6=_slicedToArray(_getBranchBoundary5,4),minBranch=_getBranchBoundary6[0],maxBranch=_getBranchBoundary6[1],minSpaceBranch=_getBranchBoundary6[2],maxSpaceBranch=_getBranchBoundary6[3];var diff=guess-nodePosition;// check if we are allowed to move the node:
	var branchOffset=0;if(diff>0){branchOffset=Math.min(diff,maxSpaceBranch-_this2.options.hierarchical.nodeSpacing);}else if(diff<0){branchOffset=-Math.min(-diff,minSpaceBranch-_this2.options.hierarchical.nodeSpacing);}if(branchOffset!=0){//console.log("moving branch:",branchOffset, maxSpaceBranch, minSpaceBranch)
	_this2._shiftBlock(node.id,branchOffset);//this.body.emitter.emit("_redraw");
	stillShifting=true;}};var moveNode=function moveNode(guess){var nodePosition=_this2._getPositionForHierarchy(node);// position node if there is space
	var _getSpaceAroundNode4=_this2._getSpaceAroundNode(node),_getSpaceAroundNode5=_slicedToArray(_getSpaceAroundNode4,2),minSpace=_getSpaceAroundNode5[0],maxSpace=_getSpaceAroundNode5[1];var diff=guess-nodePosition;// check if we are allowed to move the node:
	var newPosition=nodePosition;if(diff>0){newPosition=Math.min(nodePosition+(maxSpace-_this2.options.hierarchical.nodeSpacing),guess);}else if(diff<0){newPosition=Math.max(nodePosition-(minSpace-_this2.options.hierarchical.nodeSpacing),guess);}if(newPosition!==nodePosition){//console.log("moving Node:",diff, minSpace, maxSpace);
	_this2._setPositionForHierarchy(node,newPosition,undefined,true);//this.body.emitter.emit("_redraw");
	stillShifting=true;}};var guess=getGuess(iterations,aboveEdges);moveBranch(guess);guess=getGuess(iterations,allEdges);moveNode(guess);//})
	};// method to remove whitespace between branches. Because we do bottom up, we can center the parents.
	var minimizeEdgeLengthBottomUp=function minimizeEdgeLengthBottomUp(iterations){var levels=Object.keys(_this2.distributionOrdering);levels=levels.reverse();for(var i=0;i<iterations;i++){stillShifting=false;for(var j=0;j<levels.length;j++){var level=levels[j];var levelNodes=_this2.distributionOrdering[level];for(var k=0;k<levelNodes.length;k++){minimizeEdgeLength(1000,levelNodes[k]);}}if(stillShifting!==true){//console.log("FINISHED minimizeEdgeLengthBottomUp IN " + i);
	break;}}};// method to remove whitespace between branches. Because we do bottom up, we can center the parents.
	var shiftBranchesCloserBottomUp=function shiftBranchesCloserBottomUp(iterations){var levels=Object.keys(_this2.distributionOrdering);levels=levels.reverse();for(var i=0;i<iterations;i++){stillShifting=false;shiftElementsCloser(branchShiftCallback,levels,true);if(stillShifting!==true){//console.log("FINISHED shiftBranchesCloserBottomUp IN " + (i+1));
	break;}}};// center all parents
	var centerAllParents=function centerAllParents(){for(var nodeId in _this2.body.nodes){if(_this2.body.nodes.hasOwnProperty(nodeId))_this2._centerParent(_this2.body.nodes[nodeId]);}};// center all parents
	var centerAllParentsBottomUp=function centerAllParentsBottomUp(){var levels=Object.keys(_this2.distributionOrdering);levels=levels.reverse();for(var i=0;i<levels.length;i++){var level=levels[i];var levelNodes=_this2.distributionOrdering[level];for(var j=0;j<levelNodes.length;j++){_this2._centerParent(levelNodes[j]);}}};// the actual work is done here.
	if(this.options.hierarchical.blockShifting===true){shiftBranchesCloserBottomUp(5);centerAllParents();}// minimize edge length
	if(this.options.hierarchical.edgeMinimization===true){minimizeEdgeLengthBottomUp(20);}if(this.options.hierarchical.parentCentralization===true){centerAllParentsBottomUp();}shiftTrees();}/**
	       * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.
	       * This is used to only get the distances to nodes outside of a branch.
	       * @param node
	       * @param map
	       * @returns {*[]}
	       * @private
	       */},{key:'_getSpaceAroundNode',value:function _getSpaceAroundNode(node,map){var useMap=true;if(map===undefined){useMap=false;}var level=this.hierarchicalLevels[node.id];if(level!==undefined){var index=this.distributionIndex[node.id];var position=this._getPositionForHierarchy(node);var minSpace=1e9;var maxSpace=1e9;if(index!==0){var prevNode=this.distributionOrdering[level][index-1];if(useMap===true&&map[prevNode.id]===undefined||useMap===false){var prevPos=this._getPositionForHierarchy(prevNode);minSpace=position-prevPos;}}if(index!=this.distributionOrdering[level].length-1){var nextNode=this.distributionOrdering[level][index+1];if(useMap===true&&map[nextNode.id]===undefined||useMap===false){var nextPos=this._getPositionForHierarchy(nextNode);maxSpace=Math.min(maxSpace,nextPos-position);}}return[minSpace,maxSpace];}else{return[0,0];}}/**
	       * We use this method to center a parent node and check if it does not cross other nodes when it does.
	       * @param node
	       * @private
	       */},{key:'_centerParent',value:function _centerParent(node){if(this.hierarchicalParentReference[node.id]){var parents=this.hierarchicalParentReference[node.id];for(var i=0;i<parents.length;i++){var parentId=parents[i];var parentNode=this.body.nodes[parentId];if(this.hierarchicalChildrenReference[parentId]){// get the range of the children
	var minPos=1e9;var maxPos=-1e9;var children=this.hierarchicalChildrenReference[parentId];if(children.length>0){for(var _i5=0;_i5<children.length;_i5++){var childNode=this.body.nodes[children[_i5]];minPos=Math.min(minPos,this._getPositionForHierarchy(childNode));maxPos=Math.max(maxPos,this._getPositionForHierarchy(childNode));}}var position=this._getPositionForHierarchy(parentNode);var _getSpaceAroundNode6=this._getSpaceAroundNode(parentNode),_getSpaceAroundNode7=_slicedToArray(_getSpaceAroundNode6,2),minSpace=_getSpaceAroundNode7[0],maxSpace=_getSpaceAroundNode7[1];var newPosition=0.5*(minPos+maxPos);var diff=position-newPosition;if(diff<0&&Math.abs(diff)<maxSpace-this.options.hierarchical.nodeSpacing||diff>0&&Math.abs(diff)<minSpace-this.options.hierarchical.nodeSpacing){this._setPositionForHierarchy(parentNode,newPosition,undefined,true);}}}}}/**
	       * This function places the nodes on the canvas based on the hierarchial distribution.
	       *
	       * @param {Object} distribution | obtained by the function this._getDistribution()
	       * @private
	       */},{key:'_placeNodesByHierarchy',value:function _placeNodesByHierarchy(distribution){this.positionedNodes={};// start placing all the level 0 nodes first. Then recursively position their branches.
	for(var level in distribution){if(distribution.hasOwnProperty(level)){// sort nodes in level by position:
	var nodeArray=Object.keys(distribution[level]);nodeArray=this._indexArrayToNodes(nodeArray);this._sortNodeArray(nodeArray);var handledNodeCount=0;for(var i=0;i<nodeArray.length;i++){var node=nodeArray[i];if(this.positionedNodes[node.id]===undefined){var pos=this.options.hierarchical.nodeSpacing*handledNodeCount;// we get the X or Y values we need and store them in pos and previousPos. The get and set make sure we get X or Y
	if(handledNodeCount>0){pos=this._getPositionForHierarchy(nodeArray[i-1])+this.options.hierarchical.nodeSpacing;}this._setPositionForHierarchy(node,pos,level);this._validataPositionAndContinue(node,level,pos);handledNodeCount++;}}}}}/**
	       * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes
	       * on a X position that ensures there will be no overlap.
	       *
	       * @param parentId
	       * @param parentLevel
	       * @private
	       */},{key:'_placeBranchNodes',value:function _placeBranchNodes(parentId,parentLevel){// if this is not a parent, cancel the placing. This can happen with multiple parents to one child.
	if(this.hierarchicalChildrenReference[parentId]===undefined){return;}// get a list of childNodes
	var childNodes=[];for(var i=0;i<this.hierarchicalChildrenReference[parentId].length;i++){childNodes.push(this.body.nodes[this.hierarchicalChildrenReference[parentId][i]]);}// use the positions to order the nodes.
	this._sortNodeArray(childNodes);// position the childNodes
	for(var _i6=0;_i6<childNodes.length;_i6++){var childNode=childNodes[_i6];var childNodeLevel=this.hierarchicalLevels[childNode.id];// check if the child node is below the parent node and if it has already been positioned.
	if(childNodeLevel>parentLevel&&this.positionedNodes[childNode.id]===undefined){// get the amount of space required for this node. If parent the width is based on the amount of children.
	var pos=void 0;// we get the X or Y values we need and store them in pos and previousPos. The get and set make sure we get X or Y
	if(_i6===0){pos=this._getPositionForHierarchy(this.body.nodes[parentId]);}else{pos=this._getPositionForHierarchy(childNodes[_i6-1])+this.options.hierarchical.nodeSpacing;}this._setPositionForHierarchy(childNode,pos,childNodeLevel);this._validataPositionAndContinue(childNode,childNodeLevel,pos);}else{return;}}// center the parent nodes.
	var minPos=1e9;var maxPos=-1e9;for(var _i7=0;_i7<childNodes.length;_i7++){var childNodeId=childNodes[_i7].id;minPos=Math.min(minPos,this._getPositionForHierarchy(this.body.nodes[childNodeId]));maxPos=Math.max(maxPos,this._getPositionForHierarchy(this.body.nodes[childNodeId]));}this._setPositionForHierarchy(this.body.nodes[parentId],0.5*(minPos+maxPos),parentLevel);}/**
	       * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.
	       * Finally it will call _placeBranchNodes to place the branch nodes.
	       * @param node
	       * @param level
	       * @param pos
	       * @private
	       */},{key:'_validataPositionAndContinue',value:function _validataPositionAndContinue(node,level,pos){// if overlap has been detected, we shift the branch
	if(this.lastNodeOnLevel[level]!==undefined){var previousPos=this._getPositionForHierarchy(this.body.nodes[this.lastNodeOnLevel[level]]);if(pos-previousPos<this.options.hierarchical.nodeSpacing){var diff=previousPos+this.options.hierarchical.nodeSpacing-pos;var sharedParent=this._findCommonParent(this.lastNodeOnLevel[level],node.id);this._shiftBlock(sharedParent.withChild,diff);}}// store change in position.
	this.lastNodeOnLevel[level]=node.id;this.positionedNodes[node.id]=true;this._placeBranchNodes(node.id,level);}/**
	       * Receives an array with node indices and returns an array with the actual node references. Used for sorting based on
	       * node properties.
	       * @param idArray
	       */},{key:'_indexArrayToNodes',value:function _indexArrayToNodes(idArray){var array=[];for(var i=0;i<idArray.length;i++){array.push(this.body.nodes[idArray[i]]);}return array;}/**
	       * This function get the distribution of levels based on hubsize
	       *
	       * @returns {Object}
	       * @private
	       */},{key:'_getDistribution',value:function _getDistribution(){var distribution={};var nodeId=void 0,node=void 0;// we fix Y because the hierarchy is vertical, we fix X so we do not give a node an x position for a second time.
	// the fix of X is removed after the x value has been set.
	for(nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(nodeId)){node=this.body.nodes[nodeId];var level=this.hierarchicalLevels[nodeId]===undefined?0:this.hierarchicalLevels[nodeId];if(this.options.hierarchical.direction==='UD'||this.options.hierarchical.direction==='DU'){node.y=this.options.hierarchical.levelSeparation*level;node.options.fixed.y=true;}else{node.x=this.options.hierarchical.levelSeparation*level;node.options.fixed.x=true;}if(distribution[level]===undefined){distribution[level]={};}distribution[level][nodeId]=node;}}return distribution;}/**
	       * Get the hubsize from all remaining unlevelled nodes.
	       *
	       * @returns {number}
	       * @private
	       */},{key:'_getHubSize',value:function _getHubSize(){var hubSize=0;for(var nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(nodeId)){var node=this.body.nodes[nodeId];if(this.hierarchicalLevels[nodeId]===undefined){hubSize=node.edges.length<hubSize?hubSize:node.edges.length;}}}return hubSize;}/**
	       * this function allocates nodes in levels based on the recursive branching from the largest hubs.
	       *
	       * @param hubsize
	       * @private
	       */},{key:'_determineLevelsByHubsize',value:function _determineLevelsByHubsize(){var _this3=this;var hubSize=1;var levelDownstream=function levelDownstream(nodeA,nodeB){if(_this3.hierarchicalLevels[nodeB.id]===undefined){// set initial level
	if(_this3.hierarchicalLevels[nodeA.id]===undefined){_this3.hierarchicalLevels[nodeA.id]=0;}// set level
	_this3.hierarchicalLevels[nodeB.id]=_this3.hierarchicalLevels[nodeA.id]+1;}};while(hubSize>0){// determine hubs
	hubSize=this._getHubSize();if(hubSize===0)break;for(var nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(nodeId)){var node=this.body.nodes[nodeId];if(node.edges.length===hubSize){this._crawlNetwork(levelDownstream,nodeId);}}}}}/**
	       * TODO: release feature
	       * @private
	       */},{key:'_determineLevelsCustomCallback',value:function _determineLevelsCustomCallback(){var _this4=this;var minLevel=100000;// TODO: this should come from options.
	var customCallback=function customCallback(nodeA,nodeB,edge){};var levelByDirection=function levelByDirection(nodeA,nodeB,edge){var levelA=_this4.hierarchicalLevels[nodeA.id];// set initial level
	if(levelA===undefined){_this4.hierarchicalLevels[nodeA.id]=minLevel;}var diff=customCallback(_NetworkUtil2.default.cloneOptions(nodeA,'node'),_NetworkUtil2.default.cloneOptions(nodeB,'node'),_NetworkUtil2.default.cloneOptions(edge,'edge'));_this4.hierarchicalLevels[nodeB.id]=_this4.hierarchicalLevels[nodeA.id]+diff;};this._crawlNetwork(levelByDirection);this._setMinLevelToZero();}/**
	       * this function allocates nodes in levels based on the direction of the edges
	       *
	       * @param hubsize
	       * @private
	       */},{key:'_determineLevelsDirected',value:function _determineLevelsDirected(){var _this5=this;var minLevel=10000;var levelByDirection=function levelByDirection(nodeA,nodeB,edge){var levelA=_this5.hierarchicalLevels[nodeA.id];// set initial level
	if(levelA===undefined){_this5.hierarchicalLevels[nodeA.id]=minLevel;}if(edge.toId==nodeB.id){_this5.hierarchicalLevels[nodeB.id]=_this5.hierarchicalLevels[nodeA.id]+1;}else{_this5.hierarchicalLevels[nodeB.id]=_this5.hierarchicalLevels[nodeA.id]-1;}};this._crawlNetwork(levelByDirection);this._setMinLevelToZero();}/**
	       * Small util method to set the minimum levels of the nodes to zero.
	       * @private
	       */},{key:'_setMinLevelToZero',value:function _setMinLevelToZero(){var minLevel=1e9;// get the minimum level
	for(var nodeId in this.body.nodes){if(this.body.nodes.hasOwnProperty(nodeId)){if(this.hierarchicalLevels[nodeId]!==undefined){minLevel=Math.min(this.hierarchicalLevels[nodeId],minLevel);}}}// subtract the minimum from the set so we have a range starting from 0
	for(var _nodeId2 in this.body.nodes){if(this.body.nodes.hasOwnProperty(_nodeId2)){if(this.hierarchicalLevels[_nodeId2]!==undefined){this.hierarchicalLevels[_nodeId2]-=minLevel;}}}}/**
	       * Update the bookkeeping of parent and child.
	       * @private
	       */},{key:'_generateMap',value:function _generateMap(){var _this6=this;var fillInRelations=function fillInRelations(parentNode,childNode){if(_this6.hierarchicalLevels[childNode.id]>_this6.hierarchicalLevels[parentNode.id]){var parentNodeId=parentNode.id;var childNodeId=childNode.id;if(_this6.hierarchicalChildrenReference[parentNodeId]===undefined){_this6.hierarchicalChildrenReference[parentNodeId]=[];}_this6.hierarchicalChildrenReference[parentNodeId].push(childNodeId);if(_this6.hierarchicalParentReference[childNodeId]===undefined){_this6.hierarchicalParentReference[childNodeId]=[];}_this6.hierarchicalParentReference[childNodeId].push(parentNodeId);}};this._crawlNetwork(fillInRelations);}/**
	       * Crawl over the entire network and use a callback on each node couple that is connected to each other.
	       * @param callback          | will receive nodeA nodeB and the connecting edge. A and B are unique.
	       * @param startingNodeId
	       * @private
	       */},{key:'_crawlNetwork',value:function _crawlNetwork(){var _this7=this;var callback=arguments.length>0&&arguments[0]!==undefined?arguments[0]:function(){};var startingNodeId=arguments[1];var progress={};var treeIndex=0;var crawler=function crawler(node,tree){if(progress[node.id]===undefined){if(_this7.hierarchicalTrees[node.id]===undefined){_this7.hierarchicalTrees[node.id]=tree;_this7.treeIndex=Math.max(tree,_this7.treeIndex);}progress[node.id]=true;var childNode=void 0;for(var i=0;i<node.edges.length;i++){if(node.edges[i].connected===true){if(node.edges[i].toId===node.id){childNode=node.edges[i].from;}else{childNode=node.edges[i].to;}if(node.id!==childNode.id){callback(node,childNode,node.edges[i]);crawler(childNode,tree);}}}}};// we can crawl from a specific node or over all nodes.
	if(startingNodeId===undefined){for(var i=0;i<this.body.nodeIndices.length;i++){var node=this.body.nodes[this.body.nodeIndices[i]];if(progress[node.id]===undefined){crawler(node,treeIndex);treeIndex+=1;}}}else{var _node=this.body.nodes[startingNodeId];if(_node===undefined){console.error("Node not found:",startingNodeId);return;}crawler(_node);}}/**
	       * Shift a branch a certain distance
	       * @param parentId
	       * @param diff
	       * @private
	       */},{key:'_shiftBlock',value:function _shiftBlock(parentId,diff){if(this.options.hierarchical.direction==='UD'||this.options.hierarchical.direction==='DU'){this.body.nodes[parentId].x+=diff;}else{this.body.nodes[parentId].y+=diff;}if(this.hierarchicalChildrenReference[parentId]!==undefined){for(var i=0;i<this.hierarchicalChildrenReference[parentId].length;i++){this._shiftBlock(this.hierarchicalChildrenReference[parentId][i],diff);}}}/**
	       * Find a common parent between branches.
	       * @param childA
	       * @param childB
	       * @returns {{foundParent, withChild}}
	       * @private
	       */},{key:'_findCommonParent',value:function _findCommonParent(childA,childB){var _this8=this;var parents={};var iterateParents=function iterateParents(parents,child){if(_this8.hierarchicalParentReference[child]!==undefined){for(var i=0;i<_this8.hierarchicalParentReference[child].length;i++){var parent=_this8.hierarchicalParentReference[child][i];parents[parent]=true;iterateParents(parents,parent);}}};var findParent=function findParent(parents,child){if(_this8.hierarchicalParentReference[child]!==undefined){for(var i=0;i<_this8.hierarchicalParentReference[child].length;i++){var parent=_this8.hierarchicalParentReference[child][i];if(parents[parent]!==undefined){return{foundParent:parent,withChild:child};}var branch=findParent(parents,parent);if(branch.foundParent!==null){return branch;}}}return{foundParent:null,withChild:child};};iterateParents(parents,childA);return findParent(parents,childB);}/**
	       * Abstract the getting of the position so we won't have to repeat the check for direction all the time
	       * @param node
	       * @param position
	       * @param level
	       * @private
	       */},{key:'_setPositionForHierarchy',value:function _setPositionForHierarchy(node,position,level){var doNotUpdate=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;//console.log('_setPositionForHierarchy',node.id, position)
	if(doNotUpdate!==true){if(this.distributionOrdering[level]===undefined){this.distributionOrdering[level]=[];this.distributionOrderingPresence[level]={};}if(this.distributionOrderingPresence[level][node.id]===undefined){this.distributionOrdering[level].push(node);this.distributionIndex[node.id]=this.distributionOrdering[level].length-1;}this.distributionOrderingPresence[level][node.id]=true;}if(this.options.hierarchical.direction==='UD'||this.options.hierarchical.direction==='DU'){node.x=position;}else{node.y=position;}}/**
	       * Abstract the getting of the position of a node so we do not have to repeat the direction check all the time.
	       * @param node
	       * @returns {number|*}
	       * @private
	       */},{key:'_getPositionForHierarchy',value:function _getPositionForHierarchy(node){if(this.options.hierarchical.direction==='UD'||this.options.hierarchical.direction==='DU'){return node.x;}else{return node.y;}}/**
	       * Use the x or y value to sort the array, allowing users to specify order.
	       * @param nodeArray
	       * @private
	       */},{key:'_sortNodeArray',value:function _sortNodeArray(nodeArray){if(nodeArray.length>1){if(this.options.hierarchical.direction==='UD'||this.options.hierarchical.direction==='DU'){nodeArray.sort(function(a,b){return a.x-b.x;});}else{nodeArray.sort(function(a,b){return a.y-b.y;});}}}}]);return LayoutEngine;}();exports.default=LayoutEngine;/***/},/* 115 *//***/function(module,exports,__webpack_require__){'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var util=__webpack_require__(1);var Hammer=__webpack_require__(22);var hammerUtil=__webpack_require__(30);/**
	   * clears the toolbar div element of children
	   *
	   * @private
	   */var ManipulationSystem=function(){function ManipulationSystem(body,canvas,selectionHandler){var _this=this;_classCallCheck(this,ManipulationSystem);this.body=body;this.canvas=canvas;this.selectionHandler=selectionHandler;this.editMode=false;this.manipulationDiv=undefined;this.editModeDiv=undefined;this.closeDiv=undefined;this.manipulationHammers=[];this.temporaryUIFunctions={};this.temporaryEventFunctions=[];this.touchTime=0;this.temporaryIds={nodes:[],edges:[]};this.guiEnabled=false;this.inMode=false;this.selectedControlNode=undefined;this.options={};this.defaultOptions={enabled:false,initiallyActive:false,addNode:true,addEdge:true,editNode:undefined,editEdge:true,deleteNode:true,deleteEdge:true,controlNodeStyle:{shape:'dot',size:6,color:{background:'#ff0000',border:'#3c3c3c',highlight:{background:'#07f968',border:'#3c3c3c'}},borderWidth:2,borderWidthSelected:2}};util.extend(this.options,this.defaultOptions);this.body.emitter.on('destroy',function(){_this._clean();});this.body.emitter.on('_dataChanged',this._restore.bind(this));this.body.emitter.on('_resetData',this._restore.bind(this));}/**
	     * If something changes in the data during editing, switch back to the initial datamanipulation state and close all edit modes.
	     * @private
	     */_createClass(ManipulationSystem,[{key:'_restore',value:function _restore(){if(this.inMode!==false){if(this.options.initiallyActive===true){this.enableEditMode();}else{this.disableEditMode();}}}/**
	       * Set the Options
	       * @param options
	       */},{key:'setOptions',value:function setOptions(options,allOptions,globalOptions){if(allOptions!==undefined){if(allOptions.locale!==undefined){this.options.locale=allOptions.locale;}else{this.options.locale=globalOptions.locale;}if(allOptions.locales!==undefined){this.options.locales=allOptions.locales;}else{this.options.locales=globalOptions.locales;}}if(options!==undefined){if(typeof options==='boolean'){this.options.enabled=options;}else{this.options.enabled=true;util.deepExtend(this.options,options);}if(this.options.initiallyActive===true){this.editMode=true;}this._setup();}}/**
	       * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.
	       *
	       * @private
	       */},{key:'toggleEditMode',value:function toggleEditMode(){if(this.editMode===true){this.disableEditMode();}else{this.enableEditMode();}}},{key:'enableEditMode',value:function enableEditMode(){this.editMode=true;this._clean();if(this.guiEnabled===true){this.manipulationDiv.style.display='block';this.closeDiv.style.display='block';this.editModeDiv.style.display='none';this.showManipulatorToolbar();}}},{key:'disableEditMode',value:function disableEditMode(){this.editMode=false;this._clean();if(this.guiEnabled===true){this.manipulationDiv.style.display='none';this.closeDiv.style.display='none';this.editModeDiv.style.display='block';this._createEditButton();}}/**
	       * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.
	       *
	       * @private
	       */},{key:'showManipulatorToolbar',value:function showManipulatorToolbar(){// restore the state of any bound functions or events, remove control nodes, restore physics
	this._clean();// reset global variables
	this.manipulationDOM={};// if the gui is enabled, draw all elements.
	if(this.guiEnabled===true){// a _restore will hide these menus
	this.editMode=true;this.manipulationDiv.style.display='block';this.closeDiv.style.display='block';var selectedNodeCount=this.selectionHandler._getSelectedNodeCount();var selectedEdgeCount=this.selectionHandler._getSelectedEdgeCount();var selectedTotalCount=selectedNodeCount+selectedEdgeCount;var locale=this.options.locales[this.options.locale];var needSeperator=false;if(this.options.addNode!==false){this._createAddNodeButton(locale);needSeperator=true;}if(this.options.addEdge!==false){if(needSeperator===true){this._createSeperator(1);}else{needSeperator=true;}this._createAddEdgeButton(locale);}if(selectedNodeCount===1&&typeof this.options.editNode==='function'){if(needSeperator===true){this._createSeperator(2);}else{needSeperator=true;}this._createEditNodeButton(locale);}else if(selectedEdgeCount===1&&selectedNodeCount===0&&this.options.editEdge!==false){if(needSeperator===true){this._createSeperator(3);}else{needSeperator=true;}this._createEditEdgeButton(locale);}// remove buttons
	if(selectedTotalCount!==0){if(selectedNodeCount>0&&this.options.deleteNode!==false){if(needSeperator===true){this._createSeperator(4);}this._createDeleteButton(locale);}else if(selectedNodeCount===0&&this.options.deleteEdge!==false){if(needSeperator===true){this._createSeperator(4);}this._createDeleteButton(locale);}}// bind the close button
	this._bindHammerToDiv(this.closeDiv,this.toggleEditMode.bind(this));// refresh this bar based on what has been selected
	this._temporaryBindEvent('select',this.showManipulatorToolbar.bind(this));}// redraw to show any possible changes
	this.body.emitter.emit('_redraw');}/**
	       * Create the toolbar for adding Nodes
	       */},{key:'addNodeMode',value:function addNodeMode(){// when using the gui, enable edit mode if it wasnt already.
	if(this.editMode!==true){this.enableEditMode();}// restore the state of any bound functions or events, remove control nodes, restore physics
	this._clean();this.inMode='addNode';if(this.guiEnabled===true){var locale=this.options.locales[this.options.locale];this.manipulationDOM={};this._createBackButton(locale);this._createSeperator();this._createDescription(locale['addDescription']||this.options.locales['en']['addDescription']);// bind the close button
	this._bindHammerToDiv(this.closeDiv,this.toggleEditMode.bind(this));}this._temporaryBindEvent('click',this._performAddNode.bind(this));}/**
	       * call the bound function to handle the editing of the node. The node has to be selected.
	       */},{key:'editNode',value:function editNode(){var _this2=this;// when using the gui, enable edit mode if it wasnt already.
	if(this.editMode!==true){this.enableEditMode();}// restore the state of any bound functions or events, remove control nodes, restore physics
	this._clean();var node=this.selectionHandler._getSelectedNode();if(node!==undefined){this.inMode='editNode';if(typeof this.options.editNode==='function'){if(node.isCluster!==true){var data=util.deepExtend({},node.options,false);data.x=node.x;data.y=node.y;if(this.options.editNode.length===2){this.options.editNode(data,function(finalizedData){if(finalizedData!==null&&finalizedData!==undefined&&_this2.inMode==='editNode'){// if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	_this2.body.data.nodes.getDataSet().update(finalizedData);}_this2.showManipulatorToolbar();});}else{throw new Error('The function for edit does not support two arguments (data, callback)');}}else{alert(this.options.locales[this.options.locale]['editClusterError']||this.options.locales['en']['editClusterError']);}}else{throw new Error('No function has been configured to handle the editing of nodes.');}}else{this.showManipulatorToolbar();}}/**
	       * create the toolbar to connect nodes
	       */},{key:'addEdgeMode',value:function addEdgeMode(){// when using the gui, enable edit mode if it wasnt already.
	if(this.editMode!==true){this.enableEditMode();}// restore the state of any bound functions or events, remove control nodes, restore physics
	this._clean();this.inMode='addEdge';if(this.guiEnabled===true){var locale=this.options.locales[this.options.locale];this.manipulationDOM={};this._createBackButton(locale);this._createSeperator();this._createDescription(locale['edgeDescription']||this.options.locales['en']['edgeDescription']);// bind the close button
	this._bindHammerToDiv(this.closeDiv,this.toggleEditMode.bind(this));}// temporarily overload functions
	this._temporaryBindUI('onTouch',this._handleConnect.bind(this));this._temporaryBindUI('onDragEnd',this._finishConnect.bind(this));this._temporaryBindUI('onDrag',this._dragControlNode.bind(this));this._temporaryBindUI('onRelease',this._finishConnect.bind(this));this._temporaryBindUI('onDragStart',function(){});this._temporaryBindUI('onHold',function(){});}/**
	       * create the toolbar to edit edges
	       */},{key:'editEdgeMode',value:function editEdgeMode(){var _this3=this;// when using the gui, enable edit mode if it wasn't already.
	if(this.editMode!==true){this.enableEditMode();}// restore the state of any bound functions or events, remove control nodes, restore physics
	this._clean();this.inMode='editEdge';if(this.guiEnabled===true){var locale=this.options.locales[this.options.locale];this.manipulationDOM={};this._createBackButton(locale);this._createSeperator();this._createDescription(locale['editEdgeDescription']||this.options.locales['en']['editEdgeDescription']);// bind the close button
	this._bindHammerToDiv(this.closeDiv,this.toggleEditMode.bind(this));}this.edgeBeingEditedId=this.selectionHandler.getSelectedEdges()[0];if(this.edgeBeingEditedId!==undefined){(function(){var edge=_this3.body.edges[_this3.edgeBeingEditedId];// create control nodes
	var controlNodeFrom=_this3._getNewTargetNode(edge.from.x,edge.from.y);var controlNodeTo=_this3._getNewTargetNode(edge.to.x,edge.to.y);_this3.temporaryIds.nodes.push(controlNodeFrom.id);_this3.temporaryIds.nodes.push(controlNodeTo.id);_this3.body.nodes[controlNodeFrom.id]=controlNodeFrom;_this3.body.nodeIndices.push(controlNodeFrom.id);_this3.body.nodes[controlNodeTo.id]=controlNodeTo;_this3.body.nodeIndices.push(controlNodeTo.id);// temporarily overload UI functions, cleaned up automatically because of _temporaryBindUI
	_this3._temporaryBindUI('onTouch',_this3._controlNodeTouch.bind(_this3));// used to get the position
	_this3._temporaryBindUI('onTap',function(){});// disabled
	_this3._temporaryBindUI('onHold',function(){});// disabled
	_this3._temporaryBindUI('onDragStart',_this3._controlNodeDragStart.bind(_this3));// used to select control node
	_this3._temporaryBindUI('onDrag',_this3._controlNodeDrag.bind(_this3));// used to drag control node
	_this3._temporaryBindUI('onDragEnd',_this3._controlNodeDragEnd.bind(_this3));// used to connect or revert control nodes
	_this3._temporaryBindUI('onMouseMove',function(){});// disabled
	// create function to position control nodes correctly on movement
	// automatically cleaned up because we use the temporary bind
	_this3._temporaryBindEvent('beforeDrawing',function(ctx){var positions=edge.edgeType.findBorderPositions(ctx);if(controlNodeFrom.selected===false){controlNodeFrom.x=positions.from.x;controlNodeFrom.y=positions.from.y;}if(controlNodeTo.selected===false){controlNodeTo.x=positions.to.x;controlNodeTo.y=positions.to.y;}});_this3.body.emitter.emit('_redraw');})();}else{this.showManipulatorToolbar();}}/**
	       * delete everything in the selection
	       */},{key:'deleteSelected',value:function deleteSelected(){var _this4=this;// when using the gui, enable edit mode if it wasnt already.
	if(this.editMode!==true){this.enableEditMode();}// restore the state of any bound functions or events, remove control nodes, restore physics
	this._clean();this.inMode='delete';var selectedNodes=this.selectionHandler.getSelectedNodes();var selectedEdges=this.selectionHandler.getSelectedEdges();var deleteFunction=undefined;if(selectedNodes.length>0){for(var i=0;i<selectedNodes.length;i++){if(this.body.nodes[selectedNodes[i]].isCluster===true){alert(this.options.locales[this.options.locale]['deleteClusterError']||this.options.locales['en']['deleteClusterError']);return;}}if(typeof this.options.deleteNode==='function'){deleteFunction=this.options.deleteNode;}}else if(selectedEdges.length>0){if(typeof this.options.deleteEdge==='function'){deleteFunction=this.options.deleteEdge;}}if(typeof deleteFunction==='function'){var data={nodes:selectedNodes,edges:selectedEdges};if(deleteFunction.length===2){deleteFunction(data,function(finalizedData){if(finalizedData!==null&&finalizedData!==undefined&&_this4.inMode==='delete'){// if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	_this4.body.data.edges.getDataSet().remove(finalizedData.edges);_this4.body.data.nodes.getDataSet().remove(finalizedData.nodes);_this4.body.emitter.emit('startSimulation');_this4.showManipulatorToolbar();}else{_this4.body.emitter.emit('startSimulation');_this4.showManipulatorToolbar();}});}else{throw new Error('The function for delete does not support two arguments (data, callback)');}}else{this.body.data.edges.getDataSet().remove(selectedEdges);this.body.data.nodes.getDataSet().remove(selectedNodes);this.body.emitter.emit('startSimulation');this.showManipulatorToolbar();}}//********************************************** PRIVATE ***************************************//
	/**
	       * draw or remove the DOM
	       * @private
	       */},{key:'_setup',value:function _setup(){if(this.options.enabled===true){// Enable the GUI
	this.guiEnabled=true;this._createWrappers();if(this.editMode===false){this._createEditButton();}else{this.showManipulatorToolbar();}}else{this._removeManipulationDOM();// disable the gui
	this.guiEnabled=false;}}/**
	       * create the div overlays that contain the DOM
	       * @private
	       */},{key:'_createWrappers',value:function _createWrappers(){// load the manipulator HTML elements. All styling done in css.
	if(this.manipulationDiv===undefined){this.manipulationDiv=document.createElement('div');this.manipulationDiv.className='vis-manipulation';if(this.editMode===true){this.manipulationDiv.style.display='block';}else{this.manipulationDiv.style.display='none';}this.canvas.frame.appendChild(this.manipulationDiv);}// container for the edit button.
	if(this.editModeDiv===undefined){this.editModeDiv=document.createElement('div');this.editModeDiv.className='vis-edit-mode';if(this.editMode===true){this.editModeDiv.style.display='none';}else{this.editModeDiv.style.display='block';}this.canvas.frame.appendChild(this.editModeDiv);}// container for the close div button
	if(this.closeDiv===undefined){this.closeDiv=document.createElement('div');this.closeDiv.className='vis-close';this.closeDiv.style.display=this.manipulationDiv.style.display;this.canvas.frame.appendChild(this.closeDiv);}}/**
	       * generate a new target node. Used for creating new edges and editing edges
	       * @param x
	       * @param y
	       * @returns {*}
	       * @private
	       */},{key:'_getNewTargetNode',value:function _getNewTargetNode(x,y){var controlNodeStyle=util.deepExtend({},this.options.controlNodeStyle);controlNodeStyle.id='targetNode'+util.randomUUID();controlNodeStyle.hidden=false;controlNodeStyle.physics=false;controlNodeStyle.x=x;controlNodeStyle.y=y;// we have to define the bounding box in order for the nodes to be drawn immediately
	var node=this.body.functions.createNode(controlNodeStyle);node.shape.boundingBox={left:x,right:x,top:y,bottom:y};return node;}/**
	       * Create the edit button
	       */},{key:'_createEditButton',value:function _createEditButton(){// restore everything to it's original state (if applicable)
	this._clean();// reset the manipulationDOM
	this.manipulationDOM={};// empty the editModeDiv
	util.recursiveDOMDelete(this.editModeDiv);// create the contents for the editMode button
	var locale=this.options.locales[this.options.locale];var button=this._createButton('editMode','vis-button vis-edit vis-edit-mode',locale['edit']||this.options.locales['en']['edit']);this.editModeDiv.appendChild(button);// bind a hammer listener to the button, calling the function toggleEditMode.
	this._bindHammerToDiv(button,this.toggleEditMode.bind(this));}/**
	       * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.
	       * @private
	       */},{key:'_clean',value:function _clean(){// not in mode
	this.inMode=false;// _clean the divs
	if(this.guiEnabled===true){util.recursiveDOMDelete(this.editModeDiv);util.recursiveDOMDelete(this.manipulationDiv);// removes all the bindings and overloads
	this._cleanManipulatorHammers();}// remove temporary nodes and edges
	this._cleanupTemporaryNodesAndEdges();// restore overloaded UI functions
	this._unbindTemporaryUIs();// remove the temporaryEventFunctions
	this._unbindTemporaryEvents();// restore the physics if required
	this.body.emitter.emit('restorePhysics');}/**
	       * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.
	       * @private
	       */},{key:'_cleanManipulatorHammers',value:function _cleanManipulatorHammers(){// _clean hammer bindings
	if(this.manipulationHammers.length!=0){for(var i=0;i<this.manipulationHammers.length;i++){this.manipulationHammers[i].destroy();}this.manipulationHammers=[];}}/**
	       * Remove all DOM elements created by this module.
	       * @private
	       */},{key:'_removeManipulationDOM',value:function _removeManipulationDOM(){// removes all the bindings and overloads
	this._clean();// empty the manipulation divs
	util.recursiveDOMDelete(this.manipulationDiv);util.recursiveDOMDelete(this.editModeDiv);util.recursiveDOMDelete(this.closeDiv);// remove the manipulation divs
	if(this.manipulationDiv){this.canvas.frame.removeChild(this.manipulationDiv);}if(this.editModeDiv){this.canvas.frame.removeChild(this.editModeDiv);}if(this.closeDiv){this.canvas.frame.removeChild(this.closeDiv);}// set the references to undefined
	this.manipulationDiv=undefined;this.editModeDiv=undefined;this.closeDiv=undefined;}/**
	       * create a seperator line. the index is to differentiate in the manipulation dom
	       * @param index
	       * @private
	       */},{key:'_createSeperator',value:function _createSeperator(){var index=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;this.manipulationDOM['seperatorLineDiv'+index]=document.createElement('div');this.manipulationDOM['seperatorLineDiv'+index].className='vis-separator-line';this.manipulationDiv.appendChild(this.manipulationDOM['seperatorLineDiv'+index]);}// ----------------------    DOM functions for buttons    --------------------------//
	},{key:'_createAddNodeButton',value:function _createAddNodeButton(locale){var button=this._createButton('addNode','vis-button vis-add',locale['addNode']||this.options.locales['en']['addNode']);this.manipulationDiv.appendChild(button);this._bindHammerToDiv(button,this.addNodeMode.bind(this));}},{key:'_createAddEdgeButton',value:function _createAddEdgeButton(locale){var button=this._createButton('addEdge','vis-button vis-connect',locale['addEdge']||this.options.locales['en']['addEdge']);this.manipulationDiv.appendChild(button);this._bindHammerToDiv(button,this.addEdgeMode.bind(this));}},{key:'_createEditNodeButton',value:function _createEditNodeButton(locale){var button=this._createButton('editNode','vis-button vis-edit',locale['editNode']||this.options.locales['en']['editNode']);this.manipulationDiv.appendChild(button);this._bindHammerToDiv(button,this.editNode.bind(this));}},{key:'_createEditEdgeButton',value:function _createEditEdgeButton(locale){var button=this._createButton('editEdge','vis-button vis-edit',locale['editEdge']||this.options.locales['en']['editEdge']);this.manipulationDiv.appendChild(button);this._bindHammerToDiv(button,this.editEdgeMode.bind(this));}},{key:'_createDeleteButton',value:function _createDeleteButton(locale){if(this.options.rtl){var deleteBtnClass='vis-button vis-delete-rtl';}else{var deleteBtnClass='vis-button vis-delete';}var button=this._createButton('delete',deleteBtnClass,locale['del']||this.options.locales['en']['del']);this.manipulationDiv.appendChild(button);this._bindHammerToDiv(button,this.deleteSelected.bind(this));}},{key:'_createBackButton',value:function _createBackButton(locale){var button=this._createButton('back','vis-button vis-back',locale['back']||this.options.locales['en']['back']);this.manipulationDiv.appendChild(button);this._bindHammerToDiv(button,this.showManipulatorToolbar.bind(this));}},{key:'_createButton',value:function _createButton(id,className,label){var labelClassName=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'vis-label';this.manipulationDOM[id+'Div']=document.createElement('div');this.manipulationDOM[id+'Div'].className=className;this.manipulationDOM[id+'Label']=document.createElement('div');this.manipulationDOM[id+'Label'].className=labelClassName;this.manipulationDOM[id+'Label'].innerHTML=label;this.manipulationDOM[id+'Div'].appendChild(this.manipulationDOM[id+'Label']);return this.manipulationDOM[id+'Div'];}},{key:'_createDescription',value:function _createDescription(label){this.manipulationDiv.appendChild(this._createButton('description','vis-button vis-none',label));}// -------------------------- End of DOM functions for buttons ------------------------------//
	/**
	       * this binds an event until cleanup by the clean functions.
	       * @param event
	       * @param newFunction
	       * @private
	       */},{key:'_temporaryBindEvent',value:function _temporaryBindEvent(event,newFunction){this.temporaryEventFunctions.push({event:event,boundFunction:newFunction});this.body.emitter.on(event,newFunction);}/**
	       * this overrides an UI function until cleanup by the clean function
	       * @param UIfunctionName
	       * @param newFunction
	       * @private
	       */},{key:'_temporaryBindUI',value:function _temporaryBindUI(UIfunctionName,newFunction){if(this.body.eventListeners[UIfunctionName]!==undefined){this.temporaryUIFunctions[UIfunctionName]=this.body.eventListeners[UIfunctionName];this.body.eventListeners[UIfunctionName]=newFunction;}else{throw new Error('This UI function does not exist. Typo? You tried: '+UIfunctionName+' possible are: '+JSON.stringify(Object.keys(this.body.eventListeners)));}}/**
	       * Restore the overridden UI functions to their original state.
	       *
	       * @private
	       */},{key:'_unbindTemporaryUIs',value:function _unbindTemporaryUIs(){for(var functionName in this.temporaryUIFunctions){if(this.temporaryUIFunctions.hasOwnProperty(functionName)){this.body.eventListeners[functionName]=this.temporaryUIFunctions[functionName];delete this.temporaryUIFunctions[functionName];}}this.temporaryUIFunctions={};}/**
	       * Unbind the events created by _temporaryBindEvent
	       * @private
	       */},{key:'_unbindTemporaryEvents',value:function _unbindTemporaryEvents(){for(var i=0;i<this.temporaryEventFunctions.length;i++){var eventName=this.temporaryEventFunctions[i].event;var boundFunction=this.temporaryEventFunctions[i].boundFunction;this.body.emitter.off(eventName,boundFunction);}this.temporaryEventFunctions=[];}/**
	       * Bind an hammer instance to a DOM element.
	       * @param domElement
	       * @param funct
	       */},{key:'_bindHammerToDiv',value:function _bindHammerToDiv(domElement,boundFunction){var hammer=new Hammer(domElement,{});hammerUtil.onTouch(hammer,boundFunction);this.manipulationHammers.push(hammer);}/**
	       * Neatly clean up temporary edges and nodes
	       * @private
	       */},{key:'_cleanupTemporaryNodesAndEdges',value:function _cleanupTemporaryNodesAndEdges(){// _clean temporary edges
	for(var i=0;i<this.temporaryIds.edges.length;i++){this.body.edges[this.temporaryIds.edges[i]].disconnect();delete this.body.edges[this.temporaryIds.edges[i]];var indexTempEdge=this.body.edgeIndices.indexOf(this.temporaryIds.edges[i]);if(indexTempEdge!==-1){this.body.edgeIndices.splice(indexTempEdge,1);}}// _clean temporary nodes
	for(var _i=0;_i<this.temporaryIds.nodes.length;_i++){delete this.body.nodes[this.temporaryIds.nodes[_i]];var indexTempNode=this.body.nodeIndices.indexOf(this.temporaryIds.nodes[_i]);if(indexTempNode!==-1){this.body.nodeIndices.splice(indexTempNode,1);}}this.temporaryIds={nodes:[],edges:[]};}// ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//
	/**
	       * the touch is used to get the position of the initial click
	       * @param event
	       * @private
	       */},{key:'_controlNodeTouch',value:function _controlNodeTouch(event){this.selectionHandler.unselectAll();this.lastTouch=this.body.functions.getPointer(event.center);this.lastTouch.translation=util.extend({},this.body.view.translation);// copy the object
	}/**
	       * the drag start is used to mark one of the control nodes as selected.
	       * @param event
	       * @private
	       */},{key:'_controlNodeDragStart',value:function _controlNodeDragStart(event){var pointer=this.lastTouch;var pointerObj=this.selectionHandler._pointerToPositionObject(pointer);var from=this.body.nodes[this.temporaryIds.nodes[0]];var to=this.body.nodes[this.temporaryIds.nodes[1]];var edge=this.body.edges[this.edgeBeingEditedId];this.selectedControlNode=undefined;var fromSelect=from.isOverlappingWith(pointerObj);var toSelect=to.isOverlappingWith(pointerObj);if(fromSelect===true){this.selectedControlNode=from;edge.edgeType.from=from;}else if(toSelect===true){this.selectedControlNode=to;edge.edgeType.to=to;}// we use the selection to find the node that is being dragged. We explicitly select it here.
	if(this.selectedControlNode!==undefined){this.selectionHandler.selectObject(this.selectedControlNode);}this.body.emitter.emit('_redraw');}/**
	       * dragging the control nodes or the canvas
	       * @param event
	       * @private
	       */},{key:'_controlNodeDrag',value:function _controlNodeDrag(event){this.body.emitter.emit('disablePhysics');var pointer=this.body.functions.getPointer(event.center);var pos=this.canvas.DOMtoCanvas(pointer);if(this.selectedControlNode!==undefined){this.selectedControlNode.x=pos.x;this.selectedControlNode.y=pos.y;}else{// if the drag was not started properly because the click started outside the network div, start it now.
	var diffX=pointer.x-this.lastTouch.x;var diffY=pointer.y-this.lastTouch.y;this.body.view.translation={x:this.lastTouch.translation.x+diffX,y:this.lastTouch.translation.y+diffY};}this.body.emitter.emit('_redraw');}/**
	       * connecting or restoring the control nodes.
	       * @param event
	       * @private
	       */},{key:'_controlNodeDragEnd',value:function _controlNodeDragEnd(event){var pointer=this.body.functions.getPointer(event.center);var pointerObj=this.selectionHandler._pointerToPositionObject(pointer);var edge=this.body.edges[this.edgeBeingEditedId];// if the node that was dragged is not a control node, return
	if(this.selectedControlNode===undefined){return;}// we use the selection to find the node that is being dragged. We explicitly DEselect the control node here.
	this.selectionHandler.unselectAll();var overlappingNodeIds=this.selectionHandler._getAllNodesOverlappingWith(pointerObj);var node=undefined;for(var i=overlappingNodeIds.length-1;i>=0;i--){if(overlappingNodeIds[i]!==this.selectedControlNode.id){node=this.body.nodes[overlappingNodeIds[i]];break;}}// perform the connection
	if(node!==undefined&&this.selectedControlNode!==undefined){if(node.isCluster===true){alert(this.options.locales[this.options.locale]['createEdgeError']||this.options.locales['en']['createEdgeError']);}else{var from=this.body.nodes[this.temporaryIds.nodes[0]];if(this.selectedControlNode.id===from.id){this._performEditEdge(node.id,edge.to.id);}else{this._performEditEdge(edge.from.id,node.id);}}}else{edge.updateEdgeType();this.body.emitter.emit('restorePhysics');}this.body.emitter.emit('_redraw');}// ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//
	// ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//
	/**
	       * the function bound to the selection event. It checks if you want to connect a cluster and changes the description
	       * to walk the user through the process.
	       *
	       * @private
	       */},{key:'_handleConnect',value:function _handleConnect(event){// check to avoid double fireing of this function.
	if(new Date().valueOf()-this.touchTime>100){this.lastTouch=this.body.functions.getPointer(event.center);this.lastTouch.translation=util.extend({},this.body.view.translation);// copy the object
	var pointer=this.lastTouch;var node=this.selectionHandler.getNodeAt(pointer);if(node!==undefined){if(node.isCluster===true){alert(this.options.locales[this.options.locale]['createEdgeError']||this.options.locales['en']['createEdgeError']);}else{// create a node the temporary line can look at
	var targetNode=this._getNewTargetNode(node.x,node.y);this.body.nodes[targetNode.id]=targetNode;this.body.nodeIndices.push(targetNode.id);// create a temporary edge
	var connectionEdge=this.body.functions.createEdge({id:'connectionEdge'+util.randomUUID(),from:node.id,to:targetNode.id,physics:false,smooth:{enabled:true,type:'continuous',roundness:0.5}});this.body.edges[connectionEdge.id]=connectionEdge;this.body.edgeIndices.push(connectionEdge.id);this.temporaryIds.nodes.push(targetNode.id);this.temporaryIds.edges.push(connectionEdge.id);}}this.touchTime=new Date().valueOf();}}},{key:'_dragControlNode',value:function _dragControlNode(event){var pointer=this.body.functions.getPointer(event.center);if(this.temporaryIds.nodes[0]!==undefined){var targetNode=this.body.nodes[this.temporaryIds.nodes[0]];// there is only one temp node in the add edge mode.
	targetNode.x=this.canvas._XconvertDOMtoCanvas(pointer.x);targetNode.y=this.canvas._YconvertDOMtoCanvas(pointer.y);this.body.emitter.emit('_redraw');}else{var diffX=pointer.x-this.lastTouch.x;var diffY=pointer.y-this.lastTouch.y;this.body.view.translation={x:this.lastTouch.translation.x+diffX,y:this.lastTouch.translation.y+diffY};}}/**
	       * Connect the new edge to the target if one exists, otherwise remove temp line
	       * @param event
	       * @private
	       */},{key:'_finishConnect',value:function _finishConnect(event){var pointer=this.body.functions.getPointer(event.center);var pointerObj=this.selectionHandler._pointerToPositionObject(pointer);// remember the edge id
	var connectFromId=undefined;if(this.temporaryIds.edges[0]!==undefined){connectFromId=this.body.edges[this.temporaryIds.edges[0]].fromId;}// get the overlapping node but NOT the temporary node;
	var overlappingNodeIds=this.selectionHandler._getAllNodesOverlappingWith(pointerObj);var node=undefined;for(var i=overlappingNodeIds.length-1;i>=0;i--){// if the node id is NOT a temporary node, accept the node.
	if(this.temporaryIds.nodes.indexOf(overlappingNodeIds[i])===-1){node=this.body.nodes[overlappingNodeIds[i]];break;}}// clean temporary nodes and edges.
	this._cleanupTemporaryNodesAndEdges();// perform the connection
	if(node!==undefined){if(node.isCluster===true){alert(this.options.locales[this.options.locale]['createEdgeError']||this.options.locales['en']['createEdgeError']);}else{if(this.body.nodes[connectFromId]!==undefined&&this.body.nodes[node.id]!==undefined){this._performAddEdge(connectFromId,node.id);}}}this.body.emitter.emit('_redraw');}// --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//
	// ------------------------------ Performing all the actual data manipulation ------------------------//
	/**
	       * Adds a node on the specified location
	       */},{key:'_performAddNode',value:function _performAddNode(clickData){var _this5=this;var defaultData={id:util.randomUUID(),x:clickData.pointer.canvas.x,y:clickData.pointer.canvas.y,label:'new'};if(typeof this.options.addNode==='function'){if(this.options.addNode.length===2){this.options.addNode(defaultData,function(finalizedData){if(finalizedData!==null&&finalizedData!==undefined&&_this5.inMode==='addNode'){// if for whatever reason the mode has changes (due to dataset change) disregard the callback
	_this5.body.data.nodes.getDataSet().add(finalizedData);_this5.showManipulatorToolbar();}});}else{throw new Error('The function for add does not support two arguments (data,callback)');this.showManipulatorToolbar();}}else{this.body.data.nodes.getDataSet().add(defaultData);this.showManipulatorToolbar();}}/**
	       * connect two nodes with a new edge.
	       *
	       * @private
	       */},{key:'_performAddEdge',value:function _performAddEdge(sourceNodeId,targetNodeId){var _this6=this;var defaultData={from:sourceNodeId,to:targetNodeId};if(typeof this.options.addEdge==='function'){if(this.options.addEdge.length===2){this.options.addEdge(defaultData,function(finalizedData){if(finalizedData!==null&&finalizedData!==undefined&&_this6.inMode==='addEdge'){// if for whatever reason the mode has changes (due to dataset change) disregard the callback
	_this6.body.data.edges.getDataSet().add(finalizedData);_this6.selectionHandler.unselectAll();_this6.showManipulatorToolbar();}});}else{throw new Error('The function for connect does not support two arguments (data,callback)');}}else{this.body.data.edges.getDataSet().add(defaultData);this.selectionHandler.unselectAll();this.showManipulatorToolbar();}}/**
	       * connect two nodes with a new edge.
	       *
	       * @private
	       */},{key:'_performEditEdge',value:function _performEditEdge(sourceNodeId,targetNodeId){var _this7=this;var defaultData={id:this.edgeBeingEditedId,from:sourceNodeId,to:targetNodeId};if(typeof this.options.editEdge==='function'){if(this.options.editEdge.length===2){this.options.editEdge(defaultData,function(finalizedData){if(finalizedData===null||finalizedData===undefined||_this7.inMode!=='editEdge'){// if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	_this7.body.edges[defaultData.id].updateEdgeType();_this7.body.emitter.emit('_redraw');}else{_this7.body.data.edges.getDataSet().update(finalizedData);_this7.selectionHandler.unselectAll();_this7.showManipulatorToolbar();}});}else{throw new Error('The function for edit does not support two arguments (data, callback)');}}else{this.body.data.edges.getDataSet().update(defaultData);this.selectionHandler.unselectAll();this.showManipulatorToolbar();}}}]);return ManipulationSystem;}();exports.default=ManipulationSystem;/***/},/* 116 *//***/function(module,exports){'use strict';Object.defineProperty(exports,"__esModule",{value:true});/**
	   * This object contains all possible options. It will check if the types are correct, if required if the option is one
	   * of the allowed values.
	   *
	   * __any__ means that the name of the property does not matter.
	   * __type__ is a required field for all objects and contains the allowed types of all objects
	   */var string='string';var boolean='boolean';var number='number';var array='array';var object='object';// should only be in a __type__ property
	var dom='dom';var any='any';var allOptions={configure:{enabled:{boolean:boolean},filter:{boolean:boolean,string:string,array:array,'function':'function'},container:{dom:dom},showButton:{boolean:boolean},__type__:{object:object,boolean:boolean,string:string,array:array,'function':'function'}},edges:{arrows:{to:{enabled:{boolean:boolean},scaleFactor:{number:number},type:{string:['arrow','circle']},__type__:{object:object,boolean:boolean}},middle:{enabled:{boolean:boolean},scaleFactor:{number:number},type:{string:['arrow','circle']},__type__:{object:object,boolean:boolean}},from:{enabled:{boolean:boolean},scaleFactor:{number:number},type:{string:['arrow','circle']},__type__:{object:object,boolean:boolean}},__type__:{string:['from','to','middle'],object:object}},arrowStrikethrough:{boolean:boolean},color:{color:{string:string},highlight:{string:string},hover:{string:string},inherit:{string:['from','to','both'],boolean:boolean},opacity:{number:number},__type__:{object:object,string:string}},dashes:{boolean:boolean,array:array},font:{color:{string:string},size:{number:number},// px
	face:{string:string},background:{string:string},strokeWidth:{number:number},// px
	strokeColor:{string:string},align:{string:['horizontal','top','middle','bottom']},__type__:{object:object,string:string}},hidden:{boolean:boolean},hoverWidth:{'function':'function',number:number},label:{string:string,'undefined':'undefined'},labelHighlightBold:{boolean:boolean},length:{number:number,'undefined':'undefined'},physics:{boolean:boolean},scaling:{min:{number:number},max:{number:number},label:{enabled:{boolean:boolean},min:{number:number},max:{number:number},maxVisible:{number:number},drawThreshold:{number:number},__type__:{object:object,boolean:boolean}},customScalingFunction:{'function':'function'},__type__:{object:object}},selectionWidth:{'function':'function',number:number},selfReferenceSize:{number:number},shadow:{enabled:{boolean:boolean},color:{string:string},size:{number:number},x:{number:number},y:{number:number},__type__:{object:object,boolean:boolean}},smooth:{enabled:{boolean:boolean},type:{string:['dynamic','continuous','discrete','diagonalCross','straightCross','horizontal','vertical','curvedCW','curvedCCW','cubicBezier']},roundness:{number:number},forceDirection:{string:['horizontal','vertical','none'],boolean:boolean},__type__:{object:object,boolean:boolean}},title:{string:string,'undefined':'undefined'},width:{number:number},value:{number:number,'undefined':'undefined'},__type__:{object:object}},groups:{useDefaultGroups:{boolean:boolean},__any__:'get from nodes, will be overwritten below',__type__:{object:object}},interaction:{dragNodes:{boolean:boolean},dragView:{boolean:boolean},hideEdgesOnDrag:{boolean:boolean},hideNodesOnDrag:{boolean:boolean},hover:{boolean:boolean},keyboard:{enabled:{boolean:boolean},speed:{x:{number:number},y:{number:number},zoom:{number:number},__type__:{object:object}},bindToWindow:{boolean:boolean},__type__:{object:object,boolean:boolean}},multiselect:{boolean:boolean},navigationButtons:{boolean:boolean},selectable:{boolean:boolean},selectConnectedEdges:{boolean:boolean},hoverConnectedEdges:{boolean:boolean},tooltipDelay:{number:number},zoomView:{boolean:boolean},__type__:{object:object}},layout:{randomSeed:{'undefined':'undefined',number:number},improvedLayout:{boolean:boolean},hierarchical:{enabled:{boolean:boolean},levelSeparation:{number:number},nodeSpacing:{number:number},treeSpacing:{number:number},blockShifting:{boolean:boolean},edgeMinimization:{boolean:boolean},parentCentralization:{boolean:boolean},direction:{string:['UD','DU','LR','RL']},// UD, DU, LR, RL
	sortMethod:{string:['hubsize','directed']},// hubsize, directed
	__type__:{object:object,boolean:boolean}},__type__:{object:object}},manipulation:{enabled:{boolean:boolean},initiallyActive:{boolean:boolean},addNode:{boolean:boolean,'function':'function'},addEdge:{boolean:boolean,'function':'function'},editNode:{'function':'function'},editEdge:{boolean:boolean,'function':'function'},deleteNode:{boolean:boolean,'function':'function'},deleteEdge:{boolean:boolean,'function':'function'},controlNodeStyle:'get from nodes, will be overwritten below',__type__:{object:object,boolean:boolean}},nodes:{borderWidth:{number:number},borderWidthSelected:{number:number,'undefined':'undefined'},brokenImage:{string:string,'undefined':'undefined'},color:{border:{string:string},background:{string:string},highlight:{border:{string:string},background:{string:string},__type__:{object:object,string:string}},hover:{border:{string:string},background:{string:string},__type__:{object:object,string:string}},__type__:{object:object,string:string}},fixed:{x:{boolean:boolean},y:{boolean:boolean},__type__:{object:object,boolean:boolean}},font:{align:{string:string},color:{string:string},size:{number:number},// px
	face:{string:string},background:{string:string},strokeWidth:{number:number},// px
	strokeColor:{string:string},__type__:{object:object,string:string}},group:{string:string,number:number,'undefined':'undefined'},hidden:{boolean:boolean},icon:{face:{string:string},code:{string:string},//'\uf007',
	size:{number:number},//50,
	color:{string:string},__type__:{object:object}},id:{string:string,number:number},image:{string:string,'undefined':'undefined'},// --> URL
	label:{string:string,'undefined':'undefined'},labelHighlightBold:{boolean:boolean},level:{number:number,'undefined':'undefined'},mass:{number:number},physics:{boolean:boolean},scaling:{min:{number:number},max:{number:number},label:{enabled:{boolean:boolean},min:{number:number},max:{number:number},maxVisible:{number:number},drawThreshold:{number:number},__type__:{object:object,boolean:boolean}},customScalingFunction:{'function':'function'},__type__:{object:object}},shadow:{enabled:{boolean:boolean},color:{string:string},size:{number:number},x:{number:number},y:{number:number},__type__:{object:object,boolean:boolean}},shape:{string:['ellipse','circle','database','box','text','image','circularImage','diamond','dot','star','triangle','triangleDown','square','icon']},shapeProperties:{borderDashes:{boolean:boolean,array:array},borderRadius:{number:number},interpolation:{boolean:boolean},useImageSize:{boolean:boolean},useBorderWithImage:{boolean:boolean},__type__:{object:object}},size:{number:number},title:{string:string,'undefined':'undefined'},value:{number:number,'undefined':'undefined'},x:{number:number},y:{number:number},__type__:{object:object}},physics:{enabled:{boolean:boolean},barnesHut:{gravitationalConstant:{number:number},centralGravity:{number:number},springLength:{number:number},springConstant:{number:number},damping:{number:number},avoidOverlap:{number:number},__type__:{object:object}},forceAtlas2Based:{gravitationalConstant:{number:number},centralGravity:{number:number},springLength:{number:number},springConstant:{number:number},damping:{number:number},avoidOverlap:{number:number},__type__:{object:object}},repulsion:{centralGravity:{number:number},springLength:{number:number},springConstant:{number:number},nodeDistance:{number:number},damping:{number:number},__type__:{object:object}},hierarchicalRepulsion:{centralGravity:{number:number},springLength:{number:number},springConstant:{number:number},nodeDistance:{number:number},damping:{number:number},__type__:{object:object}},maxVelocity:{number:number},minVelocity:{number:number},// px/s
	solver:{string:['barnesHut','repulsion','hierarchicalRepulsion','forceAtlas2Based']},stabilization:{enabled:{boolean:boolean},iterations:{number:number},// maximum number of iteration to stabilize
	updateInterval:{number:number},onlyDynamicEdges:{boolean:boolean},fit:{boolean:boolean},__type__:{object:object,boolean:boolean}},timestep:{number:number},adaptiveTimestep:{boolean:boolean},__type__:{object:object,boolean:boolean}},//globals :
	autoResize:{boolean:boolean},clickToUse:{boolean:boolean},locale:{string:string},locales:{__any__:{any:any},__type__:{object:object}},height:{string:string},width:{string:string},__type__:{object:object}};allOptions.groups.__any__=allOptions.nodes;allOptions.manipulation.controlNodeStyle=allOptions.nodes;var configureOptions={nodes:{borderWidth:[1,0,10,1],borderWidthSelected:[2,0,10,1],color:{border:['color','#2B7CE9'],background:['color','#97C2FC'],highlight:{border:['color','#2B7CE9'],background:['color','#D2E5FF']},hover:{border:['color','#2B7CE9'],background:['color','#D2E5FF']}},fixed:{x:false,y:false},font:{color:['color','#343434'],size:[14,0,100,1],// px
	face:['arial','verdana','tahoma'],background:['color','none'],strokeWidth:[0,0,50,1],// px
	strokeColor:['color','#ffffff']},//group: 'string',
	hidden:false,labelHighlightBold:true,//icon: {
	//  face: 'string',  //'FontAwesome',
	//  code: 'string',  //'\uf007',
	//  size: [50, 0, 200, 1],  //50,
	//  color: ['color','#2B7CE9']   //'#aa00ff'
	//},
	//image: 'string', // --> URL
	physics:true,scaling:{min:[10,0,200,1],max:[30,0,200,1],label:{enabled:false,min:[14,0,200,1],max:[30,0,200,1],maxVisible:[30,0,200,1],drawThreshold:[5,0,20,1]}},shadow:{enabled:false,color:'rgba(0,0,0,0.5)',size:[10,0,20,1],x:[5,-30,30,1],y:[5,-30,30,1]},shape:['ellipse','box','circle','database','diamond','dot','square','star','text','triangle','triangleDown'],shapeProperties:{borderDashes:false,borderRadius:[6,0,20,1],interpolation:true,useImageSize:false},size:[25,0,200,1]},edges:{arrows:{to:{enabled:false,scaleFactor:[1,0,3,0.05],type:'arrow'},middle:{enabled:false,scaleFactor:[1,0,3,0.05],type:'arrow'},from:{enabled:false,scaleFactor:[1,0,3,0.05],type:'arrow'}},arrowStrikethrough:true,color:{color:['color','#848484'],highlight:['color','#848484'],hover:['color','#848484'],inherit:['from','to','both',true,false],opacity:[1,0,1,0.05]},dashes:false,font:{color:['color','#343434'],size:[14,0,100,1],// px
	face:['arial','verdana','tahoma'],background:['color','none'],strokeWidth:[2,0,50,1],// px
	strokeColor:['color','#ffffff'],align:['horizontal','top','middle','bottom']},hidden:false,hoverWidth:[1.5,0,5,0.1],labelHighlightBold:true,physics:true,scaling:{min:[1,0,100,1],max:[15,0,100,1],label:{enabled:true,min:[14,0,200,1],max:[30,0,200,1],maxVisible:[30,0,200,1],drawThreshold:[5,0,20,1]}},selectionWidth:[1.5,0,5,0.1],selfReferenceSize:[20,0,200,1],shadow:{enabled:false,color:'rgba(0,0,0,0.5)',size:[10,0,20,1],x:[5,-30,30,1],y:[5,-30,30,1]},smooth:{enabled:true,type:['dynamic','continuous','discrete','diagonalCross','straightCross','horizontal','vertical','curvedCW','curvedCCW','cubicBezier'],forceDirection:['horizontal','vertical','none'],roundness:[0.5,0,1,0.05]},width:[1,0,30,1]},layout:{//randomSeed: [0, 0, 500, 1],
	//improvedLayout: true,
	hierarchical:{enabled:false,levelSeparation:[150,20,500,5],nodeSpacing:[100,20,500,5],treeSpacing:[200,20,500,5],blockShifting:true,edgeMinimization:true,parentCentralization:true,direction:['UD','DU','LR','RL'],// UD, DU, LR, RL
	sortMethod:['hubsize','directed']// hubsize, directed
	}},interaction:{dragNodes:true,dragView:true,hideEdgesOnDrag:false,hideNodesOnDrag:false,hover:false,keyboard:{enabled:false,speed:{x:[10,0,40,1],y:[10,0,40,1],zoom:[0.02,0,0.1,0.005]},bindToWindow:true},multiselect:false,navigationButtons:false,selectable:true,selectConnectedEdges:true,hoverConnectedEdges:true,tooltipDelay:[300,0,1000,25],zoomView:true},manipulation:{enabled:false,initiallyActive:false},physics:{enabled:true,barnesHut:{//theta: [0.5, 0.1, 1, 0.05],
	gravitationalConstant:[-2000,-30000,0,50],centralGravity:[0.3,0,10,0.05],springLength:[95,0,500,5],springConstant:[0.04,0,1.2,0.005],damping:[0.09,0,1,0.01],avoidOverlap:[0,0,1,0.01]},forceAtlas2Based:{//theta: [0.5, 0.1, 1, 0.05],
	gravitationalConstant:[-50,-500,0,1],centralGravity:[0.01,0,1,0.005],springLength:[95,0,500,5],springConstant:[0.08,0,1.2,0.005],damping:[0.4,0,1,0.01],avoidOverlap:[0,0,1,0.01]},repulsion:{centralGravity:[0.2,0,10,0.05],springLength:[200,0,500,5],springConstant:[0.05,0,1.2,0.005],nodeDistance:[100,0,500,5],damping:[0.09,0,1,0.01]},hierarchicalRepulsion:{centralGravity:[0.2,0,10,0.05],springLength:[100,0,500,5],springConstant:[0.01,0,1.2,0.005],nodeDistance:[120,0,500,5],damping:[0.09,0,1,0.01]},maxVelocity:[50,0,150,1],minVelocity:[0.1,0.01,0.5,0.01],solver:['barnesHut','forceAtlas2Based','repulsion','hierarchicalRepulsion'],timestep:[0.5,0.01,1,0.01]}};exports.allOptions=allOptions;exports.configureOptions=configureOptions;/***/},/* 117 *//***/function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();// distance finding algorithm
	var _FloydWarshall=__webpack_require__(118);var _FloydWarshall2=_interopRequireDefault(_FloydWarshall);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
	   * KamadaKawai positions the nodes initially based on
	   *
	   * "AN ALGORITHM FOR DRAWING GENERAL UNDIRECTED GRAPHS"
	   * -- Tomihisa KAMADA and Satoru KAWAI in 1989
	   *
	   * Possible optimizations in the distance calculation can be implemented.
	   */var KamadaKawai=function(){function KamadaKawai(body,edgeLength,edgeStrength){_classCallCheck(this,KamadaKawai);this.body=body;this.springLength=edgeLength;this.springConstant=edgeStrength;this.distanceSolver=new _FloydWarshall2.default();}/**
	     * Not sure if needed but can be used to update the spring length and spring constant
	     * @param options
	     */_createClass(KamadaKawai,[{key:"setOptions",value:function setOptions(options){if(options){if(options.springLength){this.springLength=options.springLength;}if(options.springConstant){this.springConstant=options.springConstant;}}}/**
	       * Position the system
	       * @param nodesArray
	       * @param edgesArray
	       */},{key:"solve",value:function solve(nodesArray,edgesArray){var ignoreClusters=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;// get distance matrix
	var D_matrix=this.distanceSolver.getDistances(this.body,nodesArray,edgesArray);// distance matrix
	// get the L Matrix
	this._createL_matrix(D_matrix);// get the K Matrix
	this._createK_matrix(D_matrix);// calculate positions
	var threshold=0.01;var innerThreshold=1;var iterations=0;var maxIterations=Math.max(1000,Math.min(10*this.body.nodeIndices.length,6000));var maxInnerIterations=5;var maxEnergy=1e9;var highE_nodeId=0,dE_dx=0,dE_dy=0,delta_m=0,subIterations=0;while(maxEnergy>threshold&&iterations<maxIterations){iterations+=1;var _getHighestEnergyNode2=this._getHighestEnergyNode(ignoreClusters);var _getHighestEnergyNode3=_slicedToArray(_getHighestEnergyNode2,4);highE_nodeId=_getHighestEnergyNode3[0];maxEnergy=_getHighestEnergyNode3[1];dE_dx=_getHighestEnergyNode3[2];dE_dy=_getHighestEnergyNode3[3];delta_m=maxEnergy;subIterations=0;while(delta_m>innerThreshold&&subIterations<maxInnerIterations){subIterations+=1;this._moveNode(highE_nodeId,dE_dx,dE_dy);var _getEnergy2=this._getEnergy(highE_nodeId);var _getEnergy3=_slicedToArray(_getEnergy2,3);delta_m=_getEnergy3[0];dE_dx=_getEnergy3[1];dE_dy=_getEnergy3[2];}}}/**
	       * get the node with the highest energy
	       * @returns {*[]}
	       * @private
	       */},{key:"_getHighestEnergyNode",value:function _getHighestEnergyNode(ignoreClusters){var nodesArray=this.body.nodeIndices;var nodes=this.body.nodes;var maxEnergy=0;var maxEnergyNodeId=nodesArray[0];var dE_dx_max=0,dE_dy_max=0;for(var nodeIdx=0;nodeIdx<nodesArray.length;nodeIdx++){var m=nodesArray[nodeIdx];// by not evaluating nodes with predefined positions we should only move nodes that have no positions.
	if(nodes[m].predefinedPosition===false||nodes[m].isCluster===true&&ignoreClusters===true||nodes[m].options.fixed.x===true||nodes[m].options.fixed.y===true){var _getEnergy4=this._getEnergy(m),_getEnergy5=_slicedToArray(_getEnergy4,3),delta_m=_getEnergy5[0],dE_dx=_getEnergy5[1],dE_dy=_getEnergy5[2];if(maxEnergy<delta_m){maxEnergy=delta_m;maxEnergyNodeId=m;dE_dx_max=dE_dx;dE_dy_max=dE_dy;}}}return[maxEnergyNodeId,maxEnergy,dE_dx_max,dE_dy_max];}/**
	       * calculate the energy of a single node
	       * @param m
	       * @returns {*[]}
	       * @private
	       */},{key:"_getEnergy",value:function _getEnergy(m){var nodesArray=this.body.nodeIndices;var nodes=this.body.nodes;var x_m=nodes[m].x;var y_m=nodes[m].y;var dE_dx=0;var dE_dy=0;for(var iIdx=0;iIdx<nodesArray.length;iIdx++){var i=nodesArray[iIdx];if(i!==m){var x_i=nodes[i].x;var y_i=nodes[i].y;var denominator=1.0/Math.sqrt(Math.pow(x_m-x_i,2)+Math.pow(y_m-y_i,2));dE_dx+=this.K_matrix[m][i]*(x_m-x_i-this.L_matrix[m][i]*(x_m-x_i)*denominator);dE_dy+=this.K_matrix[m][i]*(y_m-y_i-this.L_matrix[m][i]*(y_m-y_i)*denominator);}}var delta_m=Math.sqrt(Math.pow(dE_dx,2)+Math.pow(dE_dy,2));return[delta_m,dE_dx,dE_dy];}/**
	       * move the node based on it's energy
	       * the dx and dy are calculated from the linear system proposed by Kamada and Kawai
	       * @param m
	       * @param dE_dx
	       * @param dE_dy
	       * @private
	       */},{key:"_moveNode",value:function _moveNode(m,dE_dx,dE_dy){var nodesArray=this.body.nodeIndices;var nodes=this.body.nodes;var d2E_dx2=0;var d2E_dxdy=0;var d2E_dy2=0;var x_m=nodes[m].x;var y_m=nodes[m].y;for(var iIdx=0;iIdx<nodesArray.length;iIdx++){var i=nodesArray[iIdx];if(i!==m){var x_i=nodes[i].x;var y_i=nodes[i].y;var denominator=1.0/Math.pow(Math.pow(x_m-x_i,2)+Math.pow(y_m-y_i,2),1.5);d2E_dx2+=this.K_matrix[m][i]*(1-this.L_matrix[m][i]*Math.pow(y_m-y_i,2)*denominator);d2E_dxdy+=this.K_matrix[m][i]*(this.L_matrix[m][i]*(x_m-x_i)*(y_m-y_i)*denominator);d2E_dy2+=this.K_matrix[m][i]*(1-this.L_matrix[m][i]*Math.pow(x_m-x_i,2)*denominator);}}// make the variable names easier to make the solving of the linear system easier to read
	var A=d2E_dx2,B=d2E_dxdy,C=dE_dx,D=d2E_dy2,E=dE_dy;// solve the linear system for dx and dy
	var dy=(C/A+E/B)/(B/A-D/B);var dx=-(B*dy+C)/A;// move the node
	nodes[m].x+=dx;nodes[m].y+=dy;}/**
	       * Create the L matrix: edge length times shortest path
	       * @param D_matrix
	       * @private
	       */},{key:"_createL_matrix",value:function _createL_matrix(D_matrix){var nodesArray=this.body.nodeIndices;var edgeLength=this.springLength;this.L_matrix=[];for(var i=0;i<nodesArray.length;i++){this.L_matrix[nodesArray[i]]={};for(var j=0;j<nodesArray.length;j++){this.L_matrix[nodesArray[i]][nodesArray[j]]=edgeLength*D_matrix[nodesArray[i]][nodesArray[j]];}}}/**
	       * Create the K matrix: spring constants times shortest path
	       * @param D_matrix
	       * @private
	       */},{key:"_createK_matrix",value:function _createK_matrix(D_matrix){var nodesArray=this.body.nodeIndices;var edgeStrength=this.springConstant;this.K_matrix=[];for(var i=0;i<nodesArray.length;i++){this.K_matrix[nodesArray[i]]={};for(var j=0;j<nodesArray.length;j++){this.K_matrix[nodesArray[i]][nodesArray[j]]=edgeStrength*Math.pow(D_matrix[nodesArray[i]][nodesArray[j]],-2);}}}}]);return KamadaKawai;}();exports.default=KamadaKawai;/***/},/* 118 *//***/function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}/**
	   * Created by Alex on 10-Aug-15.
	   */var FloydWarshall=function(){function FloydWarshall(){_classCallCheck(this,FloydWarshall);}_createClass(FloydWarshall,[{key:"getDistances",value:function getDistances(body,nodesArray,edgesArray){var D_matrix={};var edges=body.edges;// prepare matrix with large numbers
	for(var i=0;i<nodesArray.length;i++){D_matrix[nodesArray[i]]={};D_matrix[nodesArray[i]]={};for(var j=0;j<nodesArray.length;j++){D_matrix[nodesArray[i]][nodesArray[j]]=i==j?0:1e9;D_matrix[nodesArray[i]][nodesArray[j]]=i==j?0:1e9;}}// put the weights for the edges in. This assumes unidirectionality.
	for(var _i=0;_i<edgesArray.length;_i++){var edge=edges[edgesArray[_i]];// edge has to be connected if it counts to the distances. If it is connected to inner clusters it will crash so we also check if it is in the D_matrix
	if(edge.connected===true&&D_matrix[edge.fromId]!==undefined&&D_matrix[edge.toId]!==undefined){D_matrix[edge.fromId][edge.toId]=1;D_matrix[edge.toId][edge.fromId]=1;}}var nodeCount=nodesArray.length;// Adapted FloydWarshall based on unidirectionality to greatly reduce complexity.
	for(var k=0;k<nodeCount;k++){for(var _i2=0;_i2<nodeCount-1;_i2++){for(var _j=_i2+1;_j<nodeCount;_j++){D_matrix[nodesArray[_i2]][nodesArray[_j]]=Math.min(D_matrix[nodesArray[_i2]][nodesArray[_j]],D_matrix[nodesArray[_i2]][nodesArray[k]]+D_matrix[nodesArray[k]][nodesArray[_j]]);D_matrix[nodesArray[_j]][nodesArray[_i2]]=D_matrix[nodesArray[_i2]][nodesArray[_j]];}}}return D_matrix;}}]);return FloydWarshall;}();exports.default=FloydWarshall;/***/},/* 119 *//***/function(module,exports){'use strict';/**
	   * Canvas shapes used by Network
	   */if(typeof CanvasRenderingContext2D!=='undefined'){/**
	     * Draw a circle shape
	     */CanvasRenderingContext2D.prototype.circle=function(x,y,r){this.beginPath();this.arc(x,y,r,0,2*Math.PI,false);this.closePath();};/**
	     * Draw a square shape
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r   size, width and height of the square
	     */CanvasRenderingContext2D.prototype.square=function(x,y,r){this.beginPath();this.rect(x-r,y-r,r*2,r*2);this.closePath();};/**
	     * Draw a triangle shape
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r   radius, half the length of the sides of the triangle
	     */CanvasRenderingContext2D.prototype.triangle=function(x,y,r){// http://en.wikipedia.org/wiki/Equilateral_triangle
	this.beginPath();// the change in radius and the offset is here to center the shape
	r*=1.15;y+=0.275*r;var s=r*2;var s2=s/2;var ir=Math.sqrt(3)/6*s;// radius of inner circle
	var h=Math.sqrt(s*s-s2*s2);// height
	this.moveTo(x,y-(h-ir));this.lineTo(x+s2,y+ir);this.lineTo(x-s2,y+ir);this.lineTo(x,y-(h-ir));this.closePath();};/**
	     * Draw a triangle shape in downward orientation
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r radius
	     */CanvasRenderingContext2D.prototype.triangleDown=function(x,y,r){// http://en.wikipedia.org/wiki/Equilateral_triangle
	this.beginPath();// the change in radius and the offset is here to center the shape
	r*=1.15;y-=0.275*r;var s=r*2;var s2=s/2;var ir=Math.sqrt(3)/6*s;// radius of inner circle
	var h=Math.sqrt(s*s-s2*s2);// height
	this.moveTo(x,y+(h-ir));this.lineTo(x+s2,y-ir);this.lineTo(x-s2,y-ir);this.lineTo(x,y+(h-ir));this.closePath();};/**
	     * Draw a star shape, a star with 5 points
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r   radius, half the length of the sides of the triangle
	     */CanvasRenderingContext2D.prototype.star=function(x,y,r){// http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
	this.beginPath();// the change in radius and the offset is here to center the shape
	r*=0.82;y+=0.1*r;for(var n=0;n<10;n++){var radius=n%2===0?r*1.3:r*0.5;this.lineTo(x+radius*Math.sin(n*2*Math.PI/10),y-radius*Math.cos(n*2*Math.PI/10));}this.closePath();};/**
	     * Draw a Diamond shape
	     * @param {Number} x horizontal center
	     * @param {Number} y vertical center
	     * @param {Number} r   radius, half the length of the sides of the triangle
	     */CanvasRenderingContext2D.prototype.diamond=function(x,y,r){// http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
	this.beginPath();this.lineTo(x,y+r);this.lineTo(x+r,y);this.lineTo(x,y-r);this.lineTo(x-r,y);this.closePath();};/**
	     * http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas
	     */CanvasRenderingContext2D.prototype.roundRect=function(x,y,w,h,r){var r2d=Math.PI/180;if(w-2*r<0){r=w/2;}//ensure that the radius isn't too large for x
	if(h-2*r<0){r=h/2;}//ensure that the radius isn't too large for y
	this.beginPath();this.moveTo(x+r,y);this.lineTo(x+w-r,y);this.arc(x+w-r,y+r,r,r2d*270,r2d*360,false);this.lineTo(x+w,y+h-r);this.arc(x+w-r,y+h-r,r,0,r2d*90,false);this.lineTo(x+r,y+h);this.arc(x+r,y+h-r,r,r2d*90,r2d*180,false);this.lineTo(x,y+r);this.arc(x+r,y+r,r,r2d*180,r2d*270,false);this.closePath();};/**
	     * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
	     */CanvasRenderingContext2D.prototype.ellipse=function(x,y,w,h){var kappa=.5522848,ox=w/2*kappa,// control point offset horizontal
	oy=h/2*kappa,// control point offset vertical
	xe=x+w,// x-end
	ye=y+h,// y-end
	xm=x+w/2,// x-middle
	ym=y+h/2;// y-middle
	this.beginPath();this.moveTo(x,ym);this.bezierCurveTo(x,ym-oy,xm-ox,y,xm,y);this.bezierCurveTo(xm+ox,y,xe,ym-oy,xe,ym);this.bezierCurveTo(xe,ym+oy,xm+ox,ye,xm,ye);this.bezierCurveTo(xm-ox,ye,x,ym+oy,x,ym);this.closePath();};/**
	     * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
	     */CanvasRenderingContext2D.prototype.database=function(x,y,w,h){var f=1/3;var wEllipse=w;var hEllipse=h*f;var kappa=.5522848,ox=wEllipse/2*kappa,// control point offset horizontal
	oy=hEllipse/2*kappa,// control point offset vertical
	xe=x+wEllipse,// x-end
	ye=y+hEllipse,// y-end
	xm=x+wEllipse/2,// x-middle
	ym=y+hEllipse/2,// y-middle
	ymb=y+(h-hEllipse/2),// y-midlle, bottom ellipse
	yeb=y+h;// y-end, bottom ellipse
	this.beginPath();this.moveTo(xe,ym);this.bezierCurveTo(xe,ym+oy,xm+ox,ye,xm,ye);this.bezierCurveTo(xm-ox,ye,x,ym+oy,x,ym);this.bezierCurveTo(x,ym-oy,xm-ox,y,xm,y);this.bezierCurveTo(xm+ox,y,xe,ym-oy,xe,ym);this.lineTo(xe,ymb);this.bezierCurveTo(xe,ymb+oy,xm+ox,yeb,xm,yeb);this.bezierCurveTo(xm-ox,yeb,x,ymb+oy,x,ymb);this.lineTo(x,ym);};/**
	     * Draw an arrow at the end of a line with the given angle.
	     */CanvasRenderingContext2D.prototype.arrowEndpoint=function(x,y,angle,length){// tail
	var xt=x-length*Math.cos(angle);var yt=y-length*Math.sin(angle);// inner tail
	var xi=x-length*0.9*Math.cos(angle);var yi=y-length*0.9*Math.sin(angle);// left
	var xl=xt+length/3*Math.cos(angle+0.5*Math.PI);var yl=yt+length/3*Math.sin(angle+0.5*Math.PI);// right
	var xr=xt+length/3*Math.cos(angle-0.5*Math.PI);var yr=yt+length/3*Math.sin(angle-0.5*Math.PI);this.beginPath();this.moveTo(x,y);this.lineTo(xl,yl);this.lineTo(xi,yi);this.lineTo(xr,yr);this.closePath();};/**
	     * Draw an circle an the end of an line with the given angle.
	     */CanvasRenderingContext2D.prototype.circleEndpoint=function(x,y,angle,length){var radius=length*0.4;var xc=x-radius*Math.cos(angle);var yc=y-radius*Math.sin(angle);this.circle(xc,yc,radius);};/**
	     * Sets up the dashedLine functionality for drawing
	     * Original code came from http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas
	     * @author David Jordan
	     * @date 2012-08-08
	     */CanvasRenderingContext2D.prototype.dashedLine=function(x,y,x2,y2,pattern){this.beginPath();this.moveTo(x,y);var patternLength=pattern.length;var dx=x2-x;var dy=y2-y;var slope=dy/dx;var distRemaining=Math.sqrt(dx*dx+dy*dy);var patternIndex=0;var draw=true;var xStep=0;var dashLength=pattern[0];while(distRemaining>=0.1){dashLength=pattern[patternIndex++%patternLength];if(dashLength>distRemaining){dashLength=distRemaining;}xStep=Math.sqrt(dashLength*dashLength/(1+slope*slope));xStep=dx<0?-xStep:xStep;x+=xStep;y+=slope*xStep;if(draw===true){this.lineTo(x,y);}else{this.moveTo(x,y);}distRemaining-=dashLength;draw=!draw;}};}/***/},/* 120 *//***/function(module,exports){'use strict';/**
	   * Parse a text source containing data in DOT language into a JSON object.
	   * The object contains two lists: one with nodes and one with edges.
	   *
	   * DOT language reference: http://www.graphviz.org/doc/info/lang.html
	   *
	   * DOT language attributes: http://graphviz.org/content/attrs
	   *
	   * @param {String} data     Text containing a graph in DOT-notation
	   * @return {Object} graph   An object containing two parameters:
	   *                          {Object[]} nodes
	   *                          {Object[]} edges
	   */function parseDOT(data){dot=data;return parseGraph();}// mapping of attributes from DOT (the keys) to vis.js (the values)
	var NODE_ATTR_MAPPING={'fontsize':'font.size','fontcolor':'font.color','labelfontcolor':'font.color','fontname':'font.face','color':['color.border','color.background'],'fillcolor':'color.background','tooltip':'title','labeltooltip':'title'};var EDGE_ATTR_MAPPING=Object.create(NODE_ATTR_MAPPING);EDGE_ATTR_MAPPING.color='color.color';// token types enumeration
	var TOKENTYPE={NULL:0,DELIMITER:1,IDENTIFIER:2,UNKNOWN:3};// map with all delimiters
	var DELIMITERS={'{':true,'}':true,'[':true,']':true,';':true,'=':true,',':true,'->':true,'--':true};var dot='';// current dot file
	var index=0;// current index in dot file
	var c='';// current token character in expr
	var token='';// current token
	var tokenType=TOKENTYPE.NULL;// type of the token
	/**
	   * Get the first character from the dot file.
	   * The character is stored into the char c. If the end of the dot file is
	   * reached, the function puts an empty string in c.
	   */function first(){index=0;c=dot.charAt(0);}/**
	   * Get the next character from the dot file.
	   * The character is stored into the char c. If the end of the dot file is
	   * reached, the function puts an empty string in c.
	   */function next(){index++;c=dot.charAt(index);}/**
	   * Preview the next character from the dot file.
	   * @return {String} cNext
	   */function nextPreview(){return dot.charAt(index+1);}/**
	   * Test whether given character is alphabetic or numeric
	   * @param {String} c
	   * @return {Boolean} isAlphaNumeric
	   */var regexAlphaNumeric=/[a-zA-Z_0-9.:#]/;function isAlphaNumeric(c){return regexAlphaNumeric.test(c);}/**
	   * Merge all options of object b into object b
	   * @param {Object} a
	   * @param {Object} b
	   * @return {Object} a
	   */function merge(a,b){if(!a){a={};}if(b){for(var name in b){if(b.hasOwnProperty(name)){a[name]=b[name];}}}return a;}/**
	   * Set a value in an object, where the provided parameter name can be a
	   * path with nested parameters. For example:
	   *
	   *     var obj = {a: 2};
	   *     setValue(obj, 'b.c', 3);     // obj = {a: 2, b: {c: 3}}
	   *
	   * @param {Object} obj
	   * @param {String} path  A parameter name or dot-separated parameter path,
	   *                      like "color.highlight.border".
	   * @param {*} value
	   */function setValue(obj,path,value){var keys=path.split('.');var o=obj;while(keys.length){var key=keys.shift();if(keys.length){// this isn't the end point
	if(!o[key]){o[key]={};}o=o[key];}else{// this is the end point
	o[key]=value;}}}/**
	   * Add a node to a graph object. If there is already a node with
	   * the same id, their attributes will be merged.
	   * @param {Object} graph
	   * @param {Object} node
	   */function addNode(graph,node){var i,len;var current=null;// find root graph (in case of subgraph)
	var graphs=[graph];// list with all graphs from current graph to root graph
	var root=graph;while(root.parent){graphs.push(root.parent);root=root.parent;}// find existing node (at root level) by its id
	if(root.nodes){for(i=0,len=root.nodes.length;i<len;i++){if(node.id===root.nodes[i].id){current=root.nodes[i];break;}}}if(!current){// this is a new node
	current={id:node.id};if(graph.node){// clone default attributes
	current.attr=merge(current.attr,graph.node);}}// add node to this (sub)graph and all its parent graphs
	for(i=graphs.length-1;i>=0;i--){var g=graphs[i];if(!g.nodes){g.nodes=[];}if(g.nodes.indexOf(current)===-1){g.nodes.push(current);}}// merge attributes
	if(node.attr){current.attr=merge(current.attr,node.attr);}}/**
	   * Add an edge to a graph object
	   * @param {Object} graph
	   * @param {Object} edge
	   */function addEdge(graph,edge){if(!graph.edges){graph.edges=[];}graph.edges.push(edge);if(graph.edge){var attr=merge({},graph.edge);// clone default attributes
	edge.attr=merge(attr,edge.attr);// merge attributes
	}}/**
	   * Create an edge to a graph object
	   * @param {Object} graph
	   * @param {String | Number | Object} from
	   * @param {String | Number | Object} to
	   * @param {String} type
	   * @param {Object | null} attr
	   * @return {Object} edge
	   */function createEdge(graph,from,to,type,attr){var edge={from:from,to:to,type:type};if(graph.edge){edge.attr=merge({},graph.edge);// clone default attributes
	}edge.attr=merge(edge.attr||{},attr);// merge attributes
	return edge;}/**
	   * Get next token in the current dot file.
	   * The token and token type are available as token and tokenType
	   */function getToken(){tokenType=TOKENTYPE.NULL;token='';// skip over whitespaces
	while(c===' '||c==='\t'||c==='\n'||c==='\r'){// space, tab, enter
	next();}do{var isComment=false;// skip comment
	if(c==='#'){// find the previous non-space character
	var i=index-1;while(dot.charAt(i)===' '||dot.charAt(i)==='\t'){i--;}if(dot.charAt(i)==='\n'||dot.charAt(i)===''){// the # is at the start of a line, this is indeed a line comment
	while(c!=''&&c!='\n'){next();}isComment=true;}}if(c==='/'&&nextPreview()==='/'){// skip line comment
	while(c!=''&&c!='\n'){next();}isComment=true;}if(c==='/'&&nextPreview()==='*'){// skip block comment
	while(c!=''){if(c==='*'&&nextPreview()==='/'){// end of block comment found. skip these last two characters
	next();next();break;}else{next();}}isComment=true;}// skip over whitespaces
	while(c===' '||c==='\t'||c==='\n'||c==='\r'){// space, tab, enter
	next();}}while(isComment);// check for end of dot file
	if(c===''){// token is still empty
	tokenType=TOKENTYPE.DELIMITER;return;}// check for delimiters consisting of 2 characters
	var c2=c+nextPreview();if(DELIMITERS[c2]){tokenType=TOKENTYPE.DELIMITER;token=c2;next();next();return;}// check for delimiters consisting of 1 character
	if(DELIMITERS[c]){tokenType=TOKENTYPE.DELIMITER;token=c;next();return;}// check for an identifier (number or string)
	// TODO: more precise parsing of numbers/strings (and the port separator ':')
	if(isAlphaNumeric(c)||c==='-'){token+=c;next();while(isAlphaNumeric(c)){token+=c;next();}if(token==='false'){token=false;// convert to boolean
	}else if(token==='true'){token=true;// convert to boolean
	}else if(!isNaN(Number(token))){token=Number(token);// convert to number
	}tokenType=TOKENTYPE.IDENTIFIER;return;}// check for a string enclosed by double quotes
	if(c==='"'){next();while(c!=''&&(c!='"'||c==='"'&&nextPreview()==='"')){token+=c;if(c==='"'){// skip the escape character
	next();}next();}if(c!='"'){throw newSyntaxError('End of string " expected');}next();tokenType=TOKENTYPE.IDENTIFIER;return;}// something unknown is found, wrong characters, a syntax error
	tokenType=TOKENTYPE.UNKNOWN;while(c!=''){token+=c;next();}throw new SyntaxError('Syntax error in part "'+chop(token,30)+'"');}/**
	   * Parse a graph.
	   * @returns {Object} graph
	   */function parseGraph(){var graph={};first();getToken();// optional strict keyword
	if(token==='strict'){graph.strict=true;getToken();}// graph or digraph keyword
	if(token==='graph'||token==='digraph'){graph.type=token;getToken();}// optional graph id
	if(tokenType===TOKENTYPE.IDENTIFIER){graph.id=token;getToken();}// open angle bracket
	if(token!='{'){throw newSyntaxError('Angle bracket { expected');}getToken();// statements
	parseStatements(graph);// close angle bracket
	if(token!='}'){throw newSyntaxError('Angle bracket } expected');}getToken();// end of file
	if(token!==''){throw newSyntaxError('End of file expected');}getToken();// remove temporary default options
	delete graph.node;delete graph.edge;delete graph.graph;return graph;}/**
	   * Parse a list with statements.
	   * @param {Object} graph
	   */function parseStatements(graph){while(token!==''&&token!='}'){parseStatement(graph);if(token===';'){getToken();}}}/**
	   * Parse a single statement. Can be a an attribute statement, node
	   * statement, a series of node statements and edge statements, or a
	   * parameter.
	   * @param {Object} graph
	   */function parseStatement(graph){// parse subgraph
	var subgraph=parseSubgraph(graph);if(subgraph){// edge statements
	parseEdge(graph,subgraph);return;}// parse an attribute statement
	var attr=parseAttributeStatement(graph);if(attr){return;}// parse node
	if(tokenType!=TOKENTYPE.IDENTIFIER){throw newSyntaxError('Identifier expected');}var id=token;// id can be a string or a number
	getToken();if(token==='='){// id statement
	getToken();if(tokenType!=TOKENTYPE.IDENTIFIER){throw newSyntaxError('Identifier expected');}graph[id]=token;getToken();// TODO: implement comma separated list with "a_list: ID=ID [','] [a_list] "
	}else{parseNodeStatement(graph,id);}}/**
	   * Parse a subgraph
	   * @param {Object} graph    parent graph object
	   * @return {Object | null} subgraph
	   */function parseSubgraph(graph){var subgraph=null;// optional subgraph keyword
	if(token==='subgraph'){subgraph={};subgraph.type='subgraph';getToken();// optional graph id
	if(tokenType===TOKENTYPE.IDENTIFIER){subgraph.id=token;getToken();}}// open angle bracket
	if(token==='{'){getToken();if(!subgraph){subgraph={};}subgraph.parent=graph;subgraph.node=graph.node;subgraph.edge=graph.edge;subgraph.graph=graph.graph;// statements
	parseStatements(subgraph);// close angle bracket
	if(token!='}'){throw newSyntaxError('Angle bracket } expected');}getToken();// remove temporary default options
	delete subgraph.node;delete subgraph.edge;delete subgraph.graph;delete subgraph.parent;// register at the parent graph
	if(!graph.subgraphs){graph.subgraphs=[];}graph.subgraphs.push(subgraph);}return subgraph;}/**
	   * parse an attribute statement like "node [shape=circle fontSize=16]".
	   * Available keywords are 'node', 'edge', 'graph'.
	   * The previous list with default attributes will be replaced
	   * @param {Object} graph
	   * @returns {String | null} keyword Returns the name of the parsed attribute
	   *                                  (node, edge, graph), or null if nothing
	   *                                  is parsed.
	   */function parseAttributeStatement(graph){// attribute statements
	if(token==='node'){getToken();// node attributes
	graph.node=parseAttributeList();return'node';}else if(token==='edge'){getToken();// edge attributes
	graph.edge=parseAttributeList();return'edge';}else if(token==='graph'){getToken();// graph attributes
	graph.graph=parseAttributeList();return'graph';}return null;}/**
	   * parse a node statement
	   * @param {Object} graph
	   * @param {String | Number} id
	   */function parseNodeStatement(graph,id){// node statement
	var node={id:id};var attr=parseAttributeList();if(attr){node.attr=attr;}addNode(graph,node);// edge statements
	parseEdge(graph,id);}/**
	   * Parse an edge or a series of edges
	   * @param {Object} graph
	   * @param {String | Number} from        Id of the from node
	   */function parseEdge(graph,from){while(token==='->'||token==='--'){var to;var type=token;getToken();var subgraph=parseSubgraph(graph);if(subgraph){to=subgraph;}else{if(tokenType!=TOKENTYPE.IDENTIFIER){throw newSyntaxError('Identifier or subgraph expected');}to=token;addNode(graph,{id:to});getToken();}// parse edge attributes
	var attr=parseAttributeList();// create edge
	var edge=createEdge(graph,from,to,type,attr);addEdge(graph,edge);from=to;}}/**
	   * Parse a set with attributes,
	   * for example [label="1.000", shape=solid]
	   * @return {Object | null} attr
	   */function parseAttributeList(){var attr=null;while(token==='['){getToken();attr={};while(token!==''&&token!=']'){if(tokenType!=TOKENTYPE.IDENTIFIER){throw newSyntaxError('Attribute name expected');}var name=token;getToken();if(token!='='){throw newSyntaxError('Equal sign = expected');}getToken();if(tokenType!=TOKENTYPE.IDENTIFIER){throw newSyntaxError('Attribute value expected');}var value=token;setValue(attr,name,value);// name can be a path
	getToken();if(token==','){getToken();}}if(token!=']'){throw newSyntaxError('Bracket ] expected');}getToken();}return attr;}/**
	   * Create a syntax error with extra information on current token and index.
	   * @param {String} message
	   * @returns {SyntaxError} err
	   */function newSyntaxError(message){return new SyntaxError(message+', got "'+chop(token,30)+'" (char '+index+')');}/**
	   * Chop off text after a maximum length
	   * @param {String} text
	   * @param {Number} maxLength
	   * @returns {String}
	   */function chop(text,maxLength){return text.length<=maxLength?text:text.substr(0,27)+'...';}/**
	   * Execute a function fn for each pair of elements in two arrays
	   * @param {Array | *} array1
	   * @param {Array | *} array2
	   * @param {function} fn
	   */function forEach2(array1,array2,fn){if(Array.isArray(array1)){array1.forEach(function(elem1){if(Array.isArray(array2)){array2.forEach(function(elem2){fn(elem1,elem2);});}else{fn(elem1,array2);}});}else{if(Array.isArray(array2)){array2.forEach(function(elem2){fn(array1,elem2);});}else{fn(array1,array2);}}}/**
	   * Set a nested property on an object
	   * When nested objects are missing, they will be created.
	   * For example setProp({}, 'font.color', 'red') will return {font: {color: 'red'}}
	   * @param {Object} object
	   * @param {string} path   A dot separated string like 'font.color'
	   * @param {*} value       Value for the property
	   * @return {Object} Returns the original object, allows for chaining.
	   */function setProp(object,path,value){var names=path.split('.');var prop=names.pop();// traverse over the nested objects
	var obj=object;for(var i=0;i<names.length;i++){var name=names[i];if(!(name in obj)){obj[name]={};}obj=obj[name];}// set the property value
	obj[prop]=value;return object;}/**
	   * Convert an object with DOT attributes to their vis.js equivalents.
	   * @param {Object} attr     Object with DOT attributes
	   * @param {Object} mapping
	   * @return {Object}         Returns an object with vis.js attributes
	   */function convertAttr(attr,mapping){var converted={};for(var prop in attr){if(attr.hasOwnProperty(prop)){var visProp=mapping[prop];if(Array.isArray(visProp)){visProp.forEach(function(visPropI){setProp(converted,visPropI,attr[prop]);});}else if(typeof visProp==='string'){setProp(converted,visProp,attr[prop]);}else{setProp(converted,prop,attr[prop]);}}}return converted;}/**
	   * Convert a string containing a graph in DOT language into a map containing
	   * with nodes and edges in the format of graph.
	   * @param {String} data         Text containing a graph in DOT-notation
	   * @return {Object} graphData
	   */function DOTToGraph(data){// parse the DOT file
	var dotData=parseDOT(data);var graphData={nodes:[],edges:[],options:{}};// copy the nodes
	if(dotData.nodes){dotData.nodes.forEach(function(dotNode){var graphNode={id:dotNode.id,label:String(dotNode.label||dotNode.id)};merge(graphNode,convertAttr(dotNode.attr,NODE_ATTR_MAPPING));if(graphNode.image){graphNode.shape='image';}graphData.nodes.push(graphNode);});}// copy the edges
	if(dotData.edges){/**
	       * Convert an edge in DOT format to an edge with VisGraph format
	       * @param {Object} dotEdge
	       * @returns {Object} graphEdge
	       */var convertEdge=function convertEdge(dotEdge){var graphEdge={from:dotEdge.from,to:dotEdge.to};merge(graphEdge,convertAttr(dotEdge.attr,EDGE_ATTR_MAPPING));graphEdge.arrows=dotEdge.type==='->'?'to':undefined;return graphEdge;};dotData.edges.forEach(function(dotEdge){var from,to;if(dotEdge.from instanceof Object){from=dotEdge.from.nodes;}else{from={id:dotEdge.from};}// TODO: support of solid/dotted/dashed edges (attr = 'style')
	// TODO: support for attributes 'dir' and 'arrowhead' (edge arrows)
	if(dotEdge.to instanceof Object){to=dotEdge.to.nodes;}else{to={id:dotEdge.to};}if(dotEdge.from instanceof Object&&dotEdge.from.edges){dotEdge.from.edges.forEach(function(subEdge){var graphEdge=convertEdge(subEdge);graphData.edges.push(graphEdge);});}forEach2(from,to,function(from,to){var subEdge=createEdge(graphData,from.id,to.id,dotEdge.type,dotEdge.attr);var graphEdge=convertEdge(subEdge);graphData.edges.push(graphEdge);});if(dotEdge.to instanceof Object&&dotEdge.to.edges){dotEdge.to.edges.forEach(function(subEdge){var graphEdge=convertEdge(subEdge);graphData.edges.push(graphEdge);});}});}// copy the options
	if(dotData.attr){graphData.options=dotData.attr;}return graphData;}// exports
	exports.parseDOT=parseDOT;exports.DOTToGraph=DOTToGraph;/***/},/* 121 *//***/function(module,exports){'use strict';function parseGephi(gephiJSON,optionsObj){var edges=[];var nodes=[];var options={edges:{inheritColor:false},nodes:{fixed:false,parseColor:false}};if(optionsObj!==undefined){if(optionsObj.fixed!==undefined){options.nodes.fixed=optionsObj.fixed;}if(optionsObj.parseColor!==undefined){options.nodes.parseColor=optionsObj.parseColor;}if(optionsObj.inheritColor!==undefined){options.edges.inheritColor=optionsObj.inheritColor;}}var gEdges=gephiJSON.edges;var gNodes=gephiJSON.nodes;for(var i=0;i<gEdges.length;i++){var edge={};var gEdge=gEdges[i];edge['id']=gEdge.id;edge['from']=gEdge.source;edge['to']=gEdge.target;edge['attributes']=gEdge.attributes;edge['label']=gEdge.label;edge['title']=gEdge.attributes!==undefined?gEdge.attributes.title:undefined;if(gEdge['type']==='Directed'){edge['arrows']='to';}//    edge['value'] = gEdge.attributes !== undefined ? gEdge.attributes.Weight : undefined;
	//    edge['width'] = edge['value'] !== undefined ? undefined : edgegEdge.size;
	if(gEdge.color&&options.inheritColor===false){edge['color']=gEdge.color;}edges.push(edge);}for(var i=0;i<gNodes.length;i++){var node={};var gNode=gNodes[i];node['id']=gNode.id;node['attributes']=gNode.attributes;node['title']=gNode.title;node['x']=gNode.x;node['y']=gNode.y;node['label']=gNode.label;node['title']=gNode.attributes!==undefined?gNode.attributes.title:undefined;if(options.nodes.parseColor===true){node['color']=gNode.color;}else{node['color']=gNode.color!==undefined?{background:gNode.color,border:gNode.color,highlight:{background:gNode.color,border:gNode.color},hover:{background:gNode.color,border:gNode.color}}:undefined;}node['size']=gNode.size;node['fixed']=options.nodes.fixed&&gNode.x!==undefined&&gNode.y!==undefined;nodes.push(node);}return{nodes:nodes,edges:edges};}exports.parseGephi=parseGephi;/***/},/* 122 *//***/function(module,exports){'use strict';// English
	exports['en']={edit:'Edit',del:'Delete selected',back:'Back',addNode:'Add Node',addEdge:'Add Edge',editNode:'Edit Node',editEdge:'Edit Edge',addDescription:'Click in an empty space to place a new node.',edgeDescription:'Click on a node and drag the edge to another node to connect them.',editEdgeDescription:'Click on the control points and drag them to a node to connect to it.',createEdgeError:'Cannot link edges to a cluster.',deleteClusterError:'Clusters cannot be deleted.',editClusterError:'Clusters cannot be edited.'};exports['en_EN']=exports['en'];exports['en_US']=exports['en'];// German
	exports['de']={edit:'Editieren',del:'L\xF6sche Auswahl',back:'Zur\xFCck',addNode:'Knoten hinzuf\xFCgen',addEdge:'Kante hinzuf\xFCgen',editNode:'Knoten editieren',editEdge:'Kante editieren',addDescription:'Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.',edgeDescription:'Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.',editEdgeDescription:'Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.',createEdgeError:'Es ist nicht m\xF6glich, Kanten mit Clustern zu verbinden.',deleteClusterError:'Cluster k\xF6nnen nicht gel\xF6scht werden.',editClusterError:'Cluster k\xF6nnen nicht editiert werden.'};exports['de_DE']=exports['de'];// Spanish
	exports['es']={edit:'Editar',del:'Eliminar selecci\xF3n',back:'\xC1tras',addNode:'A\xF1adir nodo',addEdge:'A\xF1adir arista',editNode:'Editar nodo',editEdge:'Editar arista',addDescription:'Haga clic en un lugar vac\xEDo para colocar un nuevo nodo.',edgeDescription:'Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.',editEdgeDescription:'Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.',createEdgeError:'No se puede conectar una arista a un grupo.',deleteClusterError:'No es posible eliminar grupos.',editClusterError:'No es posible editar grupos.'};exports['es_ES']=exports['es'];//Italiano
	exports['it']={edit:'Modifica',del:'Cancella la selezione',back:'Indietro',addNode:'Aggiungi un nodo',addEdge:'Aggiungi un vertice',editNode:'Modifica il nodo',editEdge:'Modifica il vertice',addDescription:'Clicca per aggiungere un nuovo nodo',edgeDescription:'Clicca su un nodo e trascinalo ad un altro nodo per connetterli.',editEdgeDescription:'Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.',createEdgeError:'Non si possono collegare vertici ad un cluster',deleteClusterError:'I cluster non possono essere cancellati',editClusterError:'I clusters non possono essere modificati.'};exports['it_IT']=exports['it'];// Dutch
	exports['nl']={edit:'Wijzigen',del:'Selectie verwijderen',back:'Terug',addNode:'Node toevoegen',addEdge:'Link toevoegen',editNode:'Node wijzigen',editEdge:'Link wijzigen',addDescription:'Klik op een leeg gebied om een nieuwe node te maken.',edgeDescription:'Klik op een node en sleep de link naar een andere node om ze te verbinden.',editEdgeDescription:'Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.',createEdgeError:'Kan geen link maken naar een cluster.',deleteClusterError:'Clusters kunnen niet worden verwijderd.',editClusterError:'Clusters kunnen niet worden aangepast.'};exports['nl_NL']=exports['nl'];exports['nl_BE']=exports['nl'];// Portuguese Brazil
	exports['pt-br']={edit:'Editar',del:'Remover selecionado',back:'Voltar',addNode:'Adicionar nó',addEdge:'Adicionar aresta',editNode:'Editar nó',editEdge:'Editar aresta',addDescription:'Clique em um espaço em branco para adicionar um novo nó',edgeDescription:'Clique em um nó e arraste a aresta até outro nó para conectá-los',editEdgeDescription:'Clique nos pontos de controle e os arraste para um nó para conectá-los',createEdgeError:'Não foi possível linkar arestas a um cluster.',deleteClusterError:'Clusters não puderam ser removidos.',editClusterError:'Clusters não puderam ser editados.'};exports['pt-BR']=exports['pt-br'];exports['pt_BR']=exports['pt-br'];exports['pt_br']=exports['pt-br'];// Russian
	exports['ru']={edit:'Редактировать',del:'Удалить выбранное',back:'Назад',addNode:'Добавить узел',addEdge:'Добавить ребро',editNode:'Редактировать узел',editEdge:'Редактировать ребро',addDescription:'Кликните в свободное место, чтобы добавить новый узел.',edgeDescription:'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',editEdgeDescription:'Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.',createEdgeError:'Невозможно соединить ребра в кластер.',deleteClusterError:'Кластеры не могут быть удалены',editClusterError:'Кластеры недоступны для редактирования.'};exports['ru_RU']=exports['ru'];/***/}/******/]));});;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)(module)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";

	/*** IMPORTS FROM imports-loader ***/
	var define = false;

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*** IMPORTS FROM imports-loader ***/
	var define = false;

	/*!
	 * jQuery JavaScript Library v3.1.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-09-22T22:30Z
	 */
	(function (global, factory) {

		"use strict";

		if (( false ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ? factory(global, true) : function (w) {
				if (!w.document) {
					throw new Error("jQuery requires a window with a document");
				}
				return factory(w);
			};
		} else {
			factory(global);
		}

		// Pass this if window is not defined yet
	})(typeof window !== "undefined" ? window : undefined, function (window, noGlobal) {

		// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
		// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
		// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
		// enough that all such attempts are guarded in a try block.
		"use strict";

		var arr = [];

		var document = window.document;

		var getProto = Object.getPrototypeOf;

		var _slice = arr.slice;

		var concat = arr.concat;

		var push = arr.push;

		var indexOf = arr.indexOf;

		var class2type = {};

		var toString = class2type.toString;

		var hasOwn = class2type.hasOwnProperty;

		var fnToString = hasOwn.toString;

		var ObjectFunctionString = fnToString.call(Object);

		var support = {};

		function DOMEval(code, doc) {
			doc = doc || document;

			var script = doc.createElement("script");

			script.text = code;
			doc.head.appendChild(script).parentNode.removeChild(script);
		}
		/* global Symbol */
		// Defining this global in .eslintrc.json would create a danger of using the global
		// unguarded in another place, it seems safer to define global only for this module


		var version = "3.1.1",


		// Define a local copy of jQuery
		jQuery = function jQuery(selector, context) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init(selector, context);
		},


		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		    rdashAlpha = /-([a-z])/g,


		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function fcamelCase(all, letter) {
			return letter.toUpperCase();
		};

		jQuery.fn = jQuery.prototype = {

			// The current version of jQuery being used
			jquery: version,

			constructor: jQuery,

			// The default length of a jQuery object is 0
			length: 0,

			toArray: function toArray() {
				return _slice.call(this);
			},

			// Get the Nth element in the matched element set OR
			// Get the whole matched element set as a clean array
			get: function get(num) {

				// Return all the elements in a clean array
				if (num == null) {
					return _slice.call(this);
				}

				// Return just the one element from the set
				return num < 0 ? this[num + this.length] : this[num];
			},

			// Take an array of elements and push it onto the stack
			// (returning the new matched element set)
			pushStack: function pushStack(elems) {

				// Build a new jQuery matched element set
				var ret = jQuery.merge(this.constructor(), elems);

				// Add the old object onto the stack (as a reference)
				ret.prevObject = this;

				// Return the newly-formed element set
				return ret;
			},

			// Execute a callback for every element in the matched set.
			each: function each(callback) {
				return jQuery.each(this, callback);
			},

			map: function map(callback) {
				return this.pushStack(jQuery.map(this, function (elem, i) {
					return callback.call(elem, i, elem);
				}));
			},

			slice: function slice() {
				return this.pushStack(_slice.apply(this, arguments));
			},

			first: function first() {
				return this.eq(0);
			},

			last: function last() {
				return this.eq(-1);
			},

			eq: function eq(i) {
				var len = this.length,
				    j = +i + (i < 0 ? len : 0);
				return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
			},

			end: function end() {
				return this.prevObject || this.constructor();
			},

			// For internal use only.
			// Behaves like an Array's method, not like a jQuery method.
			push: push,
			sort: arr.sort,
			splice: arr.splice
		};

		jQuery.extend = jQuery.fn.extend = function () {
			var options,
			    name,
			    src,
			    copy,
			    copyIsArray,
			    clone,
			    target = arguments[0] || {},
			    i = 1,
			    length = arguments.length,
			    deep = false;

			// Handle a deep copy situation
			if (typeof target === "boolean") {
				deep = target;

				// Skip the boolean and the target
				target = arguments[i] || {};
				i++;
			}

			// Handle case when target is a string or something (possible in deep copy)
			if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
				target = {};
			}

			// Extend jQuery itself if only one argument is passed
			if (i === length) {
				target = this;
				i--;
			}

			for (; i < length; i++) {

				// Only deal with non-null/undefined values
				if ((options = arguments[i]) != null) {

					// Extend the base object
					for (name in options) {
						src = target[name];
						copy = options[name];

						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {

							if (copyIsArray) {
								copyIsArray = false;
								clone = src && jQuery.isArray(src) ? src : [];
							} else {
								clone = src && jQuery.isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							target[name] = jQuery.extend(deep, clone, copy);

							// Don't bring in undefined values
						} else if (copy !== undefined) {
							target[name] = copy;
						}
					}
				}
			}

			// Return the modified object
			return target;
		};

		jQuery.extend({

			// Unique for each copy of jQuery on the page
			expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

			// Assume jQuery is ready without the ready module
			isReady: true,

			error: function error(msg) {
				throw new Error(msg);
			},

			noop: function noop() {},

			isFunction: function isFunction(obj) {
				return jQuery.type(obj) === "function";
			},

			isArray: Array.isArray,

			isWindow: function isWindow(obj) {
				return obj != null && obj === obj.window;
			},

			isNumeric: function isNumeric(obj) {

				// As of jQuery 3.0, isNumeric is limited to
				// strings and numbers (primitives or objects)
				// that can be coerced to finite numbers (gh-2662)
				var type = jQuery.type(obj);
				return (type === "number" || type === "string") &&

				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN(obj - parseFloat(obj));
			},

			isPlainObject: function isPlainObject(obj) {
				var proto, Ctor;

				// Detect obvious negatives
				// Use toString instead of jQuery.type to catch host objects
				if (!obj || toString.call(obj) !== "[object Object]") {
					return false;
				}

				proto = getProto(obj);

				// Objects with no prototype (e.g., `Object.create( null )`) are plain
				if (!proto) {
					return true;
				}

				// Objects with prototype are plain iff they were constructed by a global Object function
				Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
				return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
			},

			isEmptyObject: function isEmptyObject(obj) {

				/* eslint-disable no-unused-vars */
				// See https://github.com/eslint/eslint/issues/6125
				var name;

				for (name in obj) {
					return false;
				}
				return true;
			},

			type: function type(obj) {
				if (obj == null) {
					return obj + "";
				}

				// Support: Android <=2.3 only (functionish RegExp)
				return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
			},

			// Evaluates a script in a global context
			globalEval: function globalEval(code) {
				DOMEval(code);
			},

			// Convert dashed to camelCase; used by the css and data modules
			// Support: IE <=9 - 11, Edge 12 - 13
			// Microsoft forgot to hump their vendor prefix (#9572)
			camelCase: function camelCase(string) {
				return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
			},

			nodeName: function nodeName(elem, name) {
				return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
			},

			each: function each(obj, callback) {
				var length,
				    i = 0;

				if (isArrayLike(obj)) {
					length = obj.length;
					for (; i < length; i++) {
						if (callback.call(obj[i], i, obj[i]) === false) {
							break;
						}
					}
				} else {
					for (i in obj) {
						if (callback.call(obj[i], i, obj[i]) === false) {
							break;
						}
					}
				}

				return obj;
			},

			// Support: Android <=4.0 only
			trim: function trim(text) {
				return text == null ? "" : (text + "").replace(rtrim, "");
			},

			// results is for internal usage only
			makeArray: function makeArray(arr, results) {
				var ret = results || [];

				if (arr != null) {
					if (isArrayLike(Object(arr))) {
						jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
					} else {
						push.call(ret, arr);
					}
				}

				return ret;
			},

			inArray: function inArray(elem, arr, i) {
				return arr == null ? -1 : indexOf.call(arr, elem, i);
			},

			// Support: Android <=4.0 only, PhantomJS 1 only
			// push.apply(_, arraylike) throws on ancient WebKit
			merge: function merge(first, second) {
				var len = +second.length,
				    j = 0,
				    i = first.length;

				for (; j < len; j++) {
					first[i++] = second[j];
				}

				first.length = i;

				return first;
			},

			grep: function grep(elems, callback, invert) {
				var callbackInverse,
				    matches = [],
				    i = 0,
				    length = elems.length,
				    callbackExpect = !invert;

				// Go through the array, only saving the items
				// that pass the validator function
				for (; i < length; i++) {
					callbackInverse = !callback(elems[i], i);
					if (callbackInverse !== callbackExpect) {
						matches.push(elems[i]);
					}
				}

				return matches;
			},

			// arg is for internal usage only
			map: function map(elems, callback, arg) {
				var length,
				    value,
				    i = 0,
				    ret = [];

				// Go through the array, translating each of the items to their new values
				if (isArrayLike(elems)) {
					length = elems.length;
					for (; i < length; i++) {
						value = callback(elems[i], i, arg);

						if (value != null) {
							ret.push(value);
						}
					}

					// Go through every key on the object,
				} else {
					for (i in elems) {
						value = callback(elems[i], i, arg);

						if (value != null) {
							ret.push(value);
						}
					}
				}

				// Flatten any nested arrays
				return concat.apply([], ret);
			},

			// A global GUID counter for objects
			guid: 1,

			// Bind a function to a context, optionally partially applying any
			// arguments.
			proxy: function proxy(fn, context) {
				var tmp, args, proxy;

				if (typeof context === "string") {
					tmp = fn[context];
					context = fn;
					fn = tmp;
				}

				// Quick check to determine if target is callable, in the spec
				// this throws a TypeError, but we will just return undefined.
				if (!jQuery.isFunction(fn)) {
					return undefined;
				}

				// Simulated bind
				args = _slice.call(arguments, 2);
				proxy = function proxy() {
					return fn.apply(context || this, args.concat(_slice.call(arguments)));
				};

				// Set the guid of unique handler to the same of original handler, so it can be removed
				proxy.guid = fn.guid = fn.guid || jQuery.guid++;

				return proxy;
			},

			now: Date.now,

			// jQuery.support is not used in Core but other projects attach their
			// properties to it so it needs to exist.
			support: support
		});

		if (typeof Symbol === "function") {
			jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
		}

		// Populate the class2type map
		jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
			class2type["[object " + name + "]"] = name.toLowerCase();
		});

		function isArrayLike(obj) {

			// Support: real iOS 8.2 only (not reproducible in simulator)
			// `in` check used to prevent JIT error (gh-2145)
			// hasOwn isn't used here due to false negatives
			// regarding Nodelist length in IE
			var length = !!obj && "length" in obj && obj.length,
			    type = jQuery.type(obj);

			if (type === "function" || jQuery.isWindow(obj)) {
				return false;
			}

			return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
		}
		var Sizzle =
		/*!
	  * Sizzle CSS Selector Engine v2.3.3
	  * https://sizzlejs.com/
	  *
	  * Copyright jQuery Foundation and other contributors
	  * Released under the MIT license
	  * http://jquery.org/license
	  *
	  * Date: 2016-08-08
	  */
		function (window) {

			var i,
			    support,
			    Expr,
			    getText,
			    isXML,
			    tokenize,
			    compile,
			    select,
			    outermostContext,
			    sortInput,
			    hasDuplicate,


			// Local document vars
			setDocument,
			    document,
			    docElem,
			    documentIsHTML,
			    rbuggyQSA,
			    rbuggyMatches,
			    matches,
			    contains,


			// Instance-specific data
			expando = "sizzle" + 1 * new Date(),
			    preferredDoc = window.document,
			    dirruns = 0,
			    done = 0,
			    classCache = createCache(),
			    tokenCache = createCache(),
			    compilerCache = createCache(),
			    sortOrder = function sortOrder(a, b) {
				if (a === b) {
					hasDuplicate = true;
				}
				return 0;
			},


			// Instance methods
			hasOwn = {}.hasOwnProperty,
			    arr = [],
			    pop = arr.pop,
			    push_native = arr.push,
			    push = arr.push,
			    slice = arr.slice,

			// Use a stripped-down indexOf as it's faster than native
			// https://jsperf.com/thor-indexof-vs-for/5
			indexOf = function indexOf(list, elem) {
				var i = 0,
				    len = list.length;
				for (; i < len; i++) {
					if (list[i] === elem) {
						return i;
					}
				}
				return -1;
			},
			    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


			// Regular expressions

			// http://www.w3.org/TR/css3-selectors/#whitespace
			whitespace = "[\\x20\\t\\r\\n\\f]",


			// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
			identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


			// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
			attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
			    pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" + ")\\)|)",


			// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
			rwhitespace = new RegExp(whitespace + "+", "g"),
			    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
			    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
			    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
			    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
			    rpseudo = new RegExp(pseudos),
			    ridentifier = new RegExp("^" + identifier + "$"),
			    matchExpr = {
				"ID": new RegExp("^#(" + identifier + ")"),
				"CLASS": new RegExp("^\\.(" + identifier + ")"),
				"TAG": new RegExp("^(" + identifier + "|[*])"),
				"ATTR": new RegExp("^" + attributes),
				"PSEUDO": new RegExp("^" + pseudos),
				"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
				"bool": new RegExp("^(?:" + booleans + ")$", "i"),
				// For use in libraries implementing .is()
				// We use this for POS matching in `select`
				"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
			},
			    rinputs = /^(?:input|select|textarea|button)$/i,
			    rheader = /^h\d$/i,
			    rnative = /^[^{]+\{\s*\[native \w/,


			// Easily-parseable/retrievable ID or TAG or CLASS selectors
			rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
			    rsibling = /[+~]/,


			// CSS escapes
			// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
			runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
			    funescape = function funescape(_, escaped, escapedWhitespace) {
				var high = "0x" + escaped - 0x10000;
				// NaN means non-codepoint
				// Support: Firefox<24
				// Workaround erroneous numeric interpretation of +"0x"
				return high !== high || escapedWhitespace ? escaped : high < 0 ?
				// BMP codepoint
				String.fromCharCode(high + 0x10000) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
			},


			// CSS string/identifier serialization
			// https://drafts.csswg.org/cssom/#common-serializing-idioms
			rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
			    fcssescape = function fcssescape(ch, asCodePoint) {
				if (asCodePoint) {

					// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
					if (ch === "\0") {
						return "\uFFFD";
					}

					// Control characters and (dependent upon position) numbers get escaped as code points
					return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
				}

				// Other potentially-special ASCII characters get backslash-escaped
				return "\\" + ch;
			},


			// Used for iframes
			// See setDocument()
			// Removing the function wrapper causes a "Permission Denied"
			// error in IE
			unloadHandler = function unloadHandler() {
				setDocument();
			},
			    disabledAncestor = addCombinator(function (elem) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			}, { dir: "parentNode", next: "legend" });

			// Optimize for push.apply( _, NodeList )
			try {
				push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
				// Support: Android<4.0
				// Detect silently failing push.apply
				arr[preferredDoc.childNodes.length].nodeType;
			} catch (e) {
				push = { apply: arr.length ?

					// Leverage slice if possible
					function (target, els) {
						push_native.apply(target, slice.call(els));
					} :

					// Support: IE<9
					// Otherwise append directly
					function (target, els) {
						var j = target.length,
						    i = 0;
						// Can't trust NodeList.length
						while (target[j++] = els[i++]) {}
						target.length = j - 1;
					}
				};
			}

			function Sizzle(selector, context, results, seed) {
				var m,
				    i,
				    elem,
				    nid,
				    match,
				    groups,
				    newSelector,
				    newContext = context && context.ownerDocument,


				// nodeType defaults to 9, since context defaults to document
				nodeType = context ? context.nodeType : 9;

				results = results || [];

				// Return early from calls with invalid selector or context
				if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

					return results;
				}

				// Try to shortcut find operations (as opposed to filters) in HTML documents
				if (!seed) {

					if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
						setDocument(context);
					}
					context = context || document;

					if (documentIsHTML) {

						// If the selector is sufficiently simple, try using a "get*By*" DOM method
						// (excepting DocumentFragment context, where the methods don't exist)
						if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

							// ID selector
							if (m = match[1]) {

								// Document context
								if (nodeType === 9) {
									if (elem = context.getElementById(m)) {

										// Support: IE, Opera, Webkit
										// TODO: identify versions
										// getElementById can match elements by name instead of ID
										if (elem.id === m) {
											results.push(elem);
											return results;
										}
									} else {
										return results;
									}

									// Element context
								} else {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

										results.push(elem);
										return results;
									}
								}

								// Type selector
							} else if (match[2]) {
								push.apply(results, context.getElementsByTagName(selector));
								return results;

								// Class selector
							} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

								push.apply(results, context.getElementsByClassName(m));
								return results;
							}
						}

						// Take advantage of querySelectorAll
						if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

							if (nodeType !== 1) {
								newContext = context;
								newSelector = selector;

								// qSA looks outside Element context, which is not what we want
								// Thanks to Andrew Dupont for this workaround technique
								// Support: IE <=8
								// Exclude object elements
							} else if (context.nodeName.toLowerCase() !== "object") {

								// Capture the context ID, setting it first if necessary
								if (nid = context.getAttribute("id")) {
									nid = nid.replace(rcssescape, fcssescape);
								} else {
									context.setAttribute("id", nid = expando);
								}

								// Prefix every selector in the list
								groups = tokenize(selector);
								i = groups.length;
								while (i--) {
									groups[i] = "#" + nid + " " + toSelector(groups[i]);
								}
								newSelector = groups.join(",");

								// Expand context for sibling selectors
								newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
							}

							if (newSelector) {
								try {
									push.apply(results, newContext.querySelectorAll(newSelector));
									return results;
								} catch (qsaError) {} finally {
									if (nid === expando) {
										context.removeAttribute("id");
									}
								}
							}
						}
					}
				}

				// All others
				return select(selector.replace(rtrim, "$1"), context, results, seed);
			}

			/**
	   * Create key-value caches of limited size
	   * @returns {function(string, object)} Returns the Object data after storing it on itself with
	   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	   *	deleting the oldest entry
	   */
			function createCache() {
				var keys = [];

				function cache(key, value) {
					// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
					if (keys.push(key + " ") > Expr.cacheLength) {
						// Only keep the most recent entries
						delete cache[keys.shift()];
					}
					return cache[key + " "] = value;
				}
				return cache;
			}

			/**
	   * Mark a function for special use by Sizzle
	   * @param {Function} fn The function to mark
	   */
			function markFunction(fn) {
				fn[expando] = true;
				return fn;
			}

			/**
	   * Support testing using an element
	   * @param {Function} fn Passed the created element and returns a boolean result
	   */
			function assert(fn) {
				var el = document.createElement("fieldset");

				try {
					return !!fn(el);
				} catch (e) {
					return false;
				} finally {
					// Remove from its parent by default
					if (el.parentNode) {
						el.parentNode.removeChild(el);
					}
					// release memory in IE
					el = null;
				}
			}

			/**
	   * Adds the same handler for all of the specified attrs
	   * @param {String} attrs Pipe-separated list of attributes
	   * @param {Function} handler The method that will be applied
	   */
			function addHandle(attrs, handler) {
				var arr = attrs.split("|"),
				    i = arr.length;

				while (i--) {
					Expr.attrHandle[arr[i]] = handler;
				}
			}

			/**
	   * Checks document order of two siblings
	   * @param {Element} a
	   * @param {Element} b
	   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	   */
			function siblingCheck(a, b) {
				var cur = b && a,
				    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

				// Use IE sourceIndex if available on both nodes
				if (diff) {
					return diff;
				}

				// Check if b follows a
				if (cur) {
					while (cur = cur.nextSibling) {
						if (cur === b) {
							return -1;
						}
					}
				}

				return a ? 1 : -1;
			}

			/**
	   * Returns a function to use in pseudos for input types
	   * @param {String} type
	   */
			function createInputPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for buttons
	   * @param {String} type
	   */
			function createButtonPseudo(type) {
				return function (elem) {
					var name = elem.nodeName.toLowerCase();
					return (name === "input" || name === "button") && elem.type === type;
				};
			}

			/**
	   * Returns a function to use in pseudos for :enabled/:disabled
	   * @param {Boolean} disabled true for :disabled; false for :enabled
	   */
			function createDisabledPseudo(disabled) {

				// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
				return function (elem) {

					// Only certain elements can match :enabled or :disabled
					// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
					// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
					if ("form" in elem) {

						// Check for inherited disabledness on relevant non-disabled elements:
						// * listed form-associated elements in a disabled fieldset
						//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
						//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
						// * option elements in a disabled optgroup
						//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
						// All such elements have a "form" property.
						if (elem.parentNode && elem.disabled === false) {

							// Option elements defer to a parent optgroup if present
							if ("label" in elem) {
								if ("label" in elem.parentNode) {
									return elem.parentNode.disabled === disabled;
								} else {
									return elem.disabled === disabled;
								}
							}

							// Support: IE 6 - 11
							// Use the isDisabled shortcut property to check for disabled fieldset ancestors
							return elem.isDisabled === disabled ||

							// Where there is no isDisabled, check manually
							/* jshint -W018 */
							elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
						}

						return elem.disabled === disabled;

						// Try to winnow out elements that can't be disabled before trusting the disabled property.
						// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
						// even exist on them, let alone have a boolean value.
					} else if ("label" in elem) {
						return elem.disabled === disabled;
					}

					// Remaining elements are neither :enabled nor :disabled
					return false;
				};
			}

			/**
	   * Returns a function to use in pseudos for positionals
	   * @param {Function} fn
	   */
			function createPositionalPseudo(fn) {
				return markFunction(function (argument) {
					argument = +argument;
					return markFunction(function (seed, matches) {
						var j,
						    matchIndexes = fn([], seed.length, argument),
						    i = matchIndexes.length;

						// Match elements found at the specified indexes
						while (i--) {
							if (seed[j = matchIndexes[i]]) {
								seed[j] = !(matches[j] = seed[j]);
							}
						}
					});
				});
			}

			/**
	   * Checks a node for validity as a Sizzle context
	   * @param {Element|Object=} context
	   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	   */
			function testContext(context) {
				return context && typeof context.getElementsByTagName !== "undefined" && context;
			}

			// Expose support vars for convenience
			support = Sizzle.support = {};

			/**
	   * Detects XML nodes
	   * @param {Element|Object} elem An element or a document
	   * @returns {Boolean} True iff elem is a non-HTML XML node
	   */
			isXML = Sizzle.isXML = function (elem) {
				// documentElement is verified for cases where it doesn't yet exist
				// (such as loading iframes in IE - #4833)
				var documentElement = elem && (elem.ownerDocument || elem).documentElement;
				return documentElement ? documentElement.nodeName !== "HTML" : false;
			};

			/**
	   * Sets document-related variables once based on the current document
	   * @param {Element|Object} [doc] An element or document object to use to set the document
	   * @returns {Object} Returns the current document
	   */
			setDocument = Sizzle.setDocument = function (node) {
				var hasCompare,
				    subWindow,
				    doc = node ? node.ownerDocument || node : preferredDoc;

				// Return early if doc is invalid or already selected
				if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
					return document;
				}

				// Update global variables
				document = doc;
				docElem = document.documentElement;
				documentIsHTML = !isXML(document);

				// Support: IE 9-11, Edge
				// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
				if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

					// Support: IE 11, Edge
					if (subWindow.addEventListener) {
						subWindow.addEventListener("unload", unloadHandler, false);

						// Support: IE 9 - 10 only
					} else if (subWindow.attachEvent) {
						subWindow.attachEvent("onunload", unloadHandler);
					}
				}

				/* Attributes
	   ---------------------------------------------------------------------- */

				// Support: IE<8
				// Verify that getAttribute really returns attributes and not properties
				// (excepting IE8 booleans)
				support.attributes = assert(function (el) {
					el.className = "i";
					return !el.getAttribute("className");
				});

				/* getElement(s)By*
	   ---------------------------------------------------------------------- */

				// Check if getElementsByTagName("*") returns only elements
				support.getElementsByTagName = assert(function (el) {
					el.appendChild(document.createComment(""));
					return !el.getElementsByTagName("*").length;
				});

				// Support: IE<9
				support.getElementsByClassName = rnative.test(document.getElementsByClassName);

				// Support: IE<10
				// Check if getElementById returns elements by name
				// The broken getElementById methods don't pick up programmatically-set names,
				// so use a roundabout getElementsByName test
				support.getById = assert(function (el) {
					docElem.appendChild(el).id = expando;
					return !document.getElementsByName || !document.getElementsByName(expando).length;
				});

				// ID filter and find
				if (support.getById) {
					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							return elem.getAttribute("id") === attrId;
						};
					};
					Expr.find["ID"] = function (id, context) {
						if (typeof context.getElementById !== "undefined" && documentIsHTML) {
							var elem = context.getElementById(id);
							return elem ? [elem] : [];
						}
					};
				} else {
					Expr.filter["ID"] = function (id) {
						var attrId = id.replace(runescape, funescape);
						return function (elem) {
							var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
							return node && node.value === attrId;
						};
					};

					// Support: IE 6 - 7 only
					// getElementById is not reliable as a find shortcut
					Expr.find["ID"] = function (id, context) {
						if (typeof context.getElementById !== "undefined" && documentIsHTML) {
							var node,
							    i,
							    elems,
							    elem = context.getElementById(id);

							if (elem) {

								// Verify the id attribute
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}

								// Fall back on getElementsByName
								elems = context.getElementsByName(id);
								i = 0;
								while (elem = elems[i++]) {
									node = elem.getAttributeNode("id");
									if (node && node.value === id) {
										return [elem];
									}
								}
							}

							return [];
						}
					};
				}

				// Tag
				Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
					if (typeof context.getElementsByTagName !== "undefined") {
						return context.getElementsByTagName(tag);

						// DocumentFragment nodes don't have gEBTN
					} else if (support.qsa) {
						return context.querySelectorAll(tag);
					}
				} : function (tag, context) {
					var elem,
					    tmp = [],
					    i = 0,

					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName(tag);

					// Filter out possible comments
					if (tag === "*") {
						while (elem = results[i++]) {
							if (elem.nodeType === 1) {
								tmp.push(elem);
							}
						}

						return tmp;
					}
					return results;
				};

				// Class
				Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
					if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
						return context.getElementsByClassName(className);
					}
				};

				/* QSA/matchesSelector
	   ---------------------------------------------------------------------- */

				// QSA and matchesSelector support

				// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
				rbuggyMatches = [];

				// qSa(:focus) reports false when true (Chrome 21)
				// We allow this because of a bug in IE8/9 that throws an error
				// whenever `document.activeElement` is accessed on an iframe
				// So, we allow :focus to pass through QSA all the time to avoid the IE error
				// See https://bugs.jquery.com/ticket/13378
				rbuggyQSA = [];

				if (support.qsa = rnative.test(document.querySelectorAll)) {
					// Build QSA regex
					// Regex strategy adopted from Diego Perini
					assert(function (el) {
						// Select is set to empty string on purpose
						// This is to test IE's treatment of not explicitly
						// setting a boolean content attribute,
						// since its presence should be enough
						// https://bugs.jquery.com/ticket/12359
						docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

						// Support: IE8, Opera 11-12.16
						// Nothing should be selected when empty strings follow ^= or $= or *=
						// The test attribute must be unknown in Opera but "safe" for WinRT
						// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
						if (el.querySelectorAll("[msallowcapture^='']").length) {
							rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
						}

						// Support: IE8
						// Boolean attributes and "value" are not treated correctly
						if (!el.querySelectorAll("[selected]").length) {
							rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
						}

						// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
						if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
							rbuggyQSA.push("~=");
						}

						// Webkit/Opera - :checked should return selected option elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						// IE8 throws error here and will not see later tests
						if (!el.querySelectorAll(":checked").length) {
							rbuggyQSA.push(":checked");
						}

						// Support: Safari 8+, iOS 8+
						// https://bugs.webkit.org/show_bug.cgi?id=136851
						// In-page `selector#id sibling-combinator selector` fails
						if (!el.querySelectorAll("a#" + expando + "+*").length) {
							rbuggyQSA.push(".#.+[+~]");
						}
					});

					assert(function (el) {
						el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

						// Support: Windows 8 Native Apps
						// The type and name attributes are restricted during .innerHTML assignment
						var input = document.createElement("input");
						input.setAttribute("type", "hidden");
						el.appendChild(input).setAttribute("name", "D");

						// Support: IE8
						// Enforce case-sensitivity of name attribute
						if (el.querySelectorAll("[name=d]").length) {
							rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
						}

						// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
						// IE8 throws error here and will not see later tests
						if (el.querySelectorAll(":enabled").length !== 2) {
							rbuggyQSA.push(":enabled", ":disabled");
						}

						// Support: IE9-11+
						// IE's :disabled selector does not pick up the children of disabled fieldsets
						docElem.appendChild(el).disabled = true;
						if (el.querySelectorAll(":disabled").length !== 2) {
							rbuggyQSA.push(":enabled", ":disabled");
						}

						// Opera 10-11 does not throw on post-comma invalid pseudos
						el.querySelectorAll("*,:x");
						rbuggyQSA.push(",.*:");
					});
				}

				if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

					assert(function (el) {
						// Check to see if it's possible to do matchesSelector
						// on a disconnected node (IE 9)
						support.disconnectedMatch = matches.call(el, "*");

						// This should fail with an exception
						// Gecko does not error, returns false instead
						matches.call(el, "[s!='']:x");
						rbuggyMatches.push("!=", pseudos);
					});
				}

				rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
				rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

				/* Contains
	   ---------------------------------------------------------------------- */
				hasCompare = rnative.test(docElem.compareDocumentPosition);

				// Element contains another
				// Purposefully self-exclusive
				// As in, an element does not contain itself
				contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
					var adown = a.nodeType === 9 ? a.documentElement : a,
					    bup = b && b.parentNode;
					return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
				} : function (a, b) {
					if (b) {
						while (b = b.parentNode) {
							if (b === a) {
								return true;
							}
						}
					}
					return false;
				};

				/* Sorting
	   ---------------------------------------------------------------------- */

				// Document order sorting
				sortOrder = hasCompare ? function (a, b) {

					// Flag for duplicate removal
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					// Sort on method existence if only one input has compareDocumentPosition
					var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
					if (compare) {
						return compare;
					}

					// Calculate position if both inputs belong to the same document
					compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

					// Otherwise we know they are disconnected
					1;

					// Disconnected nodes
					if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

						// Choose the first element that is related to our preferred document
						if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
							return -1;
						}
						if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
							return 1;
						}

						// Maintain original order
						return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
					}

					return compare & 4 ? -1 : 1;
				} : function (a, b) {
					// Exit early if the nodes are identical
					if (a === b) {
						hasDuplicate = true;
						return 0;
					}

					var cur,
					    i = 0,
					    aup = a.parentNode,
					    bup = b.parentNode,
					    ap = [a],
					    bp = [b];

					// Parentless nodes are either documents or disconnected
					if (!aup || !bup) {
						return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

						// If the nodes are siblings, we can do a quick check
					} else if (aup === bup) {
						return siblingCheck(a, b);
					}

					// Otherwise we need full lists of their ancestors for comparison
					cur = a;
					while (cur = cur.parentNode) {
						ap.unshift(cur);
					}
					cur = b;
					while (cur = cur.parentNode) {
						bp.unshift(cur);
					}

					// Walk down the tree looking for a discrepancy
					while (ap[i] === bp[i]) {
						i++;
					}

					return i ?
					// Do a sibling check if the nodes have a common ancestor
					siblingCheck(ap[i], bp[i]) :

					// Otherwise nodes in our document sort first
					ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
				};

				return document;
			};

			Sizzle.matches = function (expr, elements) {
				return Sizzle(expr, null, null, elements);
			};

			Sizzle.matchesSelector = function (elem, expr) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				// Make sure that attribute selectors are quoted
				expr = expr.replace(rattributeQuotes, "='$1']");

				if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

					try {
						var ret = matches.call(elem, expr);

						// IE 9's matchesSelector returns false on disconnected nodes
						if (ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11) {
							return ret;
						}
					} catch (e) {}
				}

				return Sizzle(expr, document, null, [elem]).length > 0;
			};

			Sizzle.contains = function (context, elem) {
				// Set document vars if needed
				if ((context.ownerDocument || context) !== document) {
					setDocument(context);
				}
				return contains(context, elem);
			};

			Sizzle.attr = function (elem, name) {
				// Set document vars if needed
				if ((elem.ownerDocument || elem) !== document) {
					setDocument(elem);
				}

				var fn = Expr.attrHandle[name.toLowerCase()],

				// Don't get fooled by Object.prototype properties (jQuery #13807)
				val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

				return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
			};

			Sizzle.escape = function (sel) {
				return (sel + "").replace(rcssescape, fcssescape);
			};

			Sizzle.error = function (msg) {
				throw new Error("Syntax error, unrecognized expression: " + msg);
			};

			/**
	   * Document sorting and removing duplicates
	   * @param {ArrayLike} results
	   */
			Sizzle.uniqueSort = function (results) {
				var elem,
				    duplicates = [],
				    j = 0,
				    i = 0;

				// Unless we *know* we can detect duplicates, assume their presence
				hasDuplicate = !support.detectDuplicates;
				sortInput = !support.sortStable && results.slice(0);
				results.sort(sortOrder);

				if (hasDuplicate) {
					while (elem = results[i++]) {
						if (elem === results[i]) {
							j = duplicates.push(i);
						}
					}
					while (j--) {
						results.splice(duplicates[j], 1);
					}
				}

				// Clear input after sorting to release objects
				// See https://github.com/jquery/sizzle/pull/225
				sortInput = null;

				return results;
			};

			/**
	   * Utility function for retrieving the text value of an array of DOM nodes
	   * @param {Array|Element} elem
	   */
			getText = Sizzle.getText = function (elem) {
				var node,
				    ret = "",
				    i = 0,
				    nodeType = elem.nodeType;

				if (!nodeType) {
					// If no nodeType, this is expected to be an array
					while (node = elem[i++]) {
						// Do not traverse comment nodes
						ret += getText(node);
					}
				} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
					// Use textContent for elements
					// innerText usage removed for consistency of new lines (jQuery #11153)
					if (typeof elem.textContent === "string") {
						return elem.textContent;
					} else {
						// Traverse its children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							ret += getText(elem);
						}
					}
				} else if (nodeType === 3 || nodeType === 4) {
					return elem.nodeValue;
				}
				// Do not include comment or processing instruction nodes

				return ret;
			};

			Expr = Sizzle.selectors = {

				// Can be adjusted by the user
				cacheLength: 50,

				createPseudo: markFunction,

				match: matchExpr,

				attrHandle: {},

				find: {},

				relative: {
					">": { dir: "parentNode", first: true },
					" ": { dir: "parentNode" },
					"+": { dir: "previousSibling", first: true },
					"~": { dir: "previousSibling" }
				},

				preFilter: {
					"ATTR": function ATTR(match) {
						match[1] = match[1].replace(runescape, funescape);

						// Move the given value to match[3] whether quoted or unquoted
						match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

						if (match[2] === "~=") {
							match[3] = " " + match[3] + " ";
						}

						return match.slice(0, 4);
					},

					"CHILD": function CHILD(match) {
						/* matches from matchExpr["CHILD"]
	     	1 type (only|nth|...)
	     	2 what (child|of-type)
	     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
	     	4 xn-component of xn+y argument ([+-]?\d*n|)
	     	5 sign of xn-component
	     	6 x of xn-component
	     	7 sign of y-component
	     	8 y of y-component
	     */
						match[1] = match[1].toLowerCase();

						if (match[1].slice(0, 3) === "nth") {
							// nth-* requires argument
							if (!match[3]) {
								Sizzle.error(match[0]);
							}

							// numeric x and y parameters for Expr.filter.CHILD
							// remember that false/true cast respectively to 0/1
							match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
							match[5] = +(match[7] + match[8] || match[3] === "odd");

							// other types prohibit arguments
						} else if (match[3]) {
							Sizzle.error(match[0]);
						}

						return match;
					},

					"PSEUDO": function PSEUDO(match) {
						var excess,
						    unquoted = !match[6] && match[2];

						if (matchExpr["CHILD"].test(match[0])) {
							return null;
						}

						// Accept quoted arguments as-is
						if (match[3]) {
							match[2] = match[4] || match[5] || "";

							// Strip excess characters from unquoted arguments
						} else if (unquoted && rpseudo.test(unquoted) && (
						// Get excess from tokenize (recursively)
						excess = tokenize(unquoted, true)) && (
						// advance to the next closing parenthesis
						excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

							// excess is a negative index
							match[0] = match[0].slice(0, excess);
							match[2] = unquoted.slice(0, excess);
						}

						// Return only captures needed by the pseudo filter method (type and argument)
						return match.slice(0, 3);
					}
				},

				filter: {

					"TAG": function TAG(nodeNameSelector) {
						var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
						return nodeNameSelector === "*" ? function () {
							return true;
						} : function (elem) {
							return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
						};
					},

					"CLASS": function CLASS(className) {
						var pattern = classCache[className + " "];

						return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
							return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
						});
					},

					"ATTR": function ATTR(name, operator, check) {
						return function (elem) {
							var result = Sizzle.attr(elem, name);

							if (result == null) {
								return operator === "!=";
							}
							if (!operator) {
								return true;
							}

							result += "";

							return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
						};
					},

					"CHILD": function CHILD(type, what, argument, first, last) {
						var simple = type.slice(0, 3) !== "nth",
						    forward = type.slice(-4) !== "last",
						    ofType = what === "of-type";

						return first === 1 && last === 0 ?

						// Shortcut for :nth-*(n)
						function (elem) {
							return !!elem.parentNode;
						} : function (elem, context, xml) {
							var cache,
							    uniqueCache,
							    outerCache,
							    node,
							    nodeIndex,
							    start,
							    dir = simple !== forward ? "nextSibling" : "previousSibling",
							    parent = elem.parentNode,
							    name = ofType && elem.nodeName.toLowerCase(),
							    useCache = !xml && !ofType,
							    diff = false;

							if (parent) {

								// :(first|last|only)-(child|of-type)
								if (simple) {
									while (dir) {
										node = elem;
										while (node = node[dir]) {
											if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

												return false;
											}
										}
										// Reverse direction for :only-* (if we haven't yet done so)
										start = dir = type === "only" && !start && "nextSibling";
									}
									return true;
								}

								start = [forward ? parent.firstChild : parent.lastChild];

								// non-xml :nth-child(...) stores cache data on `parent`
								if (forward && useCache) {

									// Seek `elem` from a previously-cached index

									// ...in a gzip-friendly way
									node = parent;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex && cache[2];
									node = nodeIndex && parent.childNodes[nodeIndex];

									while (node = ++nodeIndex && node && node[dir] || (

									// Fallback to seeking `elem` from the start
									diff = nodeIndex = 0) || start.pop()) {

										// When found, cache indexes on `parent` and break
										if (node.nodeType === 1 && ++diff && node === elem) {
											uniqueCache[type] = [dirruns, nodeIndex, diff];
											break;
										}
									}
								} else {
									// Use previously-cached element index if available
									if (useCache) {
										// ...in a gzip-friendly way
										node = elem;
										outerCache = node[expando] || (node[expando] = {});

										// Support: IE <9 only
										// Defend against cloned attroperties (jQuery gh-1709)
										uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

										cache = uniqueCache[type] || [];
										nodeIndex = cache[0] === dirruns && cache[1];
										diff = nodeIndex;
									}

									// xml :nth-child(...)
									// or :nth-last-child(...) or :nth(-last)?-of-type(...)
									if (diff === false) {
										// Use the same loop as above to seek `elem` from the start
										while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

											if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

												// Cache the index of each encountered element
												if (useCache) {
													outerCache = node[expando] || (node[expando] = {});

													// Support: IE <9 only
													// Defend against cloned attroperties (jQuery gh-1709)
													uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

													uniqueCache[type] = [dirruns, diff];
												}

												if (node === elem) {
													break;
												}
											}
										}
									}
								}

								// Incorporate the offset, then check against cycle size
								diff -= last;
								return diff === first || diff % first === 0 && diff / first >= 0;
							}
						};
					},

					"PSEUDO": function PSEUDO(pseudo, argument) {
						// pseudo-class names are case-insensitive
						// http://www.w3.org/TR/selectors/#pseudo-classes
						// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
						// Remember that setFilters inherits from pseudos
						var args,
						    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

						// The user may use createPseudo to indicate that
						// arguments are needed to create the filter function
						// just as Sizzle does
						if (fn[expando]) {
							return fn(argument);
						}

						// But maintain support for old signatures
						if (fn.length > 1) {
							args = [pseudo, pseudo, "", argument];
							return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
								var idx,
								    matched = fn(seed, argument),
								    i = matched.length;
								while (i--) {
									idx = indexOf(seed, matched[i]);
									seed[idx] = !(matches[idx] = matched[i]);
								}
							}) : function (elem) {
								return fn(elem, 0, args);
							};
						}

						return fn;
					}
				},

				pseudos: {
					// Potentially complex pseudos
					"not": markFunction(function (selector) {
						// Trim the selector passed to compile
						// to avoid treating leading and trailing
						// spaces as combinators
						var input = [],
						    results = [],
						    matcher = compile(selector.replace(rtrim, "$1"));

						return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
							var elem,
							    unmatched = matcher(seed, null, xml, []),
							    i = seed.length;

							// Match elements unmatched by `matcher`
							while (i--) {
								if (elem = unmatched[i]) {
									seed[i] = !(matches[i] = elem);
								}
							}
						}) : function (elem, context, xml) {
							input[0] = elem;
							matcher(input, null, xml, results);
							// Don't keep the element (issue #299)
							input[0] = null;
							return !results.pop();
						};
					}),

					"has": markFunction(function (selector) {
						return function (elem) {
							return Sizzle(selector, elem).length > 0;
						};
					}),

					"contains": markFunction(function (text) {
						text = text.replace(runescape, funescape);
						return function (elem) {
							return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
						};
					}),

					// "Whether an element is represented by a :lang() selector
					// is based solely on the element's language value
					// being equal to the identifier C,
					// or beginning with the identifier C immediately followed by "-".
					// The matching of C against the element's language value is performed case-insensitively.
					// The identifier C does not have to be a valid language name."
					// http://www.w3.org/TR/selectors/#lang-pseudo
					"lang": markFunction(function (lang) {
						// lang value must be a valid identifier
						if (!ridentifier.test(lang || "")) {
							Sizzle.error("unsupported lang: " + lang);
						}
						lang = lang.replace(runescape, funescape).toLowerCase();
						return function (elem) {
							var elemLang;
							do {
								if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

									elemLang = elemLang.toLowerCase();
									return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
								}
							} while ((elem = elem.parentNode) && elem.nodeType === 1);
							return false;
						};
					}),

					// Miscellaneous
					"target": function target(elem) {
						var hash = window.location && window.location.hash;
						return hash && hash.slice(1) === elem.id;
					},

					"root": function root(elem) {
						return elem === docElem;
					},

					"focus": function focus(elem) {
						return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
					},

					// Boolean properties
					"enabled": createDisabledPseudo(false),
					"disabled": createDisabledPseudo(true),

					"checked": function checked(elem) {
						// In CSS3, :checked should return both checked and selected elements
						// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
						var nodeName = elem.nodeName.toLowerCase();
						return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
					},

					"selected": function selected(elem) {
						// Accessing this property makes selected-by-default
						// options in Safari work properly
						if (elem.parentNode) {
							elem.parentNode.selectedIndex;
						}

						return elem.selected === true;
					},

					// Contents
					"empty": function empty(elem) {
						// http://www.w3.org/TR/selectors/#empty-pseudo
						// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
						//   but not by others (comment: 8; processing instruction: 7; etc.)
						// nodeType < 6 works because attributes (2) do not appear as children
						for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
							if (elem.nodeType < 6) {
								return false;
							}
						}
						return true;
					},

					"parent": function parent(elem) {
						return !Expr.pseudos["empty"](elem);
					},

					// Element/input types
					"header": function header(elem) {
						return rheader.test(elem.nodeName);
					},

					"input": function input(elem) {
						return rinputs.test(elem.nodeName);
					},

					"button": function button(elem) {
						var name = elem.nodeName.toLowerCase();
						return name === "input" && elem.type === "button" || name === "button";
					},

					"text": function text(elem) {
						var attr;
						return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

						// Support: IE<8
						// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
						(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
					},

					// Position-in-collection
					"first": createPositionalPseudo(function () {
						return [0];
					}),

					"last": createPositionalPseudo(function (matchIndexes, length) {
						return [length - 1];
					}),

					"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
						return [argument < 0 ? argument + length : argument];
					}),

					"even": createPositionalPseudo(function (matchIndexes, length) {
						var i = 0;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"odd": createPositionalPseudo(function (matchIndexes, length) {
						var i = 1;
						for (; i < length; i += 2) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; --i >= 0;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					}),

					"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
						var i = argument < 0 ? argument + length : argument;
						for (; ++i < length;) {
							matchIndexes.push(i);
						}
						return matchIndexes;
					})
				}
			};

			Expr.pseudos["nth"] = Expr.pseudos["eq"];

			// Add button/input type pseudos
			for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
				Expr.pseudos[i] = createInputPseudo(i);
			}
			for (i in { submit: true, reset: true }) {
				Expr.pseudos[i] = createButtonPseudo(i);
			}

			// Easy API for creating new setFilters
			function setFilters() {}
			setFilters.prototype = Expr.filters = Expr.pseudos;
			Expr.setFilters = new setFilters();

			tokenize = Sizzle.tokenize = function (selector, parseOnly) {
				var matched,
				    match,
				    tokens,
				    type,
				    soFar,
				    groups,
				    preFilters,
				    cached = tokenCache[selector + " "];

				if (cached) {
					return parseOnly ? 0 : cached.slice(0);
				}

				soFar = selector;
				groups = [];
				preFilters = Expr.preFilter;

				while (soFar) {

					// Comma and first run
					if (!matched || (match = rcomma.exec(soFar))) {
						if (match) {
							// Don't consume trailing commas as valid
							soFar = soFar.slice(match[0].length) || soFar;
						}
						groups.push(tokens = []);
					}

					matched = false;

					// Combinators
					if (match = rcombinators.exec(soFar)) {
						matched = match.shift();
						tokens.push({
							value: matched,
							// Cast descendant combinators to space
							type: match[0].replace(rtrim, " ")
						});
						soFar = soFar.slice(matched.length);
					}

					// Filters
					for (type in Expr.filter) {
						if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
							matched = match.shift();
							tokens.push({
								value: matched,
								type: type,
								matches: match
							});
							soFar = soFar.slice(matched.length);
						}
					}

					if (!matched) {
						break;
					}
				}

				// Return the length of the invalid excess
				// if we're just parsing
				// Otherwise, throw an error or return tokens
				return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
				// Cache the tokens
				tokenCache(selector, groups).slice(0);
			};

			function toSelector(tokens) {
				var i = 0,
				    len = tokens.length,
				    selector = "";
				for (; i < len; i++) {
					selector += tokens[i].value;
				}
				return selector;
			}

			function addCombinator(matcher, combinator, base) {
				var dir = combinator.dir,
				    skip = combinator.next,
				    key = skip || dir,
				    checkNonElements = base && key === "parentNode",
				    doneName = done++;

				return combinator.first ?
				// Check against closest ancestor/preceding element
				function (elem, context, xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							return matcher(elem, context, xml);
						}
					}
					return false;
				} :

				// Check against all ancestor/preceding elements
				function (elem, context, xml) {
					var oldCache,
					    uniqueCache,
					    outerCache,
					    newCache = [dirruns, doneName];

					// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
					if (xml) {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								if (matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					} else {
						while (elem = elem[dir]) {
							if (elem.nodeType === 1 || checkNonElements) {
								outerCache = elem[expando] || (elem[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

								if (skip && skip === elem.nodeName.toLowerCase()) {
									elem = elem[dir] || elem;
								} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

									// Assign to newCache so results back-propagate to previous elements
									return newCache[2] = oldCache[2];
								} else {
									// Reuse newcache so results back-propagate to previous elements
									uniqueCache[key] = newCache;

									// A match means we're done; a fail means we have to keep checking
									if (newCache[2] = matcher(elem, context, xml)) {
										return true;
									}
								}
							}
						}
					}
					return false;
				};
			}

			function elementMatcher(matchers) {
				return matchers.length > 1 ? function (elem, context, xml) {
					var i = matchers.length;
					while (i--) {
						if (!matchers[i](elem, context, xml)) {
							return false;
						}
					}
					return true;
				} : matchers[0];
			}

			function multipleContexts(selector, contexts, results) {
				var i = 0,
				    len = contexts.length;
				for (; i < len; i++) {
					Sizzle(selector, contexts[i], results);
				}
				return results;
			}

			function condense(unmatched, map, filter, context, xml) {
				var elem,
				    newUnmatched = [],
				    i = 0,
				    len = unmatched.length,
				    mapped = map != null;

				for (; i < len; i++) {
					if (elem = unmatched[i]) {
						if (!filter || filter(elem, context, xml)) {
							newUnmatched.push(elem);
							if (mapped) {
								map.push(i);
							}
						}
					}
				}

				return newUnmatched;
			}

			function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
				if (postFilter && !postFilter[expando]) {
					postFilter = setMatcher(postFilter);
				}
				if (postFinder && !postFinder[expando]) {
					postFinder = setMatcher(postFinder, postSelector);
				}
				return markFunction(function (seed, results, context, xml) {
					var temp,
					    i,
					    elem,
					    preMap = [],
					    postMap = [],
					    preexisting = results.length,


					// Get initial elements from seed or context
					elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


					// Prefilter to get matcher input, preserving a map for seed-results synchronization
					matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
					    matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || (seed ? preFilter : preexisting || postFilter) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results : matcherIn;

					// Find primary matches
					if (matcher) {
						matcher(matcherIn, matcherOut, context, xml);
					}

					// Apply postFilter
					if (postFilter) {
						temp = condense(matcherOut, postMap);
						postFilter(temp, [], context, xml);

						// Un-match failing elements by moving them back to matcherIn
						i = temp.length;
						while (i--) {
							if (elem = temp[i]) {
								matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
							}
						}
					}

					if (seed) {
						if (postFinder || preFilter) {
							if (postFinder) {
								// Get the final matcherOut by condensing this intermediate into postFinder contexts
								temp = [];
								i = matcherOut.length;
								while (i--) {
									if (elem = matcherOut[i]) {
										// Restore matcherIn since elem is not yet a final match
										temp.push(matcherIn[i] = elem);
									}
								}
								postFinder(null, matcherOut = [], temp, xml);
							}

							// Move matched elements from seed to results to keep them synchronized
							i = matcherOut.length;
							while (i--) {
								if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

									seed[temp] = !(results[temp] = elem);
								}
							}
						}

						// Add elements to results, through postFinder if defined
					} else {
						matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
						if (postFinder) {
							postFinder(null, results, matcherOut, xml);
						} else {
							push.apply(results, matcherOut);
						}
					}
				});
			}

			function matcherFromTokens(tokens) {
				var checkContext,
				    matcher,
				    j,
				    len = tokens.length,
				    leadingRelative = Expr.relative[tokens[0].type],
				    implicitRelative = leadingRelative || Expr.relative[" "],
				    i = leadingRelative ? 1 : 0,


				// The foundational matcher ensures that elements are reachable from top-level context(s)
				matchContext = addCombinator(function (elem) {
					return elem === checkContext;
				}, implicitRelative, true),
				    matchAnyContext = addCombinator(function (elem) {
					return indexOf(checkContext, elem) > -1;
				}, implicitRelative, true),
				    matchers = [function (elem, context, xml) {
					var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
					// Avoid hanging onto element (issue #299)
					checkContext = null;
					return ret;
				}];

				for (; i < len; i++) {
					if (matcher = Expr.relative[tokens[i].type]) {
						matchers = [addCombinator(elementMatcher(matchers), matcher)];
					} else {
						matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

						// Return special upon seeing a positional matcher
						if (matcher[expando]) {
							// Find the next relative operator (if any) for proper handling
							j = ++i;
							for (; j < len; j++) {
								if (Expr.relative[tokens[j].type]) {
									break;
								}
							}
							return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
						}
						matchers.push(matcher);
					}
				}

				return elementMatcher(matchers);
			}

			function matcherFromGroupMatchers(elementMatchers, setMatchers) {
				var bySet = setMatchers.length > 0,
				    byElement = elementMatchers.length > 0,
				    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
					var elem,
					    j,
					    matcher,
					    matchedCount = 0,
					    i = "0",
					    unmatched = seed && [],
					    setMatched = [],
					    contextBackup = outermostContext,

					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]("*", outermost),

					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
					    len = elems.length;

					if (outermost) {
						outermostContext = context === document || context || outermost;
					}

					// Add elements passing elementMatchers directly to results
					// Support: IE<9, Safari
					// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
					for (; i !== len && (elem = elems[i]) != null; i++) {
						if (byElement && elem) {
							j = 0;
							if (!context && elem.ownerDocument !== document) {
								setDocument(elem);
								xml = !documentIsHTML;
							}
							while (matcher = elementMatchers[j++]) {
								if (matcher(elem, context || document, xml)) {
									results.push(elem);
									break;
								}
							}
							if (outermost) {
								dirruns = dirrunsUnique;
							}
						}

						// Track unmatched elements for set filters
						if (bySet) {
							// They will have gone through all possible matchers
							if (elem = !matcher && elem) {
								matchedCount--;
							}

							// Lengthen the array for every element, matched or not
							if (seed) {
								unmatched.push(elem);
							}
						}
					}

					// `i` is now the count of elements visited above, and adding it to `matchedCount`
					// makes the latter nonnegative.
					matchedCount += i;

					// Apply set filters to unmatched elements
					// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
					// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
					// no element matchers and no seed.
					// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
					// case, which will result in a "00" `matchedCount` that differs from `i` but is also
					// numerically zero.
					if (bySet && i !== matchedCount) {
						j = 0;
						while (matcher = setMatchers[j++]) {
							matcher(unmatched, setMatched, context, xml);
						}

						if (seed) {
							// Reintegrate element matches to eliminate the need for sorting
							if (matchedCount > 0) {
								while (i--) {
									if (!(unmatched[i] || setMatched[i])) {
										setMatched[i] = pop.call(results);
									}
								}
							}

							// Discard index placeholder values to get only actual matches
							setMatched = condense(setMatched);
						}

						// Add matches to results
						push.apply(results, setMatched);

						// Seedless set matches succeeding multiple successful matchers stipulate sorting
						if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

							Sizzle.uniqueSort(results);
						}
					}

					// Override manipulation of globals by nested matchers
					if (outermost) {
						dirruns = dirrunsUnique;
						outermostContext = contextBackup;
					}

					return unmatched;
				};

				return bySet ? markFunction(superMatcher) : superMatcher;
			}

			compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
				var i,
				    setMatchers = [],
				    elementMatchers = [],
				    cached = compilerCache[selector + " "];

				if (!cached) {
					// Generate a function of recursive functions that can be used to check each element
					if (!match) {
						match = tokenize(selector);
					}
					i = match.length;
					while (i--) {
						cached = matcherFromTokens(match[i]);
						if (cached[expando]) {
							setMatchers.push(cached);
						} else {
							elementMatchers.push(cached);
						}
					}

					// Cache the compiled function
					cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

					// Save selector and tokenization
					cached.selector = selector;
				}
				return cached;
			};

			/**
	   * A low-level selection function that works with Sizzle's compiled
	   *  selector functions
	   * @param {String|Function} selector A selector or a pre-compiled
	   *  selector function built with Sizzle.compile
	   * @param {Element} context
	   * @param {Array} [results]
	   * @param {Array} [seed] A set of elements to match against
	   */
			select = Sizzle.select = function (selector, context, results, seed) {
				var i,
				    tokens,
				    token,
				    type,
				    find,
				    compiled = typeof selector === "function" && selector,
				    match = !seed && tokenize(selector = compiled.selector || selector);

				results = results || [];

				// Try to minimize operations if there is only one selector in the list and no seed
				// (the latter of which guarantees us context)
				if (match.length === 1) {

					// Reduce context if the leading compound selector is an ID
					tokens = match[0] = match[0].slice(0);
					if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

						context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
						if (!context) {
							return results;

							// Precompiled matchers will still verify ancestry, so step up a level
						} else if (compiled) {
							context = context.parentNode;
						}

						selector = selector.slice(tokens.shift().value.length);
					}

					// Fetch a seed set for right-to-left matching
					i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
					while (i--) {
						token = tokens[i];

						// Abort if we hit a combinator
						if (Expr.relative[type = token.type]) {
							break;
						}
						if (find = Expr.find[type]) {
							// Search, expanding context for leading sibling combinators
							if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

								// If seed is empty or no tokens remain, we can return early
								tokens.splice(i, 1);
								selector = seed.length && toSelector(tokens);
								if (!selector) {
									push.apply(results, seed);
									return results;
								}

								break;
							}
						}
					}
				}

				// Compile and execute a filtering function if one is not provided
				// Provide `match` to avoid retokenization if we modified the selector above
				(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
				return results;
			};

			// One-time assignments

			// Sort stability
			support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

			// Support: Chrome 14-35+
			// Always assume duplicates if they aren't passed to the comparison function
			support.detectDuplicates = !!hasDuplicate;

			// Initialize against the default document
			setDocument();

			// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
			// Detached nodes confoundingly follow *each other*
			support.sortDetached = assert(function (el) {
				// Should return 1, but returns 4 (following)
				return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
			});

			// Support: IE<8
			// Prevent attribute/property "interpolation"
			// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
			if (!assert(function (el) {
				el.innerHTML = "<a href='#'></a>";
				return el.firstChild.getAttribute("href") === "#";
			})) {
				addHandle("type|href|height|width", function (elem, name, isXML) {
					if (!isXML) {
						return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
					}
				});
			}

			// Support: IE<9
			// Use defaultValue in place of getAttribute("value")
			if (!support.attributes || !assert(function (el) {
				el.innerHTML = "<input/>";
				el.firstChild.setAttribute("value", "");
				return el.firstChild.getAttribute("value") === "";
			})) {
				addHandle("value", function (elem, name, isXML) {
					if (!isXML && elem.nodeName.toLowerCase() === "input") {
						return elem.defaultValue;
					}
				});
			}

			// Support: IE<9
			// Use getAttributeNode to fetch booleans when getAttribute lies
			if (!assert(function (el) {
				return el.getAttribute("disabled") == null;
			})) {
				addHandle(booleans, function (elem, name, isXML) {
					var val;
					if (!isXML) {
						return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
					}
				});
			}

			return Sizzle;
		}(window);

		jQuery.find = Sizzle;
		jQuery.expr = Sizzle.selectors;

		// Deprecated
		jQuery.expr[":"] = jQuery.expr.pseudos;
		jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
		jQuery.text = Sizzle.getText;
		jQuery.isXMLDoc = Sizzle.isXML;
		jQuery.contains = Sizzle.contains;
		jQuery.escapeSelector = Sizzle.escape;

		var dir = function dir(elem, _dir, until) {
			var matched = [],
			    truncate = until !== undefined;

			while ((elem = elem[_dir]) && elem.nodeType !== 9) {
				if (elem.nodeType === 1) {
					if (truncate && jQuery(elem).is(until)) {
						break;
					}
					matched.push(elem);
				}
			}
			return matched;
		};

		var _siblings = function _siblings(n, elem) {
			var matched = [];

			for (; n; n = n.nextSibling) {
				if (n.nodeType === 1 && n !== elem) {
					matched.push(n);
				}
			}

			return matched;
		};

		var rneedsContext = jQuery.expr.match.needsContext;

		var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

		var risSimple = /^.[^:#\[\.,]*$/;

		// Implement the identical functionality for filter and not
		function winnow(elements, qualifier, not) {
			if (jQuery.isFunction(qualifier)) {
				return jQuery.grep(elements, function (elem, i) {
					return !!qualifier.call(elem, i, elem) !== not;
				});
			}

			// Single element
			if (qualifier.nodeType) {
				return jQuery.grep(elements, function (elem) {
					return elem === qualifier !== not;
				});
			}

			// Arraylike of elements (jQuery, arguments, Array)
			if (typeof qualifier !== "string") {
				return jQuery.grep(elements, function (elem) {
					return indexOf.call(qualifier, elem) > -1 !== not;
				});
			}

			// Simple selector that can be filtered directly, removing non-Elements
			if (risSimple.test(qualifier)) {
				return jQuery.filter(qualifier, elements, not);
			}

			// Complex selector, compare the two sets, removing non-Elements
			qualifier = jQuery.filter(qualifier, elements);
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;
			});
		}

		jQuery.filter = function (expr, elems, not) {
			var elem = elems[0];

			if (not) {
				expr = ":not(" + expr + ")";
			}

			if (elems.length === 1 && elem.nodeType === 1) {
				return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
			}

			return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
				return elem.nodeType === 1;
			}));
		};

		jQuery.fn.extend({
			find: function find(selector) {
				var i,
				    ret,
				    len = this.length,
				    self = this;

				if (typeof selector !== "string") {
					return this.pushStack(jQuery(selector).filter(function () {
						for (i = 0; i < len; i++) {
							if (jQuery.contains(self[i], this)) {
								return true;
							}
						}
					}));
				}

				ret = this.pushStack([]);

				for (i = 0; i < len; i++) {
					jQuery.find(selector, self[i], ret);
				}

				return len > 1 ? jQuery.uniqueSort(ret) : ret;
			},
			filter: function filter(selector) {
				return this.pushStack(winnow(this, selector || [], false));
			},
			not: function not(selector) {
				return this.pushStack(winnow(this, selector || [], true));
			},
			is: function is(selector) {
				return !!winnow(this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
			}
		});

		// Initialize a jQuery object


		// A central reference to the root jQuery(document)
		var rootjQuery,


		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
		    init = jQuery.fn.init = function (selector, context, root) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if (!selector) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if (typeof selector === "string") {
				if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [null, selector, null];
				} else {
					match = rquickExpr.exec(selector);
				}

				// Match html or make sure no context is specified for #id
				if (match && (match[1] || !context)) {

					// HANDLE: $(html) -> $(array)
					if (match[1]) {
						context = context instanceof jQuery ? context[0] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

						// HANDLE: $(html, props)
						if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
							for (match in context) {

								// Properties of context are called as methods if possible
								if (jQuery.isFunction(this[match])) {
									this[match](context[match]);

									// ...and otherwise set as attributes
								} else {
									this.attr(match, context[match]);
								}
							}
						}

						return this;

						// HANDLE: $(#id)
					} else {
						elem = document.getElementById(match[2]);

						if (elem) {

							// Inject the element directly into the jQuery object
							this[0] = elem;
							this.length = 1;
						}
						return this;
					}

					// HANDLE: $(expr, $(...))
				} else if (!context || context.jquery) {
					return (context || root).find(selector);

					// HANDLE: $(expr, context)
					// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor(context).find(selector);
				}

				// HANDLE: $(DOMElement)
			} else if (selector.nodeType) {
				this[0] = selector;
				this.length = 1;
				return this;

				// HANDLE: $(function)
				// Shortcut for document ready
			} else if (jQuery.isFunction(selector)) {
				return root.ready !== undefined ? root.ready(selector) :

				// Execute immediately if ready is not present
				selector(jQuery);
			}

			return jQuery.makeArray(selector, this);
		};

		// Give the init function the jQuery prototype for later instantiation
		init.prototype = jQuery.fn;

		// Initialize central reference
		rootjQuery = jQuery(document);

		var rparentsprev = /^(?:parents|prev(?:Until|All))/,


		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

		jQuery.fn.extend({
			has: function has(target) {
				var targets = jQuery(target, this),
				    l = targets.length;

				return this.filter(function () {
					var i = 0;
					for (; i < l; i++) {
						if (jQuery.contains(this, targets[i])) {
							return true;
						}
					}
				});
			},

			closest: function closest(selectors, context) {
				var cur,
				    i = 0,
				    l = this.length,
				    matched = [],
				    targets = typeof selectors !== "string" && jQuery(selectors);

				// Positional selectors never match, since there's no _selection_ context
				if (!rneedsContext.test(selectors)) {
					for (; i < l; i++) {
						for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

							// Always skip document fragments
							if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

								matched.push(cur);
								break;
							}
						}
					}
				}

				return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
			},

			// Determine the position of an element within the set
			index: function index(elem) {

				// No argument, return index in parent
				if (!elem) {
					return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
				}

				// Index in selector
				if (typeof elem === "string") {
					return indexOf.call(jQuery(elem), this[0]);
				}

				// Locate the position of the desired element
				return indexOf.call(this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem);
			},

			add: function add(selector, context) {
				return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
			},

			addBack: function addBack(selector) {
				return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
			}
		});

		function sibling(cur, dir) {
			while ((cur = cur[dir]) && cur.nodeType !== 1) {}
			return cur;
		}

		jQuery.each({
			parent: function parent(elem) {
				var parent = elem.parentNode;
				return parent && parent.nodeType !== 11 ? parent : null;
			},
			parents: function parents(elem) {
				return dir(elem, "parentNode");
			},
			parentsUntil: function parentsUntil(elem, i, until) {
				return dir(elem, "parentNode", until);
			},
			next: function next(elem) {
				return sibling(elem, "nextSibling");
			},
			prev: function prev(elem) {
				return sibling(elem, "previousSibling");
			},
			nextAll: function nextAll(elem) {
				return dir(elem, "nextSibling");
			},
			prevAll: function prevAll(elem) {
				return dir(elem, "previousSibling");
			},
			nextUntil: function nextUntil(elem, i, until) {
				return dir(elem, "nextSibling", until);
			},
			prevUntil: function prevUntil(elem, i, until) {
				return dir(elem, "previousSibling", until);
			},
			siblings: function siblings(elem) {
				return _siblings((elem.parentNode || {}).firstChild, elem);
			},
			children: function children(elem) {
				return _siblings(elem.firstChild);
			},
			contents: function contents(elem) {
				return elem.contentDocument || jQuery.merge([], elem.childNodes);
			}
		}, function (name, fn) {
			jQuery.fn[name] = function (until, selector) {
				var matched = jQuery.map(this, fn, until);

				if (name.slice(-5) !== "Until") {
					selector = until;
				}

				if (selector && typeof selector === "string") {
					matched = jQuery.filter(selector, matched);
				}

				if (this.length > 1) {

					// Remove duplicates
					if (!guaranteedUnique[name]) {
						jQuery.uniqueSort(matched);
					}

					// Reverse order for parents* and prev-derivatives
					if (rparentsprev.test(name)) {
						matched.reverse();
					}
				}

				return this.pushStack(matched);
			};
		});
		var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

		// Convert String-formatted options into Object-formatted ones
		function createOptions(options) {
			var object = {};
			jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
				object[flag] = true;
			});
			return object;
		}

		/*
	  * Create a callback list using the following parameters:
	  *
	  *	options: an optional list of space-separated options that will change how
	  *			the callback list behaves or a more traditional option object
	  *
	  * By default a callback list will act like an event callback list and can be
	  * "fired" multiple times.
	  *
	  * Possible options:
	  *
	  *	once:			will ensure the callback list can only be fired once (like a Deferred)
	  *
	  *	memory:			will keep track of previous values and will call any callback added
	  *					after the list has been fired right away with the latest "memorized"
	  *					values (like a Deferred)
	  *
	  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	  *
	  *	stopOnFalse:	interrupt callings when a callback returns false
	  *
	  */
		jQuery.Callbacks = function (options) {

			// Convert options from String-formatted to Object-formatted if needed
			// (we check in cache first)
			options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

			var // Flag to know if list is currently firing
			firing,


			// Last fire value for non-forgettable lists
			memory,


			// Flag to know if list was already fired
			_fired,


			// Flag to prevent firing
			_locked,


			// Actual callback list
			list = [],


			// Queue of execution data for repeatable lists
			queue = [],


			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,


			// Fire callbacks
			fire = function fire() {

				// Enforce single-firing
				_locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				_fired = firing = true;
				for (; queue.length; firingIndex = -1) {
					memory = queue.shift();
					while (++firingIndex < list.length) {

						// Run callback and check for early termination
						if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if (!options.memory) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if (_locked) {

					// Keep an empty list if we have data for future add calls
					if (memory) {
						list = [];

						// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},


			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function add() {
					if (list) {

						// If we have memory from a past run, we should fire after adding
						if (memory && !firing) {
							firingIndex = list.length - 1;
							queue.push(memory);
						}

						(function add(args) {
							jQuery.each(args, function (_, arg) {
								if (jQuery.isFunction(arg)) {
									if (!options.unique || !self.has(arg)) {
										list.push(arg);
									}
								} else if (arg && arg.length && jQuery.type(arg) !== "string") {

									// Inspect recursively
									add(arg);
								}
							});
						})(arguments);

						if (memory && !firing) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function remove() {
					jQuery.each(arguments, function (_, arg) {
						var index;
						while ((index = jQuery.inArray(arg, list, index)) > -1) {
							list.splice(index, 1);

							// Handle firing indexes
							if (index <= firingIndex) {
								firingIndex--;
							}
						}
					});
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function has(fn) {
					return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function empty() {
					if (list) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function disable() {
					_locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function disabled() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function lock() {
					_locked = queue = [];
					if (!memory && !firing) {
						list = memory = "";
					}
					return this;
				},
				locked: function locked() {
					return !!_locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function fireWith(context, args) {
					if (!_locked) {
						args = args || [];
						args = [context, args.slice ? args.slice() : args];
						queue.push(args);
						if (!firing) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function fire() {
					self.fireWith(this, arguments);
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function fired() {
					return !!_fired;
				}
			};

			return self;
		};

		function Identity(v) {
			return v;
		}
		function Thrower(ex) {
			throw ex;
		}

		function adoptValue(value, resolve, reject) {
			var method;

			try {

				// Check for promise aspect first to privilege synchronous behavior
				if (value && jQuery.isFunction(method = value.promise)) {
					method.call(value).done(resolve).fail(reject);

					// Other thenables
				} else if (value && jQuery.isFunction(method = value.then)) {
					method.call(value, resolve, reject);

					// Other non-thenables
				} else {

					// Support: Android 4.0 only
					// Strict mode functions invoked without .call/.apply get global-object context
					resolve.call(undefined, value);
				}

				// For Promises/A+, convert exceptions into rejections
				// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
				// Deferred#then to conditionally suppress rejection.
			} catch (value) {

				// Support: Android 4.0 only
				// Strict mode functions invoked without .call/.apply get global-object context
				reject.call(undefined, value);
			}
		}

		jQuery.extend({

			Deferred: function Deferred(func) {
				var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
				    _state = "pending",
				    _promise = {
					state: function state() {
						return _state;
					},
					always: function always() {
						deferred.done(arguments).fail(arguments);
						return this;
					},
					"catch": function _catch(fn) {
						return _promise.then(null, fn);
					},

					// Keep pipe for back-compat
					pipe: function pipe() /* fnDone, fnFail, fnProgress */{
						var fns = arguments;

						return jQuery.Deferred(function (newDefer) {
							jQuery.each(tuples, function (i, tuple) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[tuple[1]](function () {
									var returned = fn && fn.apply(this, arguments);
									if (returned && jQuery.isFunction(returned.promise)) {
										returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
									} else {
										newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
									}
								});
							});
							fns = null;
						}).promise();
					},
					then: function then(onFulfilled, onRejected, onProgress) {
						var maxDepth = 0;
						function resolve(depth, deferred, handler, special) {
							return function () {
								var that = this,
								    args = arguments,
								    mightThrow = function mightThrow() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if (depth < maxDepth) {
										return;
									}

									returned = handler.apply(that, args);

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if (returned === deferred.promise()) {
										throw new TypeError("Thenable self-resolution");
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned && (

									// Support: Promises/A+ section 2.3.4
									// https://promisesaplus.com/#point-64
									// Only check objects and functions for thenability
									(typeof returned === "undefined" ? "undefined" : _typeof(returned)) === "object" || typeof returned === "function") && returned.then;

									// Handle a returned thenable
									if (jQuery.isFunction(then)) {

										// Special processors (notify) just wait for resolution
										if (special) {
											then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

											// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
										}

										// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if (handler !== Identity) {
											that = undefined;
											args = [returned];
										}

										// Process the value(s)
										// Default process is resolve
										(special || deferred.resolveWith)(that, args);
									}
								},


								// Only normal processors (resolve) catch and reject exceptions
								process = special ? mightThrow : function () {
									try {
										mightThrow();
									} catch (e) {

										if (jQuery.Deferred.exceptionHook) {
											jQuery.Deferred.exceptionHook(e, process.stackTrace);
										}

										// Support: Promises/A+ section 2.3.3.3.4.1
										// https://promisesaplus.com/#point-61
										// Ignore post-resolution exceptions
										if (depth + 1 >= maxDepth) {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if (handler !== Thrower) {
												that = undefined;
												args = [e];
											}

											deferred.rejectWith(that, args);
										}
									}
								};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if (depth) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if (jQuery.Deferred.getStackHook) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout(process);
								}
							};
						}

						return jQuery.Deferred(function (newDefer) {

							// progress_handlers.add( ... )
							tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

							// fulfilled_handlers.add( ... )
							tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));

							// rejected_handlers.add( ... )
							tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));
						}).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function promise(obj) {
						return obj != null ? jQuery.extend(obj, _promise) : _promise;
					}
				},
				    deferred = {};

				// Add list-specific methods
				jQuery.each(tuples, function (i, tuple) {
					var list = tuple[2],
					    stateString = tuple[5];

					// promise.progress = list.add
					// promise.done = list.add
					// promise.fail = list.add
					_promise[tuple[1]] = list.add;

					// Handle state
					if (stateString) {
						list.add(function () {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							_state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[3 - i][2].disable,

						// progress_callbacks.lock
						tuples[0][2].lock);
					}

					// progress_handlers.fire
					// fulfilled_handlers.fire
					// rejected_handlers.fire
					list.add(tuple[3].fire);

					// deferred.notify = function() { deferred.notifyWith(...) }
					// deferred.resolve = function() { deferred.resolveWith(...) }
					// deferred.reject = function() { deferred.rejectWith(...) }
					deferred[tuple[0]] = function () {
						deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
						return this;
					};

					// deferred.notifyWith = list.fireWith
					// deferred.resolveWith = list.fireWith
					// deferred.rejectWith = list.fireWith
					deferred[tuple[0] + "With"] = list.fireWith;
				});

				// Make the deferred a promise
				_promise.promise(deferred);

				// Call given func if any
				if (func) {
					func.call(deferred, deferred);
				}

				// All done!
				return deferred;
			},

			// Deferred helper
			when: function when(singleValue) {
				var

				// count of uncompleted subordinates
				remaining = arguments.length,


				// count of unprocessed arguments
				i = remaining,


				// subordinate fulfillment data
				resolveContexts = Array(i),
				    resolveValues = _slice.call(arguments),


				// the master Deferred
				master = jQuery.Deferred(),


				// subordinate callback factory
				updateFunc = function updateFunc(i) {
					return function (value) {
						resolveContexts[i] = this;
						resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
						if (! --remaining) {
							master.resolveWith(resolveContexts, resolveValues);
						}
					};
				};

				// Single- and empty arguments are adopted like Promise.resolve
				if (remaining <= 1) {
					adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject);

					// Use .then() to unwrap secondary thenables (cf. gh-3000)
					if (master.state() === "pending" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {

						return master.then();
					}
				}

				// Multiple arguments are aggregated like Promise.all array elements
				while (i--) {
					adoptValue(resolveValues[i], updateFunc(i), master.reject);
				}

				return master.promise();
			}
		});

		// These usually indicate a programmer mistake during development,
		// warn about them ASAP rather than swallowing them by default.
		var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

		jQuery.Deferred.exceptionHook = function (error, stack) {

			// Support: IE 8 - 9 only
			// Console exists when dev tools are open, which can happen at any time
			if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
				window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
			}
		};

		jQuery.readyException = function (error) {
			window.setTimeout(function () {
				throw error;
			});
		};

		// The deferred used on DOM ready
		var readyList = jQuery.Deferred();

		jQuery.fn.ready = function (fn) {

			readyList.then(fn)

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch(function (error) {
				jQuery.readyException(error);
			});

			return this;
		};

		jQuery.extend({

			// Is the DOM ready to be used? Set to true once it occurs.
			isReady: false,

			// A counter to track how many items to wait for before
			// the ready event fires. See #6781
			readyWait: 1,

			// Hold (or release) the ready event
			holdReady: function holdReady(hold) {
				if (hold) {
					jQuery.readyWait++;
				} else {
					jQuery.ready(true);
				}
			},

			// Handle when the DOM is ready
			ready: function ready(wait) {

				// Abort if there are pending holds or we're already ready
				if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
					return;
				}

				// Remember that the DOM is ready
				jQuery.isReady = true;

				// If a normal DOM Ready event fired, decrement, and wait if need be
				if (wait !== true && --jQuery.readyWait > 0) {
					return;
				}

				// If there are functions bound, to execute
				readyList.resolveWith(document, [jQuery]);
			}
		});

		jQuery.ready.then = readyList.then;

		// The ready event handler and self cleanup method
		function completed() {
			document.removeEventListener("DOMContentLoaded", completed);
			window.removeEventListener("load", completed);
			jQuery.ready();
		}

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE <=9 - 10 only
		// Older IE sometimes signals "interactive" too soon
		if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout(jQuery.ready);
		} else {

			// Use the handy event callback
			document.addEventListener("DOMContentLoaded", completed);

			// A fallback to window.onload, that will always work
			window.addEventListener("load", completed);
		}

		// Multifunctional method to get and set values of a collection
		// The value/s can optionally be executed if it's a function
		var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
			var i = 0,
			    len = elems.length,
			    bulk = key == null;

			// Sets many values
			if (jQuery.type(key) === "object") {
				chainable = true;
				for (i in key) {
					access(elems, fn, i, key[i], true, emptyGet, raw);
				}

				// Sets one value
			} else if (value !== undefined) {
				chainable = true;

				if (!jQuery.isFunction(value)) {
					raw = true;
				}

				if (bulk) {

					// Bulk operations run against the entire set
					if (raw) {
						fn.call(elems, value);
						fn = null;

						// ...except when executing function values
					} else {
						bulk = fn;
						fn = function fn(elem, key, value) {
							return bulk.call(jQuery(elem), value);
						};
					}
				}

				if (fn) {
					for (; i < len; i++) {
						fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
					}
				}
			}

			if (chainable) {
				return elems;
			}

			// Gets
			if (bulk) {
				return fn.call(elems);
			}

			return len ? fn(elems[0], key) : emptyGet;
		};
		var acceptData = function acceptData(owner) {

			// Accepts only:
			//  - Node
			//    - Node.ELEMENT_NODE
			//    - Node.DOCUMENT_NODE
			//  - Object
			//    - Any
			return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
		};

		function Data() {
			this.expando = jQuery.expando + Data.uid++;
		}

		Data.uid = 1;

		Data.prototype = {

			cache: function cache(owner) {

				// Check if the owner object already has a cache
				var value = owner[this.expando];

				// If not, create one
				if (!value) {
					value = {};

					// We can accept data for non-element nodes in modern browsers,
					// but we should not, see #8335.
					// Always return an empty object.
					if (acceptData(owner)) {

						// If it is a node unlikely to be stringify-ed or looped over
						// use plain assignment
						if (owner.nodeType) {
							owner[this.expando] = value;

							// Otherwise secure it in a non-enumerable property
							// configurable must be true to allow the property to be
							// deleted when data is removed
						} else {
							Object.defineProperty(owner, this.expando, {
								value: value,
								configurable: true
							});
						}
					}
				}

				return value;
			},
			set: function set(owner, data, value) {
				var prop,
				    cache = this.cache(owner);

				// Handle: [ owner, key, value ] args
				// Always use camelCase key (gh-2257)
				if (typeof data === "string") {
					cache[jQuery.camelCase(data)] = value;

					// Handle: [ owner, { properties } ] args
				} else {

					// Copy the properties one-by-one to the cache object
					for (prop in data) {
						cache[jQuery.camelCase(prop)] = data[prop];
					}
				}
				return cache;
			},
			get: function get(owner, key) {
				return key === undefined ? this.cache(owner) :

				// Always use camelCase key (gh-2257)
				owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
			},
			access: function access(owner, key, value) {

				// In cases where either:
				//
				//   1. No key was specified
				//   2. A string key was specified, but no value provided
				//
				// Take the "read" path and allow the get method to determine
				// which value to return, respectively either:
				//
				//   1. The entire cache object
				//   2. The data stored at the key
				//
				if (key === undefined || key && typeof key === "string" && value === undefined) {

					return this.get(owner, key);
				}

				// When the key is not a string, or both a key and value
				// are specified, set or extend (existing objects) with either:
				//
				//   1. An object of properties
				//   2. A key and value
				//
				this.set(owner, key, value);

				// Since the "set" path can have two possible entry points
				// return the expected data based on which path was taken[*]
				return value !== undefined ? value : key;
			},
			remove: function remove(owner, key) {
				var i,
				    cache = owner[this.expando];

				if (cache === undefined) {
					return;
				}

				if (key !== undefined) {

					// Support array or space separated string of keys
					if (jQuery.isArray(key)) {

						// If key is an array of keys...
						// We always set camelCase keys, so remove that.
						key = key.map(jQuery.camelCase);
					} else {
						key = jQuery.camelCase(key);

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
					}

					i = key.length;

					while (i--) {
						delete cache[key[i]];
					}
				}

				// Remove the expando if there's no more data
				if (key === undefined || jQuery.isEmptyObject(cache)) {

					// Support: Chrome <=35 - 45
					// Webkit & Blink performance suffers when deleting properties
					// from DOM nodes, so set to undefined instead
					// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
					if (owner.nodeType) {
						owner[this.expando] = undefined;
					} else {
						delete owner[this.expando];
					}
				}
			},
			hasData: function hasData(owner) {
				var cache = owner[this.expando];
				return cache !== undefined && !jQuery.isEmptyObject(cache);
			}
		};
		var dataPriv = new Data();

		var dataUser = new Data();

		//	Implementation Summary
		//
		//	1. Enforce API surface and semantic compatibility with 1.9.x branch
		//	2. Improve the module's maintainability by reducing the storage
		//		paths to a single mechanism.
		//	3. Use the same single mechanism to support "private" and "user" data.
		//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
		//	5. Avoid exposing implementation details on user objects (eg. expando properties)
		//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

		var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		    rmultiDash = /[A-Z]/g;

		function getData(data) {
			if (data === "true") {
				return true;
			}

			if (data === "false") {
				return false;
			}

			if (data === "null") {
				return null;
			}

			// Only convert to a number if it doesn't change the string
			if (data === +data + "") {
				return +data;
			}

			if (rbrace.test(data)) {
				return JSON.parse(data);
			}

			return data;
		}

		function dataAttr(elem, key, data) {
			var name;

			// If nothing was found internally, try to fetch any
			// data from the HTML5 data-* attribute
			if (data === undefined && elem.nodeType === 1) {
				name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
				data = elem.getAttribute(name);

				if (typeof data === "string") {
					try {
						data = getData(data);
					} catch (e) {}

					// Make sure we set the data so it isn't changed later
					dataUser.set(elem, key, data);
				} else {
					data = undefined;
				}
			}
			return data;
		}

		jQuery.extend({
			hasData: function hasData(elem) {
				return dataUser.hasData(elem) || dataPriv.hasData(elem);
			},

			data: function data(elem, name, _data) {
				return dataUser.access(elem, name, _data);
			},

			removeData: function removeData(elem, name) {
				dataUser.remove(elem, name);
			},

			// TODO: Now that all calls to _data and _removeData have been replaced
			// with direct calls to dataPriv methods, these can be deprecated.
			_data: function _data(elem, name, data) {
				return dataPriv.access(elem, name, data);
			},

			_removeData: function _removeData(elem, name) {
				dataPriv.remove(elem, name);
			}
		});

		jQuery.fn.extend({
			data: function data(key, value) {
				var i,
				    name,
				    data,
				    elem = this[0],
				    attrs = elem && elem.attributes;

				// Gets all values
				if (key === undefined) {
					if (this.length) {
						data = dataUser.get(elem);

						if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
							i = attrs.length;
							while (i--) {

								// Support: IE 11 only
								// The attrs elements can be null (#14894)
								if (attrs[i]) {
									name = attrs[i].name;
									if (name.indexOf("data-") === 0) {
										name = jQuery.camelCase(name.slice(5));
										dataAttr(elem, name, data[name]);
									}
								}
							}
							dataPriv.set(elem, "hasDataAttrs", true);
						}
					}

					return data;
				}

				// Sets multiple values
				if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
					return this.each(function () {
						dataUser.set(this, key);
					});
				}

				return access(this, function (value) {
					var data;

					// The calling jQuery object (element matches) is not empty
					// (and therefore has an element appears at this[ 0 ]) and the
					// `value` parameter was not undefined. An empty jQuery object
					// will result in `undefined` for elem = this[ 0 ] which will
					// throw an exception if an attempt to read a data cache is made.
					if (elem && value === undefined) {

						// Attempt to get data from the cache
						// The key will always be camelCased in Data
						data = dataUser.get(elem, key);
						if (data !== undefined) {
							return data;
						}

						// Attempt to "discover" the data in
						// HTML5 custom data-* attrs
						data = dataAttr(elem, key);
						if (data !== undefined) {
							return data;
						}

						// We tried really hard, but the data doesn't exist.
						return;
					}

					// Set the data...
					this.each(function () {

						// We always store the camelCased key
						dataUser.set(this, key, value);
					});
				}, null, value, arguments.length > 1, null, true);
			},

			removeData: function removeData(key) {
				return this.each(function () {
					dataUser.remove(this, key);
				});
			}
		});

		jQuery.extend({
			queue: function queue(elem, type, data) {
				var queue;

				if (elem) {
					type = (type || "fx") + "queue";
					queue = dataPriv.get(elem, type);

					// Speed up dequeue by getting out quickly if this is just a lookup
					if (data) {
						if (!queue || jQuery.isArray(data)) {
							queue = dataPriv.access(elem, type, jQuery.makeArray(data));
						} else {
							queue.push(data);
						}
					}
					return queue || [];
				}
			},

			dequeue: function dequeue(elem, type) {
				type = type || "fx";

				var queue = jQuery.queue(elem, type),
				    startLength = queue.length,
				    fn = queue.shift(),
				    hooks = jQuery._queueHooks(elem, type),
				    next = function next() {
					jQuery.dequeue(elem, type);
				};

				// If the fx queue is dequeued, always remove the progress sentinel
				if (fn === "inprogress") {
					fn = queue.shift();
					startLength--;
				}

				if (fn) {

					// Add a progress sentinel to prevent the fx queue from being
					// automatically dequeued
					if (type === "fx") {
						queue.unshift("inprogress");
					}

					// Clear up the last queue stop function
					delete hooks.stop;
					fn.call(elem, next, hooks);
				}

				if (!startLength && hooks) {
					hooks.empty.fire();
				}
			},

			// Not public - generate a queueHooks object, or return the current one
			_queueHooks: function _queueHooks(elem, type) {
				var key = type + "queueHooks";
				return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
					empty: jQuery.Callbacks("once memory").add(function () {
						dataPriv.remove(elem, [type + "queue", key]);
					})
				});
			}
		});

		jQuery.fn.extend({
			queue: function queue(type, data) {
				var setter = 2;

				if (typeof type !== "string") {
					data = type;
					type = "fx";
					setter--;
				}

				if (arguments.length < setter) {
					return jQuery.queue(this[0], type);
				}

				return data === undefined ? this : this.each(function () {
					var queue = jQuery.queue(this, type, data);

					// Ensure a hooks for this queue
					jQuery._queueHooks(this, type);

					if (type === "fx" && queue[0] !== "inprogress") {
						jQuery.dequeue(this, type);
					}
				});
			},
			dequeue: function dequeue(type) {
				return this.each(function () {
					jQuery.dequeue(this, type);
				});
			},
			clearQueue: function clearQueue(type) {
				return this.queue(type || "fx", []);
			},

			// Get a promise resolved when queues of a certain type
			// are emptied (fx is the type by default)
			promise: function promise(type, obj) {
				var tmp,
				    count = 1,
				    defer = jQuery.Deferred(),
				    elements = this,
				    i = this.length,
				    resolve = function resolve() {
					if (! --count) {
						defer.resolveWith(elements, [elements]);
					}
				};

				if (typeof type !== "string") {
					obj = type;
					type = undefined;
				}
				type = type || "fx";

				while (i--) {
					tmp = dataPriv.get(elements[i], type + "queueHooks");
					if (tmp && tmp.empty) {
						count++;
						tmp.empty.add(resolve);
					}
				}
				resolve();
				return defer.promise(obj);
			}
		});
		var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

		var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

		var cssExpand = ["Top", "Right", "Bottom", "Left"];

		var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" || elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
		};

		var swap = function swap(elem, options, callback, args) {
			var ret,
			    name,
			    old = {};

			// Remember the old values, and insert the new ones
			for (name in options) {
				old[name] = elem.style[name];
				elem.style[name] = options[name];
			}

			ret = callback.apply(elem, args || []);

			// Revert the old values
			for (name in options) {
				elem.style[name] = old[name];
			}

			return ret;
		};

		function adjustCSS(elem, prop, valueParts, tween) {
			var adjusted,
			    scale = 1,
			    maxIterations = 20,
			    currentValue = tween ? function () {
				return tween.cur();
			} : function () {
				return jQuery.css(elem, prop, "");
			},
			    initial = currentValue(),
			    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


			// Starting value computation is required for potential unit mismatches
			initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

			if (initialInUnit && initialInUnit[3] !== unit) {

				// Trust units reported by jQuery.css
				unit = unit || initialInUnit[3];

				// Make sure we update the tween properties later on
				valueParts = valueParts || [];

				// Iteratively approximate from a nonzero starting point
				initialInUnit = +initial || 1;

				do {

					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					initialInUnit = initialInUnit / scale;
					jQuery.style(elem, prop, initialInUnit + unit);

					// Update scale, tolerating zero or NaN from tween.cur()
					// Break the loop if scale is unchanged or perfect, or if we've just had enough.
				} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
			}

			if (valueParts) {
				initialInUnit = +initialInUnit || +initial || 0;

				// Apply relative offset (+=/-=) if specified
				adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
				if (tween) {
					tween.unit = unit;
					tween.start = initialInUnit;
					tween.end = adjusted;
				}
			}
			return adjusted;
		}

		var defaultDisplayMap = {};

		function getDefaultDisplay(elem) {
			var temp,
			    doc = elem.ownerDocument,
			    nodeName = elem.nodeName,
			    display = defaultDisplayMap[nodeName];

			if (display) {
				return display;
			}

			temp = doc.body.appendChild(doc.createElement(nodeName));
			display = jQuery.css(temp, "display");

			temp.parentNode.removeChild(temp);

			if (display === "none") {
				display = "block";
			}
			defaultDisplayMap[nodeName] = display;

			return display;
		}

		function showHide(elements, show) {
			var display,
			    elem,
			    values = [],
			    index = 0,
			    length = elements.length;

			// Determine new display value for elements that need to change
			for (; index < length; index++) {
				elem = elements[index];
				if (!elem.style) {
					continue;
				}

				display = elem.style.display;
				if (show) {

					// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
					// check is required in this first loop unless we have a nonempty display value (either
					// inline or about-to-be-restored)
					if (display === "none") {
						values[index] = dataPriv.get(elem, "display") || null;
						if (!values[index]) {
							elem.style.display = "";
						}
					}
					if (elem.style.display === "" && isHiddenWithinTree(elem)) {
						values[index] = getDefaultDisplay(elem);
					}
				} else {
					if (display !== "none") {
						values[index] = "none";

						// Remember what we're overwriting
						dataPriv.set(elem, "display", display);
					}
				}
			}

			// Set the display of the elements in a second loop to avoid constant reflow
			for (index = 0; index < length; index++) {
				if (values[index] != null) {
					elements[index].style.display = values[index];
				}
			}

			return elements;
		}

		jQuery.fn.extend({
			show: function show() {
				return showHide(this, true);
			},
			hide: function hide() {
				return showHide(this);
			},
			toggle: function toggle(state) {
				if (typeof state === "boolean") {
					return state ? this.show() : this.hide();
				}

				return this.each(function () {
					if (isHiddenWithinTree(this)) {
						jQuery(this).show();
					} else {
						jQuery(this).hide();
					}
				});
			}
		});
		var rcheckableType = /^(?:checkbox|radio)$/i;

		var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;

		var rscriptType = /^$|\/(?:java|ecma)script/i;

		// We have to close these tags to support XHTML (#13200)
		var wrapMap = {

			// Support: IE <=9 only
			option: [1, "<select multiple='multiple'>", "</select>"],

			// XHTML parsers do not magically insert elements in the
			// same way that tag soup parsers do. So we cannot shorten
			// this by omitting <tbody> or other required elements.
			thead: [1, "<table>", "</table>"],
			col: [2, "<table><colgroup>", "</colgroup></table>"],
			tr: [2, "<table><tbody>", "</tbody></table>"],
			td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

			_default: [0, "", ""]
		};

		// Support: IE <=9 only
		wrapMap.optgroup = wrapMap.option;

		wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
		wrapMap.th = wrapMap.td;

		function getAll(context, tag) {

			// Support: IE <=9 - 11 only
			// Use typeof to avoid zero-argument method invocation on host objects (#15151)
			var ret;

			if (typeof context.getElementsByTagName !== "undefined") {
				ret = context.getElementsByTagName(tag || "*");
			} else if (typeof context.querySelectorAll !== "undefined") {
				ret = context.querySelectorAll(tag || "*");
			} else {
				ret = [];
			}

			if (tag === undefined || tag && jQuery.nodeName(context, tag)) {
				return jQuery.merge([context], ret);
			}

			return ret;
		}

		// Mark scripts as having already been evaluated
		function setGlobalEval(elems, refElements) {
			var i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
			}
		}

		var rhtml = /<|&#?\w+;/;

		function buildFragment(elems, context, scripts, selection, ignored) {
			var elem,
			    tmp,
			    tag,
			    wrap,
			    contains,
			    j,
			    fragment = context.createDocumentFragment(),
			    nodes = [],
			    i = 0,
			    l = elems.length;

			for (; i < l; i++) {
				elem = elems[i];

				if (elem || elem === 0) {

					// Add nodes directly
					if (jQuery.type(elem) === "object") {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

						// Convert non-html into a text node
					} else if (!rhtml.test(elem)) {
						nodes.push(context.createTextNode(elem));

						// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild(context.createElement("div"));

						// Deserialize a standard representation
						tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
						wrap = wrapMap[tag] || wrapMap._default;
						tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

						// Descend through wrappers to the right content
						j = wrap[0];
						while (j--) {
							tmp = tmp.lastChild;
						}

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge(nodes, tmp.childNodes);

						// Remember the top-level container
						tmp = fragment.firstChild;

						// Ensure the created nodes are orphaned (#12392)
						tmp.textContent = "";
					}
				}
			}

			// Remove wrapper from fragment
			fragment.textContent = "";

			i = 0;
			while (elem = nodes[i++]) {

				// Skip elements already in the context collection (trac-4087)
				if (selection && jQuery.inArray(elem, selection) > -1) {
					if (ignored) {
						ignored.push(elem);
					}
					continue;
				}

				contains = jQuery.contains(elem.ownerDocument, elem);

				// Append to fragment
				tmp = getAll(fragment.appendChild(elem), "script");

				// Preserve script evaluation history
				if (contains) {
					setGlobalEval(tmp);
				}

				// Capture executables
				if (scripts) {
					j = 0;
					while (elem = tmp[j++]) {
						if (rscriptType.test(elem.type || "")) {
							scripts.push(elem);
						}
					}
				}
			}

			return fragment;
		}

		(function () {
			var fragment = document.createDocumentFragment(),
			    div = fragment.appendChild(document.createElement("div")),
			    input = document.createElement("input");

			// Support: Android 4.0 - 4.3 only
			// Check state lost if the name is set (#11217)
			// Support: Windows Web Apps (WWA)
			// `name` and `type` must use .setAttribute for WWA (#14901)
			input.setAttribute("type", "radio");
			input.setAttribute("checked", "checked");
			input.setAttribute("name", "t");

			div.appendChild(input);

			// Support: Android <=4.1 only
			// Older WebKit doesn't clone checked state correctly in fragments
			support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

			// Support: IE <=11 only
			// Make sure textarea (and checkbox) defaultValue is properly cloned
			div.innerHTML = "<textarea>x</textarea>";
			support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
		})();
		var documentElement = document.documentElement;

		var rkeyEvent = /^key/,
		    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

		function returnTrue() {
			return true;
		}

		function returnFalse() {
			return false;
		}

		// Support: IE <=9 only
		// See #13393 for more info
		function safeActiveElement() {
			try {
				return document.activeElement;
			} catch (err) {}
		}

		function _on(elem, types, selector, data, fn, one) {
			var origFn, type;

			// Types can be a map of types/handlers
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				// ( types-Object, selector, data )
				if (typeof selector !== "string") {

					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for (type in types) {
					_on(elem, type, selector, data, types[type], one);
				}
				return elem;
			}

			if (data == null && fn == null) {

				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if (fn == null) {
				if (typeof selector === "string") {

					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {

					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if (fn === false) {
				fn = returnFalse;
			} else if (!fn) {
				return elem;
			}

			if (one === 1) {
				origFn = fn;
				fn = function fn(event) {

					// Can use an empty set, since event contains the info
					jQuery().off(event);
					return origFn.apply(this, arguments);
				};

				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
			}
			return elem.each(function () {
				jQuery.event.add(this, types, fn, data, selector);
			});
		}

		/*
	  * Helper functions for managing events -- not part of the public interface.
	  * Props to Dean Edwards' addEvent library for many of the ideas.
	  */
		jQuery.event = {

			global: {},

			add: function add(elem, types, handler, data, selector) {

				var handleObjIn,
				    eventHandle,
				    tmp,
				    events,
				    t,
				    handleObj,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = dataPriv.get(elem);

				// Don't attach events to noData or text/comment nodes (but allow plain objects)
				if (!elemData) {
					return;
				}

				// Caller can pass in an object of custom data in lieu of the handler
				if (handler.handler) {
					handleObjIn = handler;
					handler = handleObjIn.handler;
					selector = handleObjIn.selector;
				}

				// Ensure that invalid selectors throw exceptions at attach time
				// Evaluate against documentElement in case elem is a non-element node (e.g., document)
				if (selector) {
					jQuery.find.matchesSelector(documentElement, selector);
				}

				// Make sure that the handler has a unique ID, used to find/remove it later
				if (!handler.guid) {
					handler.guid = jQuery.guid++;
				}

				// Init the element's event structure and main handler, if this is the first
				if (!(events = elemData.events)) {
					events = elemData.events = {};
				}
				if (!(eventHandle = elemData.handle)) {
					eventHandle = elemData.handle = function (e) {

						// Discard the second event of a jQuery.event.trigger() and
						// when an event is called after a page has unloaded
						return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
					};
				}

				// Handle multiple events separated by a space
				types = (types || "").match(rnothtmlwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// There *must* be a type, no attaching namespace-only handlers
					if (!type) {
						continue;
					}

					// If event changes its type, use the special event handlers for the changed type
					special = jQuery.event.special[type] || {};

					// If selector defined, determine special event api type, otherwise given type
					type = (selector ? special.delegateType : special.bindType) || type;

					// Update special based on newly reset type
					special = jQuery.event.special[type] || {};

					// handleObj is passed to all event handlers
					handleObj = jQuery.extend({
						type: type,
						origType: origType,
						data: data,
						handler: handler,
						guid: handler.guid,
						selector: selector,
						needsContext: selector && jQuery.expr.match.needsContext.test(selector),
						namespace: namespaces.join(".")
					}, handleObjIn);

					// Init the event handler queue if we're the first
					if (!(handlers = events[type])) {
						handlers = events[type] = [];
						handlers.delegateCount = 0;

						// Only use addEventListener if the special events handler returns false
						if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

							if (elem.addEventListener) {
								elem.addEventListener(type, eventHandle);
							}
						}
					}

					if (special.add) {
						special.add.call(elem, handleObj);

						if (!handleObj.handler.guid) {
							handleObj.handler.guid = handler.guid;
						}
					}

					// Add to the element's handler list, delegates in front
					if (selector) {
						handlers.splice(handlers.delegateCount++, 0, handleObj);
					} else {
						handlers.push(handleObj);
					}

					// Keep track of which events have ever been used, for event optimization
					jQuery.event.global[type] = true;
				}
			},

			// Detach an event or set of events from an element
			remove: function remove(elem, types, handler, selector, mappedTypes) {

				var j,
				    origCount,
				    tmp,
				    events,
				    t,
				    handleObj,
				    special,
				    handlers,
				    type,
				    namespaces,
				    origType,
				    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

				if (!elemData || !(events = elemData.events)) {
					return;
				}

				// Once for each type.namespace in types; type may be omitted
				types = (types || "").match(rnothtmlwhite) || [""];
				t = types.length;
				while (t--) {
					tmp = rtypenamespace.exec(types[t]) || [];
					type = origType = tmp[1];
					namespaces = (tmp[2] || "").split(".").sort();

					// Unbind all events (on this namespace, if provided) for the element
					if (!type) {
						for (type in events) {
							jQuery.event.remove(elem, type + types[t], handler, selector, true);
						}
						continue;
					}

					special = jQuery.event.special[type] || {};
					type = (selector ? special.delegateType : special.bindType) || type;
					handlers = events[type] || [];
					tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

					// Remove matching events
					origCount = j = handlers.length;
					while (j--) {
						handleObj = handlers[j];

						if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
							handlers.splice(j, 1);

							if (handleObj.selector) {
								handlers.delegateCount--;
							}
							if (special.remove) {
								special.remove.call(elem, handleObj);
							}
						}
					}

					// Remove generic event handler if we removed something and no more handlers exist
					// (avoids potential for endless recursion during removal of special event handlers)
					if (origCount && !handlers.length) {
						if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

							jQuery.removeEvent(elem, type, elemData.handle);
						}

						delete events[type];
					}
				}

				// Remove data and the expando if it's no longer used
				if (jQuery.isEmptyObject(events)) {
					dataPriv.remove(elem, "handle events");
				}
			},

			dispatch: function dispatch(nativeEvent) {

				// Make a writable jQuery.Event from the native event object
				var event = jQuery.event.fix(nativeEvent);

				var i,
				    j,
				    ret,
				    matched,
				    handleObj,
				    handlerQueue,
				    args = new Array(arguments.length),
				    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
				    special = jQuery.event.special[event.type] || {};

				// Use the fix-ed jQuery.Event rather than the (read-only) native event
				args[0] = event;

				for (i = 1; i < arguments.length; i++) {
					args[i] = arguments[i];
				}

				event.delegateTarget = this;

				// Call the preDispatch hook for the mapped type, and let it bail if desired
				if (special.preDispatch && special.preDispatch.call(this, event) === false) {
					return;
				}

				// Determine handlers
				handlerQueue = jQuery.event.handlers.call(this, event, handlers);

				// Run delegates first; they may want to stop propagation beneath us
				i = 0;
				while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
					event.currentTarget = matched.elem;

					j = 0;
					while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

						// Triggered event must either 1) have no namespace, or 2) have namespace(s)
						// a subset or equal to those in the bound event (both can have no namespace).
						if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

							event.handleObj = handleObj;
							event.data = handleObj.data;

							ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

							if (ret !== undefined) {
								if ((event.result = ret) === false) {
									event.preventDefault();
									event.stopPropagation();
								}
							}
						}
					}
				}

				// Call the postDispatch hook for the mapped type
				if (special.postDispatch) {
					special.postDispatch.call(this, event);
				}

				return event.result;
			},

			handlers: function handlers(event, _handlers) {
				var i,
				    handleObj,
				    sel,
				    matchedHandlers,
				    matchedSelectors,
				    handlerQueue = [],
				    delegateCount = _handlers.delegateCount,
				    cur = event.target;

				// Find delegate handlers
				if (delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!(event.type === "click" && event.button >= 1)) {

					for (; cur !== this; cur = cur.parentNode || this) {

						// Don't check non-elements (#13208)
						// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
						if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
							matchedHandlers = [];
							matchedSelectors = {};
							for (i = 0; i < delegateCount; i++) {
								handleObj = _handlers[i];

								// Don't conflict with Object.prototype properties (#13203)
								sel = handleObj.selector + " ";

								if (matchedSelectors[sel] === undefined) {
									matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
								}
								if (matchedSelectors[sel]) {
									matchedHandlers.push(handleObj);
								}
							}
							if (matchedHandlers.length) {
								handlerQueue.push({ elem: cur, handlers: matchedHandlers });
							}
						}
					}
				}

				// Add the remaining (directly-bound) handlers
				cur = this;
				if (delegateCount < _handlers.length) {
					handlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });
				}

				return handlerQueue;
			},

			addProp: function addProp(name, hook) {
				Object.defineProperty(jQuery.Event.prototype, name, {
					enumerable: true,
					configurable: true,

					get: jQuery.isFunction(hook) ? function () {
						if (this.originalEvent) {
							return hook(this.originalEvent);
						}
					} : function () {
						if (this.originalEvent) {
							return this.originalEvent[name];
						}
					},

					set: function set(value) {
						Object.defineProperty(this, name, {
							enumerable: true,
							configurable: true,
							writable: true,
							value: value
						});
					}
				});
			},

			fix: function fix(originalEvent) {
				return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
			},

			special: {
				load: {

					// Prevent triggered image.load events from bubbling to window.load
					noBubble: true
				},
				focus: {

					// Fire native event if possible so blur/focus sequence is correct
					trigger: function trigger() {
						if (this !== safeActiveElement() && this.focus) {
							this.focus();
							return false;
						}
					},
					delegateType: "focusin"
				},
				blur: {
					trigger: function trigger() {
						if (this === safeActiveElement() && this.blur) {
							this.blur();
							return false;
						}
					},
					delegateType: "focusout"
				},
				click: {

					// For checkbox, fire native event so checked state will be right
					trigger: function trigger() {
						if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
							this.click();
							return false;
						}
					},

					// For cross-browser consistency, don't fire native .click() on links
					_default: function _default(event) {
						return jQuery.nodeName(event.target, "a");
					}
				},

				beforeunload: {
					postDispatch: function postDispatch(event) {

						// Support: Firefox 20+
						// Firefox doesn't alert if the returnValue field is not set.
						if (event.result !== undefined && event.originalEvent) {
							event.originalEvent.returnValue = event.result;
						}
					}
				}
			}
		};

		jQuery.removeEvent = function (elem, type, handle) {

			// This "if" is needed for plain objects
			if (elem.removeEventListener) {
				elem.removeEventListener(type, handle);
			}
		};

		jQuery.Event = function (src, props) {

			// Allow instantiation without the 'new' keyword
			if (!(this instanceof jQuery.Event)) {
				return new jQuery.Event(src, props);
			}

			// Event object
			if (src && src.type) {
				this.originalEvent = src;
				this.type = src.type;

				// Events bubbling up the document may have been marked as prevented
				// by a handler lower down the tree; reflect the correct value.
				this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ? returnTrue : returnFalse;

				// Create target properties
				// Support: Safari <=6 - 7 only
				// Target should not be a text node (#504, #13143)
				this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

				this.currentTarget = src.currentTarget;
				this.relatedTarget = src.relatedTarget;

				// Event type
			} else {
				this.type = src;
			}

			// Put explicitly provided properties onto the event object
			if (props) {
				jQuery.extend(this, props);
			}

			// Create a timestamp if incoming event doesn't have one
			this.timeStamp = src && src.timeStamp || jQuery.now();

			// Mark it as fixed
			this[jQuery.expando] = true;
		};

		// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
		// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
		jQuery.Event.prototype = {
			constructor: jQuery.Event,
			isDefaultPrevented: returnFalse,
			isPropagationStopped: returnFalse,
			isImmediatePropagationStopped: returnFalse,
			isSimulated: false,

			preventDefault: function preventDefault() {
				var e = this.originalEvent;

				this.isDefaultPrevented = returnTrue;

				if (e && !this.isSimulated) {
					e.preventDefault();
				}
			},
			stopPropagation: function stopPropagation() {
				var e = this.originalEvent;

				this.isPropagationStopped = returnTrue;

				if (e && !this.isSimulated) {
					e.stopPropagation();
				}
			},
			stopImmediatePropagation: function stopImmediatePropagation() {
				var e = this.originalEvent;

				this.isImmediatePropagationStopped = returnTrue;

				if (e && !this.isSimulated) {
					e.stopImmediatePropagation();
				}

				this.stopPropagation();
			}
		};

		// Includes all common event props including KeyEvent and MouseEvent specific props
		jQuery.each({
			altKey: true,
			bubbles: true,
			cancelable: true,
			changedTouches: true,
			ctrlKey: true,
			detail: true,
			eventPhase: true,
			metaKey: true,
			pageX: true,
			pageY: true,
			shiftKey: true,
			view: true,
			"char": true,
			charCode: true,
			key: true,
			keyCode: true,
			button: true,
			buttons: true,
			clientX: true,
			clientY: true,
			offsetX: true,
			offsetY: true,
			pointerId: true,
			pointerType: true,
			screenX: true,
			screenY: true,
			targetTouches: true,
			toElement: true,
			touches: true,

			which: function which(event) {
				var button = event.button;

				// Add which for key events
				if (event.which == null && rkeyEvent.test(event.type)) {
					return event.charCode != null ? event.charCode : event.keyCode;
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
					if (button & 1) {
						return 1;
					}

					if (button & 2) {
						return 3;
					}

					if (button & 4) {
						return 2;
					}

					return 0;
				}

				return event.which;
			}
		}, jQuery.event.addProp);

		// Create mouseenter/leave events using mouseover/out and event-time checks
		// so that event delegation works in jQuery.
		// Do the same for pointerenter/pointerleave and pointerover/pointerout
		//
		// Support: Safari 7 only
		// Safari sends mouseenter too often; see:
		// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
		// for the description of the bug (it existed in older Chrome versions as well).
		jQuery.each({
			mouseenter: "mouseover",
			mouseleave: "mouseout",
			pointerenter: "pointerover",
			pointerleave: "pointerout"
		}, function (orig, fix) {
			jQuery.event.special[orig] = {
				delegateType: fix,
				bindType: fix,

				handle: function handle(event) {
					var ret,
					    target = this,
					    related = event.relatedTarget,
					    handleObj = event.handleObj;

					// For mouseenter/leave call the handler if related is outside the target.
					// NB: No relatedTarget if the mouse left/entered the browser window
					if (!related || related !== target && !jQuery.contains(target, related)) {
						event.type = handleObj.origType;
						ret = handleObj.handler.apply(this, arguments);
						event.type = fix;
					}
					return ret;
				}
			};
		});

		jQuery.fn.extend({

			on: function on(types, selector, data, fn) {
				return _on(this, types, selector, data, fn);
			},
			one: function one(types, selector, data, fn) {
				return _on(this, types, selector, data, fn, 1);
			},
			off: function off(types, selector, fn) {
				var handleObj, type;
				if (types && types.preventDefault && types.handleObj) {

					// ( event )  dispatched jQuery.Event
					handleObj = types.handleObj;
					jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
					return this;
				}
				if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

					// ( types-object [, selector] )
					for (type in types) {
						this.off(type, selector, types[type]);
					}
					return this;
				}
				if (selector === false || typeof selector === "function") {

					// ( types [, fn] )
					fn = selector;
					selector = undefined;
				}
				if (fn === false) {
					fn = returnFalse;
				}
				return this.each(function () {
					jQuery.event.remove(this, types, fn, selector);
				});
			}
		});

		var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,


		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,


		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		    rscriptTypeMasked = /^true\/(.*)/,
		    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

		function manipulationTarget(elem, content) {
			if (jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

				return elem.getElementsByTagName("tbody")[0] || elem;
			}

			return elem;
		}

		// Replace/restore the type attribute of script elements for safe DOM manipulation
		function disableScript(elem) {
			elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
			return elem;
		}
		function restoreScript(elem) {
			var match = rscriptTypeMasked.exec(elem.type);

			if (match) {
				elem.type = match[1];
			} else {
				elem.removeAttribute("type");
			}

			return elem;
		}

		function cloneCopyEvent(src, dest) {
			var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

			if (dest.nodeType !== 1) {
				return;
			}

			// 1. Copy private data: events, handlers, etc.
			if (dataPriv.hasData(src)) {
				pdataOld = dataPriv.access(src);
				pdataCur = dataPriv.set(dest, pdataOld);
				events = pdataOld.events;

				if (events) {
					delete pdataCur.handle;
					pdataCur.events = {};

					for (type in events) {
						for (i = 0, l = events[type].length; i < l; i++) {
							jQuery.event.add(dest, type, events[type][i]);
						}
					}
				}
			}

			// 2. Copy user data
			if (dataUser.hasData(src)) {
				udataOld = dataUser.access(src);
				udataCur = jQuery.extend({}, udataOld);

				dataUser.set(dest, udataCur);
			}
		}

		// Fix IE bugs, see support tests
		function fixInput(src, dest) {
			var nodeName = dest.nodeName.toLowerCase();

			// Fails to persist the checked state of a cloned checkbox or radio button.
			if (nodeName === "input" && rcheckableType.test(src.type)) {
				dest.checked = src.checked;

				// Fails to return the selected option to the default selected state when cloning options
			} else if (nodeName === "input" || nodeName === "textarea") {
				dest.defaultValue = src.defaultValue;
			}
		}

		function domManip(collection, args, callback, ignored) {

			// Flatten any nested arrays
			args = concat.apply([], args);

			var fragment,
			    first,
			    scripts,
			    hasScripts,
			    node,
			    doc,
			    i = 0,
			    l = collection.length,
			    iNoClone = l - 1,
			    value = args[0],
			    isFunction = jQuery.isFunction(value);

			// We can't cloneNode fragments that contain checked, in WebKit
			if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
				return collection.each(function (index) {
					var self = collection.eq(index);
					if (isFunction) {
						args[0] = value.call(this, index, self.html());
					}
					domManip(self, args, callback, ignored);
				});
			}

			if (l) {
				fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
				first = fragment.firstChild;

				if (fragment.childNodes.length === 1) {
					fragment = first;
				}

				// Require either new content or an interest in ignored elements to invoke the callback
				if (first || ignored) {
					scripts = jQuery.map(getAll(fragment, "script"), disableScript);
					hasScripts = scripts.length;

					// Use the original fragment for the last item
					// instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for (; i < l; i++) {
						node = fragment;

						if (i !== iNoClone) {
							node = jQuery.clone(node, true, true);

							// Keep references to cloned scripts for later restoration
							if (hasScripts) {

								// Support: Android <=4.0 only, PhantomJS 1 only
								// push.apply(_, arraylike) throws on ancient WebKit
								jQuery.merge(scripts, getAll(node, "script"));
							}
						}

						callback.call(collection[i], node, i);
					}

					if (hasScripts) {
						doc = scripts[scripts.length - 1].ownerDocument;

						// Reenable scripts
						jQuery.map(scripts, restoreScript);

						// Evaluate executable scripts on first document insertion
						for (i = 0; i < hasScripts; i++) {
							node = scripts[i];
							if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

								if (node.src) {

									// Optional AJAX dependency, but won't run scripts if not present
									if (jQuery._evalUrl) {
										jQuery._evalUrl(node.src);
									}
								} else {
									DOMEval(node.textContent.replace(rcleanScript, ""), doc);
								}
							}
						}
					}
				}
			}

			return collection;
		}

		function _remove(elem, selector, keepData) {
			var node,
			    nodes = selector ? jQuery.filter(selector, elem) : elem,
			    i = 0;

			for (; (node = nodes[i]) != null; i++) {
				if (!keepData && node.nodeType === 1) {
					jQuery.cleanData(getAll(node));
				}

				if (node.parentNode) {
					if (keepData && jQuery.contains(node.ownerDocument, node)) {
						setGlobalEval(getAll(node, "script"));
					}
					node.parentNode.removeChild(node);
				}
			}

			return elem;
		}

		jQuery.extend({
			htmlPrefilter: function htmlPrefilter(html) {
				return html.replace(rxhtmlTag, "<$1></$2>");
			},

			clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
				var i,
				    l,
				    srcElements,
				    destElements,
				    clone = elem.cloneNode(true),
				    inPage = jQuery.contains(elem.ownerDocument, elem);

				// Fix IE cloning issues
				if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

					// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
					destElements = getAll(clone);
					srcElements = getAll(elem);

					for (i = 0, l = srcElements.length; i < l; i++) {
						fixInput(srcElements[i], destElements[i]);
					}
				}

				// Copy the events from the original to the clone
				if (dataAndEvents) {
					if (deepDataAndEvents) {
						srcElements = srcElements || getAll(elem);
						destElements = destElements || getAll(clone);

						for (i = 0, l = srcElements.length; i < l; i++) {
							cloneCopyEvent(srcElements[i], destElements[i]);
						}
					} else {
						cloneCopyEvent(elem, clone);
					}
				}

				// Preserve script evaluation history
				destElements = getAll(clone, "script");
				if (destElements.length > 0) {
					setGlobalEval(destElements, !inPage && getAll(elem, "script"));
				}

				// Return the cloned set
				return clone;
			},

			cleanData: function cleanData(elems) {
				var data,
				    elem,
				    type,
				    special = jQuery.event.special,
				    i = 0;

				for (; (elem = elems[i]) !== undefined; i++) {
					if (acceptData(elem)) {
						if (data = elem[dataPriv.expando]) {
							if (data.events) {
								for (type in data.events) {
									if (special[type]) {
										jQuery.event.remove(elem, type);

										// This is a shortcut to avoid jQuery.event.remove's overhead
									} else {
										jQuery.removeEvent(elem, type, data.handle);
									}
								}
							}

							// Support: Chrome <=35 - 45+
							// Assign undefined instead of using delete, see Data#remove
							elem[dataPriv.expando] = undefined;
						}
						if (elem[dataUser.expando]) {

							// Support: Chrome <=35 - 45+
							// Assign undefined instead of using delete, see Data#remove
							elem[dataUser.expando] = undefined;
						}
					}
				}
			}
		});

		jQuery.fn.extend({
			detach: function detach(selector) {
				return _remove(this, selector, true);
			},

			remove: function remove(selector) {
				return _remove(this, selector);
			},

			text: function text(value) {
				return access(this, function (value) {
					return value === undefined ? jQuery.text(this) : this.empty().each(function () {
						if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
							this.textContent = value;
						}
					});
				}, null, value, arguments.length);
			},

			append: function append() {
				return domManip(this, arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.appendChild(elem);
					}
				});
			},

			prepend: function prepend() {
				return domManip(this, arguments, function (elem) {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						var target = manipulationTarget(this, elem);
						target.insertBefore(elem, target.firstChild);
					}
				});
			},

			before: function before() {
				return domManip(this, arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this);
					}
				});
			},

			after: function after() {
				return domManip(this, arguments, function (elem) {
					if (this.parentNode) {
						this.parentNode.insertBefore(elem, this.nextSibling);
					}
				});
			},

			empty: function empty() {
				var elem,
				    i = 0;

				for (; (elem = this[i]) != null; i++) {
					if (elem.nodeType === 1) {

						// Prevent memory leaks
						jQuery.cleanData(getAll(elem, false));

						// Remove any remaining nodes
						elem.textContent = "";
					}
				}

				return this;
			},

			clone: function clone(dataAndEvents, deepDataAndEvents) {
				dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
				deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

				return this.map(function () {
					return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
				});
			},

			html: function html(value) {
				return access(this, function (value) {
					var elem = this[0] || {},
					    i = 0,
					    l = this.length;

					if (value === undefined && elem.nodeType === 1) {
						return elem.innerHTML;
					}

					// See if we can take a shortcut and just use innerHTML
					if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

						value = jQuery.htmlPrefilter(value);

						try {
							for (; i < l; i++) {
								elem = this[i] || {};

								// Remove element nodes and prevent memory leaks
								if (elem.nodeType === 1) {
									jQuery.cleanData(getAll(elem, false));
									elem.innerHTML = value;
								}
							}

							elem = 0;

							// If using innerHTML throws an exception, use the fallback method
						} catch (e) {}
					}

					if (elem) {
						this.empty().append(value);
					}
				}, null, value, arguments.length);
			},

			replaceWith: function replaceWith() {
				var ignored = [];

				// Make the changes, replacing each non-ignored context element with the new content
				return domManip(this, arguments, function (elem) {
					var parent = this.parentNode;

					if (jQuery.inArray(this, ignored) < 0) {
						jQuery.cleanData(getAll(this));
						if (parent) {
							parent.replaceChild(elem, this);
						}
					}

					// Force callback invocation
				}, ignored);
			}
		});

		jQuery.each({
			appendTo: "append",
			prependTo: "prepend",
			insertBefore: "before",
			insertAfter: "after",
			replaceAll: "replaceWith"
		}, function (name, original) {
			jQuery.fn[name] = function (selector) {
				var elems,
				    ret = [],
				    insert = jQuery(selector),
				    last = insert.length - 1,
				    i = 0;

				for (; i <= last; i++) {
					elems = i === last ? this : this.clone(true);
					jQuery(insert[i])[original](elems);

					// Support: Android <=4.0 only, PhantomJS 1 only
					// .get() because push.apply(_, arraylike) throws on ancient WebKit
					push.apply(ret, elems.get());
				}

				return this.pushStack(ret);
			};
		});
		var rmargin = /^margin/;

		var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

		var getStyles = function getStyles(elem) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if (!view || !view.opener) {
				view = window;
			}

			return view.getComputedStyle(elem);
		};

		(function () {

			// Executing both pixelPosition & boxSizingReliable tests require only one layout
			// so they're executed at the same time to save the second computation.
			function computeStyleTests() {

				// This is a singleton, we need to execute it only once
				if (!div) {
					return;
				}

				div.style.cssText = "box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
				div.innerHTML = "";
				documentElement.appendChild(container);

				var divStyle = window.getComputedStyle(div);
				pixelPositionVal = divStyle.top !== "1%";

				// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
				reliableMarginLeftVal = divStyle.marginLeft === "2px";
				boxSizingReliableVal = divStyle.width === "4px";

				// Support: Android 4.0 - 4.3 only
				// Some styles come back with percentage values, even though they shouldn't
				div.style.marginRight = "50%";
				pixelMarginRightVal = divStyle.marginRight === "4px";

				documentElement.removeChild(container);

				// Nullify the div so it wouldn't be stored in the memory and
				// it will also be a sign that checks already performed
				div = null;
			}

			var pixelPositionVal,
			    boxSizingReliableVal,
			    pixelMarginRightVal,
			    reliableMarginLeftVal,
			    container = document.createElement("div"),
			    div = document.createElement("div");

			// Finish early in limited (non-browser) environments
			if (!div.style) {
				return;
			}

			// Support: IE <=9 - 11 only
			// Style of cloned element affects source element cloned (#8908)
			div.style.backgroundClip = "content-box";
			div.cloneNode(true).style.backgroundClip = "";
			support.clearCloneStyle = div.style.backgroundClip === "content-box";

			container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
			container.appendChild(div);

			jQuery.extend(support, {
				pixelPosition: function pixelPosition() {
					computeStyleTests();
					return pixelPositionVal;
				},
				boxSizingReliable: function boxSizingReliable() {
					computeStyleTests();
					return boxSizingReliableVal;
				},
				pixelMarginRight: function pixelMarginRight() {
					computeStyleTests();
					return pixelMarginRightVal;
				},
				reliableMarginLeft: function reliableMarginLeft() {
					computeStyleTests();
					return reliableMarginLeftVal;
				}
			});
		})();

		function curCSS(elem, name, computed) {
			var width,
			    minWidth,
			    maxWidth,
			    ret,
			    style = elem.style;

			computed = computed || getStyles(elem);

			// Support: IE <=9 only
			// getPropertyValue is only needed for .css('filter') (#12537)
			if (computed) {
				ret = computed.getPropertyValue(name) || computed[name];

				if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
					ret = jQuery.style(elem, name);
				}

				// A tribute to the "awesome hack by Dean Edwards"
				// Android Browser returns percentage for some values,
				// but width seems to be reliably pixels.
				// This is against the CSSOM draft spec:
				// https://drafts.csswg.org/cssom/#resolved-values
				if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" : ret;
		}

		function addGetHookIf(conditionFn, hookFn) {

			// Define the hook, we'll check on the first run if it's really needed.
			return {
				get: function get() {
					if (conditionFn()) {

						// Hook not needed (or it's not possible to use it due
						// to missing dependency), remove it.
						delete this.get;
						return;
					}

					// Hook needed; redefine it so that the support test is not executed again.
					return (this.get = hookFn).apply(this, arguments);
				}
			};
		}

		var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		    cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
		    cssPrefixes = ["Webkit", "Moz", "ms"],
		    emptyStyle = document.createElement("div").style;

		// Return a css property mapped to a potentially vendor prefixed property
		function vendorPropName(name) {

			// Shortcut for names that are not vendor prefixed
			if (name in emptyStyle) {
				return name;
			}

			// Check for vendor prefixed names
			var capName = name[0].toUpperCase() + name.slice(1),
			    i = cssPrefixes.length;

			while (i--) {
				name = cssPrefixes[i] + capName;
				if (name in emptyStyle) {
					return name;
				}
			}
		}

		function setPositiveNumber(elem, value, subtract) {

			// Any relative (+/-) values have already been
			// normalized at this point
			var matches = rcssNum.exec(value);
			return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
		}

		function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
			var i,
			    val = 0;

			// If we already have the right measurement, avoid augmentation
			if (extra === (isBorderBox ? "border" : "content")) {
				i = 4;

				// Otherwise initialize for horizontal or vertical properties
			} else {
				i = name === "width" ? 1 : 0;
			}

			for (; i < 4; i += 2) {

				// Both box models exclude margin, so add it if we want it
				if (extra === "margin") {
					val += jQuery.css(elem, extra + cssExpand[i], true, styles);
				}

				if (isBorderBox) {

					// border-box includes padding, so remove it if we want content
					if (extra === "content") {
						val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
					}

					// At this point, extra isn't border nor margin, so remove border
					if (extra !== "margin") {
						val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				} else {

					// At this point, extra isn't content, so add padding
					val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

					// At this point, extra isn't content nor padding, so add border
					if (extra !== "padding") {
						val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
					}
				}
			}

			return val;
		}

		function getWidthOrHeight(elem, name, extra) {

			// Start with offset property, which is equivalent to the border-box value
			var val,
			    valueIsBorderBox = true,
			    styles = getStyles(elem),
			    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

			// Support: IE <=11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if (elem.getClientRects().length) {
				val = elem.getBoundingClientRect()[name];
			}

			// Some non-html elements return undefined for offsetWidth, so check for null/undefined
			// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
			// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
			if (val <= 0 || val == null) {

				// Fall back to computed then uncomputed css if necessary
				val = curCSS(elem, name, styles);
				if (val < 0 || val == null) {
					val = elem.style[name];
				}

				// Computed unit is not pixels. Stop here and return.
				if (rnumnonpx.test(val)) {
					return val;
				}

				// Check for style in case a browser which returns unreliable values
				// for getComputedStyle silently falls back to the reliable elem.style
				valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

				// Normalize "", auto, and prepare for extra
				val = parseFloat(val) || 0;
			}

			// Use the active box-sizing model to add/subtract irrelevant styles
			return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
		}

		jQuery.extend({

			// Add in style property hooks for overriding the default
			// behavior of getting and setting a style property
			cssHooks: {
				opacity: {
					get: function get(elem, computed) {
						if (computed) {

							// We should always get a number back from opacity
							var ret = curCSS(elem, "opacity");
							return ret === "" ? "1" : ret;
						}
					}
				}
			},

			// Don't automatically add "px" to these possibly-unitless properties
			cssNumber: {
				"animationIterationCount": true,
				"columnCount": true,
				"fillOpacity": true,
				"flexGrow": true,
				"flexShrink": true,
				"fontWeight": true,
				"lineHeight": true,
				"opacity": true,
				"order": true,
				"orphans": true,
				"widows": true,
				"zIndex": true,
				"zoom": true
			},

			// Add in properties whose names you wish to fix before
			// setting or getting the value
			cssProps: {
				"float": "cssFloat"
			},

			// Get and set the style property on a DOM Node
			style: function style(elem, name, value, extra) {

				// Don't set styles on text and comment nodes
				if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
					return;
				}

				// Make sure that we're working with the right name
				var ret,
				    type,
				    hooks,
				    origName = jQuery.camelCase(name),
				    style = elem.style;

				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

				// Gets hook for the prefixed version, then unprefixed version
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// Check if we're setting a value
				if (value !== undefined) {
					type = typeof value === "undefined" ? "undefined" : _typeof(value);

					// Convert "+=" or "-=" to relative numbers (#7345)
					if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
						value = adjustCSS(elem, name, ret);

						// Fixes bug #9237
						type = "number";
					}

					// Make sure that null and NaN values aren't set (#7116)
					if (value == null || value !== value) {
						return;
					}

					// If a number was passed in, add the unit (except for certain CSS properties)
					if (type === "number") {
						value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
					}

					// background-* props affect original clone's values
					if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
						style[name] = "inherit";
					}

					// If a hook was provided, use that value, otherwise just set the specified value
					if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

						style[name] = value;
					}
				} else {

					// If a hook was provided get the non-computed value from there
					if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

						return ret;
					}

					// Otherwise just get the value from the style object
					return style[name];
				}
			},

			css: function css(elem, name, extra, styles) {
				var val,
				    num,
				    hooks,
				    origName = jQuery.camelCase(name);

				// Make sure that we're working with the right name
				name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

				// Try prefixed name followed by the unprefixed name
				hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

				// If a hook was provided get the computed value from there
				if (hooks && "get" in hooks) {
					val = hooks.get(elem, true, extra);
				}

				// Otherwise, if a way to get the computed value exists, use that
				if (val === undefined) {
					val = curCSS(elem, name, styles);
				}

				// Convert "normal" to computed value
				if (val === "normal" && name in cssNormalTransform) {
					val = cssNormalTransform[name];
				}

				// Make numeric if forced or a qualifier was provided and val looks numeric
				if (extra === "" || extra) {
					num = parseFloat(val);
					return extra === true || isFinite(num) ? num || 0 : val;
				}
				return val;
			}
		});

		jQuery.each(["height", "width"], function (i, name) {
			jQuery.cssHooks[name] = {
				get: function get(elem, computed, extra) {
					if (computed) {

						// Certain elements can have dimension info if we invisibly show them
						// but it must have a current display style that would benefit
						return rdisplayswap.test(jQuery.css(elem, "display")) && (

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
							return getWidthOrHeight(elem, name, extra);
						}) : getWidthOrHeight(elem, name, extra);
					}
				},

				set: function set(elem, value, extra) {
					var matches,
					    styles = extra && getStyles(elem),
					    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

					// Convert to pixels if value adjustment is needed
					if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

						elem.style[name] = value;
						value = jQuery.css(elem, name);
					}

					return setPositiveNumber(elem, value, subtract);
				}
			};
		});

		jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
			if (computed) {
				return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
					return elem.getBoundingClientRect().left;
				})) + "px";
			}
		});

		// These hooks are used by animate to expand properties
		jQuery.each({
			margin: "",
			padding: "",
			border: "Width"
		}, function (prefix, suffix) {
			jQuery.cssHooks[prefix + suffix] = {
				expand: function expand(value) {
					var i = 0,
					    expanded = {},


					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [value];

					for (; i < 4; i++) {
						expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
					}

					return expanded;
				}
			};

			if (!rmargin.test(prefix)) {
				jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
			}
		});

		jQuery.fn.extend({
			css: function css(name, value) {
				return access(this, function (elem, name, value) {
					var styles,
					    len,
					    map = {},
					    i = 0;

					if (jQuery.isArray(name)) {
						styles = getStyles(elem);
						len = name.length;

						for (; i < len; i++) {
							map[name[i]] = jQuery.css(elem, name[i], false, styles);
						}

						return map;
					}

					return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
				}, name, value, arguments.length > 1);
			}
		});

		function Tween(elem, options, prop, end, easing) {
			return new Tween.prototype.init(elem, options, prop, end, easing);
		}
		jQuery.Tween = Tween;

		Tween.prototype = {
			constructor: Tween,
			init: function init(elem, options, prop, end, easing, unit) {
				this.elem = elem;
				this.prop = prop;
				this.easing = easing || jQuery.easing._default;
				this.options = options;
				this.start = this.now = this.cur();
				this.end = end;
				this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
			},
			cur: function cur() {
				var hooks = Tween.propHooks[this.prop];

				return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
			},
			run: function run(percent) {
				var eased,
				    hooks = Tween.propHooks[this.prop];

				if (this.options.duration) {
					this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
				} else {
					this.pos = eased = percent;
				}
				this.now = (this.end - this.start) * eased + this.start;

				if (this.options.step) {
					this.options.step.call(this.elem, this.now, this);
				}

				if (hooks && hooks.set) {
					hooks.set(this);
				} else {
					Tween.propHooks._default.set(this);
				}
				return this;
			}
		};

		Tween.prototype.init.prototype = Tween.prototype;

		Tween.propHooks = {
			_default: {
				get: function get(tween) {
					var result;

					// Use a property on the element directly when it is not a DOM element,
					// or when there is no matching style property that exists.
					if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
						return tween.elem[tween.prop];
					}

					// Passing an empty string as a 3rd parameter to .css will automatically
					// attempt a parseFloat and fallback to a string if the parse fails.
					// Simple values such as "10px" are parsed to Float;
					// complex values such as "rotate(1rad)" are returned as-is.
					result = jQuery.css(tween.elem, tween.prop, "");

					// Empty strings, null, undefined and "auto" are converted to 0.
					return !result || result === "auto" ? 0 : result;
				},
				set: function set(tween) {

					// Use step hook for back compat.
					// Use cssHook if its there.
					// Use .style if available and use plain properties where available.
					if (jQuery.fx.step[tween.prop]) {
						jQuery.fx.step[tween.prop](tween);
					} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
						jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
					} else {
						tween.elem[tween.prop] = tween.now;
					}
				}
			}
		};

		// Support: IE <=9 only
		// Panic based approach to setting things on disconnected nodes
		Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
			set: function set(tween) {
				if (tween.elem.nodeType && tween.elem.parentNode) {
					tween.elem[tween.prop] = tween.now;
				}
			}
		};

		jQuery.easing = {
			linear: function linear(p) {
				return p;
			},
			swing: function swing(p) {
				return 0.5 - Math.cos(p * Math.PI) / 2;
			},
			_default: "swing"
		};

		jQuery.fx = Tween.prototype.init;

		// Back compat <1.8 extension point
		jQuery.fx.step = {};

		var fxNow,
		    timerId,
		    rfxtypes = /^(?:toggle|show|hide)$/,
		    rrun = /queueHooks$/;

		function raf() {
			if (timerId) {
				window.requestAnimationFrame(raf);
				jQuery.fx.tick();
			}
		}

		// Animations created synchronously will run synchronously
		function createFxNow() {
			window.setTimeout(function () {
				fxNow = undefined;
			});
			return fxNow = jQuery.now();
		}

		// Generate parameters to create a standard animation
		function genFx(type, includeWidth) {
			var which,
			    i = 0,
			    attrs = { height: type };

			// If we include width, step value is 1 to do all cssExpand values,
			// otherwise step value is 2 to skip over Left and Right
			includeWidth = includeWidth ? 1 : 0;
			for (; i < 4; i += 2 - includeWidth) {
				which = cssExpand[i];
				attrs["margin" + which] = attrs["padding" + which] = type;
			}

			if (includeWidth) {
				attrs.opacity = attrs.width = type;
			}

			return attrs;
		}

		function createTween(value, prop, animation) {
			var tween,
			    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
			    index = 0,
			    length = collection.length;
			for (; index < length; index++) {
				if (tween = collection[index].call(animation, prop, value)) {

					// We're done with this property
					return tween;
				}
			}
		}

		function defaultPrefilter(elem, props, opts) {
			var prop,
			    value,
			    toggle,
			    hooks,
			    oldfire,
			    propTween,
			    restoreDisplay,
			    display,
			    isBox = "width" in props || "height" in props,
			    anim = this,
			    orig = {},
			    style = elem.style,
			    hidden = elem.nodeType && isHiddenWithinTree(elem),
			    dataShow = dataPriv.get(elem, "fxshow");

			// Queue-skipping animations hijack the fx hooks
			if (!opts.queue) {
				hooks = jQuery._queueHooks(elem, "fx");
				if (hooks.unqueued == null) {
					hooks.unqueued = 0;
					oldfire = hooks.empty.fire;
					hooks.empty.fire = function () {
						if (!hooks.unqueued) {
							oldfire();
						}
					};
				}
				hooks.unqueued++;

				anim.always(function () {

					// Ensure the complete handler is called before this completes
					anim.always(function () {
						hooks.unqueued--;
						if (!jQuery.queue(elem, "fx").length) {
							hooks.empty.fire();
						}
					});
				});
			}

			// Detect show/hide animations
			for (prop in props) {
				value = props[prop];
				if (rfxtypes.test(value)) {
					delete props[prop];
					toggle = toggle || value === "toggle";
					if (value === (hidden ? "hide" : "show")) {

						// Pretend to be hidden if this is a "show" and
						// there is still data from a stopped show/hide
						if (value === "show" && dataShow && dataShow[prop] !== undefined) {
							hidden = true;

							// Ignore all other no-op show/hide data
						} else {
							continue;
						}
					}
					orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
				}
			}

			// Bail out if this is a no-op like .hide().hide()
			propTween = !jQuery.isEmptyObject(props);
			if (!propTween && jQuery.isEmptyObject(orig)) {
				return;
			}

			// Restrict "overflow" and "display" styles during box animations
			if (isBox && elem.nodeType === 1) {

				// Support: IE <=9 - 11, Edge 12 - 13
				// Record all 3 overflow attributes because IE does not infer the shorthand
				// from identically-valued overflowX and overflowY
				opts.overflow = [style.overflow, style.overflowX, style.overflowY];

				// Identify a display type, preferring old show/hide data over the CSS cascade
				restoreDisplay = dataShow && dataShow.display;
				if (restoreDisplay == null) {
					restoreDisplay = dataPriv.get(elem, "display");
				}
				display = jQuery.css(elem, "display");
				if (display === "none") {
					if (restoreDisplay) {
						display = restoreDisplay;
					} else {

						// Get nonempty value(s) by temporarily forcing visibility
						showHide([elem], true);
						restoreDisplay = elem.style.display || restoreDisplay;
						display = jQuery.css(elem, "display");
						showHide([elem]);
					}
				}

				// Animate inline elements as inline-block
				if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
					if (jQuery.css(elem, "float") === "none") {

						// Restore the original display value at the end of pure show/hide animations
						if (!propTween) {
							anim.done(function () {
								style.display = restoreDisplay;
							});
							if (restoreDisplay == null) {
								display = style.display;
								restoreDisplay = display === "none" ? "" : display;
							}
						}
						style.display = "inline-block";
					}
				}
			}

			if (opts.overflow) {
				style.overflow = "hidden";
				anim.always(function () {
					style.overflow = opts.overflow[0];
					style.overflowX = opts.overflow[1];
					style.overflowY = opts.overflow[2];
				});
			}

			// Implement show/hide animations
			propTween = false;
			for (prop in orig) {

				// General show/hide setup for this element animation
				if (!propTween) {
					if (dataShow) {
						if ("hidden" in dataShow) {
							hidden = dataShow.hidden;
						}
					} else {
						dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
					}

					// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
					if (toggle) {
						dataShow.hidden = !hidden;
					}

					// Show elements before animating them
					if (hidden) {
						showHide([elem], true);
					}

					/* eslint-disable no-loop-func */

					anim.done(function () {

						/* eslint-enable no-loop-func */

						// The final step of a "hide" animation is actually hiding the element
						if (!hidden) {
							showHide([elem]);
						}
						dataPriv.remove(elem, "fxshow");
						for (prop in orig) {
							jQuery.style(elem, prop, orig[prop]);
						}
					});
				}

				// Per-property setup
				propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
				if (!(prop in dataShow)) {
					dataShow[prop] = propTween.start;
					if (hidden) {
						propTween.end = propTween.start;
						propTween.start = 0;
					}
				}
			}
		}

		function propFilter(props, specialEasing) {
			var index, name, easing, value, hooks;

			// camelCase, specialEasing and expand cssHook pass
			for (index in props) {
				name = jQuery.camelCase(index);
				easing = specialEasing[name];
				value = props[index];
				if (jQuery.isArray(value)) {
					easing = value[1];
					value = props[index] = value[0];
				}

				if (index !== name) {
					props[name] = value;
					delete props[index];
				}

				hooks = jQuery.cssHooks[name];
				if (hooks && "expand" in hooks) {
					value = hooks.expand(value);
					delete props[name];

					// Not quite $.extend, this won't overwrite existing keys.
					// Reusing 'index' because we have the correct "name"
					for (index in value) {
						if (!(index in props)) {
							props[index] = value[index];
							specialEasing[index] = easing;
						}
					}
				} else {
					specialEasing[name] = easing;
				}
			}
		}

		function Animation(elem, properties, options) {
			var result,
			    stopped,
			    index = 0,
			    length = Animation.prefilters.length,
			    deferred = jQuery.Deferred().always(function () {

				// Don't match elem in the :animated selector
				delete tick.elem;
			}),
			    tick = function tick() {
				if (stopped) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
				    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				    percent = 1 - temp,
				    index = 0,
				    length = animation.tweens.length;

				for (; index < length; index++) {
					animation.tweens[index].run(percent);
				}

				deferred.notifyWith(elem, [animation, percent, remaining]);

				if (percent < 1 && length) {
					return remaining;
				} else {
					deferred.resolveWith(elem, [animation]);
					return false;
				}
			},
			    animation = deferred.promise({
				elem: elem,
				props: jQuery.extend({}, properties),
				opts: jQuery.extend(true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function createTween(prop, end) {
					var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
					animation.tweens.push(tween);
					return tween;
				},
				stop: function stop(gotoEnd) {
					var index = 0,


					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
					if (stopped) {
						return this;
					}
					stopped = true;
					for (; index < length; index++) {
						animation.tweens[index].run(1);
					}

					// Resolve when we played the last frame; otherwise, reject
					if (gotoEnd) {
						deferred.notifyWith(elem, [animation, 1, 0]);
						deferred.resolveWith(elem, [animation, gotoEnd]);
					} else {
						deferred.rejectWith(elem, [animation, gotoEnd]);
					}
					return this;
				}
			}),
			    props = animation.props;

			propFilter(props, animation.opts.specialEasing);

			for (; index < length; index++) {
				result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
				if (result) {
					if (jQuery.isFunction(result.stop)) {
						jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
					}
					return result;
				}
			}

			jQuery.map(props, createTween, animation);

			if (jQuery.isFunction(animation.opts.start)) {
				animation.opts.start.call(elem, animation);
			}

			jQuery.fx.timer(jQuery.extend(tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			}));

			// attach callbacks from options
			return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
		}

		jQuery.Animation = jQuery.extend(Animation, {

			tweeners: {
				"*": [function (prop, value) {
					var tween = this.createTween(prop, value);
					adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
					return tween;
				}]
			},

			tweener: function tweener(props, callback) {
				if (jQuery.isFunction(props)) {
					callback = props;
					props = ["*"];
				} else {
					props = props.match(rnothtmlwhite);
				}

				var prop,
				    index = 0,
				    length = props.length;

				for (; index < length; index++) {
					prop = props[index];
					Animation.tweeners[prop] = Animation.tweeners[prop] || [];
					Animation.tweeners[prop].unshift(callback);
				}
			},

			prefilters: [defaultPrefilter],

			prefilter: function prefilter(callback, prepend) {
				if (prepend) {
					Animation.prefilters.unshift(callback);
				} else {
					Animation.prefilters.push(callback);
				}
			}
		});

		jQuery.speed = function (speed, easing, fn) {
			var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
				complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
				duration: speed,
				easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
			};

			// Go to the end state if fx are off or if document is hidden
			if (jQuery.fx.off || document.hidden) {
				opt.duration = 0;
			} else {
				if (typeof opt.duration !== "number") {
					if (opt.duration in jQuery.fx.speeds) {
						opt.duration = jQuery.fx.speeds[opt.duration];
					} else {
						opt.duration = jQuery.fx.speeds._default;
					}
				}
			}

			// Normalize opt.queue - true/undefined/null -> "fx"
			if (opt.queue == null || opt.queue === true) {
				opt.queue = "fx";
			}

			// Queueing
			opt.old = opt.complete;

			opt.complete = function () {
				if (jQuery.isFunction(opt.old)) {
					opt.old.call(this);
				}

				if (opt.queue) {
					jQuery.dequeue(this, opt.queue);
				}
			};

			return opt;
		};

		jQuery.fn.extend({
			fadeTo: function fadeTo(speed, to, easing, callback) {

				// Show any hidden elements after setting opacity to 0
				return this.filter(isHiddenWithinTree).css("opacity", 0).show()

				// Animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback);
			},
			animate: function animate(prop, speed, easing, callback) {
				var empty = jQuery.isEmptyObject(prop),
				    optall = jQuery.speed(speed, easing, callback),
				    doAnimation = function doAnimation() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation(this, jQuery.extend({}, prop), optall);

					// Empty animations, or finishing resolves immediately
					if (empty || dataPriv.get(this, "finish")) {
						anim.stop(true);
					}
				};
				doAnimation.finish = doAnimation;

				return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
			},
			stop: function stop(type, clearQueue, gotoEnd) {
				var stopQueue = function stopQueue(hooks) {
					var stop = hooks.stop;
					delete hooks.stop;
					stop(gotoEnd);
				};

				if (typeof type !== "string") {
					gotoEnd = clearQueue;
					clearQueue = type;
					type = undefined;
				}
				if (clearQueue && type !== false) {
					this.queue(type || "fx", []);
				}

				return this.each(function () {
					var dequeue = true,
					    index = type != null && type + "queueHooks",
					    timers = jQuery.timers,
					    data = dataPriv.get(this);

					if (index) {
						if (data[index] && data[index].stop) {
							stopQueue(data[index]);
						}
					} else {
						for (index in data) {
							if (data[index] && data[index].stop && rrun.test(index)) {
								stopQueue(data[index]);
							}
						}
					}

					for (index = timers.length; index--;) {
						if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

							timers[index].anim.stop(gotoEnd);
							dequeue = false;
							timers.splice(index, 1);
						}
					}

					// Start the next in the queue if the last step wasn't forced.
					// Timers currently will call their complete callbacks, which
					// will dequeue but only if they were gotoEnd.
					if (dequeue || !gotoEnd) {
						jQuery.dequeue(this, type);
					}
				});
			},
			finish: function finish(type) {
				if (type !== false) {
					type = type || "fx";
				}
				return this.each(function () {
					var index,
					    data = dataPriv.get(this),
					    queue = data[type + "queue"],
					    hooks = data[type + "queueHooks"],
					    timers = jQuery.timers,
					    length = queue ? queue.length : 0;

					// Enable finishing flag on private data
					data.finish = true;

					// Empty the queue first
					jQuery.queue(this, type, []);

					if (hooks && hooks.stop) {
						hooks.stop.call(this, true);
					}

					// Look for any active animations, and finish them
					for (index = timers.length; index--;) {
						if (timers[index].elem === this && timers[index].queue === type) {
							timers[index].anim.stop(true);
							timers.splice(index, 1);
						}
					}

					// Look for any animations in the old queue and finish them
					for (index = 0; index < length; index++) {
						if (queue[index] && queue[index].finish) {
							queue[index].finish.call(this);
						}
					}

					// Turn off finishing flag
					delete data.finish;
				});
			}
		});

		jQuery.each(["toggle", "show", "hide"], function (i, name) {
			var cssFn = jQuery.fn[name];
			jQuery.fn[name] = function (speed, easing, callback) {
				return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
			};
		});

		// Generate shortcuts for custom animations
		jQuery.each({
			slideDown: genFx("show"),
			slideUp: genFx("hide"),
			slideToggle: genFx("toggle"),
			fadeIn: { opacity: "show" },
			fadeOut: { opacity: "hide" },
			fadeToggle: { opacity: "toggle" }
		}, function (name, props) {
			jQuery.fn[name] = function (speed, easing, callback) {
				return this.animate(props, speed, easing, callback);
			};
		});

		jQuery.timers = [];
		jQuery.fx.tick = function () {
			var timer,
			    i = 0,
			    timers = jQuery.timers;

			fxNow = jQuery.now();

			for (; i < timers.length; i++) {
				timer = timers[i];

				// Checks the timer has not already been removed
				if (!timer() && timers[i] === timer) {
					timers.splice(i--, 1);
				}
			}

			if (!timers.length) {
				jQuery.fx.stop();
			}
			fxNow = undefined;
		};

		jQuery.fx.timer = function (timer) {
			jQuery.timers.push(timer);
			if (timer()) {
				jQuery.fx.start();
			} else {
				jQuery.timers.pop();
			}
		};

		jQuery.fx.interval = 13;
		jQuery.fx.start = function () {
			if (!timerId) {
				timerId = window.requestAnimationFrame ? window.requestAnimationFrame(raf) : window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
			}
		};

		jQuery.fx.stop = function () {
			if (window.cancelAnimationFrame) {
				window.cancelAnimationFrame(timerId);
			} else {
				window.clearInterval(timerId);
			}

			timerId = null;
		};

		jQuery.fx.speeds = {
			slow: 600,
			fast: 200,

			// Default speed
			_default: 400
		};

		// Based off of the plugin by Clint Helfers, with permission.
		// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
		jQuery.fn.delay = function (time, type) {
			time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
			type = type || "fx";

			return this.queue(type, function (next, hooks) {
				var timeout = window.setTimeout(next, time);
				hooks.stop = function () {
					window.clearTimeout(timeout);
				};
			});
		};

		(function () {
			var input = document.createElement("input"),
			    select = document.createElement("select"),
			    opt = select.appendChild(document.createElement("option"));

			input.type = "checkbox";

			// Support: Android <=4.3 only
			// Default value for a checkbox should be "on"
			support.checkOn = input.value !== "";

			// Support: IE <=11 only
			// Must access selectedIndex to make default options select
			support.optSelected = opt.selected;

			// Support: IE <=11 only
			// An input loses its value after becoming a radio
			input = document.createElement("input");
			input.value = "t";
			input.type = "radio";
			support.radioValue = input.value === "t";
		})();

		var boolHook,
		    attrHandle = jQuery.expr.attrHandle;

		jQuery.fn.extend({
			attr: function attr(name, value) {
				return access(this, jQuery.attr, name, value, arguments.length > 1);
			},

			removeAttr: function removeAttr(name) {
				return this.each(function () {
					jQuery.removeAttr(this, name);
				});
			}
		});

		jQuery.extend({
			attr: function attr(elem, name, value) {
				var ret,
				    hooks,
				    nType = elem.nodeType;

				// Don't get/set attributes on text, comment and attribute nodes
				if (nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				// Fallback to prop when attributes are not supported
				if (typeof elem.getAttribute === "undefined") {
					return jQuery.prop(elem, name, value);
				}

				// Attribute hooks are determined by the lowercase version
				// Grab necessary hook if one is defined
				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
					hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
				}

				if (value !== undefined) {
					if (value === null) {
						jQuery.removeAttr(elem, name);
						return;
					}

					if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret;
					}

					elem.setAttribute(name, value + "");
					return value;
				}

				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				}

				ret = jQuery.find.attr(elem, name);

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ? undefined : ret;
			},

			attrHooks: {
				type: {
					set: function set(elem, value) {
						if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
							var val = elem.value;
							elem.setAttribute("type", value);
							if (val) {
								elem.value = val;
							}
							return value;
						}
					}
				}
			},

			removeAttr: function removeAttr(elem, value) {
				var name,
				    i = 0,


				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match(rnothtmlwhite);

				if (attrNames && elem.nodeType === 1) {
					while (name = attrNames[i++]) {
						elem.removeAttribute(name);
					}
				}
			}
		});

		// Hooks for boolean attributes
		boolHook = {
			set: function set(elem, value, name) {
				if (value === false) {

					// Remove boolean attributes when set to false
					jQuery.removeAttr(elem, name);
				} else {
					elem.setAttribute(name, name);
				}
				return name;
			}
		};

		jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
			var getter = attrHandle[name] || jQuery.find.attr;

			attrHandle[name] = function (elem, name, isXML) {
				var ret,
				    handle,
				    lowercaseName = name.toLowerCase();

				if (!isXML) {

					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[lowercaseName];
					attrHandle[lowercaseName] = ret;
					ret = getter(elem, name, isXML) != null ? lowercaseName : null;
					attrHandle[lowercaseName] = handle;
				}
				return ret;
			};
		});

		var rfocusable = /^(?:input|select|textarea|button)$/i,
		    rclickable = /^(?:a|area)$/i;

		jQuery.fn.extend({
			prop: function prop(name, value) {
				return access(this, jQuery.prop, name, value, arguments.length > 1);
			},

			removeProp: function removeProp(name) {
				return this.each(function () {
					delete this[jQuery.propFix[name] || name];
				});
			}
		});

		jQuery.extend({
			prop: function prop(elem, name, value) {
				var ret,
				    hooks,
				    nType = elem.nodeType;

				// Don't get/set properties on text, comment and attribute nodes
				if (nType === 3 || nType === 8 || nType === 2) {
					return;
				}

				if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

					// Fix name and attach hooks
					name = jQuery.propFix[name] || name;
					hooks = jQuery.propHooks[name];
				}

				if (value !== undefined) {
					if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
						return ret;
					}

					return elem[name] = value;
				}

				if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
					return ret;
				}

				return elem[name];
			},

			propHooks: {
				tabIndex: {
					get: function get(elem) {

						// Support: IE <=9 - 11 only
						// elem.tabIndex doesn't always return the
						// correct value when it hasn't been explicitly set
						// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
						// Use proper attribute retrieval(#12072)
						var tabindex = jQuery.find.attr(elem, "tabindex");

						if (tabindex) {
							return parseInt(tabindex, 10);
						}

						if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
							return 0;
						}

						return -1;
					}
				}
			},

			propFix: {
				"for": "htmlFor",
				"class": "className"
			}
		});

		// Support: IE <=11 only
		// Accessing the selectedIndex property
		// forces the browser to respect setting selected
		// on the option
		// The getter ensures a default option is selected
		// when in an optgroup
		// eslint rule "no-unused-expressions" is disabled for this code
		// since it considers such accessions noop
		if (!support.optSelected) {
			jQuery.propHooks.selected = {
				get: function get(elem) {

					/* eslint no-unused-expressions: "off" */

					var parent = elem.parentNode;
					if (parent && parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
					return null;
				},
				set: function set(elem) {

					/* eslint no-unused-expressions: "off" */

					var parent = elem.parentNode;
					if (parent) {
						parent.selectedIndex;

						if (parent.parentNode) {
							parent.parentNode.selectedIndex;
						}
					}
				}
			};
		}

		jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
			jQuery.propFix[this.toLowerCase()] = this;
		});

		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse(value) {
			var tokens = value.match(rnothtmlwhite) || [];
			return tokens.join(" ");
		}

		function getClass(elem) {
			return elem.getAttribute && elem.getAttribute("class") || "";
		}

		jQuery.fn.extend({
			addClass: function addClass(value) {
				var classes,
				    elem,
				    cur,
				    curValue,
				    clazz,
				    j,
				    finalValue,
				    i = 0;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).addClass(value.call(this, j, getClass(this)));
					});
				}

				if (typeof value === "string" && value) {
					classes = value.match(rnothtmlwhite) || [];

					while (elem = this[i++]) {
						curValue = getClass(elem);
						cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {
								if (cur.indexOf(" " + clazz + " ") < 0) {
									cur += clazz + " ";
								}
							}

							// Only assign if different to avoid unneeded rendering.
							finalValue = stripAndCollapse(cur);
							if (curValue !== finalValue) {
								elem.setAttribute("class", finalValue);
							}
						}
					}
				}

				return this;
			},

			removeClass: function removeClass(value) {
				var classes,
				    elem,
				    cur,
				    curValue,
				    clazz,
				    j,
				    finalValue,
				    i = 0;

				if (jQuery.isFunction(value)) {
					return this.each(function (j) {
						jQuery(this).removeClass(value.call(this, j, getClass(this)));
					});
				}

				if (!arguments.length) {
					return this.attr("class", "");
				}

				if (typeof value === "string" && value) {
					classes = value.match(rnothtmlwhite) || [];

					while (elem = this[i++]) {
						curValue = getClass(elem);

						// This expression is here for better compressibility (see addClass)
						cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

						if (cur) {
							j = 0;
							while (clazz = classes[j++]) {

								// Remove *all* instances
								while (cur.indexOf(" " + clazz + " ") > -1) {
									cur = cur.replace(" " + clazz + " ", " ");
								}
							}

							// Only assign if different to avoid unneeded rendering.
							finalValue = stripAndCollapse(cur);
							if (curValue !== finalValue) {
								elem.setAttribute("class", finalValue);
							}
						}
					}
				}

				return this;
			},

			toggleClass: function toggleClass(value, stateVal) {
				var type = typeof value === "undefined" ? "undefined" : _typeof(value);

				if (typeof stateVal === "boolean" && type === "string") {
					return stateVal ? this.addClass(value) : this.removeClass(value);
				}

				if (jQuery.isFunction(value)) {
					return this.each(function (i) {
						jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
					});
				}

				return this.each(function () {
					var className, i, self, classNames;

					if (type === "string") {

						// Toggle individual class names
						i = 0;
						self = jQuery(this);
						classNames = value.match(rnothtmlwhite) || [];

						while (className = classNames[i++]) {

							// Check each className given, space separated list
							if (self.hasClass(className)) {
								self.removeClass(className);
							} else {
								self.addClass(className);
							}
						}

						// Toggle whole class name
					} else if (value === undefined || type === "boolean") {
						className = getClass(this);
						if (className) {

							// Store className if set
							dataPriv.set(this, "__className__", className);
						}

						// If the element has a class name or if we're passed `false`,
						// then remove the whole classname (if there was one, the above saved it).
						// Otherwise bring back whatever was previously saved (if anything),
						// falling back to the empty string if nothing was stored.
						if (this.setAttribute) {
							this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
						}
					}
				});
			},

			hasClass: function hasClass(selector) {
				var className,
				    elem,
				    i = 0;

				className = " " + selector + " ";
				while (elem = this[i++]) {
					if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
						return true;
					}
				}

				return false;
			}
		});

		var rreturn = /\r/g;

		jQuery.fn.extend({
			val: function val(value) {
				var hooks,
				    ret,
				    isFunction,
				    elem = this[0];

				if (!arguments.length) {
					if (elem) {
						hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

						if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
							return ret;
						}

						ret = elem.value;

						// Handle most common string cases
						if (typeof ret === "string") {
							return ret.replace(rreturn, "");
						}

						// Handle cases where value is null/undef or number
						return ret == null ? "" : ret;
					}

					return;
				}

				isFunction = jQuery.isFunction(value);

				return this.each(function (i) {
					var val;

					if (this.nodeType !== 1) {
						return;
					}

					if (isFunction) {
						val = value.call(this, i, jQuery(this).val());
					} else {
						val = value;
					}

					// Treat null/undefined as ""; convert numbers to string
					if (val == null) {
						val = "";
					} else if (typeof val === "number") {
						val += "";
					} else if (jQuery.isArray(val)) {
						val = jQuery.map(val, function (value) {
							return value == null ? "" : value + "";
						});
					}

					hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

					// If set returns undefined, fall back to normal setting
					if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
						this.value = val;
					}
				});
			}
		});

		jQuery.extend({
			valHooks: {
				option: {
					get: function get(elem) {

						var val = jQuery.find.attr(elem, "value");
						return val != null ? val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse(jQuery.text(elem));
					}
				},
				select: {
					get: function get(elem) {
						var value,
						    option,
						    i,
						    options = elem.options,
						    index = elem.selectedIndex,
						    one = elem.type === "select-one",
						    values = one ? null : [],
						    max = one ? index + 1 : options.length;

						if (index < 0) {
							i = max;
						} else {
							i = one ? index : 0;
						}

						// Loop through all the selected options
						for (; i < max; i++) {
							option = options[i];

							// Support: IE <=9 only
							// IE8-9 doesn't update selected after form reset (#2551)
							if ((option.selected || i === index) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {

								// Get the specific value for the option
								value = jQuery(option).val();

								// We don't need an array for one selects
								if (one) {
									return value;
								}

								// Multi-Selects return an array
								values.push(value);
							}
						}

						return values;
					},

					set: function set(elem, value) {
						var optionSet,
						    option,
						    options = elem.options,
						    values = jQuery.makeArray(value),
						    i = options.length;

						while (i--) {
							option = options[i];

							/* eslint-disable no-cond-assign */

							if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
								optionSet = true;
							}

							/* eslint-enable no-cond-assign */
						}

						// Force browsers to behave consistently when non-matching value is set
						if (!optionSet) {
							elem.selectedIndex = -1;
						}
						return values;
					}
				}
			}
		});

		// Radios and checkboxes getter/setter
		jQuery.each(["radio", "checkbox"], function () {
			jQuery.valHooks[this] = {
				set: function set(elem, value) {
					if (jQuery.isArray(value)) {
						return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
					}
				}
			};
			if (!support.checkOn) {
				jQuery.valHooks[this].get = function (elem) {
					return elem.getAttribute("value") === null ? "on" : elem.value;
				};
			}
		});

		// Return jQuery for attributes-only inclusion


		var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

		jQuery.extend(jQuery.event, {

			trigger: function trigger(event, data, elem, onlyHandlers) {

				var i,
				    cur,
				    tmp,
				    bubbleType,
				    ontype,
				    handle,
				    special,
				    eventPath = [elem || document],
				    type = hasOwn.call(event, "type") ? event.type : event,
				    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

				cur = tmp = elem = elem || document;

				// Don't do events on text and comment nodes
				if (elem.nodeType === 3 || elem.nodeType === 8) {
					return;
				}

				// focus/blur morphs to focusin/out; ensure we're not firing them right now
				if (rfocusMorph.test(type + jQuery.event.triggered)) {
					return;
				}

				if (type.indexOf(".") > -1) {

					// Namespaced trigger; create a regexp to match event type in handle()
					namespaces = type.split(".");
					type = namespaces.shift();
					namespaces.sort();
				}
				ontype = type.indexOf(":") < 0 && "on" + type;

				// Caller can pass in a jQuery.Event object, Object, or just an event type string
				event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

				// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
				event.isTrigger = onlyHandlers ? 2 : 3;
				event.namespace = namespaces.join(".");
				event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

				// Clean up the event in case it is being reused
				event.result = undefined;
				if (!event.target) {
					event.target = elem;
				}

				// Clone any incoming data and prepend the event, creating the handler arg list
				data = data == null ? [event] : jQuery.makeArray(data, [event]);

				// Allow special events to draw outside the lines
				special = jQuery.event.special[type] || {};
				if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
					return;
				}

				// Determine event propagation path in advance, per W3C events spec (#9951)
				// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
				if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

					bubbleType = special.delegateType || type;
					if (!rfocusMorph.test(bubbleType + type)) {
						cur = cur.parentNode;
					}
					for (; cur; cur = cur.parentNode) {
						eventPath.push(cur);
						tmp = cur;
					}

					// Only add window if we got to document (e.g., not plain obj or detached DOM)
					if (tmp === (elem.ownerDocument || document)) {
						eventPath.push(tmp.defaultView || tmp.parentWindow || window);
					}
				}

				// Fire handlers on the event path
				i = 0;
				while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

					event.type = i > 1 ? bubbleType : special.bindType || type;

					// jQuery handler
					handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
					if (handle) {
						handle.apply(cur, data);
					}

					// Native handler
					handle = ontype && cur[ontype];
					if (handle && handle.apply && acceptData(cur)) {
						event.result = handle.apply(cur, data);
						if (event.result === false) {
							event.preventDefault();
						}
					}
				}
				event.type = type;

				// If nobody prevented the default action, do it now
				if (!onlyHandlers && !event.isDefaultPrevented()) {

					if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

						// Call a native DOM method on the target with the same name as the event.
						// Don't do default actions on window, that's where global variables be (#6170)
						if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

							// Don't re-trigger an onFOO event when we call its FOO() method
							tmp = elem[ontype];

							if (tmp) {
								elem[ontype] = null;
							}

							// Prevent re-triggering of the same event, since we already bubbled it above
							jQuery.event.triggered = type;
							elem[type]();
							jQuery.event.triggered = undefined;

							if (tmp) {
								elem[ontype] = tmp;
							}
						}
					}
				}

				return event.result;
			},

			// Piggyback on a donor event to simulate a different one
			// Used only for `focus(in | out)` events
			simulate: function simulate(type, elem, event) {
				var e = jQuery.extend(new jQuery.Event(), event, {
					type: type,
					isSimulated: true
				});

				jQuery.event.trigger(e, null, elem);
			}

		});

		jQuery.fn.extend({

			trigger: function trigger(type, data) {
				return this.each(function () {
					jQuery.event.trigger(type, data, this);
				});
			},
			triggerHandler: function triggerHandler(type, data) {
				var elem = this[0];
				if (elem) {
					return jQuery.event.trigger(type, data, elem, true);
				}
			}
		});

		jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

			// Handle event binding
			jQuery.fn[name] = function (data, fn) {
				return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
			};
		});

		jQuery.fn.extend({
			hover: function hover(fnOver, fnOut) {
				return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
			}
		});

		support.focusin = "onfocusin" in window;

		// Support: Firefox <=44
		// Firefox doesn't have focus(in | out) events
		// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
		//
		// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
		// focus(in | out) events fire after focus & blur events,
		// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
		// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
		if (!support.focusin) {
			jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

				// Attach a single capturing handler on the document while someone wants focusin/focusout
				var handler = function handler(event) {
					jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
				};

				jQuery.event.special[fix] = {
					setup: function setup() {
						var doc = this.ownerDocument || this,
						    attaches = dataPriv.access(doc, fix);

						if (!attaches) {
							doc.addEventListener(orig, handler, true);
						}
						dataPriv.access(doc, fix, (attaches || 0) + 1);
					},
					teardown: function teardown() {
						var doc = this.ownerDocument || this,
						    attaches = dataPriv.access(doc, fix) - 1;

						if (!attaches) {
							doc.removeEventListener(orig, handler, true);
							dataPriv.remove(doc, fix);
						} else {
							dataPriv.access(doc, fix, attaches);
						}
					}
				};
			});
		}
		var location = window.location;

		var nonce = jQuery.now();

		var rquery = /\?/;

		// Cross-browser xml parsing
		jQuery.parseXML = function (data) {
			var xml;
			if (!data || typeof data !== "string") {
				return null;
			}

			// Support: IE 9 - 11 only
			// IE throws on parseFromString with invalid input.
			try {
				xml = new window.DOMParser().parseFromString(data, "text/xml");
			} catch (e) {
				xml = undefined;
			}

			if (!xml || xml.getElementsByTagName("parsererror").length) {
				jQuery.error("Invalid XML: " + data);
			}
			return xml;
		};

		var rbracket = /\[\]$/,
		    rCRLF = /\r?\n/g,
		    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		    rsubmittable = /^(?:input|select|textarea|keygen)/i;

		function buildParams(prefix, obj, traditional, add) {
			var name;

			if (jQuery.isArray(obj)) {

				// Serialize array item.
				jQuery.each(obj, function (i, v) {
					if (traditional || rbracket.test(prefix)) {

						// Treat each array item as a scalar.
						add(prefix, v);
					} else {

						// Item is non-scalar (array or object), encode its numeric index.
						buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
					}
				});
			} else if (!traditional && jQuery.type(obj) === "object") {

				// Serialize object item.
				for (name in obj) {
					buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
				}
			} else {

				// Serialize scalar item.
				add(prefix, obj);
			}
		}

		// Serialize an array of form elements or a set of
		// key/values into a query string
		jQuery.param = function (a, traditional) {
			var prefix,
			    s = [],
			    add = function add(key, valueOrFunction) {

				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

				s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
			};

			// If an array was passed in, assume that it is an array of form elements.
			if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

				// Serialize the form elements
				jQuery.each(a, function () {
					add(this.name, this.value);
				});
			} else {

				// If traditional, encode the "old" way (the way 1.3.2 or older
				// did it), otherwise encode params recursively.
				for (prefix in a) {
					buildParams(prefix, a[prefix], traditional, add);
				}
			}

			// Return the resulting serialization
			return s.join("&");
		};

		jQuery.fn.extend({
			serialize: function serialize() {
				return jQuery.param(this.serializeArray());
			},
			serializeArray: function serializeArray() {
				return this.map(function () {

					// Can add propHook for "elements" to filter or add form elements
					var elements = jQuery.prop(this, "elements");
					return elements ? jQuery.makeArray(elements) : this;
				}).filter(function () {
					var type = this.type;

					// Use .is( ":disabled" ) so that fieldset[disabled] works
					return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
				}).map(function (i, elem) {
					var val = jQuery(this).val();

					if (val == null) {
						return null;
					}

					if (jQuery.isArray(val)) {
						return jQuery.map(val, function (val) {
							return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
						});
					}

					return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
				}).get();
			}
		});

		var r20 = /%20/g,
		    rhash = /#.*$/,
		    rantiCache = /([?&])_=[^&]*/,
		    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		    rnoContent = /^(?:GET|HEAD)$/,
		    rprotocol = /^\/\//,


		/* Prefilters
	  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	  * 2) These are called:
	  *    - BEFORE asking for a transport
	  *    - AFTER param serialization (s.data is a string if s.processData is true)
	  * 3) key is the dataType
	  * 4) the catchall symbol "*" can be used
	  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	  */
		prefilters = {},


		/* Transports bindings
	  * 1) key is the dataType
	  * 2) the catchall symbol "*" can be used
	  * 3) selection will start with transport dataType and THEN go to "*" if needed
	  */
		transports = {},


		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*"),


		// Anchor tag for parsing the document origin
		originAnchor = document.createElement("a");
		originAnchor.href = location.href;

		// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
		function addToPrefiltersOrTransports(structure) {

			// dataTypeExpression is optional and defaults to "*"
			return function (dataTypeExpression, func) {

				if (typeof dataTypeExpression !== "string") {
					func = dataTypeExpression;
					dataTypeExpression = "*";
				}

				var dataType,
				    i = 0,
				    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

				if (jQuery.isFunction(func)) {

					// For each dataType in the dataTypeExpression
					while (dataType = dataTypes[i++]) {

						// Prepend if requested
						if (dataType[0] === "+") {
							dataType = dataType.slice(1) || "*";
							(structure[dataType] = structure[dataType] || []).unshift(func);

							// Otherwise append
						} else {
							(structure[dataType] = structure[dataType] || []).push(func);
						}
					}
				}
			};
		}

		// Base inspection function for prefilters and transports
		function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

			var inspected = {},
			    seekingTransport = structure === transports;

			function inspect(dataType) {
				var selected;
				inspected[dataType] = true;
				jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
					var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
					if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

						options.dataTypes.unshift(dataTypeOrTransport);
						inspect(dataTypeOrTransport);
						return false;
					} else if (seekingTransport) {
						return !(selected = dataTypeOrTransport);
					}
				});
				return selected;
			}

			return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
		}

		// A special extend for ajax options
		// that takes "flat" options (not to be deep extended)
		// Fixes #9887
		function ajaxExtend(target, src) {
			var key,
			    deep,
			    flatOptions = jQuery.ajaxSettings.flatOptions || {};

			for (key in src) {
				if (src[key] !== undefined) {
					(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
				}
			}
			if (deep) {
				jQuery.extend(true, target, deep);
			}

			return target;
		}

		/* Handles responses to an ajax request:
	  * - finds the right dataType (mediates between content-type and expected dataType)
	  * - returns the corresponding response
	  */
		function ajaxHandleResponses(s, jqXHR, responses) {

			var ct,
			    type,
			    finalDataType,
			    firstDataType,
			    contents = s.contents,
			    dataTypes = s.dataTypes;

			// Remove auto dataType and get content-type in the process
			while (dataTypes[0] === "*") {
				dataTypes.shift();
				if (ct === undefined) {
					ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
				}
			}

			// Check if we're dealing with a known content-type
			if (ct) {
				for (type in contents) {
					if (contents[type] && contents[type].test(ct)) {
						dataTypes.unshift(type);
						break;
					}
				}
			}

			// Check to see if we have a response for the expected dataType
			if (dataTypes[0] in responses) {
				finalDataType = dataTypes[0];
			} else {

				// Try convertible dataTypes
				for (type in responses) {
					if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
						finalDataType = type;
						break;
					}
					if (!firstDataType) {
						firstDataType = type;
					}
				}

				// Or just use first one
				finalDataType = finalDataType || firstDataType;
			}

			// If we found a dataType
			// We add the dataType to the list if needed
			// and return the corresponding response
			if (finalDataType) {
				if (finalDataType !== dataTypes[0]) {
					dataTypes.unshift(finalDataType);
				}
				return responses[finalDataType];
			}
		}

		/* Chain conversions given the request and the original response
	  * Also sets the responseXXX fields on the jqXHR instance
	  */
		function ajaxConvert(s, response, jqXHR, isSuccess) {
			var conv2,
			    current,
			    conv,
			    tmp,
			    prev,
			    converters = {},


			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

			// Create converters map with lowercased keys
			if (dataTypes[1]) {
				for (conv in s.converters) {
					converters[conv.toLowerCase()] = s.converters[conv];
				}
			}

			current = dataTypes.shift();

			// Convert to each sequential dataType
			while (current) {

				if (s.responseFields[current]) {
					jqXHR[s.responseFields[current]] = response;
				}

				// Apply the dataFilter if provided
				if (!prev && isSuccess && s.dataFilter) {
					response = s.dataFilter(response, s.dataType);
				}

				prev = current;
				current = dataTypes.shift();

				if (current) {

					// There's only work to do if current dataType is non-auto
					if (current === "*") {

						current = prev;

						// Convert response if prev dataType is non-auto and differs from current
					} else if (prev !== "*" && prev !== current) {

						// Seek a direct converter
						conv = converters[prev + " " + current] || converters["* " + current];

						// If none found, seek a pair
						if (!conv) {
							for (conv2 in converters) {

								// If conv2 outputs current
								tmp = conv2.split(" ");
								if (tmp[1] === current) {

									// If prev can be converted to accepted input
									conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
									if (conv) {

										// Condense equivalence converters
										if (conv === true) {
											conv = converters[conv2];

											// Otherwise, insert the intermediate dataType
										} else if (converters[conv2] !== true) {
											current = tmp[0];
											dataTypes.unshift(tmp[1]);
										}
										break;
									}
								}
							}
						}

						// Apply converter (if not an equivalence)
						if (conv !== true) {

							// Unless errors are allowed to bubble, catch and return them
							if (conv && s.throws) {
								response = conv(response);
							} else {
								try {
									response = conv(response);
								} catch (e) {
									return {
										state: "parsererror",
										error: conv ? e : "No conversion from " + prev + " to " + current
									};
								}
							}
						}
					}
				}
			}

			return { state: "success", data: response };
		}

		jQuery.extend({

			// Counter for holding the number of active queries
			active: 0,

			// Last-Modified header cache for next request
			lastModified: {},
			etag: {},

			ajaxSettings: {
				url: location.href,
				type: "GET",
				isLocal: rlocalProtocol.test(location.protocol),
				global: true,
				processData: true,
				async: true,
				contentType: "application/x-www-form-urlencoded; charset=UTF-8",

				/*
	   timeout: 0,
	   data: null,
	   dataType: null,
	   username: null,
	   password: null,
	   cache: null,
	   throws: false,
	   traditional: false,
	   headers: {},
	   */

				accepts: {
					"*": allTypes,
					text: "text/plain",
					html: "text/html",
					xml: "application/xml, text/xml",
					json: "application/json, text/javascript"
				},

				contents: {
					xml: /\bxml\b/,
					html: /\bhtml/,
					json: /\bjson\b/
				},

				responseFields: {
					xml: "responseXML",
					text: "responseText",
					json: "responseJSON"
				},

				// Data converters
				// Keys separate source (or catchall "*") and destination types with a single space
				converters: {

					// Convert anything to text
					"* text": String,

					// Text to html (true = no transformation)
					"text html": true,

					// Evaluate text as a json expression
					"text json": JSON.parse,

					// Parse text as xml
					"text xml": jQuery.parseXML
				},

				// For options that shouldn't be deep extended:
				// you can add your own custom options here if
				// and when you create one that shouldn't be
				// deep extended (see ajaxExtend)
				flatOptions: {
					url: true,
					context: true
				}
			},

			// Creates a full fledged settings object into target
			// with both ajaxSettings and settings fields.
			// If target is omitted, writes into ajaxSettings.
			ajaxSetup: function ajaxSetup(target, settings) {
				return settings ?

				// Building a settings object
				ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

				// Extending ajaxSettings
				ajaxExtend(jQuery.ajaxSettings, target);
			},

			ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
			ajaxTransport: addToPrefiltersOrTransports(transports),

			// Main method
			ajax: function ajax(url, options) {

				// If url is an object, simulate pre-1.5 signature
				if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
					options = url;
					url = undefined;
				}

				// Force options to be an object
				options = options || {};

				var transport,


				// URL without anti-cache param
				cacheURL,


				// Response headers
				responseHeadersString,
				    responseHeaders,


				// timeout handle
				timeoutTimer,


				// Url cleanup var
				urlAnchor,


				// Request state (becomes false upon send and true upon completion)
				completed,


				// To know if global events are to be dispatched
				fireGlobals,


				// Loop variable
				i,


				// uncached part of the url
				uncached,


				// Create the final options object
				s = jQuery.ajaxSetup({}, options),


				// Callbacks context
				callbackContext = s.context || s,


				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


				// Deferreds
				deferred = jQuery.Deferred(),
				    completeDeferred = jQuery.Callbacks("once memory"),


				// Status-dependent callbacks
				_statusCode = s.statusCode || {},


				// Headers (they are sent all at once)
				requestHeaders = {},
				    requestHeadersNames = {},


				// Default abort message
				strAbort = "canceled",


				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function getResponseHeader(key) {
						var match;
						if (completed) {
							if (!responseHeaders) {
								responseHeaders = {};
								while (match = rheaders.exec(responseHeadersString)) {
									responseHeaders[match[1].toLowerCase()] = match[2];
								}
							}
							match = responseHeaders[key.toLowerCase()];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function getAllResponseHeaders() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function setRequestHeader(name, value) {
						if (completed == null) {
							name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
							requestHeaders[name] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function overrideMimeType(type) {
						if (completed == null) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function statusCode(map) {
						var code;
						if (map) {
							if (completed) {

								// Execute the appropriate callbacks
								jqXHR.always(map[jqXHR.status]);
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for (code in map) {
									_statusCode[code] = [_statusCode[code], map[code]];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function abort(statusText) {
						var finalText = statusText || strAbort;
						if (transport) {
							transport.abort(finalText);
						}
						done(0, finalText);
						return this;
					}
				};

				// Attach deferreds
				deferred.promise(jqXHR);

				// Add protocol if not provided (prefilters might expect it)
				// Handle falsy url in the settings object (#10093: consistency with old signature)
				// We also use the url parameter if available
				s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

				// Alias method option to type as per ticket #12004
				s.type = options.method || options.type || s.method || s.type;

				// Extract dataTypes list
				s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

				// A cross-domain request is in order when the origin doesn't match the current origin.
				if (s.crossDomain == null) {
					urlAnchor = document.createElement("a");

					// Support: IE <=8 - 11, Edge 12 - 13
					// IE throws exception on accessing the href property if url is malformed,
					// e.g. http://example.com:80x/
					try {
						urlAnchor.href = s.url;

						// Support: IE <=8 - 11 only
						// Anchor's host property isn't correctly set when s.url is relative
						urlAnchor.href = urlAnchor.href;
						s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
					} catch (e) {

						// If there is an error parsing the URL, assume it is crossDomain,
						// it can be rejected by the transport if it is invalid
						s.crossDomain = true;
					}
				}

				// Convert data if not already a string
				if (s.data && s.processData && typeof s.data !== "string") {
					s.data = jQuery.param(s.data, s.traditional);
				}

				// Apply prefilters
				inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

				// If request was aborted inside a prefilter, stop there
				if (completed) {
					return jqXHR;
				}

				// We can fire global events as of now if asked to
				// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
				fireGlobals = jQuery.event && s.global;

				// Watch for a new set of requests
				if (fireGlobals && jQuery.active++ === 0) {
					jQuery.event.trigger("ajaxStart");
				}

				// Uppercase the type
				s.type = s.type.toUpperCase();

				// Determine if request has content
				s.hasContent = !rnoContent.test(s.type);

				// Save the URL in case we're toying with the If-Modified-Since
				// and/or If-None-Match header later on
				// Remove hash to simplify url manipulation
				cacheURL = s.url.replace(rhash, "");

				// More options handling for requests with no content
				if (!s.hasContent) {

					// Remember the hash so we can put it back
					uncached = s.url.slice(cacheURL.length);

					// If data is available, append data to url
					if (s.data) {
						cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

						// #9682: remove data so that it's not used in an eventual retry
						delete s.data;
					}

					// Add or update anti-cache param if needed
					if (s.cache === false) {
						cacheURL = cacheURL.replace(rantiCache, "$1");
						uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
					}

					// Put hash and anti-cache on the URL that will be requested (gh-1732)
					s.url = cacheURL + uncached;

					// Change '%20' to '+' if this is encoded form body content (gh-2658)
				} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
					s.data = s.data.replace(r20, "+");
				}

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if (s.ifModified) {
					if (jQuery.lastModified[cacheURL]) {
						jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
					}
					if (jQuery.etag[cacheURL]) {
						jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
					}
				}

				// Set the correct header, if data is being sent
				if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
					jqXHR.setRequestHeader("Content-Type", s.contentType);
				}

				// Set the Accepts header for the server, depending on the dataType
				jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

				// Check for headers option
				for (i in s.headers) {
					jqXHR.setRequestHeader(i, s.headers[i]);
				}

				// Allow custom headers/mimetypes and early abort
				if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

					// Abort if not done already and return
					return jqXHR.abort();
				}

				// Aborting is no longer a cancellation
				strAbort = "abort";

				// Install callbacks on deferreds
				completeDeferred.add(s.complete);
				jqXHR.done(s.success);
				jqXHR.fail(s.error);

				// Get transport
				transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

				// If no transport, we auto-abort
				if (!transport) {
					done(-1, "No Transport");
				} else {
					jqXHR.readyState = 1;

					// Send global event
					if (fireGlobals) {
						globalEventContext.trigger("ajaxSend", [jqXHR, s]);
					}

					// If request was aborted inside ajaxSend, stop there
					if (completed) {
						return jqXHR;
					}

					// Timeout
					if (s.async && s.timeout > 0) {
						timeoutTimer = window.setTimeout(function () {
							jqXHR.abort("timeout");
						}, s.timeout);
					}

					try {
						completed = false;
						transport.send(requestHeaders, done);
					} catch (e) {

						// Rethrow post-completion exceptions
						if (completed) {
							throw e;
						}

						// Propagate others as results
						done(-1, e);
					}
				}

				// Callback for when everything is done
				function done(status, nativeStatusText, responses, headers) {
					var isSuccess,
					    success,
					    error,
					    response,
					    modified,
					    statusText = nativeStatusText;

					// Ignore repeat invocations
					if (completed) {
						return;
					}

					completed = true;

					// Clear timeout if it exists
					if (timeoutTimer) {
						window.clearTimeout(timeoutTimer);
					}

					// Dereference transport for early garbage collection
					// (no matter how long the jqXHR object will be used)
					transport = undefined;

					// Cache response headers
					responseHeadersString = headers || "";

					// Set readyState
					jqXHR.readyState = status > 0 ? 4 : 0;

					// Determine if successful
					isSuccess = status >= 200 && status < 300 || status === 304;

					// Get response data
					if (responses) {
						response = ajaxHandleResponses(s, jqXHR, responses);
					}

					// Convert no matter what (that way responseXXX fields are always set)
					response = ajaxConvert(s, response, jqXHR, isSuccess);

					// If successful, handle type chaining
					if (isSuccess) {

						// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
						if (s.ifModified) {
							modified = jqXHR.getResponseHeader("Last-Modified");
							if (modified) {
								jQuery.lastModified[cacheURL] = modified;
							}
							modified = jqXHR.getResponseHeader("etag");
							if (modified) {
								jQuery.etag[cacheURL] = modified;
							}
						}

						// if no content
						if (status === 204 || s.type === "HEAD") {
							statusText = "nocontent";

							// if not modified
						} else if (status === 304) {
							statusText = "notmodified";

							// If we have data, let's convert it
						} else {
							statusText = response.state;
							success = response.data;
							error = response.error;
							isSuccess = !error;
						}
					} else {

						// Extract error from statusText and normalize for non-aborts
						error = statusText;
						if (status || !statusText) {
							statusText = "error";
							if (status < 0) {
								status = 0;
							}
						}
					}

					// Set data for the fake xhr object
					jqXHR.status = status;
					jqXHR.statusText = (nativeStatusText || statusText) + "";

					// Success/Error
					if (isSuccess) {
						deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
					} else {
						deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
					}

					// Status-dependent callbacks
					jqXHR.statusCode(_statusCode);
					_statusCode = undefined;

					if (fireGlobals) {
						globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
					}

					// Complete
					completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

					if (fireGlobals) {
						globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

						// Handle the global AJAX counter
						if (! --jQuery.active) {
							jQuery.event.trigger("ajaxStop");
						}
					}
				}

				return jqXHR;
			},

			getJSON: function getJSON(url, data, callback) {
				return jQuery.get(url, data, callback, "json");
			},

			getScript: function getScript(url, callback) {
				return jQuery.get(url, undefined, callback, "script");
			}
		});

		jQuery.each(["get", "post"], function (i, method) {
			jQuery[method] = function (url, data, callback, type) {

				// Shift arguments if data argument was omitted
				if (jQuery.isFunction(data)) {
					type = type || callback;
					callback = data;
					data = undefined;
				}

				// The url can be an options object (which then must have .url)
				return jQuery.ajax(jQuery.extend({
					url: url,
					type: method,
					dataType: type,
					data: data,
					success: callback
				}, jQuery.isPlainObject(url) && url));
			};
		});

		jQuery._evalUrl = function (url) {
			return jQuery.ajax({
				url: url,

				// Make this explicit, since user can override this through ajaxSetup (#11264)
				type: "GET",
				dataType: "script",
				cache: true,
				async: false,
				global: false,
				"throws": true
			});
		};

		jQuery.fn.extend({
			wrapAll: function wrapAll(html) {
				var wrap;

				if (this[0]) {
					if (jQuery.isFunction(html)) {
						html = html.call(this[0]);
					}

					// The elements to wrap the target around
					wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

					if (this[0].parentNode) {
						wrap.insertBefore(this[0]);
					}

					wrap.map(function () {
						var elem = this;

						while (elem.firstElementChild) {
							elem = elem.firstElementChild;
						}

						return elem;
					}).append(this);
				}

				return this;
			},

			wrapInner: function wrapInner(html) {
				if (jQuery.isFunction(html)) {
					return this.each(function (i) {
						jQuery(this).wrapInner(html.call(this, i));
					});
				}

				return this.each(function () {
					var self = jQuery(this),
					    contents = self.contents();

					if (contents.length) {
						contents.wrapAll(html);
					} else {
						self.append(html);
					}
				});
			},

			wrap: function wrap(html) {
				var isFunction = jQuery.isFunction(html);

				return this.each(function (i) {
					jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
				});
			},

			unwrap: function unwrap(selector) {
				this.parent(selector).not("body").each(function () {
					jQuery(this).replaceWith(this.childNodes);
				});
				return this;
			}
		});

		jQuery.expr.pseudos.hidden = function (elem) {
			return !jQuery.expr.pseudos.visible(elem);
		};
		jQuery.expr.pseudos.visible = function (elem) {
			return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
		};

		jQuery.ajaxSettings.xhr = function () {
			try {
				return new window.XMLHttpRequest();
			} catch (e) {}
		};

		var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		    xhrSupported = jQuery.ajaxSettings.xhr();

		support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
		support.ajax = xhrSupported = !!xhrSupported;

		jQuery.ajaxTransport(function (options) {
			var _callback, errorCallback;

			// Cross domain only allowed if supported through XMLHttpRequest
			if (support.cors || xhrSupported && !options.crossDomain) {
				return {
					send: function send(headers, complete) {
						var i,
						    xhr = options.xhr();

						xhr.open(options.type, options.url, options.async, options.username, options.password);

						// Apply custom fields if provided
						if (options.xhrFields) {
							for (i in options.xhrFields) {
								xhr[i] = options.xhrFields[i];
							}
						}

						// Override mime type if needed
						if (options.mimeType && xhr.overrideMimeType) {
							xhr.overrideMimeType(options.mimeType);
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if (!options.crossDomain && !headers["X-Requested-With"]) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						// Set headers
						for (i in headers) {
							xhr.setRequestHeader(i, headers[i]);
						}

						// Callback
						_callback = function callback(type) {
							return function () {
								if (_callback) {
									_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

									if (type === "abort") {
										xhr.abort();
									} else if (type === "error") {

										// Support: IE <=9 only
										// On a manual native abort, IE9 throws
										// errors on any property access that is not readyState
										if (typeof xhr.status !== "number") {
											complete(0, "error");
										} else {
											complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status, xhr.statusText);
										}
									} else {
										complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
									}
								}
							};
						};

						// Listen to events
						xhr.onload = _callback();
						errorCallback = xhr.onerror = _callback("error");

						// Support: IE 9 only
						// Use onreadystatechange to replace onabort
						// to handle uncaught aborts
						if (xhr.onabort !== undefined) {
							xhr.onabort = errorCallback;
						} else {
							xhr.onreadystatechange = function () {

								// Check readyState before timeout as it changes
								if (xhr.readyState === 4) {

									// Allow onerror to be called first,
									// but that will not handle a native abort
									// Also, save errorCallback to a variable
									// as xhr.onerror cannot be accessed
									window.setTimeout(function () {
										if (_callback) {
											errorCallback();
										}
									});
								}
							};
						}

						// Create the abort callback
						_callback = _callback("abort");

						try {

							// Do send the request (this may raise an exception)
							xhr.send(options.hasContent && options.data || null);
						} catch (e) {

							// #14683: Only rethrow if this hasn't been notified as an error yet
							if (_callback) {
								throw e;
							}
						}
					},

					abort: function abort() {
						if (_callback) {
							_callback();
						}
					}
				};
			}
		});

		// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
		jQuery.ajaxPrefilter(function (s) {
			if (s.crossDomain) {
				s.contents.script = false;
			}
		});

		// Install script dataType
		jQuery.ajaxSetup({
			accepts: {
				script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
			},
			contents: {
				script: /\b(?:java|ecma)script\b/
			},
			converters: {
				"text script": function textScript(text) {
					jQuery.globalEval(text);
					return text;
				}
			}
		});

		// Handle cache's special case and crossDomain
		jQuery.ajaxPrefilter("script", function (s) {
			if (s.cache === undefined) {
				s.cache = false;
			}
			if (s.crossDomain) {
				s.type = "GET";
			}
		});

		// Bind script tag hack transport
		jQuery.ajaxTransport("script", function (s) {

			// This transport only deals with cross domain requests
			if (s.crossDomain) {
				var script, _callback2;
				return {
					send: function send(_, complete) {
						script = jQuery("<script>").prop({
							charset: s.scriptCharset,
							src: s.url
						}).on("load error", _callback2 = function callback(evt) {
							script.remove();
							_callback2 = null;
							if (evt) {
								complete(evt.type === "error" ? 404 : 200, evt.type);
							}
						});

						// Use native DOM manipulation to avoid our domManip AJAX trickery
						document.head.appendChild(script[0]);
					},
					abort: function abort() {
						if (_callback2) {
							_callback2();
						}
					}
				};
			}
		});

		var oldCallbacks = [],
		    rjsonp = /(=)\?(?=&|$)|\?\?/;

		// Default jsonp settings
		jQuery.ajaxSetup({
			jsonp: "callback",
			jsonpCallback: function jsonpCallback() {
				var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
				this[callback] = true;
				return callback;
			}
		});

		// Detect, normalize options and install callbacks for jsonp requests
		jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

			var callbackName,
			    overwritten,
			    responseContainer,
			    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

			// Handle iff the expected data type is "jsonp" or we have a parameter to set
			if (jsonProp || s.dataTypes[0] === "jsonp") {

				// Get callback name, remembering preexisting value associated with it
				callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

				// Insert callback into url or form data
				if (jsonProp) {
					s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
				} else if (s.jsonp !== false) {
					s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
				}

				// Use data converter to retrieve json after script execution
				s.converters["script json"] = function () {
					if (!responseContainer) {
						jQuery.error(callbackName + " was not called");
					}
					return responseContainer[0];
				};

				// Force json dataType
				s.dataTypes[0] = "json";

				// Install callback
				overwritten = window[callbackName];
				window[callbackName] = function () {
					responseContainer = arguments;
				};

				// Clean-up function (fires after converters)
				jqXHR.always(function () {

					// If previous value didn't exist - remove it
					if (overwritten === undefined) {
						jQuery(window).removeProp(callbackName);

						// Otherwise restore preexisting value
					} else {
						window[callbackName] = overwritten;
					}

					// Save back as free
					if (s[callbackName]) {

						// Make sure that re-using the options doesn't screw things around
						s.jsonpCallback = originalSettings.jsonpCallback;

						// Save the callback name for future use
						oldCallbacks.push(callbackName);
					}

					// Call if it was a function and we have a response
					if (responseContainer && jQuery.isFunction(overwritten)) {
						overwritten(responseContainer[0]);
					}

					responseContainer = overwritten = undefined;
				});

				// Delegate to script
				return "script";
			}
		});

		// Support: Safari 8 only
		// In Safari 8 documents created via document.implementation.createHTMLDocument
		// collapse sibling forms: the second one becomes a child of the first one.
		// Because of that, this security measure has to be disabled in Safari 8.
		// https://bugs.webkit.org/show_bug.cgi?id=137337
		support.createHTMLDocument = function () {
			var body = document.implementation.createHTMLDocument("").body;
			body.innerHTML = "<form></form><form></form>";
			return body.childNodes.length === 2;
		}();

		// Argument "data" should be string of html
		// context (optional): If specified, the fragment will be created in this context,
		// defaults to document
		// keepScripts (optional): If true, will include scripts passed in the html string
		jQuery.parseHTML = function (data, context, keepScripts) {
			if (typeof data !== "string") {
				return [];
			}
			if (typeof context === "boolean") {
				keepScripts = context;
				context = false;
			}

			var base, parsed, scripts;

			if (!context) {

				// Stop scripts or inline event handlers from being executed immediately
				// by using document.implementation
				if (support.createHTMLDocument) {
					context = document.implementation.createHTMLDocument("");

					// Set the base href for the created document
					// so any parsed elements with URLs
					// are based on the document's URL (gh-2965)
					base = context.createElement("base");
					base.href = document.location.href;
					context.head.appendChild(base);
				} else {
					context = document;
				}
			}

			parsed = rsingleTag.exec(data);
			scripts = !keepScripts && [];

			// Single tag
			if (parsed) {
				return [context.createElement(parsed[1])];
			}

			parsed = buildFragment([data], context, scripts);

			if (scripts && scripts.length) {
				jQuery(scripts).remove();
			}

			return jQuery.merge([], parsed.childNodes);
		};

		/**
	  * Load a url into a page
	  */
		jQuery.fn.load = function (url, params, callback) {
			var selector,
			    type,
			    response,
			    self = this,
			    off = url.indexOf(" ");

			if (off > -1) {
				selector = stripAndCollapse(url.slice(off));
				url = url.slice(0, off);
			}

			// If it's a function
			if (jQuery.isFunction(params)) {

				// We assume that it's the callback
				callback = params;
				params = undefined;

				// Otherwise, build a param string
			} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
				type = "POST";
			}

			// If we have elements to modify, make the request
			if (self.length > 0) {
				jQuery.ajax({
					url: url,

					// If "type" variable is undefined, then "GET" method will be used.
					// Make value of this field explicit since
					// user can override it through ajaxSetup method
					type: type || "GET",
					dataType: "html",
					data: params
				}).done(function (responseText) {

					// Save response for use in complete callback
					response = arguments;

					self.html(selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

					// Otherwise use the full result
					responseText);

					// If the request succeeds, this function gets "data", "status", "jqXHR"
					// but they are ignored because response was set above.
					// If it fails, this function gets "jqXHR", "status", "error"
				}).always(callback && function (jqXHR, status) {
					self.each(function () {
						callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
					});
				});
			}

			return this;
		};

		// Attach a bunch of functions for handling common AJAX events
		jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
			jQuery.fn[type] = function (fn) {
				return this.on(type, fn);
			};
		});

		jQuery.expr.pseudos.animated = function (elem) {
			return jQuery.grep(jQuery.timers, function (fn) {
				return elem === fn.elem;
			}).length;
		};

		/**
	  * Gets a window from an element
	  */
		function getWindow(elem) {
			return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
		}

		jQuery.offset = {
			setOffset: function setOffset(elem, options, i) {
				var curPosition,
				    curLeft,
				    curCSSTop,
				    curTop,
				    curOffset,
				    curCSSLeft,
				    calculatePosition,
				    position = jQuery.css(elem, "position"),
				    curElem = jQuery(elem),
				    props = {};

				// Set position first, in-case top/left are set even on static elem
				if (position === "static") {
					elem.style.position = "relative";
				}

				curOffset = curElem.offset();
				curCSSTop = jQuery.css(elem, "top");
				curCSSLeft = jQuery.css(elem, "left");
				calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

				// Need to be able to calculate position if either
				// top or left is auto and position is either absolute or fixed
				if (calculatePosition) {
					curPosition = curElem.position();
					curTop = curPosition.top;
					curLeft = curPosition.left;
				} else {
					curTop = parseFloat(curCSSTop) || 0;
					curLeft = parseFloat(curCSSLeft) || 0;
				}

				if (jQuery.isFunction(options)) {

					// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
					options = options.call(elem, i, jQuery.extend({}, curOffset));
				}

				if (options.top != null) {
					props.top = options.top - curOffset.top + curTop;
				}
				if (options.left != null) {
					props.left = options.left - curOffset.left + curLeft;
				}

				if ("using" in options) {
					options.using.call(elem, props);
				} else {
					curElem.css(props);
				}
			}
		};

		jQuery.fn.extend({
			offset: function offset(options) {

				// Preserve chaining for setter
				if (arguments.length) {
					return options === undefined ? this : this.each(function (i) {
						jQuery.offset.setOffset(this, options, i);
					});
				}

				var docElem,
				    win,
				    rect,
				    doc,
				    elem = this[0];

				if (!elem) {
					return;
				}

				// Support: IE <=11 only
				// Running getBoundingClientRect on a
				// disconnected node in IE throws an error
				if (!elem.getClientRects().length) {
					return { top: 0, left: 0 };
				}

				rect = elem.getBoundingClientRect();

				// Make sure element is not hidden (display: none)
				if (rect.width || rect.height) {
					doc = elem.ownerDocument;
					win = getWindow(doc);
					docElem = doc.documentElement;

					return {
						top: rect.top + win.pageYOffset - docElem.clientTop,
						left: rect.left + win.pageXOffset - docElem.clientLeft
					};
				}

				// Return zeros for disconnected and hidden elements (gh-2310)
				return rect;
			},

			position: function position() {
				if (!this[0]) {
					return;
				}

				var offsetParent,
				    offset,
				    elem = this[0],
				    parentOffset = { top: 0, left: 0 };

				// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
				// because it is its only offset parent
				if (jQuery.css(elem, "position") === "fixed") {

					// Assume getBoundingClientRect is there when computed position is fixed
					offset = elem.getBoundingClientRect();
				} else {

					// Get *real* offsetParent
					offsetParent = this.offsetParent();

					// Get correct offsets
					offset = this.offset();
					if (!jQuery.nodeName(offsetParent[0], "html")) {
						parentOffset = offsetParent.offset();
					}

					// Add offsetParent borders
					parentOffset = {
						top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
						left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
					};
				}

				// Subtract parent offsets and element margins
				return {
					top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
					left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
				};
			},

			// This method will return documentElement in the following cases:
			// 1) For the element inside the iframe without offsetParent, this method will return
			//    documentElement of the parent window
			// 2) For the hidden or detached element
			// 3) For body or html element, i.e. in case of the html node - it will return itself
			//
			// but those exceptions were never presented as a real life use-cases
			// and might be considered as more preferable results.
			//
			// This logic, however, is not guaranteed and can change at any point in the future
			offsetParent: function offsetParent() {
				return this.map(function () {
					var offsetParent = this.offsetParent;

					while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
						offsetParent = offsetParent.offsetParent;
					}

					return offsetParent || documentElement;
				});
			}
		});

		// Create scrollLeft and scrollTop methods
		jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
			var top = "pageYOffset" === prop;

			jQuery.fn[method] = function (val) {
				return access(this, function (elem, method, val) {
					var win = getWindow(elem);

					if (val === undefined) {
						return win ? win[prop] : elem[method];
					}

					if (win) {
						win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
					} else {
						elem[method] = val;
					}
				}, method, val, arguments.length);
			};
		});

		// Support: Safari <=7 - 9.1, Chrome <=37 - 49
		// Add the top/left cssHooks using jQuery.fn.position
		// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
		// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
		// getComputedStyle returns percent when specified for top/left/bottom/right;
		// rather than make the css module depend on the offset module, just check for it here
		jQuery.each(["top", "left"], function (i, prop) {
			jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
				if (computed) {
					computed = curCSS(elem, prop);

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
				}
			});
		});

		// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
		jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
			jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

				// Margin is only for outerHeight, outerWidth
				jQuery.fn[funcName] = function (margin, value) {
					var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
					    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

					return access(this, function (elem, type, value) {
						var doc;

						if (jQuery.isWindow(elem)) {

							// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
							return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
						}

						// Get document width or height
						if (elem.nodeType === 9) {
							doc = elem.documentElement;

							// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
							// whichever is greatest
							return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
						}

						return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css(elem, type, extra) :

						// Set width or height on the element
						jQuery.style(elem, type, value, extra);
					}, type, chainable ? margin : undefined, chainable);
				};
			});
		});

		jQuery.fn.extend({

			bind: function bind(types, data, fn) {
				return this.on(types, null, data, fn);
			},
			unbind: function unbind(types, fn) {
				return this.off(types, null, fn);
			},

			delegate: function delegate(selector, types, data, fn) {
				return this.on(types, selector, data, fn);
			},
			undelegate: function undelegate(selector, types, fn) {

				// ( namespace ) or ( selector, types [, fn] )
				return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
			}
		});

		jQuery.parseJSON = JSON.parse;

		// Register as a named AMD module, since jQuery can be concatenated with other
		// files that may use define, but not via a proper concatenation script that
		// understands anonymous AMD modules. A named AMD is safest and most robust
		// way to register. Lowercase jquery is used because AMD module names are
		// derived from file names, and jQuery is normally delivered in a lowercase
		// file name. Do this after creating the global so that if an AMD module wants
		// to call noConflict to hide this version of jQuery, it will work.

		// Note that for maximum portability, libraries that are not jQuery should
		// declare themselves as anonymous modules, and avoid setting a global if an
		// AMD loader is present. jQuery is a special case. For more information, see
		// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

		if (typeof define === "function" && define.amd) {
			define("jquery", [], function () {
				return jQuery;
			});
		}

		var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,


		// Map over the $ in case of overwrite
		_$ = window.$;

		jQuery.noConflict = function (deep) {
			if (window.$ === jQuery) {
				window.$ = _$;
			}

			if (deep && window.jQuery === jQuery) {
				window.jQuery = _jQuery;
			}

			return jQuery;
		};

		// Expose jQuery and $ identifiers, even in AMD
		// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
		// and CommonJS for browser emulators (#13566)
		if (!noGlobal) {
			window.jQuery = window.$ = jQuery;
		}

		return jQuery;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)(module)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*** IMPORTS FROM imports-loader ***/
	var define = false;

	/*! DataTables 1.10.13
	 * ©2008-2016 SpryMedia Ltd - datatables.net/license
	 */

	/**
	 * @summary     DataTables
	 * @description Paginate, search and order HTML tables
	 * @version     1.10.13
	 * @file        jquery.dataTables.js
	 * @author      SpryMedia Ltd
	 * @contact     www.datatables.net
	 * @copyright   Copyright 2008-2016 SpryMedia Ltd.
	 *
	 * This source file is free software, available under the following license:
	 *   MIT license - http://datatables.net/license
	 *
	 * This source file is distributed in the hope that it will be useful, but
	 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
	 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
	 *
	 * For details please refer to: http://www.datatables.net
	 */

	/*jslint evil: true, undef: true, browser: true */
	/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

	(function (factory) {
		"use strict";

		if (typeof define === 'function' && define.amd) {
			// AMD
			define(['jquery'], function ($) {
				return factory($, window, document);
			});
		} else if (( false ? 'undefined' : _typeof(exports)) === 'object') {
			// CommonJS
			module.exports = function (root, $) {
				if (!root) {
					// CommonJS environments without a window global must pass a
					// root. This will give an error otherwise
					root = window;
				}

				if (!$) {
					$ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window
					__webpack_require__(4) : __webpack_require__(4)(root);
				}

				return factory($, root, root.document);
			};
		} else {
			// Browser
			factory(jQuery, window, document);
		}
	})(function ($, window, document, undefined) {
		"use strict";

		/**
	  * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	  * flexible tool, based upon the foundations of progressive enhancement,
	  * which will add advanced interaction controls to any HTML table. For a
	  * full list of features please refer to
	  * [DataTables.net](href="http://datatables.net).
	  *
	  * Note that the `DataTable` object is not a global variable but is aliased
	  * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	  * be  accessed.
	  *
	  *  @class
	  *  @param {object} [init={}] Configuration object for DataTables. Options
	  *    are defined by {@link DataTable.defaults}
	  *  @requires jQuery 1.7+
	  *
	  *  @example
	  *    // Basic initialisation
	  *    $(document).ready( function {
	  *      $('#example').dataTable();
	  *    } );
	  *
	  *  @example
	  *    // Initialisation with configuration options - in this case, disable
	  *    // pagination and sorting.
	  *    $(document).ready( function {
	  *      $('#example').dataTable( {
	  *        "paginate": false,
	  *        "sort": false
	  *      } );
	  *    } );
	  */

		var DataTable = function DataTable(options) {
			/**
	   * Perform a jQuery selector action on the table's TR elements (from the tbody) and
	   * return the resulting jQuery object.
	   *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	   *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	   *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
	   *    criterion ("applied") or all TR elements (i.e. no filter).
	   *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
	   *    Can be either 'current', whereby the current sorting of the table is used, or
	   *    'original' whereby the original order the data was read into the table is used.
	   *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	   *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	   *    'current' and filter is 'applied', regardless of what they might be given as.
	   *  @returns {object} jQuery object, filtered by the given selector.
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Highlight every second row
	   *      oTable.$('tr:odd').css('backgroundColor', 'blue');
	   *    } );
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Filter to rows with 'Webkit' in them, add a background colour and then
	   *      // remove the filter, thus highlighting the 'Webkit' rows only.
	   *      oTable.fnFilter('Webkit');
	   *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
	   *      oTable.fnFilter('');
	   *    } );
	   */
			this.$ = function (sSelector, oOpts) {
				return this.api(true).$(sSelector, oOpts);
			};

			/**
	   * Almost identical to $ in operation, but in this case returns the data for the matched
	   * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
	   * rather than any descendants, so the data can be obtained for the row/cell. If matching
	   * rows are found, the data returned is the original data array/object that was used to
	   * create the row (or a generated array if from a DOM source).
	   *
	   * This method is often useful in-combination with $ where both functions are given the
	   * same parameters and the array indexes will match identically.
	   *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
	   *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
	   *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
	   *    criterion ("applied") or all elements (i.e. no filter).
	   *  @param {string} [oOpts.order=current] Order of the data in the processed array.
	   *    Can be either 'current', whereby the current sorting of the table is used, or
	   *    'original' whereby the original order the data was read into the table is used.
	   *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
	   *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
	   *    'current' and filter is 'applied', regardless of what they might be given as.
	   *  @returns {array} Data for the matched elements. If any elements, as a result of the
	   *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
	   *    entry in the array.
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Get the data from the first row in the table
	   *      var data = oTable._('tr:first');
	   *
	   *      // Do something useful with the data
	   *      alert( "First cell is: "+data[0] );
	   *    } );
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Filter to 'Webkit' and get all data for
	   *      oTable.fnFilter('Webkit');
	   *      var data = oTable._('tr', {"search": "applied"});
	   *
	   *      // Do something with the data
	   *      alert( data.length+" rows matched the search" );
	   *    } );
	   */
			this._ = function (sSelector, oOpts) {
				return this.api(true).rows(sSelector, oOpts).data();
			};

			/**
	   * Create a DataTables Api instance, with the currently selected tables for
	   * the Api's context.
	   * @param {boolean} [traditional=false] Set the API instance's context to be
	   *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
	   *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
	   *   or if all tables captured in the jQuery object should be used.
	   * @return {DataTables.Api}
	   */
			this.api = function (traditional) {
				return traditional ? new _Api2(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api2(this);
			};

			/**
	   * Add a single new row or multiple rows of data to the table. Please note
	   * that this is suitable for client-side processing only - if you are using
	   * server-side processing (i.e. "bServerSide": true), then to add data, you
	   * must add it to the data source, i.e. the server-side, through an Ajax call.
	   *  @param {array|object} data The data to be added to the table. This can be:
	   *    <ul>
	   *      <li>1D array of data - add a single row with the data provided</li>
	   *      <li>2D array of arrays - add multiple rows in a single call</li>
	   *      <li>object - data object when using <i>mData</i></li>
	   *      <li>array of objects - multiple data objects when using <i>mData</i></li>
	   *    </ul>
	   *  @param {bool} [redraw=true] redraw the table or not
	   *  @returns {array} An array of integers, representing the list of indexes in
	   *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
	   *    the table.
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    // Global var for counter
	   *    var giCount = 2;
	   *
	   *    $(document).ready(function() {
	   *      $('#example').dataTable();
	   *    } );
	   *
	   *    function fnClickAddRow() {
	   *      $('#example').dataTable().fnAddData( [
	   *        giCount+".1",
	   *        giCount+".2",
	   *        giCount+".3",
	   *        giCount+".4" ]
	   *      );
	   *
	   *      giCount++;
	   *    }
	   */
			this.fnAddData = function (data, redraw) {
				var api = this.api(true);

				/* Check if we want to add multiple rows or not */
				var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);

				if (redraw === undefined || redraw) {
					api.draw();
				}

				return rows.flatten().toArray();
			};

			/**
	   * This function will make DataTables recalculate the column sizes, based on the data
	   * contained in the table and the sizes applied to the columns (in the DOM, CSS or
	   * through the sWidth parameter). This can be useful when the width of the table's
	   * parent element changes (for example a window resize).
	   *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable( {
	   *        "sScrollY": "200px",
	   *        "bPaginate": false
	   *      } );
	   *
	   *      $(window).on('resize', function () {
	   *        oTable.fnAdjustColumnSizing();
	   *      } );
	   *    } );
	   */
			this.fnAdjustColumnSizing = function (bRedraw) {
				var api = this.api(true).columns.adjust();
				var settings = api.settings()[0];
				var scroll = settings.oScroll;

				if (bRedraw === undefined || bRedraw) {
					api.draw(false);
				} else if (scroll.sX !== "" || scroll.sY !== "") {
					/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
					_fnScrollDraw(settings);
				}
			};

			/**
	   * Quickly and simply clear a table
	   *  @param {bool} [bRedraw=true] redraw the table or not
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
	   *      oTable.fnClearTable();
	   *    } );
	   */
			this.fnClearTable = function (bRedraw) {
				var api = this.api(true).clear();

				if (bRedraw === undefined || bRedraw) {
					api.draw();
				}
			};

			/**
	   * The exact opposite of 'opening' a row, this function will close any rows which
	   * are currently 'open'.
	   *  @param {node} nTr the table row to 'close'
	   *  @returns {int} 0 on success, or 1 if failed (can't find the row)
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable;
	   *
	   *      // 'open' an information row when a row is clicked on
	   *      $('#example tbody tr').click( function () {
	   *        if ( oTable.fnIsOpen(this) ) {
	   *          oTable.fnClose( this );
	   *        } else {
	   *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	   *        }
	   *      } );
	   *
	   *      oTable = $('#example').dataTable();
	   *    } );
	   */
			this.fnClose = function (nTr) {
				this.api(true).row(nTr).child.hide();
			};

			/**
	   * Remove a row for the table
	   *  @param {mixed} target The index of the row from aoData to be deleted, or
	   *    the TR element you want to delete
	   *  @param {function|null} [callBack] Callback function
	   *  @param {bool} [redraw=true] Redraw the table or not
	   *  @returns {array} The row that was deleted
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Immediately remove the first row
	   *      oTable.fnDeleteRow( 0 );
	   *    } );
	   */
			this.fnDeleteRow = function (target, callback, redraw) {
				var api = this.api(true);
				var rows = api.rows(target);
				var settings = rows.settings()[0];
				var data = settings.aoData[rows[0][0]];

				rows.remove();

				if (callback) {
					callback.call(this, settings, data);
				}

				if (redraw === undefined || redraw) {
					api.draw();
				}

				return data;
			};

			/**
	   * Restore the table to it's original state in the DOM by removing all of DataTables
	   * enhancements, alterations to the DOM structure of the table and event listeners.
	   *  @param {boolean} [remove=false] Completely remove the table from the DOM
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
	   *      var oTable = $('#example').dataTable();
	   *      oTable.fnDestroy();
	   *    } );
	   */
			this.fnDestroy = function (remove) {
				this.api(true).destroy(remove);
			};

			/**
	   * Redraw the table
	   *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
	   *      oTable.fnDraw();
	   *    } );
	   */
			this.fnDraw = function (complete) {
				// Note that this isn't an exact match to the old call to _fnDraw - it takes
				// into account the new data, but can hold position.
				this.api(true).draw(complete);
			};

			/**
	   * Filter the input based on data
	   *  @param {string} sInput String to filter the table on
	   *  @param {int|null} [iColumn] Column to limit filtering to
	   *  @param {bool} [bRegex=false] Treat as regular expression or not
	   *  @param {bool} [bSmart=true] Perform smart filtering or not
	   *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
	   *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Sometime later - filter...
	   *      oTable.fnFilter( 'test string' );
	   *    } );
	   */
			this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
				var api = this.api(true);

				if (iColumn === null || iColumn === undefined) {
					api.search(sInput, bRegex, bSmart, bCaseInsensitive);
				} else {
					api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
				}

				api.draw();
			};

			/**
	   * Get the data for the whole table, an individual row or an individual cell based on the
	   * provided parameters.
	   *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
	   *    a TR node then the data source for the whole row will be returned. If given as a
	   *    TD/TH cell node then iCol will be automatically calculated and the data for the
	   *    cell returned. If given as an integer, then this is treated as the aoData internal
	   *    data index for the row (see fnGetPosition) and the data for that row used.
	   *  @param {int} [col] Optional column index that you want the data of.
	   *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
	   *    returned. If mRow is defined, just data for that row, and is iCol is
	   *    defined, only data for the designated cell is returned.
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    // Row data
	   *    $(document).ready(function() {
	   *      oTable = $('#example').dataTable();
	   *
	   *      oTable.$('tr').click( function () {
	   *        var data = oTable.fnGetData( this );
	   *        // ... do something with the array / object of data for the row
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Individual cell data
	   *    $(document).ready(function() {
	   *      oTable = $('#example').dataTable();
	   *
	   *      oTable.$('td').click( function () {
	   *        var sData = oTable.fnGetData( this );
	   *        alert( 'The cell clicked on had the value of '+sData );
	   *      } );
	   *    } );
	   */
			this.fnGetData = function (src, col) {
				var api = this.api(true);

				if (src !== undefined) {
					var type = src.nodeName ? src.nodeName.toLowerCase() : '';

					return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;
				}

				return api.data().toArray();
			};

			/**
	   * Get an array of the TR nodes that are used in the table's body. Note that you will
	   * typically want to use the '$' API method in preference to this as it is more
	   * flexible.
	   *  @param {int} [iRow] Optional row index for the TR element you want
	   *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
	   *    in the table's body, or iRow is defined, just the TR element requested.
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Get the nodes from the table
	   *      var nNodes = oTable.fnGetNodes( );
	   *    } );
	   */
			this.fnGetNodes = function (iRow) {
				var api = this.api(true);

				return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
			};

			/**
	   * Get the array indexes of a particular cell from it's DOM element
	   * and column index including hidden columns
	   *  @param {node} node this can either be a TR, TD or TH in the table's body
	   *  @returns {int} If nNode is given as a TR, then a single index is returned, or
	   *    if given as a cell, an array of [row index, column index (visible),
	   *    column index (all)] is given.
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      $('#example tbody td').click( function () {
	   *        // Get the position of the current data from the node
	   *        var aPos = oTable.fnGetPosition( this );
	   *
	   *        // Get the data array for this row
	   *        var aData = oTable.fnGetData( aPos[0] );
	   *
	   *        // Update the data array and return the value
	   *        aData[ aPos[1] ] = 'clicked';
	   *        this.innerHTML = 'clicked';
	   *      } );
	   *
	   *      // Init DataTables
	   *      oTable = $('#example').dataTable();
	   *    } );
	   */
			this.fnGetPosition = function (node) {
				var api = this.api(true);
				var nodeName = node.nodeName.toUpperCase();

				if (nodeName == 'TR') {
					return api.row(node).index();
				} else if (nodeName == 'TD' || nodeName == 'TH') {
					var cell = api.cell(node).index();

					return [cell.row, cell.columnVisible, cell.column];
				}
				return null;
			};

			/**
	   * Check to see if a row is 'open' or not.
	   *  @param {node} nTr the table row to check
	   *  @returns {boolean} true if the row is currently open, false otherwise
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable;
	   *
	   *      // 'open' an information row when a row is clicked on
	   *      $('#example tbody tr').click( function () {
	   *        if ( oTable.fnIsOpen(this) ) {
	   *          oTable.fnClose( this );
	   *        } else {
	   *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	   *        }
	   *      } );
	   *
	   *      oTable = $('#example').dataTable();
	   *    } );
	   */
			this.fnIsOpen = function (nTr) {
				return this.api(true).row(nTr).child.isShown();
			};

			/**
	   * This function will place a new row directly after a row which is currently
	   * on display on the page, with the HTML contents that is passed into the
	   * function. This can be used, for example, to ask for confirmation that a
	   * particular record should be deleted.
	   *  @param {node} nTr The table row to 'open'
	   *  @param {string|node|jQuery} mHtml The HTML to put into the row
	   *  @param {string} sClass Class to give the new TD cell
	   *  @returns {node} The row opened. Note that if the table row passed in as the
	   *    first parameter, is not found in the table, this method will silently
	   *    return.
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable;
	   *
	   *      // 'open' an information row when a row is clicked on
	   *      $('#example tbody tr').click( function () {
	   *        if ( oTable.fnIsOpen(this) ) {
	   *          oTable.fnClose( this );
	   *        } else {
	   *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
	   *        }
	   *      } );
	   *
	   *      oTable = $('#example').dataTable();
	   *    } );
	   */
			this.fnOpen = function (nTr, mHtml, sClass) {
				return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
			};

			/**
	   * Change the pagination - provides the internal logic for pagination in a simple API
	   * function. With this function you can have a DataTables table go to the next,
	   * previous, first or last pages.
	   *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
	   *    or page number to jump to (integer), note that page 0 is the first page.
	   *  @param {bool} [bRedraw=true] Redraw the table or not
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *      oTable.fnPageChange( 'next' );
	   *    } );
	   */
			this.fnPageChange = function (mAction, bRedraw) {
				var api = this.api(true).page(mAction);

				if (bRedraw === undefined || bRedraw) {
					api.draw(false);
				}
			};

			/**
	   * Show a particular column
	   *  @param {int} iCol The column whose display should be changed
	   *  @param {bool} bShow Show (true) or hide (false) the column
	   *  @param {bool} [bRedraw=true] Redraw the table or not
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Hide the second column after initialisation
	   *      oTable.fnSetColumnVis( 1, false );
	   *    } );
	   */
			this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
				var api = this.api(true).column(iCol).visible(bShow);

				if (bRedraw === undefined || bRedraw) {
					api.columns.adjust().draw();
				}
			};

			/**
	   * Get the settings for a particular table for external manipulation
	   *  @returns {object} DataTables settings object. See
	   *    {@link DataTable.models.oSettings}
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *      var oSettings = oTable.fnSettings();
	   *
	   *      // Show an example parameter from the settings
	   *      alert( oSettings._iDisplayStart );
	   *    } );
	   */
			this.fnSettings = function () {
				return _fnSettingsFromNode(this[_ext.iApiIndex]);
			};

			/**
	   * Sort the table by a particular column
	   *  @param {int} iCol the data index to sort on. Note that this will not match the
	   *    'display index' if you have hidden data entries
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Sort immediately with columns 0 and 1
	   *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
	   *    } );
	   */
			this.fnSort = function (aaSort) {
				this.api(true).order(aaSort).draw();
			};

			/**
	   * Attach a sort listener to an element for a given column
	   *  @param {node} nNode the element to attach the sort listener to
	   *  @param {int} iColumn the column that a click on this node will sort on
	   *  @param {function} [fnCallback] callback function when sort is run
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *
	   *      // Sort on column 1, when 'sorter' is clicked on
	   *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
	   *    } );
	   */
			this.fnSortListener = function (nNode, iColumn, fnCallback) {
				this.api(true).order.listener(nNode, iColumn, fnCallback);
			};

			/**
	   * Update a table cell or row - this method will accept either a single value to
	   * update the cell with, an array of values with one element for each column or
	   * an object in the same format as the original data source. The function is
	   * self-referencing in order to make the multi column updates easier.
	   *  @param {object|array|string} mData Data to update the cell/row with
	   *  @param {node|int} mRow TR element you want to update or the aoData index
	   *  @param {int} [iColumn] The column to update, give as null or undefined to
	   *    update a whole row.
	   *  @param {bool} [bRedraw=true] Redraw the table or not
	   *  @param {bool} [bAction=true] Perform pre-draw actions or not
	   *  @returns {int} 0 on success, 1 on error
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
	   *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
	   *    } );
	   */
			this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
				var api = this.api(true);

				if (iColumn === undefined || iColumn === null) {
					api.row(mRow).data(mData);
				} else {
					api.cell(mRow, iColumn).data(mData);
				}

				if (bAction === undefined || bAction) {
					api.columns.adjust();
				}

				if (bRedraw === undefined || bRedraw) {
					api.draw();
				}
				return 0;
			};

			/**
	   * Provide a common method for plug-ins to check the version of DataTables being used, in order
	   * to ensure compatibility.
	   *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
	   *    formats "X" and "X.Y" are also acceptable.
	   *  @returns {boolean} true if this version of DataTables is greater or equal to the required
	   *    version, or false if this version of DataTales is not suitable
	   *  @method
	   *  @dtopt API
	   *  @deprecated Since v1.10
	   *
	   *  @example
	   *    $(document).ready(function() {
	   *      var oTable = $('#example').dataTable();
	   *      alert( oTable.fnVersionCheck( '1.9.0' ) );
	   *    } );
	   */
			this.fnVersionCheck = _ext.fnVersionCheck;

			var _that = this;
			var emptyInit = options === undefined;
			var len = this.length;

			if (emptyInit) {
				options = {};
			}

			this.oApi = this.internal = _ext.internal;

			// Extend with old style plug-in API methods
			for (var fn in DataTable.ext.internal) {
				if (fn) {
					this[fn] = _fnExternApiFunc(fn);
				}
			}

			this.each(function () {
				// For each initialisation we want to give it a clean initialisation
				// object that can be bashed around
				var o = {};
				var oInit = len > 1 ? // optimisation for single table case
				_fnExtend(o, options, true) : options;

				/*global oInit,_that,emptyInit*/
				var i = 0,
				    iLen,
				    j,
				    jLen,
				    k,
				    kLen;
				var sId = this.getAttribute('id');
				var bInitHandedOff = false;
				var defaults = DataTable.defaults;
				var $this = $(this);

				/* Sanity check */
				if (this.nodeName.toLowerCase() != 'table') {
					_fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);
					return;
				}

				/* Backwards compatibility for the defaults */
				_fnCompatOpts(defaults);
				_fnCompatCols(defaults.column);

				/* Convert the camel-case defaults to Hungarian */
				_fnCamelToHungarian(defaults, defaults, true);
				_fnCamelToHungarian(defaults.column, defaults.column, true);

				/* Setting up the initialisation object */
				_fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));

				/* Check to see if we are re-initialising a table */
				var allSettings = DataTable.settings;
				for (i = 0, iLen = allSettings.length; i < iLen; i++) {
					var s = allSettings[i];

					/* Base check on table node */
					if (s.nTable == this || s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
						var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
						var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

						if (emptyInit || bRetrieve) {
							return s.oInstance;
						} else if (bDestroy) {
							s.oInstance.fnDestroy();
							break;
						} else {
							_fnLog(s, 0, 'Cannot reinitialise DataTable', 3);
							return;
						}
					}

					/* If the element we are initialising has the same ID as a table which was previously
	     * initialised, but the table nodes don't match (from before) then we destroy the old
	     * instance by simply deleting it. This is under the assumption that the table has been
	     * destroyed by other methods. Anyone using non-id selectors will need to do this manually
	     */
					if (s.sTableId == this.id) {
						allSettings.splice(i, 1);
						break;
					}
				}

				/* Ensure the table has an ID - required for accessibility */
				if (sId === null || sId === "") {
					sId = "DataTables_Table_" + DataTable.ext._unique++;
					this.id = sId;
				}

				/* Create the settings object for this table and set some of the default parameters */
				var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
					"sDestroyWidth": $this[0].style.width,
					"sInstance": sId,
					"sTableId": sId
				});
				oSettings.nTable = this;
				oSettings.oApi = _that.internal;
				oSettings.oInit = oInit;

				allSettings.push(oSettings);

				// Need to add the instance after the instance after the settings object has been added
				// to the settings array, so we can self reference the table instance if more than one
				oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();

				// Backwards compatibility, before we apply all the defaults
				_fnCompatOpts(oInit);

				if (oInit.oLanguage) {
					_fnLanguageCompat(oInit.oLanguage);
				}

				// If the length menu is given, but the init display length is not, use the length menu
				if (oInit.aLengthMenu && !oInit.iDisplayLength) {
					oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
				}

				// Apply the defaults and init options to make a single init object will all
				// options defined from defaults and instance options.
				oInit = _fnExtend($.extend(true, {}, defaults), oInit);

				// Map the initialisation options onto the settings object
				_fnMap(oSettings.oFeatures, oInit, ["bPaginate", "bLengthChange", "bFilter", "bSort", "bSortMulti", "bInfo", "bProcessing", "bAutoWidth", "bSortClasses", "bServerSide", "bDeferRender"]);
				_fnMap(oSettings, oInit, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", ["iCookieDuration", "iStateDuration"], // backwards compat
				["oSearch", "oPreviousSearch"], ["aoSearchCols", "aoPreSearchCols"], ["iDisplayLength", "_iDisplayLength"], ["bJQueryUI", "bJUI"]]);
				_fnMap(oSettings.oScroll, oInit, [["sScrollX", "sX"], ["sScrollXInner", "sXInner"], ["sScrollY", "sY"], ["bScrollCollapse", "bCollapse"]]);
				_fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");

				/* Callback functions which are array driven */
				_fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');
				_fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');
				_fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');
				_fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');
				_fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');
				_fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');
				_fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');
				_fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');
				_fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');
				_fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');
				_fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');

				oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);

				/* Browser support detection */
				_fnBrowserDetect(oSettings);

				var oClasses = oSettings.oClasses;

				// @todo Remove in 1.11
				if (oInit.bJQueryUI) {
					/* Use the JUI classes object for display. You could clone the oStdClasses object if
	     * you want to have multiple tables with multiple independent classes
	     */
					$.extend(oClasses, DataTable.ext.oJUIClasses, oInit.oClasses);

					if (oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip") {
						/* Set the DOM to use a layout suitable for jQuery UI's theming */
						oSettings.sDom = '<"H"lfr>t<"F"ip>';
					}

					if (!oSettings.renderer) {
						oSettings.renderer = 'jqueryui';
					} else if ($.isPlainObject(oSettings.renderer) && !oSettings.renderer.header) {
						oSettings.renderer.header = 'jqueryui';
					}
				} else {
					$.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
				}
				$this.addClass(oClasses.sTable);

				if (oSettings.iInitDisplayStart === undefined) {
					/* Display start point, taking into account the save saving */
					oSettings.iInitDisplayStart = oInit.iDisplayStart;
					oSettings._iDisplayStart = oInit.iDisplayStart;
				}

				if (oInit.iDeferLoading !== null) {
					oSettings.bDeferLoading = true;
					var tmp = $.isArray(oInit.iDeferLoading);
					oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
					oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
				}

				/* Language definitions */
				var oLanguage = oSettings.oLanguage;
				$.extend(true, oLanguage, oInit.oLanguage);

				if (oLanguage.sUrl) {
					/* Get the language definitions from a file - because this Ajax call makes the language
	     * get async to the remainder of this function we use bInitHandedOff to indicate that
	     * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
	     */
					$.ajax({
						dataType: 'json',
						url: oLanguage.sUrl,
						success: function success(json) {
							_fnLanguageCompat(json);
							_fnCamelToHungarian(defaults.oLanguage, json);
							$.extend(true, oLanguage, json);
							_fnInitialise(oSettings);
						},
						error: function error() {
							// Error occurred loading language file, continue on as best we can
							_fnInitialise(oSettings);
						}
					});
					bInitHandedOff = true;
				}

				/*
	    * Stripes
	    */
				if (oInit.asStripeClasses === null) {
					oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];
				}

				/* Remove row stripe classes if they are already on the table row */
				var stripeClasses = oSettings.asStripeClasses;
				var rowOne = $this.children('tbody').find('tr').eq(0);
				if ($.inArray(true, $.map(stripeClasses, function (el, i) {
					return rowOne.hasClass(el);
				})) !== -1) {
					$('tbody tr', this).removeClass(stripeClasses.join(' '));
					oSettings.asDestroyStripes = stripeClasses.slice();
				}

				/*
	    * Columns
	    * See if we should load columns automatically or use defined ones
	    */
				var anThs = [];
				var aoColumnsInit;
				var nThead = this.getElementsByTagName('thead');
				if (nThead.length !== 0) {
					_fnDetectHeader(oSettings.aoHeader, nThead[0]);
					anThs = _fnGetUniqueThs(oSettings);
				}

				/* If not given a column array, generate one with nulls */
				if (oInit.aoColumns === null) {
					aoColumnsInit = [];
					for (i = 0, iLen = anThs.length; i < iLen; i++) {
						aoColumnsInit.push(null);
					}
				} else {
					aoColumnsInit = oInit.aoColumns;
				}

				/* Add the columns */
				for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
					_fnAddColumn(oSettings, anThs ? anThs[i] : null);
				}

				/* Apply the column definitions */
				_fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
					_fnColumnOptions(oSettings, iCol, oDef);
				});

				/* HTML5 attribute detection - build an mData object automatically if the
	    * attributes are found
	    */
				if (rowOne.length) {
					var a = function a(cell, name) {
						return cell.getAttribute('data-' + name) !== null ? name : null;
					};

					$(rowOne[0]).children('th, td').each(function (i, cell) {
						var col = oSettings.aoColumns[i];

						if (col.mData === i) {
							var sort = a(cell, 'sort') || a(cell, 'order');
							var filter = a(cell, 'filter') || a(cell, 'search');

							if (sort !== null || filter !== null) {
								col.mData = {
									_: i + '.display',
									sort: sort !== null ? i + '.@data-' + sort : undefined,
									type: sort !== null ? i + '.@data-' + sort : undefined,
									filter: filter !== null ? i + '.@data-' + filter : undefined
								};

								_fnColumnOptions(oSettings, i);
							}
						}
					});
				}

				var features = oSettings.oFeatures;
				var loadedInit = function loadedInit() {
					/*
	     * Sorting
	     * @todo For modularisation (1.11) this needs to do into a sort start up handler
	     */

					// If aaSorting is not defined, then we use the first indicator in asSorting
					// in case that has been altered, so the default sort reflects that option
					if (oInit.aaSorting === undefined) {
						var sorting = oSettings.aaSorting;
						for (i = 0, iLen = sorting.length; i < iLen; i++) {
							sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
						}
					}

					/* Do a first pass on the sorting classes (allows any size changes to be taken into
	     * account, and also will apply sorting disabled classes if disabled
	     */
					_fnSortingClasses(oSettings);

					if (features.bSort) {
						_fnCallbackReg(oSettings, 'aoDrawCallback', function () {
							if (oSettings.bSorted) {
								var aSort = _fnSortFlatten(oSettings);
								var sortedColumns = {};

								$.each(aSort, function (i, val) {
									sortedColumns[val.src] = val.dir;
								});

								_fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);
								_fnSortAria(oSettings);
							}
						});
					}

					_fnCallbackReg(oSettings, 'aoDrawCallback', function () {
						if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
							_fnSortingClasses(oSettings);
						}
					}, 'sc');

					/*
	     * Final init
	     * Cache the header, body and footer as required, creating them if needed
	     */

					// Work around for Webkit bug 83867 - store the caption-side before removing from doc
					var captions = $this.children('caption').each(function () {
						this._captionSide = $(this).css('caption-side');
					});

					var thead = $this.children('thead');
					if (thead.length === 0) {
						thead = $('<thead/>').appendTo($this);
					}
					oSettings.nTHead = thead[0];

					var tbody = $this.children('tbody');
					if (tbody.length === 0) {
						tbody = $('<tbody/>').appendTo($this);
					}
					oSettings.nTBody = tbody[0];

					var tfoot = $this.children('tfoot');
					if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")) {
						// If we are a scrolling table, and no footer has been given, then we need to create
						// a tfoot element for the caption element to be appended to
						tfoot = $('<tfoot/>').appendTo($this);
					}

					if (tfoot.length === 0 || tfoot.children().length === 0) {
						$this.addClass(oClasses.sNoFooter);
					} else if (tfoot.length > 0) {
						oSettings.nTFoot = tfoot[0];
						_fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
					}

					/* Check if there is data passing into the constructor */
					if (oInit.aaData) {
						for (i = 0; i < oInit.aaData.length; i++) {
							_fnAddData(oSettings, oInit.aaData[i]);
						}
					} else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
						/* Grab the data from the page - only do this when deferred loading or no Ajax
	      * source since there is no point in reading the DOM data if we are then going
	      * to replace it with Ajax data
	      */
						_fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
					}

					/* Copy the data index array */
					oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

					/* Initialisation complete - table can be drawn */
					oSettings.bInitialised = true;

					/* Check if we need to initialise the table (it might not have been handed off to the
	     * language processor)
	     */
					if (bInitHandedOff === false) {
						_fnInitialise(oSettings);
					}
				};

				/* Must be done after everything which can be overridden by the state saving! */
				if (oInit.bStateSave) {
					features.bStateSave = true;
					_fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');
					_fnLoadState(oSettings, oInit, loadedInit);
				} else {
					loadedInit();
				}
			});
			_that = null;
			return this;
		};

		/*
	  * It is useful to have variables which are scoped locally so only the
	  * DataTables functions can access them and they don't leak into global space.
	  * At the same time these functions are often useful over multiple files in the
	  * core and API, so we list, or at least document, all variables which are used
	  * by DataTables as private variables here. This also ensures that there is no
	  * clashing of variable names and that they can easily referenced for reuse.
	  */

		// Defined else where
		//  _selector_run
		//  _selector_opts
		//  _selector_first
		//  _selector_row_indexes

		var _ext; // DataTable.ext
		var _Api2; // DataTable.Api
		var _api_register; // DataTable.Api.register
		var _api_registerPlural; // DataTable.Api.registerPlural

		var _re_dic = {};
		var _re_new_lines = /[\r\n]/g;
		var _re_html = /<.*?>/g;

		// This is not strict ISO8601 - Date.parse() is quite lax, although
		// implementations differ between browsers.
		var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;

		// Escape regular expression special characters
		var _re_escape_regex = new RegExp('(\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-'].join('|\\') + ')', 'g');

		// http://en.wikipedia.org/wiki/Foreign_exchange_market
		// - \u20BD - Russian ruble.
		// - \u20a9 - South Korean Won
		// - \u20BA - Turkish Lira
		// - \u20B9 - Indian Rupee
		// - R - Brazil (R$) and South Africa
		// - fr - Swiss Franc
		// - kr - Swedish krona, Norwegian krone and Danish krone
		// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
		//   standards as thousands separators.
		var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;

		var _empty = function _empty(d) {
			return !d || d === true || d === '-' ? true : false;
		};

		var _intVal = function _intVal(s) {
			var integer = parseInt(s, 10);
			return !isNaN(integer) && isFinite(s) ? integer : null;
		};

		// Convert from a formatted number with characters other than `.` as the
		// decimal place, to a Javascript number
		var _numToDecimal = function _numToDecimal(num, decimalPoint) {
			// Cache created regular expressions for speed as this function is called often
			if (!_re_dic[decimalPoint]) {
				_re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
			}
			return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') : num;
		};

		var _isNumber = function _isNumber(d, decimalPoint, formatted) {
			var strType = typeof d === 'string';

			// If empty return immediately so there must be a number if it is a
			// formatted string (this stops the string "k", or "kr", etc being detected
			// as a formatted number for currency
			if (_empty(d)) {
				return true;
			}

			if (decimalPoint && strType) {
				d = _numToDecimal(d, decimalPoint);
			}

			if (formatted && strType) {
				d = d.replace(_re_formatted_numeric, '');
			}

			return !isNaN(parseFloat(d)) && isFinite(d);
		};

		// A string without HTML in it can be considered to be HTML still
		var _isHtml = function _isHtml(d) {
			return _empty(d) || typeof d === 'string';
		};

		var _htmlNumeric = function _htmlNumeric(d, decimalPoint, formatted) {
			if (_empty(d)) {
				return true;
			}

			var html = _isHtml(d);
			return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;
		};

		var _pluck = function _pluck(a, prop, prop2) {
			var out = [];
			var i = 0,
			    ien = a.length;

			// Could have the test in the loop for slightly smaller code, but speed
			// is essential here
			if (prop2 !== undefined) {
				for (; i < ien; i++) {
					if (a[i] && a[i][prop]) {
						out.push(a[i][prop][prop2]);
					}
				}
			} else {
				for (; i < ien; i++) {
					if (a[i]) {
						out.push(a[i][prop]);
					}
				}
			}

			return out;
		};

		// Basically the same as _pluck, but rather than looping over `a` we use `order`
		// as the indexes to pick from `a`
		var _pluck_order = function _pluck_order(a, order, prop, prop2) {
			var out = [];
			var i = 0,
			    ien = order.length;

			// Could have the test in the loop for slightly smaller code, but speed
			// is essential here
			if (prop2 !== undefined) {
				for (; i < ien; i++) {
					if (a[order[i]][prop]) {
						out.push(a[order[i]][prop][prop2]);
					}
				}
			} else {
				for (; i < ien; i++) {
					out.push(a[order[i]][prop]);
				}
			}

			return out;
		};

		var _range = function _range(len, start) {
			var out = [];
			var end;

			if (start === undefined) {
				start = 0;
				end = len;
			} else {
				end = start;
				start = len;
			}

			for (var i = start; i < end; i++) {
				out.push(i);
			}

			return out;
		};

		var _removeEmpty = function _removeEmpty(a) {
			var out = [];

			for (var i = 0, ien = a.length; i < ien; i++) {
				if (a[i]) {
					// careful - will remove all falsy values!
					out.push(a[i]);
				}
			}

			return out;
		};

		var _stripHtml = function _stripHtml(d) {
			return d.replace(_re_html, '');
		};

		/**
	  * Find the unique elements in a source array.
	  *
	  * @param  {array} src Source array
	  * @return {array} Array of unique items
	  * @ignore
	  */
		var _unique = function _unique(src) {
			// A faster unique method is to use object keys to identify used values,
			// but this doesn't work with arrays or objects, which we must also
			// consider. See jsperf.com/compare-array-unique-versions/4 for more
			// information.
			var out = [],
			    val,
			    i,
			    ien = src.length,
			    j,
			    k = 0;

			again: for (i = 0; i < ien; i++) {
				val = src[i];

				for (j = 0; j < k; j++) {
					if (out[j] === val) {
						continue again;
					}
				}

				out.push(val);
				k++;
			}

			return out;
		};

		/**
	  * DataTables utility methods
	  * 
	  * This namespace provides helper methods that DataTables uses internally to
	  * create a DataTable, but which are not exclusively used only for DataTables.
	  * These methods can be used by extension authors to save the duplication of
	  * code.
	  *
	  *  @namespace
	  */
		DataTable.util = {
			/**
	   * Throttle the calls to a function. Arguments and context are maintained
	   * for the throttled function.
	   *
	   * @param {function} fn Function to be called
	   * @param {integer} freq Call frequency in mS
	   * @return {function} Wrapped function
	   */
			throttle: function throttle(fn, freq) {
				var frequency = freq !== undefined ? freq : 200,
				    last,
				    timer;

				return function () {
					var that = this,
					    now = +new Date(),
					    args = arguments;

					if (last && now < last + frequency) {
						clearTimeout(timer);

						timer = setTimeout(function () {
							last = undefined;
							fn.apply(that, args);
						}, frequency);
					} else {
						last = now;
						fn.apply(that, args);
					}
				};
			},

			/**
	   * Escape a string such that it can be used in a regular expression
	   *
	   *  @param {string} val string to escape
	   *  @returns {string} escaped string
	   */
			escapeRegex: function escapeRegex(val) {
				return val.replace(_re_escape_regex, '\\$1');
			}
		};

		/**
	  * Create a mapping object that allows camel case parameters to be looked up
	  * for their Hungarian counterparts. The mapping is stored in a private
	  * parameter called `_hungarianMap` which can be accessed on the source object.
	  *  @param {object} o
	  *  @memberof DataTable#oApi
	  */
		function _fnHungarianMap(o) {
			var hungarian = 'a aa ai ao as b fn i m o s ',
			    match,
			    newKey,
			    map = {};

			$.each(o, function (key, val) {
				match = key.match(/^([^A-Z]+?)([A-Z])/);

				if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
					newKey = key.replace(match[0], match[2].toLowerCase());
					map[newKey] = key;

					if (match[1] === 'o') {
						_fnHungarianMap(o[key]);
					}
				}
			});

			o._hungarianMap = map;
		}

		/**
	  * Convert from camel case parameters to Hungarian, based on a Hungarian map
	  * created by _fnHungarianMap.
	  *  @param {object} src The model object which holds all parameters that can be
	  *    mapped.
	  *  @param {object} user The object to convert from camel case to Hungarian.
	  *  @param {boolean} force When set to `true`, properties which already have a
	  *    Hungarian value in the `user` object will be overwritten. Otherwise they
	  *    won't be.
	  *  @memberof DataTable#oApi
	  */
		function _fnCamelToHungarian(src, user, force) {
			if (!src._hungarianMap) {
				_fnHungarianMap(src);
			}

			var hungarianKey;

			$.each(user, function (key, val) {
				hungarianKey = src._hungarianMap[key];

				if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
					// For objects, we need to buzz down into the object to copy parameters
					if (hungarianKey.charAt(0) === 'o') {
						// Copy the camelCase options over to the hungarian
						if (!user[hungarianKey]) {
							user[hungarianKey] = {};
						}
						$.extend(true, user[hungarianKey], user[key]);

						_fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
					} else {
						user[hungarianKey] = user[key];
					}
				}
			});
		}

		/**
	  * Language compatibility - when certain options are given, and others aren't, we
	  * need to duplicate the values over, in order to provide backwards compatibility
	  * with older language files.
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnLanguageCompat(lang) {
			var defaults = DataTable.defaults.oLanguage;
			var zeroRecords = lang.sZeroRecords;

			/* Backwards compatibility - if there is no sEmptyTable given, then use the same as
	   * sZeroRecords - assuming that is given.
	   */
			if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === "No data available in table") {
				_fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
			}

			/* Likewise with loading records */
			if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === "Loading...") {
				_fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
			}

			// Old parameter name of the thousands separator mapped onto the new
			if (lang.sInfoThousands) {
				lang.sThousands = lang.sInfoThousands;
			}

			var decimal = lang.sDecimal;
			if (decimal) {
				_addNumericSort(decimal);
			}
		}

		/**
	  * Map one parameter onto another
	  *  @param {object} o Object to map
	  *  @param {*} knew The new parameter name
	  *  @param {*} old The old parameter name
	  */
		var _fnCompatMap = function _fnCompatMap(o, knew, old) {
			if (o[knew] !== undefined) {
				o[old] = o[knew];
			}
		};

		/**
	  * Provide backwards compatibility for the main DT options. Note that the new
	  * options are mapped onto the old parameters, so this is an external interface
	  * change only.
	  *  @param {object} init Object to map
	  */
		function _fnCompatOpts(init) {
			_fnCompatMap(init, 'ordering', 'bSort');
			_fnCompatMap(init, 'orderMulti', 'bSortMulti');
			_fnCompatMap(init, 'orderClasses', 'bSortClasses');
			_fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');
			_fnCompatMap(init, 'order', 'aaSorting');
			_fnCompatMap(init, 'orderFixed', 'aaSortingFixed');
			_fnCompatMap(init, 'paging', 'bPaginate');
			_fnCompatMap(init, 'pagingType', 'sPaginationType');
			_fnCompatMap(init, 'pageLength', 'iDisplayLength');
			_fnCompatMap(init, 'searching', 'bFilter');

			// Boolean initialisation of x-scrolling
			if (typeof init.sScrollX === 'boolean') {
				init.sScrollX = init.sScrollX ? '100%' : '';
			}
			if (typeof init.scrollX === 'boolean') {
				init.scrollX = init.scrollX ? '100%' : '';
			}

			// Column search objects are in an array, so it needs to be converted
			// element by element
			var searchCols = init.aoSearchCols;

			if (searchCols) {
				for (var i = 0, ien = searchCols.length; i < ien; i++) {
					if (searchCols[i]) {
						_fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
					}
				}
			}
		}

		/**
	  * Provide backwards compatibility for column options. Note that the new options
	  * are mapped onto the old parameters, so this is an external interface change
	  * only.
	  *  @param {object} init Object to map
	  */
		function _fnCompatCols(init) {
			_fnCompatMap(init, 'orderable', 'bSortable');
			_fnCompatMap(init, 'orderData', 'aDataSort');
			_fnCompatMap(init, 'orderSequence', 'asSorting');
			_fnCompatMap(init, 'orderDataType', 'sortDataType');

			// orderData can be given as an integer
			var dataSort = init.aDataSort;
			if (dataSort && !$.isArray(dataSort)) {
				init.aDataSort = [dataSort];
			}
		}

		/**
	  * Browser feature detection for capabilities, quirks
	  *  @param {object} settings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnBrowserDetect(settings) {
			// We don't need to do this every time DataTables is constructed, the values
			// calculated are specific to the browser and OS configuration which we
			// don't expect to change between initialisations
			if (!DataTable.__browser) {
				var browser = {};
				DataTable.__browser = browser;

				// Scrolling feature / quirks detection
				var n = $('<div/>').css({
					position: 'fixed',
					top: 0,
					left: $(window).scrollLeft() * -1, // allow for scrolling
					height: 1,
					width: 1,
					overflow: 'hidden'
				}).append($('<div/>').css({
					position: 'absolute',
					top: 1,
					left: 1,
					width: 100,
					overflow: 'scroll'
				}).append($('<div/>').css({
					width: '100%',
					height: 10
				}))).appendTo('body');

				var outer = n.children();
				var inner = outer.children();

				// Numbers below, in order, are:
				// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
				//
				// IE6 XP:                           100 100 100  83
				// IE7 Vista:                        100 100 100  83
				// IE 8+ Windows:                     83  83 100  83
				// Evergreen Windows:                 83  83 100  83
				// Evergreen Mac with scrollbars:     85  85 100  85
				// Evergreen Mac without scrollbars: 100 100 100 100

				// Get scrollbar width
				browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

				// IE6/7 will oversize a width 100% element inside a scrolling element, to
				// include the width of the scrollbar, while other browsers ensure the inner
				// element is contained without forcing scrolling
				browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

				// In rtl text layout, some browsers (most, but not all) will place the
				// scrollbar on the left, rather than the right.
				browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;

				// IE8- don't provide height and width for getBoundingClientRect
				browser.bBounding = n[0].getBoundingClientRect().width ? true : false;

				n.remove();
			}

			$.extend(settings.oBrowser, DataTable.__browser);
			settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
		}

		/**
	  * Array.prototype reduce[Right] method, used for browsers which don't support
	  * JS 1.6. Done this way to reduce code size, since we iterate either way
	  *  @param {object} settings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnReduce(that, fn, init, start, end, inc) {
			var i = start,
			    value,
			    isSet = false;

			if (init !== undefined) {
				value = init;
				isSet = true;
			}

			while (i !== end) {
				if (!that.hasOwnProperty(i)) {
					continue;
				}

				value = isSet ? fn(value, that[i], i, that) : that[i];

				isSet = true;
				i += inc;
			}

			return value;
		}

		/**
	  * Add a column to the list used for the table with default values
	  *  @param {object} oSettings dataTables settings object
	  *  @param {node} nTh The th element for this column
	  *  @memberof DataTable#oApi
	  */
		function _fnAddColumn(oSettings, nTh) {
			// Add column to aoColumns array
			var oDefaults = DataTable.defaults.column;
			var iCol = oSettings.aoColumns.length;
			var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
				"nTh": nTh ? nTh : document.createElement('th'),
				"sTitle": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
				"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
				"mData": oDefaults.mData ? oDefaults.mData : iCol,
				idx: iCol
			});
			oSettings.aoColumns.push(oCol);

			// Add search object for column specific search. Note that the `searchCols[ iCol ]`
			// passed into extend can be undefined. This allows the user to give a default
			// with only some of the parameters defined, and also not give a default
			var searchCols = oSettings.aoPreSearchCols;
			searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]);

			// Use the default column options function to initialise classes etc
			_fnColumnOptions(oSettings, iCol, $(nTh).data());
		}

		/**
	  * Apply options for a column
	  *  @param {object} oSettings dataTables settings object
	  *  @param {int} iCol column index to consider
	  *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	  *  @memberof DataTable#oApi
	  */
		function _fnColumnOptions(oSettings, iCol, oOptions) {
			var oCol = oSettings.aoColumns[iCol];
			var oClasses = oSettings.oClasses;
			var th = $(oCol.nTh);

			// Try to get width information from the DOM. We can't get it from CSS
			// as we'd need to parse the CSS stylesheet. `width` option can override
			if (!oCol.sWidthOrig) {
				// Width attribute
				oCol.sWidthOrig = th.attr('width') || null;

				// Style attribute
				var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
				if (t) {
					oCol.sWidthOrig = t[1];
				}
			}

			/* User specified column options */
			if (oOptions !== undefined && oOptions !== null) {
				// Backwards compatibility
				_fnCompatCols(oOptions);

				// Map camel case parameters to their Hungarian counterparts
				_fnCamelToHungarian(DataTable.defaults.column, oOptions);

				/* Backwards compatibility for mDataProp */
				if (oOptions.mDataProp !== undefined && !oOptions.mData) {
					oOptions.mData = oOptions.mDataProp;
				}

				if (oOptions.sType) {
					oCol._sManualType = oOptions.sType;
				}

				// `class` is a reserved word in Javascript, so we need to provide
				// the ability to use a valid name for the camel case input
				if (oOptions.className && !oOptions.sClass) {
					oOptions.sClass = oOptions.className;
				}

				$.extend(oCol, oOptions);
				_fnMap(oCol, oOptions, "sWidth", "sWidthOrig");

				/* iDataSort to be applied (backwards compatibility), but aDataSort will take
	    * priority if defined
	    */
				if (oOptions.iDataSort !== undefined) {
					oCol.aDataSort = [oOptions.iDataSort];
				}
				_fnMap(oCol, oOptions, "aDataSort");
			}

			/* Cache the data get and set functions for speed */
			var mDataSrc = oCol.mData;
			var mData = _fnGetObjectDataFn(mDataSrc);
			var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;

			var attrTest = function attrTest(src) {
				return typeof src === 'string' && src.indexOf('@') !== -1;
			};
			oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));
			oCol._setter = null;

			oCol.fnGetData = function (rowData, type, meta) {
				var innerData = mData(rowData, type, undefined, meta);

				return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
			};
			oCol.fnSetData = function (rowData, val, meta) {
				return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
			};

			// Indicate if DataTables should read DOM data as an object or array
			// Used in _fnGetRowElements
			if (typeof mDataSrc !== 'number') {
				oSettings._rowReadObject = true;
			}

			/* Feature sorting overrides column specific when off */
			if (!oSettings.oFeatures.bSort) {
				oCol.bSortable = false;
				th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called
			}

			/* Check that the class assignment is correct for sorting */
			var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
			var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
			if (!oCol.bSortable || !bAsc && !bDesc) {
				oCol.sSortingClass = oClasses.sSortableNone;
				oCol.sSortingClassJUI = "";
			} else if (bAsc && !bDesc) {
				oCol.sSortingClass = oClasses.sSortableAsc;
				oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
			} else if (!bAsc && bDesc) {
				oCol.sSortingClass = oClasses.sSortableDesc;
				oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
			} else {
				oCol.sSortingClass = oClasses.sSortable;
				oCol.sSortingClassJUI = oClasses.sSortJUI;
			}
		}

		/**
	  * Adjust the table column widths for new data. Note: you would probably want to
	  * do a redraw after calling this function!
	  *  @param {object} settings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnAdjustColumnSizing(settings) {
			/* Not interested in doing column width calculation if auto-width is disabled */
			if (settings.oFeatures.bAutoWidth !== false) {
				var columns = settings.aoColumns;

				_fnCalculateColumnWidths(settings);
				for (var i = 0, iLen = columns.length; i < iLen; i++) {
					columns[i].nTh.style.width = columns[i].sWidth;
				}
			}

			var scroll = settings.oScroll;
			if (scroll.sY !== '' || scroll.sX !== '') {
				_fnScrollDraw(settings);
			}

			_fnCallbackFire(settings, null, 'column-sizing', [settings]);
		}

		/**
	  * Covert the index of a visible column to the index in the data array (take account
	  * of hidden columns)
	  *  @param {object} oSettings dataTables settings object
	  *  @param {int} iMatch Visible column index to lookup
	  *  @returns {int} i the data index
	  *  @memberof DataTable#oApi
	  */
		function _fnVisibleToColumnIndex(oSettings, iMatch) {
			var aiVis = _fnGetColumns(oSettings, 'bVisible');

			return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;
		}

		/**
	  * Covert the index of an index in the data array and convert it to the visible
	  *   column index (take account of hidden columns)
	  *  @param {int} iMatch Column index to lookup
	  *  @param {object} oSettings dataTables settings object
	  *  @returns {int} i the data index
	  *  @memberof DataTable#oApi
	  */
		function _fnColumnIndexToVisible(oSettings, iMatch) {
			var aiVis = _fnGetColumns(oSettings, 'bVisible');
			var iPos = $.inArray(iMatch, aiVis);

			return iPos !== -1 ? iPos : null;
		}

		/**
	  * Get the number of visible columns
	  *  @param {object} oSettings dataTables settings object
	  *  @returns {int} i the number of visible columns
	  *  @memberof DataTable#oApi
	  */
		function _fnVisbleColumns(oSettings) {
			var vis = 0;

			// No reduce in IE8, use a loop for now
			$.each(oSettings.aoColumns, function (i, col) {
				if (col.bVisible && $(col.nTh).css('display') !== 'none') {
					vis++;
				}
			});

			return vis;
		}

		/**
	  * Get an array of column indexes that match a given property
	  *  @param {object} oSettings dataTables settings object
	  *  @param {string} sParam Parameter in aoColumns to look for - typically
	  *    bVisible or bSearchable
	  *  @returns {array} Array of indexes with matched properties
	  *  @memberof DataTable#oApi
	  */
		function _fnGetColumns(oSettings, sParam) {
			var a = [];

			$.map(oSettings.aoColumns, function (val, i) {
				if (val[sParam]) {
					a.push(i);
				}
			});

			return a;
		}

		/**
	  * Calculate the 'type' of a column
	  *  @param {object} settings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnColumnTypes(settings) {
			var columns = settings.aoColumns;
			var data = settings.aoData;
			var types = DataTable.ext.type.detect;
			var i, ien, j, jen, k, ken;
			var col, cell, detectedType, cache;

			// For each column, spin over the 
			for (i = 0, ien = columns.length; i < ien; i++) {
				col = columns[i];
				cache = [];

				if (!col.sType && col._sManualType) {
					col.sType = col._sManualType;
				} else if (!col.sType) {
					for (j = 0, jen = types.length; j < jen; j++) {
						for (k = 0, ken = data.length; k < ken; k++) {
							// Use a cache array so we only need to get the type data
							// from the formatter once (when using multiple detectors)
							if (cache[k] === undefined) {
								cache[k] = _fnGetCellData(settings, k, i, 'type');
							}

							detectedType = types[j](cache[k], settings);

							// If null, then this type can't apply to this column, so
							// rather than testing all cells, break out. There is an
							// exception for the last type which is `html`. We need to
							// scan all rows since it is possible to mix string and HTML
							// types
							if (!detectedType && j !== types.length - 1) {
								break;
							}

							// Only a single match is needed for html type since it is
							// bottom of the pile and very similar to string
							if (detectedType === 'html') {
								break;
							}
						}

						// Type is valid for all data points in the column - use this
						// type
						if (detectedType) {
							col.sType = detectedType;
							break;
						}
					}

					// Fall back - if no type was detected, always use string
					if (!col.sType) {
						col.sType = 'string';
					}
				}
			}
		}

		/**
	  * Take the column definitions and static columns arrays and calculate how
	  * they relate to column indexes. The callback function will then apply the
	  * definition found for a column to a suitable configuration object.
	  *  @param {object} oSettings dataTables settings object
	  *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	  *  @param {array} aoCols The aoColumns array that defines columns individually
	  *  @param {function} fn Callback function - takes two parameters, the calculated
	  *    column index and the definition for that column.
	  *  @memberof DataTable#oApi
	  */
		function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
			var i, iLen, j, jLen, k, kLen, def;
			var columns = oSettings.aoColumns;

			// Column definitions with aTargets
			if (aoColDefs) {
				/* Loop over the definitions array - loop in reverse so first instance has priority */
				for (i = aoColDefs.length - 1; i >= 0; i--) {
					def = aoColDefs[i];

					/* Each definition can target multiple columns, as it is an array */
					var aTargets = def.targets !== undefined ? def.targets : def.aTargets;

					if (!$.isArray(aTargets)) {
						aTargets = [aTargets];
					}

					for (j = 0, jLen = aTargets.length; j < jLen; j++) {
						if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
							/* Add columns that we don't yet know about */
							while (columns.length <= aTargets[j]) {
								_fnAddColumn(oSettings);
							}

							/* Integer, basic index */
							fn(aTargets[j], def);
						} else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
							/* Negative integer, right to left column counting */
							fn(columns.length + aTargets[j], def);
						} else if (typeof aTargets[j] === 'string') {
							/* Class name matching on TH element */
							for (k = 0, kLen = columns.length; k < kLen; k++) {
								if (aTargets[j] == "_all" || $(columns[k].nTh).hasClass(aTargets[j])) {
									fn(k, def);
								}
							}
						}
					}
				}
			}

			// Statically defined columns array
			if (aoCols) {
				for (i = 0, iLen = aoCols.length; i < iLen; i++) {
					fn(i, aoCols[i]);
				}
			}
		}

		/**
	  * Add a data array to the table, creating DOM node etc. This is the parallel to
	  * _fnGatherData, but for adding rows from a Javascript source, rather than a
	  * DOM source.
	  *  @param {object} oSettings dataTables settings object
	  *  @param {array} aData data array to be added
	  *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	  *    DataTables will create a row automatically
	  *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	  *    if nTr is.
	  *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	  *  @memberof DataTable#oApi
	  */
		function _fnAddData(oSettings, aDataIn, nTr, anTds) {
			/* Create the object for storing information about this new row */
			var iRow = oSettings.aoData.length;
			var oData = $.extend(true, {}, DataTable.models.oRow, {
				src: nTr ? 'dom' : 'data',
				idx: iRow
			});

			oData._aData = aDataIn;
			oSettings.aoData.push(oData);

			/* Create the cells */
			var nTd, sThisType;
			var columns = oSettings.aoColumns;

			// Invalidate the column types as the new data needs to be revalidated
			for (var i = 0, iLen = columns.length; i < iLen; i++) {
				columns[i].sType = null;
			}

			/* Add to the display array */
			oSettings.aiDisplayMaster.push(iRow);

			var id = oSettings.rowIdFn(aDataIn);
			if (id !== undefined) {
				oSettings.aIds[id] = oData;
			}

			/* Create the DOM information, or register it if already present */
			if (nTr || !oSettings.oFeatures.bDeferRender) {
				_fnCreateTr(oSettings, iRow, nTr, anTds);
			}

			return iRow;
		}

		/**
	  * Add one or more TR elements to the table. Generally we'd expect to
	  * use this for reading data from a DOM sourced table, but it could be
	  * used for an TR element. Note that if a TR is given, it is used (i.e.
	  * it is not cloned).
	  *  @param {object} settings dataTables settings object
	  *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	  *  @returns {array} Array of indexes for the added rows
	  *  @memberof DataTable#oApi
	  */
		function _fnAddTr(settings, trs) {
			var row;

			// Allow an individual node to be passed in
			if (!(trs instanceof $)) {
				trs = $(trs);
			}

			return trs.map(function (i, el) {
				row = _fnGetRowElements(settings, el);
				return _fnAddData(settings, row.data, el, row.cells);
			});
		}

		/**
	  * Take a TR element and convert it to an index in aoData
	  *  @param {object} oSettings dataTables settings object
	  *  @param {node} n the TR element to find
	  *  @returns {int} index if the node is found, null if not
	  *  @memberof DataTable#oApi
	  */
		function _fnNodeToDataIndex(oSettings, n) {
			return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
		}

		/**
	  * Take a TD element and convert it into a column data index (not the visible index)
	  *  @param {object} oSettings dataTables settings object
	  *  @param {int} iRow The row number the TD/TH can be found in
	  *  @param {node} n The TD/TH element to find
	  *  @returns {int} index if the node is found, -1 if not
	  *  @memberof DataTable#oApi
	  */
		function _fnNodeToColumnIndex(oSettings, iRow, n) {
			return $.inArray(n, oSettings.aoData[iRow].anCells);
		}

		/**
	  * Get the data for a given cell from the internal cache, taking into account data mapping
	  *  @param {object} settings dataTables settings object
	  *  @param {int} rowIdx aoData row id
	  *  @param {int} colIdx Column index
	  *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	  *  @returns {*} Cell data
	  *  @memberof DataTable#oApi
	  */
		function _fnGetCellData(settings, rowIdx, colIdx, type) {
			var draw = settings.iDraw;
			var col = settings.aoColumns[colIdx];
			var rowData = settings.aoData[rowIdx]._aData;
			var defaultContent = col.sDefaultContent;
			var cellData = col.fnGetData(rowData, type, {
				settings: settings,
				row: rowIdx,
				col: colIdx
			});

			if (cellData === undefined) {
				if (settings.iDrawError != draw && defaultContent === null) {
					_fnLog(settings, 0, "Requested unknown parameter " + (typeof col.mData == 'function' ? '{function}' : "'" + col.mData + "'") + " for row " + rowIdx + ", column " + colIdx, 4);
					settings.iDrawError = draw;
				}
				return defaultContent;
			}

			// When the data source is null and a specific data type is requested (i.e.
			// not the original data), we can use default column data
			if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {
				cellData = defaultContent;
			} else if (typeof cellData === 'function') {
				// If the data source is a function, then we run it and use the return,
				// executing in the scope of the data object (for instances)
				return cellData.call(rowData);
			}

			if (cellData === null && type == 'display') {
				return '';
			}
			return cellData;
		}

		/**
	  * Set the value for a specific cell, into the internal data cache
	  *  @param {object} settings dataTables settings object
	  *  @param {int} rowIdx aoData row id
	  *  @param {int} colIdx Column index
	  *  @param {*} val Value to set
	  *  @memberof DataTable#oApi
	  */
		function _fnSetCellData(settings, rowIdx, colIdx, val) {
			var col = settings.aoColumns[colIdx];
			var rowData = settings.aoData[rowIdx]._aData;

			col.fnSetData(rowData, val, {
				settings: settings,
				row: rowIdx,
				col: colIdx
			});
		}

		// Private variable that is used to match action syntax in the data property object
		var __reArray = /\[.*?\]$/;
		var __reFn = /\(\)$/;

		/**
	  * Split string on periods, taking into account escaped periods
	  * @param  {string} str String to split
	  * @return {array} Split string
	  */
		function _fnSplitObjNotation(str) {
			return $.map(str.match(/(\\.|[^\.])+/g) || [''], function (s) {
				return s.replace(/\\\./g, '.');
			});
		}

		/**
	  * Return a function that can be used to get data from a source object, taking
	  * into account the ability to use nested objects as a source
	  *  @param {string|int|function} mSource The data source for the object
	  *  @returns {function} Data get function
	  *  @memberof DataTable#oApi
	  */
		function _fnGetObjectDataFn(mSource) {
			if ($.isPlainObject(mSource)) {
				/* Build an object of get functions, and wrap them in a single call */
				var o = {};
				$.each(mSource, function (key, val) {
					if (val) {
						o[key] = _fnGetObjectDataFn(val);
					}
				});

				return function (data, type, row, meta) {
					var t = o[type] || o._;
					return t !== undefined ? t(data, type, row, meta) : data;
				};
			} else if (mSource === null) {
				/* Give an empty string for rendering / sorting etc */
				return function (data) {
					// type, row and meta also passed, but not used
					return data;
				};
			} else if (typeof mSource === 'function') {
				return function (data, type, row, meta) {
					return mSource(data, type, row, meta);
				};
			} else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
				/* If there is a . in the source string then the data source is in a
	    * nested object so we loop over the data for each level to get the next
	    * level down. On each loop we test for undefined, and if found immediately
	    * return. This allows entire objects to be missing and sDefaultContent to
	    * be used if defined, rather than throwing an error
	    */
				var fetchData = function fetchData(data, type, src) {
					var arrayNotation, funcNotation, out, innerSrc;

					if (src !== "") {
						var a = _fnSplitObjNotation(src);

						for (var i = 0, iLen = a.length; i < iLen; i++) {
							// Check if we are dealing with special notation
							arrayNotation = a[i].match(__reArray);
							funcNotation = a[i].match(__reFn);

							if (arrayNotation) {
								// Array notation
								a[i] = a[i].replace(__reArray, '');

								// Condition allows simply [] to be passed in
								if (a[i] !== "") {
									data = data[a[i]];
								}
								out = [];

								// Get the remainder of the nested object to get
								a.splice(0, i + 1);
								innerSrc = a.join('.');

								// Traverse each entry in the array getting the properties requested
								if ($.isArray(data)) {
									for (var j = 0, jLen = data.length; j < jLen; j++) {
										out.push(fetchData(data[j], type, innerSrc));
									}
								}

								// If a string is given in between the array notation indicators, that
								// is used to join the strings together, otherwise an array is returned
								var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
								data = join === "" ? out : out.join(join);

								// The inner call to fetchData has already traversed through the remainder
								// of the source requested, so we exit from the loop
								break;
							} else if (funcNotation) {
								// Function call
								a[i] = a[i].replace(__reFn, '');
								data = data[a[i]]();
								continue;
							}

							if (data === null || data[a[i]] === undefined) {
								return undefined;
							}
							data = data[a[i]];
						}
					}

					return data;
				};

				return function (data, type) {
					// row and meta also passed, but not used
					return fetchData(data, type, mSource);
				};
			} else {
				/* Array or flat object mapping */
				return function (data, type) {
					// row and meta also passed, but not used
					return data[mSource];
				};
			}
		}

		/**
	  * Return a function that can be used to set data from a source object, taking
	  * into account the ability to use nested objects as a source
	  *  @param {string|int|function} mSource The data source for the object
	  *  @returns {function} Data set function
	  *  @memberof DataTable#oApi
	  */
		function _fnSetObjectDataFn(mSource) {
			if ($.isPlainObject(mSource)) {
				/* Unlike get, only the underscore (global) option is used for for
	    * setting data since we don't know the type here. This is why an object
	    * option is not documented for `mData` (which is read/write), but it is
	    * for `mRender` which is read only.
	    */
				return _fnSetObjectDataFn(mSource._);
			} else if (mSource === null) {
				/* Nothing to do when the data source is null */
				return function () {};
			} else if (typeof mSource === 'function') {
				return function (data, val, meta) {
					mSource(data, 'set', val, meta);
				};
			} else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
				/* Like the get, we need to get data from a nested object */
				var setData = function setData(data, val, src) {
					var a = _fnSplitObjNotation(src),
					    b;
					var aLast = a[a.length - 1];
					var arrayNotation, funcNotation, o, innerSrc;

					for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
						// Check if we are dealing with an array notation request
						arrayNotation = a[i].match(__reArray);
						funcNotation = a[i].match(__reFn);

						if (arrayNotation) {
							a[i] = a[i].replace(__reArray, '');
							data[a[i]] = [];

							// Get the remainder of the nested object to set so we can recurse
							b = a.slice();
							b.splice(0, i + 1);
							innerSrc = b.join('.');

							// Traverse each entry in the array setting the properties requested
							if ($.isArray(val)) {
								for (var j = 0, jLen = val.length; j < jLen; j++) {
									o = {};
									setData(o, val[j], innerSrc);
									data[a[i]].push(o);
								}
							} else {
								// We've been asked to save data to an array, but it
								// isn't array data to be saved. Best that can be done
								// is to just save the value.
								data[a[i]] = val;
							}

							// The inner call to setData has already traversed through the remainder
							// of the source and has set the data, thus we can exit here
							return;
						} else if (funcNotation) {
							// Function call
							a[i] = a[i].replace(__reFn, '');
							data = data[a[i]](val);
						}

						// If the nested object doesn't currently exist - since we are
						// trying to set the value - create it
						if (data[a[i]] === null || data[a[i]] === undefined) {
							data[a[i]] = {};
						}
						data = data[a[i]];
					}

					// Last item in the input - i.e, the actual set
					if (aLast.match(__reFn)) {
						// Function call
						data = data[aLast.replace(__reFn, '')](val);
					} else {
						// If array notation is used, we just want to strip it and use the property name
						// and assign the value. If it isn't used, then we get the result we want anyway
						data[aLast.replace(__reArray, '')] = val;
					}
				};

				return function (data, val) {
					// meta is also passed in, but not used
					return setData(data, val, mSource);
				};
			} else {
				/* Array or flat object mapping */
				return function (data, val) {
					// meta is also passed in, but not used
					data[mSource] = val;
				};
			}
		}

		/**
	  * Return an array with the full table data
	  *  @param {object} oSettings dataTables settings object
	  *  @returns array {array} aData Master data array
	  *  @memberof DataTable#oApi
	  */
		function _fnGetDataMaster(settings) {
			return _pluck(settings.aoData, '_aData');
		}

		/**
	  * Nuke the table
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnClearTable(settings) {
			settings.aoData.length = 0;
			settings.aiDisplayMaster.length = 0;
			settings.aiDisplay.length = 0;
			settings.aIds = {};
		}

		/**
	 * Take an array of integers (index array) and remove a target integer (value - not
	 * the key!)
	 *  @param {array} a Index array to target
	 *  @param {int} iTarget value to find
	 *  @memberof DataTable#oApi
	 */
		function _fnDeleteIndex(a, iTarget, splice) {
			var iTargetIndex = -1;

			for (var i = 0, iLen = a.length; i < iLen; i++) {
				if (a[i] == iTarget) {
					iTargetIndex = i;
				} else if (a[i] > iTarget) {
					a[i]--;
				}
			}

			if (iTargetIndex != -1 && splice === undefined) {
				a.splice(iTargetIndex, 1);
			}
		}

		/**
	  * Mark cached data as invalid such that a re-read of the data will occur when
	  * the cached data is next requested. Also update from the data source object.
	  *
	  * @param {object} settings DataTables settings object
	  * @param {int}    rowIdx   Row index to invalidate
	  * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	  *     or 'data'
	  * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	  *     row will be invalidated
	  * @memberof DataTable#oApi
	  *
	  * @todo For the modularisation of v1.11 this will need to become a callback, so
	  *   the sort and filter methods can subscribe to it. That will required
	  *   initialisation options for sorting, which is why it is not already baked in
	  */
		function _fnInvalidate(settings, rowIdx, src, colIdx) {
			var row = settings.aoData[rowIdx];
			var i, ien;
			var cellWrite = function cellWrite(cell, col) {
				// This is very frustrating, but in IE if you just write directly
				// to innerHTML, and elements that are overwritten are GC'ed,
				// even if there is a reference to them elsewhere
				while (cell.childNodes.length) {
					cell.removeChild(cell.firstChild);
				}

				cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
			};

			// Are we reading last data from DOM or the data object?
			if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {
				// Read the data from the DOM
				row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;
			} else {
				// Reading from data object, update the DOM
				var cells = row.anCells;

				if (cells) {
					if (colIdx !== undefined) {
						cellWrite(cells[colIdx], colIdx);
					} else {
						for (i = 0, ien = cells.length; i < ien; i++) {
							cellWrite(cells[i], i);
						}
					}
				}
			}

			// For both row and cell invalidation, the cached data for sorting and
			// filtering is nulled out
			row._aSortData = null;
			row._aFilterData = null;

			// Invalidate the type for a specific column (if given) or all columns since
			// the data might have changed
			var cols = settings.aoColumns;
			if (colIdx !== undefined) {
				cols[colIdx].sType = null;
			} else {
				for (i = 0, ien = cols.length; i < ien; i++) {
					cols[i].sType = null;
				}

				// Update DataTables special `DT_*` attributes for the row
				_fnRowAttributes(settings, row);
			}
		}

		/**
	  * Build a data source object from an HTML row, reading the contents of the
	  * cells that are in the row.
	  *
	  * @param {object} settings DataTables settings object
	  * @param {node|object} TR element from which to read data or existing row
	  *   object from which to re-read the data from the cells
	  * @param {int} [colIdx] Optional column index
	  * @param {array|object} [d] Data source object. If `colIdx` is given then this
	  *   parameter should also be given and will be used to write the data into.
	  *   Only the column in question will be written
	  * @returns {object} Object with two parameters: `data` the data read, in
	  *   document order, and `cells` and array of nodes (they can be useful to the
	  *   caller, so rather than needing a second traversal to get them, just return
	  *   them from here).
	  * @memberof DataTable#oApi
	  */
		function _fnGetRowElements(settings, row, colIdx, d) {
			var tds = [],
			    td = row.firstChild,
			    name,
			    col,
			    o,
			    i = 0,
			    contents,
			    columns = settings.aoColumns,
			    objectRead = settings._rowReadObject;

			// Allow the data object to be passed in, or construct
			d = d !== undefined ? d : objectRead ? {} : [];

			var attr = function attr(str, td) {
				if (typeof str === 'string') {
					var idx = str.indexOf('@');

					if (idx !== -1) {
						var attr = str.substring(idx + 1);
						var setter = _fnSetObjectDataFn(str);
						setter(d, td.getAttribute(attr));
					}
				}
			};

			// Read data from a cell and store into the data object
			var cellProcess = function cellProcess(cell) {
				if (colIdx === undefined || colIdx === i) {
					col = columns[i];
					contents = $.trim(cell.innerHTML);

					if (col && col._bAttrSrc) {
						var setter = _fnSetObjectDataFn(col.mData._);
						setter(d, contents);

						attr(col.mData.sort, cell);
						attr(col.mData.type, cell);
						attr(col.mData.filter, cell);
					} else {
						// Depending on the `data` option for the columns the data can
						// be read to either an object or an array.
						if (objectRead) {
							if (!col._setter) {
								// Cache the setter function
								col._setter = _fnSetObjectDataFn(col.mData);
							}
							col._setter(d, contents);
						} else {
							d[i] = contents;
						}
					}
				}

				i++;
			};

			if (td) {
				// `tr` element was passed in
				while (td) {
					name = td.nodeName.toUpperCase();

					if (name == "TD" || name == "TH") {
						cellProcess(td);
						tds.push(td);
					}

					td = td.nextSibling;
				}
			} else {
				// Existing row object passed in
				tds = row.anCells;

				for (var j = 0, jen = tds.length; j < jen; j++) {
					cellProcess(tds[j]);
				}
			}

			// Read the ID from the DOM if present
			var rowNode = row.firstChild ? row : row.nTr;

			if (rowNode) {
				var id = rowNode.getAttribute('id');

				if (id) {
					_fnSetObjectDataFn(settings.rowId)(d, id);
				}
			}

			return {
				data: d,
				cells: tds
			};
		}
		/**
	  * Create a new TR element (and it's TD children) for a row
	  *  @param {object} oSettings dataTables settings object
	  *  @param {int} iRow Row to consider
	  *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	  *    DataTables will create a row automatically
	  *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	  *    if nTr is.
	  *  @memberof DataTable#oApi
	  */
		function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
			var row = oSettings.aoData[iRow],
			    rowData = row._aData,
			    cells = [],
			    nTr,
			    nTd,
			    oCol,
			    i,
			    iLen;

			if (row.nTr === null) {
				nTr = nTrIn || document.createElement('tr');

				row.nTr = nTr;
				row.anCells = cells;

				/* Use a private property on the node to allow reserve mapping from the node
	    * to the aoData array for fast look up
	    */
				nTr._DT_RowIndex = iRow;

				/* Special parameters can be given by the data source to be used on the row */
				_fnRowAttributes(oSettings, row);

				/* Process each column */
				for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
					oCol = oSettings.aoColumns[i];

					nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
					nTd._DT_CellIndex = {
						row: iRow,
						column: i
					};

					cells.push(nTd);

					// Need to create the HTML if new, or if a rendering function is defined
					if ((!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {
						nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
					}

					/* Add user defined class */
					if (oCol.sClass) {
						nTd.className += ' ' + oCol.sClass;
					}

					// Visibility - add or remove as required
					if (oCol.bVisible && !nTrIn) {
						nTr.appendChild(nTd);
					} else if (!oCol.bVisible && nTrIn) {
						nTd.parentNode.removeChild(nTd);
					}

					if (oCol.fnCreatedCell) {
						oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);
					}
				}

				_fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow]);
			}

			// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
			// and deployed
			row.nTr.setAttribute('role', 'row');
		}

		/**
	  * Add attributes to a row based on the special `DT_*` parameters in a data
	  * source object.
	  *  @param {object} settings DataTables settings object
	  *  @param {object} DataTables row object for the row to be modified
	  *  @memberof DataTable#oApi
	  */
		function _fnRowAttributes(settings, row) {
			var tr = row.nTr;
			var data = row._aData;

			if (tr) {
				var id = settings.rowIdFn(data);

				if (id) {
					tr.id = id;
				}

				if (data.DT_RowClass) {
					// Remove any classes added by DT_RowClass before
					var a = data.DT_RowClass.split(' ');
					row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;

					$(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);
				}

				if (data.DT_RowAttr) {
					$(tr).attr(data.DT_RowAttr);
				}

				if (data.DT_RowData) {
					$(tr).data(data.DT_RowData);
				}
			}
		}

		/**
	  * Create the HTML header for the table
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnBuildHead(oSettings) {
			var i, ien, cell, row, column;
			var thead = oSettings.nTHead;
			var tfoot = oSettings.nTFoot;
			var createHeader = $('th, td', thead).length === 0;
			var classes = oSettings.oClasses;
			var columns = oSettings.aoColumns;

			if (createHeader) {
				row = $('<tr/>').appendTo(thead);
			}

			for (i = 0, ien = columns.length; i < ien; i++) {
				column = columns[i];
				cell = $(column.nTh).addClass(column.sClass);

				if (createHeader) {
					cell.appendTo(row);
				}

				// 1.11 move into sorting
				if (oSettings.oFeatures.bSort) {
					cell.addClass(column.sSortingClass);

					if (column.bSortable !== false) {
						cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);

						_fnSortAttachListener(oSettings, column.nTh, i);
					}
				}

				if (column.sTitle != cell[0].innerHTML) {
					cell.html(column.sTitle);
				}

				_fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);
			}

			if (createHeader) {
				_fnDetectHeader(oSettings.aoHeader, thead);
			}

			/* ARIA role for the rows */
			$(thead).find('>tr').attr('role', 'row');

			/* Deal with the footer - add classes if required */
			$(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
			$(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH);

			// Cache the footer cells. Note that we only take the cells from the first
			// row in the footer. If there is more than one row the user wants to
			// interact with, they need to use the table().foot() method. Note also this
			// allows cells to be used for multiple columns using colspan
			if (tfoot !== null) {
				var cells = oSettings.aoFooter[0];

				for (i = 0, ien = cells.length; i < ien; i++) {
					column = columns[i];
					column.nTf = cells[i].cell;

					if (column.sClass) {
						$(column.nTf).addClass(column.sClass);
					}
				}
			}
		}

		/**
	  * Draw the header (or footer) element based on the column visibility states. The
	  * methodology here is to use the layout array from _fnDetectHeader, modified for
	  * the instantaneous column visibility, to construct the new layout. The grid is
	  * traversed over cell at a time in a rows x columns grid fashion, although each
	  * cell insert can cover multiple elements in the grid - which is tracks using the
	  * aApplied array. Cell inserts in the grid will only occur where there isn't
	  * already a cell in that position.
	  *  @param {object} oSettings dataTables settings object
	  *  @param array {objects} aoSource Layout array from _fnDetectHeader
	  *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	  *  @memberof DataTable#oApi
	  */
		function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
			var i, iLen, j, jLen, k, kLen, n, nLocalTr;
			var aoLocal = [];
			var aApplied = [];
			var iColumns = oSettings.aoColumns.length;
			var iRowspan, iColspan;

			if (!aoSource) {
				return;
			}

			if (bIncludeHidden === undefined) {
				bIncludeHidden = false;
			}

			/* Make a copy of the master layout array, but without the visible columns in it */
			for (i = 0, iLen = aoSource.length; i < iLen; i++) {
				aoLocal[i] = aoSource[i].slice();
				aoLocal[i].nTr = aoSource[i].nTr;

				/* Remove any columns which are currently hidden */
				for (j = iColumns - 1; j >= 0; j--) {
					if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
						aoLocal[i].splice(j, 1);
					}
				}

				/* Prep the applied array - it needs an element for each row */
				aApplied.push([]);
			}

			for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
				nLocalTr = aoLocal[i].nTr;

				/* All cells are going to be replaced, so empty out the row */
				if (nLocalTr) {
					while (n = nLocalTr.firstChild) {
						nLocalTr.removeChild(n);
					}
				}

				for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
					iRowspan = 1;
					iColspan = 1;

					/* Check to see if there is already a cell (row/colspan) covering our target
	     * insert point. If there is, then there is nothing to do.
	     */
					if (aApplied[i][j] === undefined) {
						nLocalTr.appendChild(aoLocal[i][j].cell);
						aApplied[i][j] = 1;

						/* Expand the cell to cover as many rows as needed */
						while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
							aApplied[i + iRowspan][j] = 1;
							iRowspan++;
						}

						/* Expand the cell to cover as many columns as needed */
						while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
							/* Must update the applied array over the rows for the columns */
							for (k = 0; k < iRowspan; k++) {
								aApplied[i + k][j + iColspan] = 1;
							}
							iColspan++;
						}

						/* Do the actual expansion in the DOM */
						$(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);
					}
				}
			}
		}

		/**
	  * Insert the required TR nodes into the table for display
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnDraw(oSettings) {
			/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
			var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);
			if ($.inArray(false, aPreDraw) !== -1) {
				_fnProcessingDisplay(oSettings, false);
				return;
			}

			var i, iLen, n;
			var anRows = [];
			var iRowCount = 0;
			var asStripeClasses = oSettings.asStripeClasses;
			var iStripes = asStripeClasses.length;
			var iOpenRows = oSettings.aoOpenRows.length;
			var oLang = oSettings.oLanguage;
			var iInitDisplayStart = oSettings.iInitDisplayStart;
			var bServerSide = _fnDataSource(oSettings) == 'ssp';
			var aiDisplay = oSettings.aiDisplay;

			oSettings.bDrawing = true;

			/* Check and see if we have an initial draw position from state saving */
			if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
				oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;

				oSettings.iInitDisplayStart = -1;
			}

			var iDisplayStart = oSettings._iDisplayStart;
			var iDisplayEnd = oSettings.fnDisplayEnd();

			/* Server-side processing draw intercept */
			if (oSettings.bDeferLoading) {
				oSettings.bDeferLoading = false;
				oSettings.iDraw++;
				_fnProcessingDisplay(oSettings, false);
			} else if (!bServerSide) {
				oSettings.iDraw++;
			} else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
				return;
			}

			if (aiDisplay.length !== 0) {
				var iStart = bServerSide ? 0 : iDisplayStart;
				var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

				for (var j = iStart; j < iEnd; j++) {
					var iDataIndex = aiDisplay[j];
					var aoData = oSettings.aoData[iDataIndex];
					if (aoData.nTr === null) {
						_fnCreateTr(oSettings, iDataIndex);
					}

					var nRow = aoData.nTr;

					/* Remove the old striping classes and then add the new one */
					if (iStripes !== 0) {
						var sStripe = asStripeClasses[iRowCount % iStripes];
						if (aoData._sRowStripe != sStripe) {
							$(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
							aoData._sRowStripe = sStripe;
						}
					}

					// Row callback functions - might want to manipulate the row
					// iRowCount and j are not currently documented. Are they at all
					// useful?
					_fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j]);

					anRows.push(nRow);
					iRowCount++;
				}
			} else {
				/* Table is empty - create a row with an empty message in it */
				var sZero = oLang.sZeroRecords;
				if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
					sZero = oLang.sLoadingRecords;
				} else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
					sZero = oLang.sEmptyTable;
				}

				anRows[0] = $('<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' }).append($('<td />', {
					'valign': 'top',
					'colSpan': _fnVisbleColumns(oSettings),
					'class': oSettings.oClasses.sRowEmpty
				}).html(sZero))[0];
			}

			/* Header and footer callbacks */
			_fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

			_fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

			var body = $(oSettings.nTBody);

			body.children().detach();
			body.append($(anRows));

			/* Call all required callback functions for the end of a draw */
			_fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);

			/* Draw is complete, sorting and filtering must be as well */
			oSettings.bSorted = false;
			oSettings.bFiltered = false;
			oSettings.bDrawing = false;
		}

		/**
	  * Redraw the table - taking account of the various features which are enabled
	  *  @param {object} oSettings dataTables settings object
	  *  @param {boolean} [holdPosition] Keep the current paging position. By default
	  *    the paging is reset to the first page
	  *  @memberof DataTable#oApi
	  */
		function _fnReDraw(settings, holdPosition) {
			var features = settings.oFeatures,
			    sort = features.bSort,
			    filter = features.bFilter;

			if (sort) {
				_fnSort(settings);
			}

			if (filter) {
				_fnFilterComplete(settings, settings.oPreviousSearch);
			} else {
				// No filtering, so we want to just use the display master
				settings.aiDisplay = settings.aiDisplayMaster.slice();
			}

			if (holdPosition !== true) {
				settings._iDisplayStart = 0;
			}

			// Let any modules know about the draw hold position state (used by
			// scrolling internally)
			settings._drawHold = holdPosition;

			_fnDraw(settings);

			settings._drawHold = false;
		}

		/**
	  * Add the options to the page HTML for the table
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnAddOptionsHtml(oSettings) {
			var classes = oSettings.oClasses;
			var table = $(oSettings.nTable);
			var holding = $('<div/>').insertBefore(table); // Holding element for speed
			var features = oSettings.oFeatures;

			// All DataTables are wrapped in a div
			var insert = $('<div/>', {
				id: oSettings.sTableId + '_wrapper',
				'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
			});

			oSettings.nHolding = holding[0];
			oSettings.nTableWrapper = insert[0];
			oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

			/* Loop over the user set positioning and place the elements as needed */
			var aDom = oSettings.sDom.split('');
			var featureNode, cOption, nNewNode, cNext, sAttr, j;
			for (var i = 0; i < aDom.length; i++) {
				featureNode = null;
				cOption = aDom[i];

				if (cOption == '<') {
					/* New container div */
					nNewNode = $('<div/>')[0];

					/* Check to see if we should append an id and/or a class name to the container */
					cNext = aDom[i + 1];
					if (cNext == "'" || cNext == '"') {
						sAttr = "";
						j = 2;
						while (aDom[i + j] != cNext) {
							sAttr += aDom[i + j];
							j++;
						}

						/* Replace jQuery UI constants @todo depreciated */
						if (sAttr == "H") {
							sAttr = classes.sJUIHeader;
						} else if (sAttr == "F") {
							sAttr = classes.sJUIFooter;
						}

						/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
	      * breaks the string into parts and applies them as needed
	      */
						if (sAttr.indexOf('.') != -1) {
							var aSplit = sAttr.split('.');
							nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
							nNewNode.className = aSplit[1];
						} else if (sAttr.charAt(0) == "#") {
							nNewNode.id = sAttr.substr(1, sAttr.length - 1);
						} else {
							nNewNode.className = sAttr;
						}

						i += j; /* Move along the position array */
					}

					insert.append(nNewNode);
					insert = $(nNewNode);
				} else if (cOption == '>') {
					/* End container div */
					insert = insert.parent();
				}
				// @todo Move options into their own plugins?
				else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
						/* Length */
						featureNode = _fnFeatureHtmlLength(oSettings);
					} else if (cOption == 'f' && features.bFilter) {
						/* Filter */
						featureNode = _fnFeatureHtmlFilter(oSettings);
					} else if (cOption == 'r' && features.bProcessing) {
						/* pRocessing */
						featureNode = _fnFeatureHtmlProcessing(oSettings);
					} else if (cOption == 't') {
						/* Table */
						featureNode = _fnFeatureHtmlTable(oSettings);
					} else if (cOption == 'i' && features.bInfo) {
						/* Info */
						featureNode = _fnFeatureHtmlInfo(oSettings);
					} else if (cOption == 'p' && features.bPaginate) {
						/* Pagination */
						featureNode = _fnFeatureHtmlPaginate(oSettings);
					} else if (DataTable.ext.feature.length !== 0) {
						/* Plug-in features */
						var aoFeatures = DataTable.ext.feature;
						for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
							if (cOption == aoFeatures[k].cFeature) {
								featureNode = aoFeatures[k].fnInit(oSettings);
								break;
							}
						}
					}

				/* Add to the 2D features array */
				if (featureNode) {
					var aanFeatures = oSettings.aanFeatures;

					if (!aanFeatures[cOption]) {
						aanFeatures[cOption] = [];
					}

					aanFeatures[cOption].push(featureNode);
					insert.append(featureNode);
				}
			}

			/* Built our DOM structure - replace the holding div with what we want */
			holding.replaceWith(insert);
			oSettings.nHolding = null;
		}

		/**
	  * Use the DOM source to create up an array of header cells. The idea here is to
	  * create a layout grid (array) of rows x columns, which contains a reference
	  * to the cell that that point in the grid (regardless of col/rowspan), such that
	  * any column / row could be removed and the new grid constructed
	  *  @param array {object} aLayout Array to store the calculated layout in
	  *  @param {node} nThead The header/footer element for the table
	  *  @memberof DataTable#oApi
	  */
		function _fnDetectHeader(aLayout, nThead) {
			var nTrs = $(nThead).children('tr');
			var nTr, nCell;
			var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
			var bUnique;
			var fnShiftCol = function fnShiftCol(a, i, j) {
				var k = a[i];
				while (k[j]) {
					j++;
				}
				return j;
			};

			aLayout.splice(0, aLayout.length);

			/* We know how many rows there are in the layout - so prep it */
			for (i = 0, iLen = nTrs.length; i < iLen; i++) {
				aLayout.push([]);
			}

			/* Calculate a layout array */
			for (i = 0, iLen = nTrs.length; i < iLen; i++) {
				nTr = nTrs[i];
				iColumn = 0;

				/* For every cell in the row... */
				nCell = nTr.firstChild;
				while (nCell) {
					if (nCell.nodeName.toUpperCase() == "TD" || nCell.nodeName.toUpperCase() == "TH") {
						/* Get the col and rowspan attributes from the DOM and sanitise them */
						iColspan = nCell.getAttribute('colspan') * 1;
						iRowspan = nCell.getAttribute('rowspan') * 1;
						iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
						iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;

						/* There might be colspan cells already in this row, so shift our target
	      * accordingly
	      */
						iColShifted = fnShiftCol(aLayout, i, iColumn);

						/* Cache calculation for unique columns */
						bUnique = iColspan === 1 ? true : false;

						/* If there is col / rowspan, copy the information into the layout grid */
						for (l = 0; l < iColspan; l++) {
							for (k = 0; k < iRowspan; k++) {
								aLayout[i + k][iColShifted + l] = {
									"cell": nCell,
									"unique": bUnique
								};
								aLayout[i + k].nTr = nTr;
							}
						}
					}
					nCell = nCell.nextSibling;
				}
			}
		}

		/**
	  * Get an array of unique th elements, one for each column
	  *  @param {object} oSettings dataTables settings object
	  *  @param {node} nHeader automatically detect the layout from this node - optional
	  *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	  *  @returns array {node} aReturn list of unique th's
	  *  @memberof DataTable#oApi
	  */
		function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
			var aReturn = [];
			if (!aLayout) {
				aLayout = oSettings.aoHeader;
				if (nHeader) {
					aLayout = [];
					_fnDetectHeader(aLayout, nHeader);
				}
			}

			for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
				for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
					if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
						aReturn[j] = aLayout[i][j].cell;
					}
				}
			}

			return aReturn;
		}

		/**
	  * Create an Ajax call based on the table's settings, taking into account that
	  * parameters can have multiple forms, and backwards compatibility.
	  *
	  * @param {object} oSettings dataTables settings object
	  * @param {array} data Data to send to the server, required by
	  *     DataTables - may be augmented by developer callbacks
	  * @param {function} fn Callback function to run when data is obtained
	  */
		function _fnBuildAjax(oSettings, data, fn) {
			// Compatibility with 1.9-, allow fnServerData and event to manipulate
			_fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]);

			// Convert to object based for 1.10+ if using the old array scheme which can
			// come from server-side processing or serverParams
			if (data && $.isArray(data)) {
				var tmp = {};
				var rbracket = /(.*?)\[\]$/;

				$.each(data, function (key, val) {
					var match = val.name.match(rbracket);

					if (match) {
						// Support for arrays
						var name = match[0];

						if (!tmp[name]) {
							tmp[name] = [];
						}
						tmp[name].push(val.value);
					} else {
						tmp[val.name] = val.value;
					}
				});
				data = tmp;
			}

			var ajaxData;
			var ajax = oSettings.ajax;
			var instance = oSettings.oInstance;
			var callback = function callback(json) {
				_fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);
				fn(json);
			};

			if ($.isPlainObject(ajax) && ajax.data) {
				ajaxData = ajax.data;

				var newData = $.isFunction(ajaxData) ? ajaxData(data, oSettings) : // fn can manipulate data or return
				ajaxData; // an object object or array to merge

				// If the function returned something, use that alone
				data = $.isFunction(ajaxData) && newData ? newData : $.extend(true, data, newData);

				// Remove the data property as we've resolved it already and don't want
				// jQuery to do it again (it is restored at the end of the function)
				delete ajax.data;
			}

			var baseAjax = {
				"data": data,
				"success": function success(json) {
					var error = json.error || json.sError;
					if (error) {
						_fnLog(oSettings, 0, error);
					}

					oSettings.json = json;
					callback(json);
				},
				"dataType": "json",
				"cache": false,
				"type": oSettings.sServerMethod,
				"error": function error(xhr, _error, thrown) {
					var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);

					if ($.inArray(true, ret) === -1) {
						if (_error == "parsererror") {
							_fnLog(oSettings, 0, 'Invalid JSON response', 1);
						} else if (xhr.readyState === 4) {
							_fnLog(oSettings, 0, 'Ajax error', 7);
						}
					}

					_fnProcessingDisplay(oSettings, false);
				}
			};

			// Store the data submitted for the API
			oSettings.oAjaxData = data;

			// Allow plug-ins and external processes to modify the data
			_fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);

			if (oSettings.fnServerData) {
				// DataTables 1.9- compatibility
				oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {
					// Need to convert back to 1.9 trad format
					return { name: key, value: val };
				}), callback, oSettings);
			} else if (oSettings.sAjaxSource || typeof ajax === 'string') {
				// DataTables 1.9- compatibility
				oSettings.jqXHR = $.ajax($.extend(baseAjax, {
					url: ajax || oSettings.sAjaxSource
				}));
			} else if ($.isFunction(ajax)) {
				// Is a function - let the caller define what needs to be done
				oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
			} else {
				// Object to extend the base settings
				oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));

				// Restore for next time around
				ajax.data = ajaxData;
			}
		}

		/**
	  * Update the table using an Ajax call
	  *  @param {object} settings dataTables settings object
	  *  @returns {boolean} Block the table drawing or not
	  *  @memberof DataTable#oApi
	  */
		function _fnAjaxUpdate(settings) {
			if (settings.bAjaxDataGet) {
				settings.iDraw++;
				_fnProcessingDisplay(settings, true);

				_fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {
					_fnAjaxUpdateDraw(settings, json);
				});

				return false;
			}
			return true;
		}

		/**
	  * Build up the parameters in an object needed for a server-side processing
	  * request. Note that this is basically done twice, is different ways - a modern
	  * method which is used by default in DataTables 1.10 which uses objects and
	  * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	  * the sAjaxSource option is used in the initialisation, or the legacyAjax
	  * option is set.
	  *  @param {object} oSettings dataTables settings object
	  *  @returns {bool} block the table drawing or not
	  *  @memberof DataTable#oApi
	  */
		function _fnAjaxParameters(settings) {
			var columns = settings.aoColumns,
			    columnCount = columns.length,
			    features = settings.oFeatures,
			    preSearch = settings.oPreviousSearch,
			    preColSearch = settings.aoPreSearchCols,
			    i,
			    data = [],
			    dataProp,
			    column,
			    columnSearch,
			    sort = _fnSortFlatten(settings),
			    displayStart = settings._iDisplayStart,
			    displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;

			var param = function param(name, value) {
				data.push({ 'name': name, 'value': value });
			};

			// DataTables 1.9- compatible method
			param('sEcho', settings.iDraw);
			param('iColumns', columnCount);
			param('sColumns', _pluck(columns, 'sName').join(','));
			param('iDisplayStart', displayStart);
			param('iDisplayLength', displayLength);

			// DataTables 1.10+ method
			var d = {
				draw: settings.iDraw,
				columns: [],
				order: [],
				start: displayStart,
				length: displayLength,
				search: {
					value: preSearch.sSearch,
					regex: preSearch.bRegex
				}
			};

			for (i = 0; i < columnCount; i++) {
				column = columns[i];
				columnSearch = preColSearch[i];
				dataProp = typeof column.mData == "function" ? 'function' : column.mData;

				d.columns.push({
					data: dataProp,
					name: column.sName,
					searchable: column.bSearchable,
					orderable: column.bSortable,
					search: {
						value: columnSearch.sSearch,
						regex: columnSearch.bRegex
					}
				});

				param("mDataProp_" + i, dataProp);

				if (features.bFilter) {
					param('sSearch_' + i, columnSearch.sSearch);
					param('bRegex_' + i, columnSearch.bRegex);
					param('bSearchable_' + i, column.bSearchable);
				}

				if (features.bSort) {
					param('bSortable_' + i, column.bSortable);
				}
			}

			if (features.bFilter) {
				param('sSearch', preSearch.sSearch);
				param('bRegex', preSearch.bRegex);
			}

			if (features.bSort) {
				$.each(sort, function (i, val) {
					d.order.push({ column: val.col, dir: val.dir });

					param('iSortCol_' + i, val.col);
					param('sSortDir_' + i, val.dir);
				});

				param('iSortingCols', sort.length);
			}

			// If the legacy.ajax parameter is null, then we automatically decide which
			// form to use, based on sAjaxSource
			var legacy = DataTable.ext.legacy.ajax;
			if (legacy === null) {
				return settings.sAjaxSource ? data : d;
			}

			// Otherwise, if legacy has been specified then we use that to decide on the
			// form
			return legacy ? data : d;
		}

		/**
	  * Data the data from the server (nuking the old) and redraw the table
	  *  @param {object} oSettings dataTables settings object
	  *  @param {object} json json data return from the server.
	  *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	  *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	  *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	  *  @param {array} json.aaData The data to display on this page
	  *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	  *  @memberof DataTable#oApi
	  */
		function _fnAjaxUpdateDraw(settings, json) {
			// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
			// Support both
			var compat = function compat(old, modern) {
				return json[old] !== undefined ? json[old] : json[modern];
			};

			var data = _fnAjaxDataSrc(settings, json);
			var draw = compat('sEcho', 'draw');
			var recordsTotal = compat('iTotalRecords', 'recordsTotal');
			var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');

			if (draw) {
				// Protect against out of sequence returns
				if (draw * 1 < settings.iDraw) {
					return;
				}
				settings.iDraw = draw * 1;
			}

			_fnClearTable(settings);
			settings._iRecordsTotal = parseInt(recordsTotal, 10);
			settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

			for (var i = 0, ien = data.length; i < ien; i++) {
				_fnAddData(settings, data[i]);
			}
			settings.aiDisplay = settings.aiDisplayMaster.slice();

			settings.bAjaxDataGet = false;
			_fnDraw(settings);

			if (!settings._bInitComplete) {
				_fnInitComplete(settings, json);
			}

			settings.bAjaxDataGet = true;
			_fnProcessingDisplay(settings, false);
		}

		/**
	  * Get the data from the JSON data source to use for drawing a table. Using
	  * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	  * source object, or from a processing function.
	  *  @param {object} oSettings dataTables settings object
	  *  @param  {object} json Data source object / array from the server
	  *  @return {array} Array of data to use
	  */
		function _fnAjaxDataSrc(oSettings, json) {
			var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp; // Compatibility with 1.9-.

			// Compatibility with 1.9-. In order to read from aaData, check if the
			// default has been changed, if not, check for aaData
			if (dataSrc === 'data') {
				return json.aaData || json[dataSrc];
			}

			return dataSrc !== "" ? _fnGetObjectDataFn(dataSrc)(json) : json;
		}

		/**
	  * Generate the node required for filtering text
	  *  @returns {node} Filter control element
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnFeatureHtmlFilter(settings) {
			var classes = settings.oClasses;
			var tableId = settings.sTableId;
			var language = settings.oLanguage;
			var previousSearch = settings.oPreviousSearch;
			var features = settings.aanFeatures;
			var input = '<input type="search" class="' + classes.sFilterInput + '"/>';

			var str = language.sSearch;
			str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;

			var filter = $('<div/>', {
				'id': !features.f ? tableId + '_filter' : null,
				'class': classes.sFilter
			}).append($('<label/>').append(str));

			var searchFn = function searchFn() {
				/* Update all other filter input elements for the new display */
				var n = features.f;
				var val = !this.value ? "" : this.value; // mental IE8 fix :-(

				/* Now do the filter */
				if (val != previousSearch.sSearch) {
					_fnFilterComplete(settings, {
						"sSearch": val,
						"bRegex": previousSearch.bRegex,
						"bSmart": previousSearch.bSmart,
						"bCaseInsensitive": previousSearch.bCaseInsensitive
					});

					// Need to redraw, without resorting
					settings._iDisplayStart = 0;
					_fnDraw(settings);
				}
			};

			var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;

			var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).on('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).on('keypress.DT', function (e) {
				/* Prevent form submission */
				if (e.keyCode == 13) {
					return false;
				}
			}).attr('aria-controls', tableId);

			// Update the input elements whenever the table is filtered
			$(settings.nTable).on('search.dt.DT', function (ev, s) {
				if (settings === s) {
					// IE9 throws an 'unknown error' if document.activeElement is used
					// inside an iframe or frame...
					try {
						if (jqFilter[0] !== document.activeElement) {
							jqFilter.val(previousSearch.sSearch);
						}
					} catch (e) {}
				}
			});

			return filter[0];
		}

		/**
	  * Filter the table using both the global filter and column based filtering
	  *  @param {object} oSettings dataTables settings object
	  *  @param {object} oSearch search information
	  *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	  *  @memberof DataTable#oApi
	  */
		function _fnFilterComplete(oSettings, oInput, iForce) {
			var oPrevSearch = oSettings.oPreviousSearch;
			var aoPrevSearch = oSettings.aoPreSearchCols;
			var fnSaveFilter = function fnSaveFilter(oFilter) {
				/* Save the filtering values */
				oPrevSearch.sSearch = oFilter.sSearch;
				oPrevSearch.bRegex = oFilter.bRegex;
				oPrevSearch.bSmart = oFilter.bSmart;
				oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
			};
			var fnRegex = function fnRegex(o) {
				// Backwards compatibility with the bEscapeRegex option
				return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
			};

			// Resolve any column types that are unknown due to addition or invalidation
			// @todo As per sort - can this be moved into an event handler?
			_fnColumnTypes(oSettings);

			/* In server-side processing all filtering is done by the server, so no point hanging around here */
			if (_fnDataSource(oSettings) != 'ssp') {
				/* Global filter */
				_fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);
				fnSaveFilter(oInput);

				/* Now do the individual column filter */
				for (var i = 0; i < aoPrevSearch.length; i++) {
					_fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
				}

				/* Custom filtering */
				_fnFilterCustom(oSettings);
			} else {
				fnSaveFilter(oInput);
			}

			/* Tell the draw function we have been filtering */
			oSettings.bFiltered = true;
			_fnCallbackFire(oSettings, null, 'search', [oSettings]);
		}

		/**
	  * Apply custom filtering functions
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnFilterCustom(settings) {
			var filters = DataTable.ext.search;
			var displayRows = settings.aiDisplay;
			var row, rowIdx;

			for (var i = 0, ien = filters.length; i < ien; i++) {
				var rows = [];

				// Loop over each row and see if it should be included
				for (var j = 0, jen = displayRows.length; j < jen; j++) {
					rowIdx = displayRows[j];
					row = settings.aoData[rowIdx];

					if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
						rows.push(rowIdx);
					}
				}

				// So the array reference doesn't break set the results into the
				// existing array
				displayRows.length = 0;
				$.merge(displayRows, rows);
			}
		}

		/**
	  * Filter the table on a per-column basis
	  *  @param {object} oSettings dataTables settings object
	  *  @param {string} sInput string to filter on
	  *  @param {int} iColumn column to filter
	  *  @param {bool} bRegex treat search string as a regular expression or not
	  *  @param {bool} bSmart use smart filtering or not
	  *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	  *  @memberof DataTable#oApi
	  */
		function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
			if (searchStr === '') {
				return;
			}

			var data;
			var out = [];
			var display = settings.aiDisplay;
			var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);

			for (var i = 0; i < display.length; i++) {
				data = settings.aoData[display[i]]._aFilterData[colIdx];

				if (rpSearch.test(data)) {
					out.push(display[i]);
				}
			}

			settings.aiDisplay = out;
		}

		/**
	  * Filter the data table based on user input and draw the table
	  *  @param {object} settings dataTables settings object
	  *  @param {string} input string to filter on
	  *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	  *  @param {bool} regex treat as a regular expression or not
	  *  @param {bool} smart perform smart filtering or not
	  *  @param {bool} caseInsensitive Do case insenstive matching or not
	  *  @memberof DataTable#oApi
	  */
		function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
			var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
			var prevSearch = settings.oPreviousSearch.sSearch;
			var displayMaster = settings.aiDisplayMaster;
			var display, invalidated, i;
			var filtered = [];

			// Need to take account of custom filtering functions - always filter
			if (DataTable.ext.search.length !== 0) {
				force = true;
			}

			// Check if any of the rows were invalidated
			invalidated = _fnFilterData(settings);

			// If the input is blank - we just want the full data set
			if (input.length <= 0) {
				settings.aiDisplay = displayMaster.slice();
			} else {
				// New search - start from the master array
				if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted // On resort, the display master needs to be
				// re-filtered since indexes will have changed
				) {
						settings.aiDisplay = displayMaster.slice();
					}

				// Search the display array
				display = settings.aiDisplay;

				for (i = 0; i < display.length; i++) {
					if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
						filtered.push(display[i]);
					}
				}

				settings.aiDisplay = filtered;
			}
		}

		/**
	  * Build a regular expression object suitable for searching a table
	  *  @param {string} sSearch string to search for
	  *  @param {bool} bRegex treat as a regular expression or not
	  *  @param {bool} bSmart perform smart filtering or not
	  *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	  *  @returns {RegExp} constructed object
	  *  @memberof DataTable#oApi
	  */
		function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
			search = regex ? search : _fnEscapeRegex(search);

			if (smart) {
				/* For smart filtering we want to allow the search to work regardless of
	    * word order. We also want double quoted text to be preserved, so word
	    * order is important - a la google. So this is what we want to
	    * generate:
	    * 
	    * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
	    */
				var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function (word) {
					if (word.charAt(0) === '"') {
						var m = word.match(/^"(.*)"$/);
						word = m ? m[1] : word;
					}

					return word.replace('"', '');
				});

				search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
			}

			return new RegExp(search, caseInsensitive ? 'i' : '');
		}

		/**
	  * Escape a string such that it can be used in a regular expression
	  *  @param {string} sVal string to escape
	  *  @returns {string} escaped string
	  *  @memberof DataTable#oApi
	  */
		var _fnEscapeRegex = DataTable.util.escapeRegex;

		var __filter_div = $('<div>')[0];
		var __filter_div_textContent = __filter_div.textContent !== undefined;

		// Update the filtering data for each row if needed (by invalidation or first run)
		function _fnFilterData(settings) {
			var columns = settings.aoColumns;
			var column;
			var i, j, ien, jen, filterData, cellData, row;
			var fomatters = DataTable.ext.type.search;
			var wasInvalidated = false;

			for (i = 0, ien = settings.aoData.length; i < ien; i++) {
				row = settings.aoData[i];

				if (!row._aFilterData) {
					filterData = [];

					for (j = 0, jen = columns.length; j < jen; j++) {
						column = columns[j];

						if (column.bSearchable) {
							cellData = _fnGetCellData(settings, i, j, 'filter');

							if (fomatters[column.sType]) {
								cellData = fomatters[column.sType](cellData);
							}

							// Search in DataTables 1.10 is string based. In 1.11 this
							// should be altered to also allow strict type checking.
							if (cellData === null) {
								cellData = '';
							}

							if (typeof cellData !== 'string' && cellData.toString) {
								cellData = cellData.toString();
							}
						} else {
							cellData = '';
						}

						// If it looks like there is an HTML entity in the string,
						// attempt to decode it so sorting works as expected. Note that
						// we could use a single line of jQuery to do this, but the DOM
						// method used here is much faster http://jsperf.com/html-decode
						if (cellData.indexOf && cellData.indexOf('&') !== -1) {
							__filter_div.innerHTML = cellData;
							cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;
						}

						if (cellData.replace) {
							cellData = cellData.replace(/[\r\n]/g, '');
						}

						filterData.push(cellData);
					}

					row._aFilterData = filterData;
					row._sFilterRow = filterData.join('  ');
					wasInvalidated = true;
				}
			}

			return wasInvalidated;
		}

		/**
	  * Convert from the internal Hungarian notation to camelCase for external
	  * interaction
	  *  @param {object} obj Object to convert
	  *  @returns {object} Inverted object
	  *  @memberof DataTable#oApi
	  */
		function _fnSearchToCamel(obj) {
			return {
				search: obj.sSearch,
				smart: obj.bSmart,
				regex: obj.bRegex,
				caseInsensitive: obj.bCaseInsensitive
			};
		}

		/**
	  * Convert from camelCase notation to the internal Hungarian. We could use the
	  * Hungarian convert function here, but this is cleaner
	  *  @param {object} obj Object to convert
	  *  @returns {object} Inverted object
	  *  @memberof DataTable#oApi
	  */
		function _fnSearchToHung(obj) {
			return {
				sSearch: obj.search,
				bSmart: obj.smart,
				bRegex: obj.regex,
				bCaseInsensitive: obj.caseInsensitive
			};
		}

		/**
	  * Generate the node required for the info display
	  *  @param {object} oSettings dataTables settings object
	  *  @returns {node} Information element
	  *  @memberof DataTable#oApi
	  */
		function _fnFeatureHtmlInfo(settings) {
			var tid = settings.sTableId,
			    nodes = settings.aanFeatures.i,
			    n = $('<div/>', {
				'class': settings.oClasses.sInfo,
				'id': !nodes ? tid + '_info' : null
			});

			if (!nodes) {
				// Update display on each draw
				settings.aoDrawCallback.push({
					"fn": _fnUpdateInfo,
					"sName": "information"
				});

				n.attr('role', 'status').attr('aria-live', 'polite');

				// Table is described by our info div
				$(settings.nTable).attr('aria-describedby', tid + '_info');
			}

			return n[0];
		}

		/**
	  * Update the information elements in the display
	  *  @param {object} settings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnUpdateInfo(settings) {
			/* Show information about the table */
			var nodes = settings.aanFeatures.i;
			if (nodes.length === 0) {
				return;
			}

			var lang = settings.oLanguage,
			    start = settings._iDisplayStart + 1,
			    end = settings.fnDisplayEnd(),
			    max = settings.fnRecordsTotal(),
			    total = settings.fnRecordsDisplay(),
			    out = total ? lang.sInfo : lang.sInfoEmpty;

			if (total !== max) {
				/* Record set after filtering */
				out += ' ' + lang.sInfoFiltered;
			}

			// Convert the macros
			out += lang.sInfoPostFix;
			out = _fnInfoMacros(settings, out);

			var callback = lang.fnInfoCallback;
			if (callback !== null) {
				out = callback.call(settings.oInstance, settings, start, end, max, total, out);
			}

			$(nodes).html(out);
		}

		function _fnInfoMacros(settings, str) {
			// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
			// internally
			var formatter = settings.fnFormatNumber,
			    start = settings._iDisplayStart + 1,
			    len = settings._iDisplayLength,
			    vis = settings.fnRecordsDisplay(),
			    all = len === -1;

			return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
		}

		/**
	  * Draw the table for the first time, adding all required features
	  *  @param {object} settings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnInitialise(settings) {
			var i,
			    iLen,
			    iAjaxStart = settings.iInitDisplayStart;
			var columns = settings.aoColumns,
			    column;
			var features = settings.oFeatures;
			var deferLoading = settings.bDeferLoading; // value modified by the draw

			/* Ensure that the table data is fully initialised */
			if (!settings.bInitialised) {
				setTimeout(function () {
					_fnInitialise(settings);
				}, 200);
				return;
			}

			/* Show the display HTML options */
			_fnAddOptionsHtml(settings);

			/* Build and draw the header / footer for the table */
			_fnBuildHead(settings);
			_fnDrawHead(settings, settings.aoHeader);
			_fnDrawHead(settings, settings.aoFooter);

			/* Okay to show that something is going on now */
			_fnProcessingDisplay(settings, true);

			/* Calculate sizes for columns */
			if (features.bAutoWidth) {
				_fnCalculateColumnWidths(settings);
			}

			for (i = 0, iLen = columns.length; i < iLen; i++) {
				column = columns[i];

				if (column.sWidth) {
					column.nTh.style.width = _fnStringToCss(column.sWidth);
				}
			}

			_fnCallbackFire(settings, null, 'preInit', [settings]);

			// If there is default sorting required - let's do it. The sort function
			// will do the drawing for us. Otherwise we draw the table regardless of the
			// Ajax source - this allows the table to look initialised for Ajax sourcing
			// data (show 'loading' message possibly)
			_fnReDraw(settings);

			// Server-side processing init complete is done by _fnAjaxUpdateDraw
			var dataSrc = _fnDataSource(settings);
			if (dataSrc != 'ssp' || deferLoading) {
				// if there is an ajax source load the data
				if (dataSrc == 'ajax') {
					_fnBuildAjax(settings, [], function (json) {
						var aData = _fnAjaxDataSrc(settings, json);

						// Got the data - add it to the table
						for (i = 0; i < aData.length; i++) {
							_fnAddData(settings, aData[i]);
						}

						// Reset the init display for cookie saving. We've already done
						// a filter, and therefore cleared it before. So we need to make
						// it appear 'fresh'
						settings.iInitDisplayStart = iAjaxStart;

						_fnReDraw(settings);

						_fnProcessingDisplay(settings, false);
						_fnInitComplete(settings, json);
					}, settings);
				} else {
					_fnProcessingDisplay(settings, false);
					_fnInitComplete(settings);
				}
			}
		}

		/**
	  * Draw the table for the first time, adding all required features
	  *  @param {object} oSettings dataTables settings object
	  *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	  *    with client-side processing (optional)
	  *  @memberof DataTable#oApi
	  */
		function _fnInitComplete(settings, json) {
			settings._bInitComplete = true;

			// When data was added after the initialisation (data or Ajax) we need to
			// calculate the column sizing
			if (json || settings.oInit.aaData) {
				_fnAdjustColumnSizing(settings);
			}

			_fnCallbackFire(settings, null, 'plugin-init', [settings, json]);
			_fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);
		}

		function _fnLengthChange(settings, val) {
			var len = parseInt(val, 10);
			settings._iDisplayLength = len;

			_fnLengthOverflow(settings);

			// Fire length change event
			_fnCallbackFire(settings, null, 'length', [settings, len]);
		}

		/**
	  * Generate the node required for user display length changing
	  *  @param {object} settings dataTables settings object
	  *  @returns {node} Display length feature node
	  *  @memberof DataTable#oApi
	  */
		function _fnFeatureHtmlLength(settings) {
			var classes = settings.oClasses,
			    tableId = settings.sTableId,
			    menu = settings.aLengthMenu,
			    d2 = $.isArray(menu[0]),
			    lengths = d2 ? menu[0] : menu,
			    language = d2 ? menu[1] : menu;

			var select = $('<select/>', {
				'name': tableId + '_length',
				'aria-controls': tableId,
				'class': classes.sLengthSelect
			});

			for (var i = 0, ien = lengths.length; i < ien; i++) {
				select[0][i] = new Option(language[i], lengths[i]);
			}

			var div = $('<div><label/></div>').addClass(classes.sLength);
			if (!settings.aanFeatures.l) {
				div[0].id = tableId + '_length';
			}

			div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML));

			// Can't use `select` variable as user might provide their own and the
			// reference is broken by the use of outerHTML
			$('select', div).val(settings._iDisplayLength).on('change.DT', function (e) {
				_fnLengthChange(settings, $(this).val());
				_fnDraw(settings);
			});

			// Update node value whenever anything changes the table's length
			$(settings.nTable).on('length.dt.DT', function (e, s, len) {
				if (settings === s) {
					$('select', div).val(len);
				}
			});

			return div[0];
		}

		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	  * Note that most of the paging logic is done in
	  * DataTable.ext.pager
	  */

		/**
	  * Generate the node required for default pagination
	  *  @param {object} oSettings dataTables settings object
	  *  @returns {node} Pagination feature node
	  *  @memberof DataTable#oApi
	  */
		function _fnFeatureHtmlPaginate(settings) {
			var type = settings.sPaginationType,
			    plugin = DataTable.ext.pager[type],
			    modern = typeof plugin === 'function',
			    redraw = function redraw(settings) {
				_fnDraw(settings);
			},
			    node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],
			    features = settings.aanFeatures;

			if (!modern) {
				plugin.fnInit(settings, node, redraw);
			}

			/* Add a draw callback for the pagination on first instance, to update the paging display */
			if (!features.p) {
				node.id = settings.sTableId + '_paginate';

				settings.aoDrawCallback.push({
					"fn": function fn(settings) {
						if (modern) {
							var start = settings._iDisplayStart,
							    len = settings._iDisplayLength,
							    visRecords = settings.fnRecordsDisplay(),
							    all = len === -1,
							    page = all ? 0 : Math.ceil(start / len),
							    pages = all ? 1 : Math.ceil(visRecords / len),
							    buttons = plugin(page, pages),
							    i,
							    ien;

							for (i = 0, ien = features.p.length; i < ien; i++) {
								_fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);
							}
						} else {
							plugin.fnUpdate(settings, redraw);
						}
					},
					"sName": "pagination"
				});
			}

			return node;
		}

		/**
	  * Alter the display settings to change the page
	  *  @param {object} settings DataTables settings object
	  *  @param {string|int} action Paging action to take: "first", "previous",
	  *    "next" or "last" or page number to jump to (integer)
	  *  @param [bool] redraw Automatically draw the update or not
	  *  @returns {bool} true page has changed, false - no change
	  *  @memberof DataTable#oApi
	  */
		function _fnPageChange(settings, action, redraw) {
			var start = settings._iDisplayStart,
			    len = settings._iDisplayLength,
			    records = settings.fnRecordsDisplay();

			if (records === 0 || len === -1) {
				start = 0;
			} else if (typeof action === "number") {
				start = action * len;

				if (start > records) {
					start = 0;
				}
			} else if (action == "first") {
				start = 0;
			} else if (action == "previous") {
				start = len >= 0 ? start - len : 0;

				if (start < 0) {
					start = 0;
				}
			} else if (action == "next") {
				if (start + len < records) {
					start += len;
				}
			} else if (action == "last") {
				start = Math.floor((records - 1) / len) * len;
			} else {
				_fnLog(settings, 0, "Unknown paging action: " + action, 5);
			}

			var changed = settings._iDisplayStart !== start;
			settings._iDisplayStart = start;

			if (changed) {
				_fnCallbackFire(settings, null, 'page', [settings]);

				if (redraw) {
					_fnDraw(settings);
				}
			}

			return changed;
		}

		/**
	  * Generate the node required for the processing node
	  *  @param {object} settings dataTables settings object
	  *  @returns {node} Processing element
	  *  @memberof DataTable#oApi
	  */
		function _fnFeatureHtmlProcessing(settings) {
			return $('<div/>', {
				'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
				'class': settings.oClasses.sProcessing
			}).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];
		}

		/**
	  * Display or hide the processing indicator
	  *  @param {object} settings dataTables settings object
	  *  @param {bool} show Show the processing indicator (true) or not (false)
	  *  @memberof DataTable#oApi
	  */
		function _fnProcessingDisplay(settings, show) {
			if (settings.oFeatures.bProcessing) {
				$(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
			}

			_fnCallbackFire(settings, null, 'processing', [settings, show]);
		}

		/**
	  * Add any control elements for the table - specifically scrolling
	  *  @param {object} settings dataTables settings object
	  *  @returns {node} Node to add to the DOM
	  *  @memberof DataTable#oApi
	  */
		function _fnFeatureHtmlTable(settings) {
			var table = $(settings.nTable);

			// Add the ARIA grid role to the table
			table.attr('role', 'grid');

			// Scrolling from here on in
			var scroll = settings.oScroll;

			if (scroll.sX === '' && scroll.sY === '') {
				return settings.nTable;
			}

			var scrollX = scroll.sX;
			var scrollY = scroll.sY;
			var classes = settings.oClasses;
			var caption = table.children('caption');
			var captionSide = caption.length ? caption[0]._captionSide : null;
			var headerClone = $(table[0].cloneNode(false));
			var footerClone = $(table[0].cloneNode(false));
			var footer = table.children('tfoot');
			var _div = '<div/>';
			var size = function size(s) {
				return !s ? null : _fnStringToCss(s);
			};

			if (!footer.length) {
				footer = null;
			}

			/*
	   * The HTML structure that we want to generate in this function is:
	   *  div - scroller
	   *    div - scroll head
	   *      div - scroll head inner
	   *        table - scroll head table
	   *          thead - thead
	   *    div - scroll body
	   *      table - table (master table)
	   *        thead - thead clone for sizing
	   *        tbody - tbody
	   *    div - scroll foot
	   *      div - scroll foot inner
	   *        table - scroll foot table
	   *          tfoot - tfoot
	   */
			var scroller = $(_div, { 'class': classes.sScrollWrapper }).append($(_div, { 'class': classes.sScrollHead }).css({
				overflow: 'hidden',
				position: 'relative',
				border: 0,
				width: scrollX ? size(scrollX) : '100%'
			}).append($(_div, { 'class': classes.sScrollHeadInner }).css({
				'box-sizing': 'content-box',
				width: scroll.sXInner || '100%'
			}).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, { 'class': classes.sScrollBody }).css({
				position: 'relative',
				overflow: 'auto',
				width: size(scrollX)
			}).append(table));

			if (footer) {
				scroller.append($(_div, { 'class': classes.sScrollFoot }).css({
					overflow: 'hidden',
					border: 0,
					width: scrollX ? size(scrollX) : '100%'
				}).append($(_div, { 'class': classes.sScrollFootInner }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));
			}

			var children = scroller.children();
			var scrollHead = children[0];
			var scrollBody = children[1];
			var scrollFoot = footer ? children[2] : null;

			// When the body is scrolled, then we also want to scroll the headers
			if (scrollX) {
				$(scrollBody).on('scroll.DT', function (e) {
					var scrollLeft = this.scrollLeft;

					scrollHead.scrollLeft = scrollLeft;

					if (footer) {
						scrollFoot.scrollLeft = scrollLeft;
					}
				});
			}

			$(scrollBody).css(scrollY && scroll.bCollapse ? 'max-height' : 'height', scrollY);

			settings.nScrollHead = scrollHead;
			settings.nScrollBody = scrollBody;
			settings.nScrollFoot = scrollFoot;

			// On redraw - align columns
			settings.aoDrawCallback.push({
				"fn": _fnScrollDraw,
				"sName": "scrolling"
			});

			return scroller[0];
		}

		/**
	  * Update the header, footer and body tables for resizing - i.e. column
	  * alignment.
	  *
	  * Welcome to the most horrible function DataTables. The process that this
	  * function follows is basically:
	  *   1. Re-create the table inside the scrolling div
	  *   2. Take live measurements from the DOM
	  *   3. Apply the measurements to align the columns
	  *   4. Clean up
	  *
	  *  @param {object} settings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnScrollDraw(settings) {
			// Given that this is such a monster function, a lot of variables are use
			// to try and keep the minimised size as small as possible
			var scroll = settings.oScroll,
			    scrollX = scroll.sX,
			    scrollXInner = scroll.sXInner,
			    scrollY = scroll.sY,
			    barWidth = scroll.iBarWidth,
			    divHeader = $(settings.nScrollHead),
			    divHeaderStyle = divHeader[0].style,
			    divHeaderInner = divHeader.children('div'),
			    divHeaderInnerStyle = divHeaderInner[0].style,
			    divHeaderTable = divHeaderInner.children('table'),
			    divBodyEl = settings.nScrollBody,
			    divBody = $(divBodyEl),
			    divBodyStyle = divBodyEl.style,
			    divFooter = $(settings.nScrollFoot),
			    divFooterInner = divFooter.children('div'),
			    divFooterTable = divFooterInner.children('table'),
			    header = $(settings.nTHead),
			    table = $(settings.nTable),
			    tableEl = table[0],
			    tableStyle = tableEl.style,
			    footer = settings.nTFoot ? $(settings.nTFoot) : null,
			    browser = settings.oBrowser,
			    ie67 = browser.bScrollOversize,
			    dtHeaderCells = _pluck(settings.aoColumns, 'nTh'),
			    headerTrgEls,
			    footerTrgEls,
			    headerSrcEls,
			    footerSrcEls,
			    headerCopy,
			    footerCopy,
			    headerWidths = [],
			    footerWidths = [],
			    headerContent = [],
			    footerContent = [],
			    idx,
			    correction,
			    sanityWidth,
			    zeroOut = function zeroOut(nSizer) {
				var style = nSizer.style;
				style.paddingTop = "0";
				style.paddingBottom = "0";
				style.borderTopWidth = "0";
				style.borderBottomWidth = "0";
				style.height = 0;
			};

			// If the scrollbar visibility has changed from the last draw, we need to
			// adjust the column sizes as the table width will have changed to account
			// for the scrollbar
			var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;

			if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {
				settings.scrollBarVis = scrollBarVis;
				_fnAdjustColumnSizing(settings);
				return; // adjust column sizing will call this function again
			} else {
				settings.scrollBarVis = scrollBarVis;
			}

			/*
	   * 1. Re-create the table inside the scrolling div
	   */

			// Remove the old minimised thead and tfoot elements in the inner table
			table.children('thead, tfoot').remove();

			if (footer) {
				footerCopy = footer.clone().prependTo(table);
				footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
				footerSrcEls = footerCopy.find('tr');
			}

			// Clone the current header and footer elements and then place it into the inner table
			headerCopy = header.clone().prependTo(table);
			headerTrgEls = header.find('tr'); // original header is in its own table
			headerSrcEls = headerCopy.find('tr');
			headerCopy.find('th, td').removeAttr('tabindex');

			/*
	   * 2. Take live measurements from the DOM - do not alter the DOM itself!
	   */

			// Remove old sizing and apply the calculated column widths
			// Get the unique column headers in the newly created (cloned) header. We want to apply the
			// calculated sizes to this header
			if (!scrollX) {
				divBodyStyle.width = '100%';
				divHeader[0].style.width = '100%';
			}

			$.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
				idx = _fnVisibleToColumnIndex(settings, i);
				el.style.width = settings.aoColumns[idx].sWidth;
			});

			if (footer) {
				_fnApplyToChildren(function (n) {
					n.style.width = "";
				}, footerSrcEls);
			}

			// Size the table as a whole
			sanityWidth = table.outerWidth();
			if (scrollX === "") {
				// No x scrolling
				tableStyle.width = "100%";

				// IE7 will make the width of the table when 100% include the scrollbar
				// - which is shouldn't. When there is a scrollbar we need to take this
				// into account.
				if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
					tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
				}

				// Recalculate the sanity width
				sanityWidth = table.outerWidth();
			} else if (scrollXInner !== "") {
				// legacy x scroll inner has been given - use it
				tableStyle.width = _fnStringToCss(scrollXInner);

				// Recalculate the sanity width
				sanityWidth = table.outerWidth();
			}

			// Hidden header should have zero height, so remove padding and borders. Then
			// set the width based on the real headers

			// Apply all styles in one pass
			_fnApplyToChildren(zeroOut, headerSrcEls);

			// Read all widths in next pass
			_fnApplyToChildren(function (nSizer) {
				headerContent.push(nSizer.innerHTML);
				headerWidths.push(_fnStringToCss($(nSizer).css('width')));
			}, headerSrcEls);

			// Apply all widths in final pass
			_fnApplyToChildren(function (nToSize, i) {
				// Only apply widths to the DataTables detected header cells - this
				// prevents complex headers from having contradictory sizes applied
				if ($.inArray(nToSize, dtHeaderCells) !== -1) {
					nToSize.style.width = headerWidths[i];
				}
			}, headerTrgEls);

			$(headerSrcEls).height(0);

			/* Same again with the footer if we have one */
			if (footer) {
				_fnApplyToChildren(zeroOut, footerSrcEls);

				_fnApplyToChildren(function (nSizer) {
					footerContent.push(nSizer.innerHTML);
					footerWidths.push(_fnStringToCss($(nSizer).css('width')));
				}, footerSrcEls);

				_fnApplyToChildren(function (nToSize, i) {
					nToSize.style.width = footerWidths[i];
				}, footerTrgEls);

				$(footerSrcEls).height(0);
			}

			/*
	   * 3. Apply the measurements
	   */

			// "Hide" the header and footer that we used for the sizing. We need to keep
			// the content of the cell so that the width applied to the header and body
			// both match, but we want to hide it completely. We want to also fix their
			// width to what they currently are
			_fnApplyToChildren(function (nSizer, i) {
				nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + '</div>';
				nSizer.style.width = headerWidths[i];
			}, headerSrcEls);

			if (footer) {
				_fnApplyToChildren(function (nSizer, i) {
					nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + footerContent[i] + '</div>';
					nSizer.style.width = footerWidths[i];
				}, footerSrcEls);
			}

			// Sanity check that the table is of a sensible width. If not then we are going to get
			// misalignment - try to prevent this by not allowing the table to shrink below its min width
			if (table.outerWidth() < sanityWidth) {
				// The min width depends upon if we have a vertical scrollbar visible or not */
				correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll" ? sanityWidth + barWidth : sanityWidth;

				// IE6/7 are a law unto themselves...
				if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
					tableStyle.width = _fnStringToCss(correction - barWidth);
				}

				// And give the user a warning that we've stopped the table getting too small
				if (scrollX === "" || scrollXInner !== "") {
					_fnLog(settings, 1, 'Possible column misalignment', 6);
				}
			} else {
				correction = '100%';
			}

			// Apply to the container elements
			divBodyStyle.width = _fnStringToCss(correction);
			divHeaderStyle.width = _fnStringToCss(correction);

			if (footer) {
				settings.nScrollFoot.style.width = _fnStringToCss(correction);
			}

			/*
	   * 4. Clean up
	   */
			if (!scrollY) {
				/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
	    * the scrollbar height from the visible display, rather than adding it on. We need to
	    * set the height in order to sort this. Don't want to do it in any other browsers.
	    */
				if (ie67) {
					divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
				}
			}

			/* Finally set the width's of the header and footer tables */
			var iOuterWidth = table.outerWidth();
			divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
			divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);

			// Figure out if there are scrollbar present - if so then we need a the header and footer to
			// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
			var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
			var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
			divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

			if (footer) {
				divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
				divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
				divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
			}

			// Correct DOM ordering for colgroup - comes before the thead
			table.children('colgroup').insertBefore(table.children('thead'));

			/* Adjust the position of the header in case we loose the y-scrollbar */
			divBody.scroll();

			// If sorting or filtering has occurred, jump the scrolling back to the top
			// only if we aren't holding the position
			if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
				divBodyEl.scrollTop = 0;
			}
		}

		/**
	  * Apply a given function to the display child nodes of an element array (typically
	  * TD children of TR rows
	  *  @param {function} fn Method to apply to the objects
	  *  @param array {nodes} an1 List of elements to look through for display children
	  *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	  *  @memberof DataTable#oApi
	  */
		function _fnApplyToChildren(fn, an1, an2) {
			var index = 0,
			    i = 0,
			    iLen = an1.length;
			var nNode1, nNode2;

			while (i < iLen) {
				nNode1 = an1[i].firstChild;
				nNode2 = an2 ? an2[i].firstChild : null;

				while (nNode1) {
					if (nNode1.nodeType === 1) {
						if (an2) {
							fn(nNode1, nNode2, index);
						} else {
							fn(nNode1, index);
						}

						index++;
					}

					nNode1 = nNode1.nextSibling;
					nNode2 = an2 ? nNode2.nextSibling : null;
				}

				i++;
			}
		}

		var __re_html_remove = /<.*?>/g;

		/**
	  * Calculate the width of columns for the table
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnCalculateColumnWidths(oSettings) {
			var table = oSettings.nTable,
			    columns = oSettings.aoColumns,
			    scroll = oSettings.oScroll,
			    scrollY = scroll.sY,
			    scrollX = scroll.sX,
			    scrollXInner = scroll.sXInner,
			    columnCount = columns.length,
			    visibleColumns = _fnGetColumns(oSettings, 'bVisible'),
			    headerCells = $('th', oSettings.nTHead),
			    tableWidthAttr = table.getAttribute('width'),
			    // from DOM element
			tableContainer = table.parentNode,
			    userInputs = false,
			    i,
			    column,
			    columnIdx,
			    width,
			    outerWidth,
			    browser = oSettings.oBrowser,
			    ie67 = browser.bScrollOversize;

			var styleWidth = table.style.width;
			if (styleWidth && styleWidth.indexOf('%') !== -1) {
				tableWidthAttr = styleWidth;
			}

			/* Convert any user input sizes into pixel sizes */
			for (i = 0; i < visibleColumns.length; i++) {
				column = columns[visibleColumns[i]];

				if (column.sWidth !== null) {
					column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);

					userInputs = true;
				}
			}

			/* If the number of columns in the DOM equals the number that we have to
	   * process in DataTables, then we can use the offsets that are created by
	   * the web- browser. No custom sizes can be set in order for this to happen,
	   * nor scrolling used
	   */
			if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {
				for (i = 0; i < columnCount; i++) {
					var colIdx = _fnVisibleToColumnIndex(oSettings, i);

					if (colIdx !== null) {
						columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());
					}
				}
			} else {
				// Otherwise construct a single row, worst case, table with the widest
				// node in the data, assign any user defined widths, then insert it into
				// the DOM and allow the browser to do all the hard work of calculating
				// table widths
				var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
				.css('visibility', 'hidden').removeAttr('id');

				// Clean up the table body
				tmpTable.find('tbody tr').remove();
				var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));

				// Clone the table header and footer - we can't use the header / footer
				// from the cloned table, since if scrolling is active, the table's
				// real header and footer are contained in different table tags
				tmpTable.find('thead, tfoot').remove();
				tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone());

				// Remove any assigned widths from the footer (from scrolling)
				tmpTable.find('tfoot th, tfoot td').css('width', '');

				// Apply custom sizing to the cloned header
				headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);

				for (i = 0; i < visibleColumns.length; i++) {
					column = columns[visibleColumns[i]];

					headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : '';

					// For scrollX we need to force the column width otherwise the
					// browser will collapse it. If this width is smaller than the
					// width the column requires, then it will have no effect
					if (column.sWidthOrig && scrollX) {
						$(headerCells[i]).append($('<div/>').css({
							width: column.sWidthOrig,
							margin: 0,
							padding: 0,
							border: 0,
							height: 1
						}));
					}
				}

				// Find the widest cell for each column and put it into the table
				if (oSettings.aoData.length) {
					for (i = 0; i < visibleColumns.length; i++) {
						columnIdx = visibleColumns[i];
						column = columns[columnIdx];

						$(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);
					}
				}

				// Tidy the temporary table - remove name attributes so there aren't
				// duplicated in the dom (radio elements for example)
				$('[name]', tmpTable).removeAttr('name');

				// Table has been built, attach to the document so we can work with it.
				// A holding element is used, positioned at the top of the container
				// with minimal height, so it has no effect on if the container scrolls
				// or not. Otherwise it might trigger scrolling when it actually isn't
				// needed
				var holder = $('<div/>').css(scrollX || scrollY ? {
					position: 'absolute',
					top: 0,
					left: 0,
					height: 1,
					right: 0,
					overflow: 'hidden'
				} : {}).append(tmpTable).appendTo(tableContainer);

				// When scrolling (X or Y) we want to set the width of the table as 
				// appropriate. However, when not scrolling leave the table width as it
				// is. This results in slightly different, but I think correct behaviour
				if (scrollX && scrollXInner) {
					tmpTable.width(scrollXInner);
				} else if (scrollX) {
					tmpTable.css('width', 'auto');
					tmpTable.removeAttr('width');

					// If there is no width attribute or style, then allow the table to
					// collapse
					if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
						tmpTable.width(tableContainer.clientWidth);
					}
				} else if (scrollY) {
					tmpTable.width(tableContainer.clientWidth);
				} else if (tableWidthAttr) {
					tmpTable.width(tableWidthAttr);
				}

				// Get the width of each column in the constructed table - we need to
				// know the inner width (so it can be assigned to the other table's
				// cells) and the outer width so we can calculate the full width of the
				// table. This is safe since DataTables requires a unique cell for each
				// column, but if ever a header can span multiple columns, this will
				// need to be modified.
				var total = 0;
				for (i = 0; i < visibleColumns.length; i++) {
					var cell = $(headerCells[i]);
					var border = cell.outerWidth() - cell.width();

					// Use getBounding... where possible (not IE8-) because it can give
					// sub-pixel accuracy, which we then want to round up!
					var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth();

					// Total is tracked to remove any sub-pixel errors as the outerWidth
					// of the table might not equal the total given here (IE!).
					total += bounding;

					// Width for each column to use
					columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);
				}

				table.style.width = _fnStringToCss(total);

				// Finished with the table - ditch it
				holder.remove();
			}

			// If there is a width attr, we want to attach an event listener which
			// allows the table sizing to automatically adjust when the window is
			// resized. Use the width attr rather than CSS, since we can't know if the
			// CSS is a relative value or absolute - DOM read is always px.
			if (tableWidthAttr) {
				table.style.width = _fnStringToCss(tableWidthAttr);
			}

			if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
				var bindResize = function bindResize() {
					$(window).on('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {
						_fnAdjustColumnSizing(oSettings);
					}));
				};

				// IE6/7 will crash if we bind a resize event handler on page load.
				// To be removed in 1.11 which drops IE6/7 support
				if (ie67) {
					setTimeout(bindResize, 1000);
				} else {
					bindResize();
				}

				oSettings._reszEvt = true;
			}
		}

		/**
	  * Throttle the calls to a function. Arguments and context are maintained for
	  * the throttled function
	  *  @param {function} fn Function to be called
	  *  @param {int} [freq=200] call frequency in mS
	  *  @returns {function} wrapped function
	  *  @memberof DataTable#oApi
	  */
		var _fnThrottle = DataTable.util.throttle;

		/**
	  * Convert a CSS unit width to pixels (e.g. 2em)
	  *  @param {string} width width to be converted
	  *  @param {node} parent parent to get the with for (required for relative widths) - optional
	  *  @returns {int} width in pixels
	  *  @memberof DataTable#oApi
	  */
		function _fnConvertToWidth(width, parent) {
			if (!width) {
				return 0;
			}

			var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);

			var val = n[0].offsetWidth;
			n.remove();

			return val;
		}

		/**
	  * Get the widest node
	  *  @param {object} settings dataTables settings object
	  *  @param {int} colIdx column of interest
	  *  @returns {node} widest table node
	  *  @memberof DataTable#oApi
	  */
		function _fnGetWidestNode(settings, colIdx) {
			var idx = _fnGetMaxLenString(settings, colIdx);
			if (idx < 0) {
				return null;
			}

			var data = settings.aoData[idx];
			return !data.nTr ? // Might not have been created when deferred rendering
			$('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];
		}

		/**
	  * Get the maximum strlen for each data column
	  *  @param {object} settings dataTables settings object
	  *  @param {int} colIdx column of interest
	  *  @returns {string} max string length for each column
	  *  @memberof DataTable#oApi
	  */
		function _fnGetMaxLenString(settings, colIdx) {
			var s,
			    max = -1,
			    maxIdx = -1;

			for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
				s = _fnGetCellData(settings, i, colIdx, 'display') + '';
				s = s.replace(__re_html_remove, '');
				s = s.replace(/&nbsp;/g, ' ');

				if (s.length > max) {
					max = s.length;
					maxIdx = i;
				}
			}

			return maxIdx;
		}

		/**
	  * Append a CSS unit (only if required) to a string
	  *  @param {string} value to css-ify
	  *  @returns {string} value with css unit
	  *  @memberof DataTable#oApi
	  */
		function _fnStringToCss(s) {
			if (s === null) {
				return '0px';
			}

			if (typeof s == 'number') {
				return s < 0 ? '0px' : s + 'px';
			}

			// Check it has a unit character already
			return s.match(/\d$/) ? s + 'px' : s;
		}

		function _fnSortFlatten(settings) {
			var i,
			    iLen,
			    k,
			    kLen,
			    aSort = [],
			    aiOrig = [],
			    aoColumns = settings.aoColumns,
			    aDataSort,
			    iCol,
			    sType,
			    srcCol,
			    fixed = settings.aaSortingFixed,
			    fixedObj = $.isPlainObject(fixed),
			    nestedSort = [],
			    add = function add(a) {
				if (a.length && !$.isArray(a[0])) {
					// 1D array
					nestedSort.push(a);
				} else {
					// 2D array
					$.merge(nestedSort, a);
				}
			};

			// Build the sort array, with pre-fix and post-fix options if they have been
			// specified
			if ($.isArray(fixed)) {
				add(fixed);
			}

			if (fixedObj && fixed.pre) {
				add(fixed.pre);
			}

			add(settings.aaSorting);

			if (fixedObj && fixed.post) {
				add(fixed.post);
			}

			for (i = 0; i < nestedSort.length; i++) {
				srcCol = nestedSort[i][0];
				aDataSort = aoColumns[srcCol].aDataSort;

				for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
					iCol = aDataSort[k];
					sType = aoColumns[iCol].sType || 'string';

					if (nestedSort[i]._idx === undefined) {
						nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
					}

					aSort.push({
						src: srcCol,
						col: iCol,
						dir: nestedSort[i][1],
						index: nestedSort[i]._idx,
						type: sType,
						formatter: DataTable.ext.type.order[sType + "-pre"]
					});
				}
			}

			return aSort;
		}

		/**
	  * Change the order of the table
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  *  @todo This really needs split up!
	  */
		function _fnSort(oSettings) {
			var i,
			    ien,
			    iLen,
			    j,
			    jLen,
			    k,
			    kLen,
			    sDataType,
			    nTh,
			    aiOrig = [],
			    oExtSort = DataTable.ext.type.order,
			    aoData = oSettings.aoData,
			    aoColumns = oSettings.aoColumns,
			    aDataSort,
			    data,
			    iCol,
			    sType,
			    oSort,
			    formatters = 0,
			    sortCol,
			    displayMaster = oSettings.aiDisplayMaster,
			    aSort;

			// Resolve any column types that are unknown due to addition or invalidation
			// @todo Can this be moved into a 'data-ready' handler which is called when
			//   data is going to be used in the table?
			_fnColumnTypes(oSettings);

			aSort = _fnSortFlatten(oSettings);

			for (i = 0, ien = aSort.length; i < ien; i++) {
				sortCol = aSort[i];

				// Track if we can use the fast sort algorithm
				if (sortCol.formatter) {
					formatters++;
				}

				// Load the data needed for the sort, for each cell
				_fnSortData(oSettings, sortCol.col);
			}

			/* No sorting required if server-side or no sorting array */
			if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
				// Create a value - key array of the current row positions such that we can use their
				// current position during the sort, if values match, in order to perform stable sorting
				for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
					aiOrig[displayMaster[i]] = i;
				}

				/* Do the sort - here we want multi-column sorting based on a given data source (column)
	    * and sorting function (from oSort) in a certain direction. It's reasonably complex to
	    * follow on it's own, but this is what we want (example two column sorting):
	    *  fnLocalSorting = function(a,b){
	    *    var iTest;
	    *    iTest = oSort['string-asc']('data11', 'data12');
	    *      if (iTest !== 0)
	    *        return iTest;
	    *    iTest = oSort['numeric-desc']('data21', 'data22');
	    *    if (iTest !== 0)
	    *      return iTest;
	    *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
	    *  }
	    * Basically we have a test for each sorting column, if the data in that column is equal,
	    * test the next column. If all columns match, then we use a numeric sort on the row
	    * positions in the original data array to provide a stable sort.
	    *
	    * Note - I know it seems excessive to have two sorting methods, but the first is around
	    * 15% faster, so the second is only maintained for backwards compatibility with sorting
	    * methods which do not have a pre-sort formatting function.
	    */
				if (formatters === aSort.length) {
					// All sort types have formatting functions
					displayMaster.sort(function (a, b) {
						var x,
						    y,
						    k,
						    test,
						    sort,
						    len = aSort.length,
						    dataA = aoData[a]._aSortData,
						    dataB = aoData[b]._aSortData;

						for (k = 0; k < len; k++) {
							sort = aSort[k];

							x = dataA[sort.col];
							y = dataB[sort.col];

							test = x < y ? -1 : x > y ? 1 : 0;
							if (test !== 0) {
								return sort.dir === 'asc' ? test : -test;
							}
						}

						x = aiOrig[a];
						y = aiOrig[b];
						return x < y ? -1 : x > y ? 1 : 0;
					});
				} else {
					// Depreciated - remove in 1.11 (providing a plug-in option)
					// Not all sort types have formatting methods, so we have to call their sorting
					// methods.
					displayMaster.sort(function (a, b) {
						var x,
						    y,
						    k,
						    l,
						    test,
						    sort,
						    fn,
						    len = aSort.length,
						    dataA = aoData[a]._aSortData,
						    dataB = aoData[b]._aSortData;

						for (k = 0; k < len; k++) {
							sort = aSort[k];

							x = dataA[sort.col];
							y = dataB[sort.col];

							fn = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir];
							test = fn(x, y);
							if (test !== 0) {
								return test;
							}
						}

						x = aiOrig[a];
						y = aiOrig[b];
						return x < y ? -1 : x > y ? 1 : 0;
					});
				}
			}

			/* Tell the draw function that we have sorted the data */
			oSettings.bSorted = true;
		}

		function _fnSortAria(settings) {
			var label;
			var nextSort;
			var columns = settings.aoColumns;
			var aSort = _fnSortFlatten(settings);
			var oAria = settings.oLanguage.oAria;

			// ARIA attributes - need to loop all columns, to update all (removing old
			// attributes as needed)
			for (var i = 0, iLen = columns.length; i < iLen; i++) {
				var col = columns[i];
				var asSorting = col.asSorting;
				var sTitle = col.sTitle.replace(/<.*?>/g, "");
				var th = col.nTh;

				// IE7 is throwing an error when setting these properties with jQuery's
				// attr() and removeAttr() methods...
				th.removeAttribute('aria-sort');

				/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
				if (col.bSortable) {
					if (aSort.length > 0 && aSort[0].col == i) {
						th.setAttribute('aria-sort', aSort[0].dir == "asc" ? "ascending" : "descending");
						nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
					} else {
						nextSort = asSorting[0];
					}

					label = sTitle + (nextSort === "asc" ? oAria.sSortAscending : oAria.sSortDescending);
				} else {
					label = sTitle;
				}

				th.setAttribute('aria-label', label);
			}
		}

		/**
	  * Function to run on user sort request
	  *  @param {object} settings dataTables settings object
	  *  @param {node} attachTo node to attach the handler to
	  *  @param {int} colIdx column sorting index
	  *  @param {boolean} [append=false] Append the requested sort to the existing
	  *    sort if true (i.e. multi-column sort)
	  *  @param {function} [callback] callback function
	  *  @memberof DataTable#oApi
	  */
		function _fnSortListener(settings, colIdx, append, callback) {
			var col = settings.aoColumns[colIdx];
			var sorting = settings.aaSorting;
			var asSorting = col.asSorting;
			var nextSortIdx;
			var next = function next(a, overflow) {
				var idx = a._idx;
				if (idx === undefined) {
					idx = $.inArray(a[1], asSorting);
				}

				return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
			};

			// Convert to 2D array if needed
			if (typeof sorting[0] === 'number') {
				sorting = settings.aaSorting = [sorting];
			}

			// If appending the sort then we are multi-column sorting
			if (append && settings.oFeatures.bSortMulti) {
				// Are we already doing some kind of sort on this column?
				var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));

				if (sortIdx !== -1) {
					// Yes, modify the sort
					nextSortIdx = next(sorting[sortIdx], true);

					if (nextSortIdx === null && sorting.length === 1) {
						nextSortIdx = 0; // can't remove sorting completely
					}

					if (nextSortIdx === null) {
						sorting.splice(sortIdx, 1);
					} else {
						sorting[sortIdx][1] = asSorting[nextSortIdx];
						sorting[sortIdx]._idx = nextSortIdx;
					}
				} else {
					// No sort on this column yet
					sorting.push([colIdx, asSorting[0], 0]);
					sorting[sorting.length - 1]._idx = 0;
				}
			} else if (sorting.length && sorting[0][0] == colIdx) {
				// Single column - already sorting on this column, modify the sort
				nextSortIdx = next(sorting[0]);

				sorting.length = 1;
				sorting[0][1] = asSorting[nextSortIdx];
				sorting[0]._idx = nextSortIdx;
			} else {
				// Single column - sort only on this column
				sorting.length = 0;
				sorting.push([colIdx, asSorting[0]]);
				sorting[0]._idx = 0;
			}

			// Run the sort by calling a full redraw
			_fnReDraw(settings);

			// callback used for async user interaction
			if (typeof callback == 'function') {
				callback(settings);
			}
		}

		/**
	  * Attach a sort handler (click) to a node
	  *  @param {object} settings dataTables settings object
	  *  @param {node} attachTo node to attach the handler to
	  *  @param {int} colIdx column sorting index
	  *  @param {function} [callback] callback function
	  *  @memberof DataTable#oApi
	  */
		function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
			var col = settings.aoColumns[colIdx];

			_fnBindAction(attachTo, {}, function (e) {
				/* If the column is not sortable - don't to anything */
				if (col.bSortable === false) {
					return;
				}

				// If processing is enabled use a timeout to allow the processing
				// display to be shown - otherwise to it synchronously
				if (settings.oFeatures.bProcessing) {
					_fnProcessingDisplay(settings, true);

					setTimeout(function () {
						_fnSortListener(settings, colIdx, e.shiftKey, callback);

						// In server-side processing, the draw callback will remove the
						// processing display
						if (_fnDataSource(settings) !== 'ssp') {
							_fnProcessingDisplay(settings, false);
						}
					}, 0);
				} else {
					_fnSortListener(settings, colIdx, e.shiftKey, callback);
				}
			});
		}

		/**
	  * Set the sorting classes on table's body, Note: it is safe to call this function
	  * when bSort and bSortClasses are false
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnSortingClasses(settings) {
			var oldSort = settings.aLastSort;
			var sortClass = settings.oClasses.sSortColumn;
			var sort = _fnSortFlatten(settings);
			var features = settings.oFeatures;
			var i, ien, colIdx;

			if (features.bSort && features.bSortClasses) {
				// Remove old sorting classes
				for (i = 0, ien = oldSort.length; i < ien; i++) {
					colIdx = oldSort[i].src;

					// Remove column sorting
					$(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));
				}

				// Add new column sorting
				for (i = 0, ien = sort.length; i < ien; i++) {
					colIdx = sort[i].src;

					$(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));
				}
			}

			settings.aLastSort = sort;
		}

		// Get the data to sort a column, be it from cache, fresh (populating the
		// cache), or from a sort formatter
		function _fnSortData(settings, idx) {
			// Custom sorting function - provided by the sort data type
			var column = settings.aoColumns[idx];
			var customSort = DataTable.ext.order[column.sSortDataType];
			var customData;

			if (customSort) {
				customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));
			}

			// Use / populate cache
			var row, cellData;
			var formatter = DataTable.ext.type.order[column.sType + "-pre"];

			for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
				row = settings.aoData[i];

				if (!row._aSortData) {
					row._aSortData = [];
				}

				if (!row._aSortData[idx] || customSort) {
					cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there
					_fnGetCellData(settings, i, idx, 'sort');

					row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
				}
			}
		}

		/**
	  * Save the state of a table
	  *  @param {object} oSettings dataTables settings object
	  *  @memberof DataTable#oApi
	  */
		function _fnSaveState(settings) {
			if (!settings.oFeatures.bStateSave || settings.bDestroying) {
				return;
			}

			/* Store the interesting variables */
			var state = {
				time: +new Date(),
				start: settings._iDisplayStart,
				length: settings._iDisplayLength,
				order: $.extend(true, [], settings.aaSorting),
				search: _fnSearchToCamel(settings.oPreviousSearch),
				columns: $.map(settings.aoColumns, function (col, i) {
					return {
						visible: col.bVisible,
						search: _fnSearchToCamel(settings.aoPreSearchCols[i])
					};
				})
			};

			_fnCallbackFire(settings, "aoStateSaveParams", 'stateSaveParams', [settings, state]);

			settings.oSavedState = state;
			settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
		}

		/**
	  * Attempt to load a saved table state
	  *  @param {object} oSettings dataTables settings object
	  *  @param {object} oInit DataTables init object so we can override settings
	  *  @param {function} callback Callback to execute when the state has been loaded
	  *  @memberof DataTable#oApi
	  */
		function _fnLoadState(settings, oInit, callback) {
			var i, ien;
			var columns = settings.aoColumns;
			var loaded = function loaded(s) {
				if (!s || !s.time) {
					callback();
					return;
				}

				// Allow custom and plug-in manipulation functions to alter the saved data set and
				// cancelling of loading by returning false
				var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state]);
				if ($.inArray(false, abStateLoad) !== -1) {
					callback();
					return;
				}

				// Reject old data
				var duration = settings.iStateDuration;
				if (duration > 0 && s.time < +new Date() - duration * 1000) {
					callback();
					return;
				}

				// Number of columns have changed - all bets are off, no restore of settings
				if (s.columns && columns.length !== s.columns.length) {
					callback();
					return;
				}

				// Store the saved state so it might be accessed at any time
				settings.oLoadedState = $.extend(true, {}, state);

				// Restore key features - todo - for 1.11 this needs to be done by
				// subscribed events
				if (s.start !== undefined) {
					settings._iDisplayStart = s.start;
					settings.iInitDisplayStart = s.start;
				}
				if (s.length !== undefined) {
					settings._iDisplayLength = s.length;
				}

				// Order
				if (s.order !== undefined) {
					settings.aaSorting = [];
					$.each(s.order, function (i, col) {
						settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);
					});
				}

				// Search
				if (s.search !== undefined) {
					$.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));
				}

				// Columns
				// 
				if (s.columns) {
					for (i = 0, ien = s.columns.length; i < ien; i++) {
						var col = s.columns[i];

						// Visibility
						if (col.visible !== undefined) {
							columns[i].bVisible = col.visible;
						}

						// Search
						if (col.search !== undefined) {
							$.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
						}
					}
				}

				_fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, state]);
				callback();
			};

			if (!settings.oFeatures.bStateSave) {
				callback();
				return;
			}

			var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);

			if (state !== undefined) {
				loaded(state);
			}
			// otherwise, wait for the loaded callback to be executed
		}

		/**
	  * Return the settings object for a particular table
	  *  @param {node} table table we are using as a dataTable
	  *  @returns {object} Settings object - or null if not found
	  *  @memberof DataTable#oApi
	  */
		function _fnSettingsFromNode(table) {
			var settings = DataTable.settings;
			var idx = $.inArray(table, _pluck(settings, 'nTable'));

			return idx !== -1 ? settings[idx] : null;
		}

		/**
	  * Log an error message
	  *  @param {object} settings dataTables settings object
	  *  @param {int} level log error messages, or display them to the user
	  *  @param {string} msg error message
	  *  @param {int} tn Technical note id to get more information about the error.
	  *  @memberof DataTable#oApi
	  */
		function _fnLog(settings, level, msg, tn) {
			msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;

			if (tn) {
				msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;
			}

			if (!level) {
				// Backwards compatibility pre 1.10
				var ext = DataTable.ext;
				var type = ext.sErrMode || ext.errMode;

				if (settings) {
					_fnCallbackFire(settings, null, 'error', [settings, tn, msg]);
				}

				if (type == 'alert') {
					alert(msg);
				} else if (type == 'throw') {
					throw new Error(msg);
				} else if (typeof type == 'function') {
					type(settings, tn, msg);
				}
			} else if (window.console && console.log) {
				console.log(msg);
			}
		}

		/**
	  * See if a property is defined on one object, if so assign it to the other object
	  *  @param {object} ret target object
	  *  @param {object} src source object
	  *  @param {string} name property
	  *  @param {string} [mappedName] name to map too - optional, name used if not given
	  *  @memberof DataTable#oApi
	  */
		function _fnMap(ret, src, name, mappedName) {
			if ($.isArray(name)) {
				$.each(name, function (i, val) {
					if ($.isArray(val)) {
						_fnMap(ret, src, val[0], val[1]);
					} else {
						_fnMap(ret, src, val);
					}
				});

				return;
			}

			if (mappedName === undefined) {
				mappedName = name;
			}

			if (src[name] !== undefined) {
				ret[mappedName] = src[name];
			}
		}

		/**
	  * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	  * shallow copy arrays. The reason we need to do this, is that we don't want to
	  * deep copy array init values (such as aaSorting) since the dev wouldn't be
	  * able to override them, but we do want to deep copy arrays.
	  *  @param {object} out Object to extend
	  *  @param {object} extender Object from which the properties will be applied to
	  *      out
	  *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	  *      independent copy with the exception of the `data` or `aaData` parameters
	  *      if they are present. This is so you can pass in a collection to
	  *      DataTables and have that used as your data source without breaking the
	  *      references
	  *  @returns {object} out Reference, just for convenience - out === the return.
	  *  @memberof DataTable#oApi
	  *  @todo This doesn't take account of arrays inside the deep copied objects.
	  */
		function _fnExtend(out, extender, breakRefs) {
			var val;

			for (var prop in extender) {
				if (extender.hasOwnProperty(prop)) {
					val = extender[prop];

					if ($.isPlainObject(val)) {
						if (!$.isPlainObject(out[prop])) {
							out[prop] = {};
						}
						$.extend(true, out[prop], val);
					} else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
						out[prop] = val.slice();
					} else {
						out[prop] = val;
					}
				}
			}

			return out;
		}

		/**
	  * Bind an event handers to allow a click or return key to activate the callback.
	  * This is good for accessibility since a return on the keyboard will have the
	  * same effect as a click, if the element has focus.
	  *  @param {element} n Element to bind the action to
	  *  @param {object} oData Data object to pass to the triggered function
	  *  @param {function} fn Callback function for when the event is triggered
	  *  @memberof DataTable#oApi
	  */
		function _fnBindAction(n, oData, fn) {
			$(n).on('click.DT', oData, function (e) {
				n.blur(); // Remove focus outline for mouse users
				fn(e);
			}).on('keypress.DT', oData, function (e) {
				if (e.which === 13) {
					e.preventDefault();
					fn(e);
				}
			}).on('selectstart.DT', function () {
				/* Take the brutal approach to cancelling text selection */
				return false;
			});
		}

		/**
	  * Register a callback function. Easily allows a callback function to be added to
	  * an array store of callback functions that can then all be called together.
	  *  @param {object} oSettings dataTables settings object
	  *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	  *  @param {function} fn Function to be called back
	  *  @param {string} sName Identifying name for the callback (i.e. a label)
	  *  @memberof DataTable#oApi
	  */
		function _fnCallbackReg(oSettings, sStore, fn, sName) {
			if (fn) {
				oSettings[sStore].push({
					"fn": fn,
					"sName": sName
				});
			}
		}

		/**
	  * Fire callback functions and trigger events. Note that the loop over the
	  * callback array store is done backwards! Further note that you do not want to
	  * fire off triggers in time sensitive applications (for example cell creation)
	  * as its slow.
	  *  @param {object} settings dataTables settings object
	  *  @param {string} callbackArr Name of the array storage for the callbacks in
	  *      oSettings
	  *  @param {string} eventName Name of the jQuery custom event to trigger. If
	  *      null no trigger is fired
	  *  @param {array} args Array of arguments to pass to the callback function /
	  *      trigger
	  *  @memberof DataTable#oApi
	  */
		function _fnCallbackFire(settings, callbackArr, eventName, args) {
			var ret = [];

			if (callbackArr) {
				ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
					return val.fn.apply(settings.oInstance, args);
				});
			}

			if (eventName !== null) {
				var e = $.Event(eventName + '.dt');

				$(settings.nTable).trigger(e, args);

				ret.push(e.result);
			}

			return ret;
		}

		function _fnLengthOverflow(settings) {
			var start = settings._iDisplayStart,
			    end = settings.fnDisplayEnd(),
			    len = settings._iDisplayLength;

			/* If we have space to show extra rows (backing up from the end point - then do so */
			if (start >= end) {
				start = end - len;
			}

			// Keep the start record on the current page
			start -= start % len;

			if (len === -1 || start < 0) {
				start = 0;
			}

			settings._iDisplayStart = start;
		}

		function _fnRenderer(settings, type) {
			var renderer = settings.renderer;
			var host = DataTable.ext.renderer[type];

			if ($.isPlainObject(renderer) && renderer[type]) {
				// Specific renderer for this type. If available use it, otherwise use
				// the default.
				return host[renderer[type]] || host._;
			} else if (typeof renderer === 'string') {
				// Common renderer - if there is one available for this type use it,
				// otherwise use the default
				return host[renderer] || host._;
			}

			// Use the default
			return host._;
		}

		/**
	  * Detect the data source being used for the table. Used to simplify the code
	  * a little (ajax) and to make it compress a little smaller.
	  *
	  *  @param {object} settings dataTables settings object
	  *  @returns {string} Data source
	  *  @memberof DataTable#oApi
	  */
		function _fnDataSource(settings) {
			if (settings.oFeatures.bServerSide) {
				return 'ssp';
			} else if (settings.ajax || settings.sAjaxSource) {
				return 'ajax';
			}
			return 'dom';
		}

		/**
	  * Computed structure of the DataTables API, defined by the options passed to
	  * `DataTable.Api.register()` when building the API.
	  *
	  * The structure is built in order to speed creation and extension of the Api
	  * objects since the extensions are effectively pre-parsed.
	  *
	  * The array is an array of objects with the following structure, where this
	  * base array represents the Api prototype base:
	  *
	  *     [
	  *       {
	  *         name:      'data'                -- string   - Property name
	  *         val:       function () {},       -- function - Api method (or undefined if just an object
	  *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	  *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	  *       },
	  *       {
	  *         name:     'row'
	  *         val:       {},
	  *         methodExt: [ ... ],
	  *         propExt:   [
	  *           {
	  *             name:      'data'
	  *             val:       function () {},
	  *             methodExt: [ ... ],
	  *             propExt:   [ ... ]
	  *           },
	  *           ...
	  *         ]
	  *       }
	  *     ]
	  *
	  * @type {Array}
	  * @ignore
	  */
		var __apiStruct = [];

		/**
	  * `Array.prototype` reference.
	  *
	  * @type object
	  * @ignore
	  */
		var __arrayProto = Array.prototype;

		/**
	  * Abstraction for `context` parameter of the `Api` constructor to allow it to
	  * take several different forms for ease of use.
	  *
	  * Each of the input parameter types will be converted to a DataTables settings
	  * object where possible.
	  *
	  * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	  *   of:
	  *
	  *   * `string` - jQuery selector. Any DataTables' matching the given selector
	  *     with be found and used.
	  *   * `node` - `TABLE` node which has already been formed into a DataTable.
	  *   * `jQuery` - A jQuery object of `TABLE` nodes.
	  *   * `object` - DataTables settings object
	  *   * `DataTables.Api` - API instance
	  * @return {array|null} Matching DataTables settings objects. `null` or
	  *   `undefined` is returned if no matching DataTable is found.
	  * @ignore
	  */
		var _toSettings = function _toSettings(mixed) {
			var idx, jq;
			var settings = DataTable.settings;
			var tables = $.map(settings, function (el, i) {
				return el.nTable;
			});

			if (!mixed) {
				return [];
			} else if (mixed.nTable && mixed.oApi) {
				// DataTables settings object
				return [mixed];
			} else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
				// Table node
				idx = $.inArray(mixed, tables);
				return idx !== -1 ? [settings[idx]] : null;
			} else if (mixed && typeof mixed.settings === 'function') {
				return mixed.settings().toArray();
			} else if (typeof mixed === 'string') {
				// jQuery selector
				jq = $(mixed);
			} else if (mixed instanceof $) {
				// jQuery object (also DataTables instance)
				jq = mixed;
			}

			if (jq) {
				return jq.map(function (i) {
					idx = $.inArray(this, tables);
					return idx !== -1 ? settings[idx] : null;
				}).toArray();
			}
		};

		/**
	  * DataTables API class - used to control and interface with  one or more
	  * DataTables enhanced tables.
	  *
	  * The API class is heavily based on jQuery, presenting a chainable interface
	  * that you can use to interact with tables. Each instance of the API class has
	  * a "context" - i.e. the tables that it will operate on. This could be a single
	  * table, all tables on a page or a sub-set thereof.
	  *
	  * Additionally the API is designed to allow you to easily work with the data in
	  * the tables, retrieving and manipulating it as required. This is done by
	  * presenting the API class as an array like interface. The contents of the
	  * array depend upon the actions requested by each method (for example
	  * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	  * return an array of objects or arrays depending upon your table's
	  * configuration). The API object has a number of array like methods (`push`,
	  * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	  * `unique` etc) to assist your working with the data held in a table.
	  *
	  * Most methods (those which return an Api instance) are chainable, which means
	  * the return from a method call also has all of the methods available that the
	  * top level object had. For example, these two calls are equivalent:
	  *
	  *     // Not chained
	  *     api.row.add( {...} );
	  *     api.draw();
	  *
	  *     // Chained
	  *     api.row.add( {...} ).draw();
	  *
	  * @class DataTable.Api
	  * @param {array|object|string|jQuery} context DataTable identifier. This is
	  *   used to define which DataTables enhanced tables this API will operate on.
	  *   Can be one of:
	  *
	  *   * `string` - jQuery selector. Any DataTables' matching the given selector
	  *     with be found and used.
	  *   * `node` - `TABLE` node which has already been formed into a DataTable.
	  *   * `jQuery` - A jQuery object of `TABLE` nodes.
	  *   * `object` - DataTables settings object
	  * @param {array} [data] Data to initialise the Api instance with.
	  *
	  * @example
	  *   // Direct initialisation during DataTables construction
	  *   var api = $('#example').DataTable();
	  *
	  * @example
	  *   // Initialisation using a DataTables jQuery object
	  *   var api = $('#example').dataTable().api();
	  *
	  * @example
	  *   // Initialisation as a constructor
	  *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	  */
		_Api2 = function _Api(context, data) {
			if (!(this instanceof _Api2)) {
				return new _Api2(context, data);
			}

			var settings = [];
			var ctxSettings = function ctxSettings(o) {
				var a = _toSettings(o);
				if (a) {
					settings = settings.concat(a);
				}
			};

			if ($.isArray(context)) {
				for (var i = 0, ien = context.length; i < ien; i++) {
					ctxSettings(context[i]);
				}
			} else {
				ctxSettings(context);
			}

			// Remove duplicates
			this.context = _unique(settings);

			// Initial data
			if (data) {
				$.merge(this, data);
			}

			// selector
			this.selector = {
				rows: null,
				cols: null,
				opts: null
			};

			_Api2.extend(this, this, __apiStruct);
		};

		DataTable.Api = _Api2;

		// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
		// isPlainObject.
		$.extend(_Api2.prototype, {
			any: function any() {
				return this.count() !== 0;
			},

			concat: __arrayProto.concat,

			context: [], // array of table settings objects


			count: function count() {
				return this.flatten().length;
			},

			each: function each(fn) {
				for (var i = 0, ien = this.length; i < ien; i++) {
					fn.call(this, this[i], i, this);
				}

				return this;
			},

			eq: function eq(idx) {
				var ctx = this.context;

				return ctx.length > idx ? new _Api2(ctx[idx], this[idx]) : null;
			},

			filter: function filter(fn) {
				var a = [];

				if (__arrayProto.filter) {
					a = __arrayProto.filter.call(this, fn, this);
				} else {
					// Compatibility for browsers without EMCA-252-5 (JS 1.6)
					for (var i = 0, ien = this.length; i < ien; i++) {
						if (fn.call(this, this[i], i, this)) {
							a.push(this[i]);
						}
					}
				}

				return new _Api2(this.context, a);
			},

			flatten: function flatten() {
				var a = [];
				return new _Api2(this.context, a.concat.apply(a, this.toArray()));
			},

			join: __arrayProto.join,

			indexOf: __arrayProto.indexOf || function (obj, start) {
				for (var i = start || 0, ien = this.length; i < ien; i++) {
					if (this[i] === obj) {
						return i;
					}
				}
				return -1;
			},

			iterator: function iterator(flatten, type, fn, alwaysNew) {
				var a = [],
				    ret,
				    i,
				    ien,
				    j,
				    jen,
				    context = this.context,
				    rows,
				    items,
				    item,
				    selector = this.selector;

				// Argument shifting
				if (typeof flatten === 'string') {
					alwaysNew = fn;
					fn = type;
					type = flatten;
					flatten = false;
				}

				for (i = 0, ien = context.length; i < ien; i++) {
					var apiInst = new _Api2(context[i]);

					if (type === 'table') {
						ret = fn.call(apiInst, context[i], i);

						if (ret !== undefined) {
							a.push(ret);
						}
					} else if (type === 'columns' || type === 'rows') {
						// this has same length as context - one entry for each table
						ret = fn.call(apiInst, context[i], this[i], i);

						if (ret !== undefined) {
							a.push(ret);
						}
					} else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
						// columns and rows share the same structure.
						// 'this' is an array of column indexes for each context
						items = this[i];

						if (type === 'column-rows') {
							rows = _selector_row_indexes(context[i], selector.opts);
						}

						for (j = 0, jen = items.length; j < jen; j++) {
							item = items[j];

							if (type === 'cell') {
								ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
							} else {
								ret = fn.call(apiInst, context[i], item, i, j, rows);
							}

							if (ret !== undefined) {
								a.push(ret);
							}
						}
					}
				}

				if (a.length || alwaysNew) {
					var api = new _Api2(context, flatten ? a.concat.apply([], a) : a);
					var apiSelector = api.selector;
					apiSelector.rows = selector.rows;
					apiSelector.cols = selector.cols;
					apiSelector.opts = selector.opts;
					return api;
				}
				return this;
			},

			lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {
				// Bit cheeky...
				return this.indexOf.apply(this.toArray.reverse(), arguments);
			},

			length: 0,

			map: function map(fn) {
				var a = [];

				if (__arrayProto.map) {
					a = __arrayProto.map.call(this, fn, this);
				} else {
					// Compatibility for browsers without EMCA-252-5 (JS 1.6)
					for (var i = 0, ien = this.length; i < ien; i++) {
						a.push(fn.call(this, this[i], i));
					}
				}

				return new _Api2(this.context, a);
			},

			pluck: function pluck(prop) {
				return this.map(function (el) {
					return el[prop];
				});
			},

			pop: __arrayProto.pop,

			push: __arrayProto.push,

			// Does not return an API instance
			reduce: __arrayProto.reduce || function (fn, init) {
				return _fnReduce(this, fn, init, 0, this.length, 1);
			},

			reduceRight: __arrayProto.reduceRight || function (fn, init) {
				return _fnReduce(this, fn, init, this.length - 1, -1, -1);
			},

			reverse: __arrayProto.reverse,

			// Object with rows, columns and opts
			selector: null,

			shift: __arrayProto.shift,

			sort: __arrayProto.sort, // ? name - order?


			splice: __arrayProto.splice,

			toArray: function toArray() {
				return __arrayProto.slice.call(this);
			},

			to$: function to$() {
				return $(this);
			},

			toJQuery: function toJQuery() {
				return $(this);
			},

			unique: function unique() {
				return new _Api2(this.context, _unique(this));
			},

			unshift: __arrayProto.unshift
		});

		_Api2.extend = function (scope, obj, ext) {
			// Only extend API instances and static properties of the API
			if (!ext.length || !obj || !(obj instanceof _Api2) && !obj.__dt_wrapper) {
				return;
			}

			var i,
			    ien,
			    j,
			    jen,
			    struct,
			    inner,
			    methodScoping = function methodScoping(scope, fn, struc) {
				return function () {
					var ret = fn.apply(scope, arguments);

					// Method extension
					_Api2.extend(ret, ret, struc.methodExt);
					return ret;
				};
			};

			for (i = 0, ien = ext.length; i < ien; i++) {
				struct = ext[i];

				// Value
				obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;

				obj[struct.name].__dt_wrapper = true;

				// Property extension
				_Api2.extend(scope, obj[struct.name], struct.propExt);
			}
		};

		// @todo - Is there need for an augment function?
		// _Api.augment = function ( inst, name )
		// {
		// 	// Find src object in the structure from the name
		// 	var parts = name.split('.');

		// 	_Api.extend( inst, obj );
		// };


		//     [
		//       {
		//         name:      'data'                -- string   - Property name
		//         val:       function () {},       -- function - Api method (or undefined if just an object
		//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
		//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
		//       },
		//       {
		//         name:     'row'
		//         val:       {},
		//         methodExt: [ ... ],
		//         propExt:   [
		//           {
		//             name:      'data'
		//             val:       function () {},
		//             methodExt: [ ... ],
		//             propExt:   [ ... ]
		//           },
		//           ...
		//         ]
		//       }
		//     ]

		_Api2.register = _api_register = function _api_register(name, val) {
			if ($.isArray(name)) {
				for (var j = 0, jen = name.length; j < jen; j++) {
					_Api2.register(name[j], val);
				}
				return;
			}

			var i,
			    ien,
			    heir = name.split('.'),
			    struct = __apiStruct,
			    key,
			    method;

			var find = function find(src, name) {
				for (var i = 0, ien = src.length; i < ien; i++) {
					if (src[i].name === name) {
						return src[i];
					}
				}
				return null;
			};

			for (i = 0, ien = heir.length; i < ien; i++) {
				method = heir[i].indexOf('()') !== -1;
				key = method ? heir[i].replace('()', '') : heir[i];

				var src = find(struct, key);
				if (!src) {
					src = {
						name: key,
						val: {},
						methodExt: [],
						propExt: []
					};
					struct.push(src);
				}

				if (i === ien - 1) {
					src.val = val;
				} else {
					struct = method ? src.methodExt : src.propExt;
				}
			}
		};

		_Api2.registerPlural = _api_registerPlural = function _api_registerPlural(pluralName, singularName, val) {
			_Api2.register(pluralName, val);

			_Api2.register(singularName, function () {
				var ret = val.apply(this, arguments);

				if (ret === this) {
					// Returned item is the API instance that was passed in, return it
					return this;
				} else if (ret instanceof _Api2) {
					// New API instance returned, want the value from the first item
					// in the returned array for the singular result.
					return ret.length ? $.isArray(ret[0]) ? new _Api2(ret.context, ret[0]) : // Array results are 'enhanced'
					ret[0] : undefined;
				}

				// Non-API return - just fire it back
				return ret;
			});
		};

		/**
	  * Selector for HTML tables. Apply the given selector to the give array of
	  * DataTables settings objects.
	  *
	  * @param {string|integer} [selector] jQuery selector string or integer
	  * @param  {array} Array of DataTables settings objects to be filtered
	  * @return {array}
	  * @ignore
	  */
		var __table_selector = function __table_selector(selector, a) {
			// Integer is used to pick out a table by index
			if (typeof selector === 'number') {
				return [a[selector]];
			}

			// Perform a jQuery selector on the table nodes
			var nodes = $.map(a, function (el, i) {
				return el.nTable;
			});

			return $(nodes).filter(selector).map(function (i) {
				// Need to translate back from the table node to the settings
				var idx = $.inArray(this, nodes);
				return a[idx];
			}).toArray();
		};

		/**
	  * Context selector for the API's context (i.e. the tables the API instance
	  * refers to.
	  *
	  * @name    DataTable.Api#tables
	  * @param {string|integer} [selector] Selector to pick which tables the iterator
	  *   should operate on. If not given, all tables in the current context are
	  *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	  *   select multiple tables or as an integer to select a single table.
	  * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	  */
		_api_register('tables()', function (selector) {
			// A new instance is created if there was a selector specified
			return selector ? new _Api2(__table_selector(selector, this.context)) : this;
		});

		_api_register('table()', function (selector) {
			var tables = this.tables(selector);
			var ctx = tables.context;

			// Truncate to the first matched table
			return ctx.length ? new _Api2(ctx[0]) : tables;
		});

		_api_registerPlural('tables().nodes()', 'table().node()', function () {
			return this.iterator('table', function (ctx) {
				return ctx.nTable;
			}, 1);
		});

		_api_registerPlural('tables().body()', 'table().body()', function () {
			return this.iterator('table', function (ctx) {
				return ctx.nTBody;
			}, 1);
		});

		_api_registerPlural('tables().header()', 'table().header()', function () {
			return this.iterator('table', function (ctx) {
				return ctx.nTHead;
			}, 1);
		});

		_api_registerPlural('tables().footer()', 'table().footer()', function () {
			return this.iterator('table', function (ctx) {
				return ctx.nTFoot;
			}, 1);
		});

		_api_registerPlural('tables().containers()', 'table().container()', function () {
			return this.iterator('table', function (ctx) {
				return ctx.nTableWrapper;
			}, 1);
		});

		/**
	  * Redraw the tables in the current context.
	  */
		_api_register('draw()', function (paging) {
			return this.iterator('table', function (settings) {
				if (paging === 'page') {
					_fnDraw(settings);
				} else {
					if (typeof paging === 'string') {
						paging = paging === 'full-hold' ? false : true;
					}

					_fnReDraw(settings, paging === false);
				}
			});
		});

		/**
	  * Get the current page index.
	  *
	  * @return {integer} Current page index (zero based)
	  */ /**
	     * Set the current page.
	     *
	     * Note that if you attempt to show a page which does not exist, DataTables will
	     * not throw an error, but rather reset the paging.
	     *
	     * @param {integer|string} action The paging action to take. This can be one of:
	     *  * `integer` - The page index to jump to
	     *  * `string` - An action to take:
	     *    * `first` - Jump to first page.
	     *    * `next` - Jump to the next page
	     *    * `previous` - Jump to previous page
	     *    * `last` - Jump to the last page.
	     * @returns {DataTables.Api} this
	     */
		_api_register('page()', function (action) {
			if (action === undefined) {
				return this.page.info().page; // not an expensive call
			}

			// else, have an action to take on all tables
			return this.iterator('table', function (settings) {
				_fnPageChange(settings, action);
			});
		});

		/**
	  * Paging information for the first table in the current context.
	  *
	  * If you require paging information for another table, use the `table()` method
	  * with a suitable selector.
	  *
	  * @return {object} Object with the following properties set:
	  *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	  *  * `pages` - Total number of pages
	  *  * `start` - Display index for the first record shown on the current page
	  *  * `end` - Display index for the last record shown on the current page
	  *  * `length` - Display length (number of records). Note that generally `start
	  *    + length = end`, but this is not always true, for example if there are
	  *    only 2 records to show on the final page, with a length of 10.
	  *  * `recordsTotal` - Full data set length
	  *  * `recordsDisplay` - Data set length once the current filtering criterion
	  *    are applied.
	  */
		_api_register('page.info()', function (action) {
			if (this.context.length === 0) {
				return undefined;
			}

			var settings = this.context[0],
			    start = settings._iDisplayStart,
			    len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
			    visRecords = settings.fnRecordsDisplay(),
			    all = len === -1;

			return {
				"page": all ? 0 : Math.floor(start / len),
				"pages": all ? 1 : Math.ceil(visRecords / len),
				"start": start,
				"end": settings.fnDisplayEnd(),
				"length": len,
				"recordsTotal": settings.fnRecordsTotal(),
				"recordsDisplay": visRecords,
				"serverSide": _fnDataSource(settings) === 'ssp'
			};
		});

		/**
	  * Get the current page length.
	  *
	  * @return {integer} Current page length. Note `-1` indicates that all records
	  *   are to be shown.
	  */ /**
	     * Set the current page length.
	     *
	     * @param {integer} Page length to set. Use `-1` to show all records.
	     * @returns {DataTables.Api} this
	     */
		_api_register('page.len()', function (len) {
			// Note that we can't call this function 'length()' because `length`
			// is a Javascript property of functions which defines how many arguments
			// the function expects.
			if (len === undefined) {
				return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;
			}

			// else, set the page length
			return this.iterator('table', function (settings) {
				_fnLengthChange(settings, len);
			});
		});

		var __reload = function __reload(settings, holdPosition, callback) {
			// Use the draw event to trigger a callback
			if (callback) {
				var api = new _Api2(settings);

				api.one('draw', function () {
					callback(api.ajax.json());
				});
			}

			if (_fnDataSource(settings) == 'ssp') {
				_fnReDraw(settings, holdPosition);
			} else {
				_fnProcessingDisplay(settings, true);

				// Cancel an existing request
				var xhr = settings.jqXHR;
				if (xhr && xhr.readyState !== 4) {
					xhr.abort();
				}

				// Trigger xhr
				_fnBuildAjax(settings, [], function (json) {
					_fnClearTable(settings);

					var data = _fnAjaxDataSrc(settings, json);
					for (var i = 0, ien = data.length; i < ien; i++) {
						_fnAddData(settings, data[i]);
					}

					_fnReDraw(settings, holdPosition);
					_fnProcessingDisplay(settings, false);
				});
			}
		};

		/**
	  * Get the JSON response from the last Ajax request that DataTables made to the
	  * server. Note that this returns the JSON from the first table in the current
	  * context.
	  *
	  * @return {object} JSON received from the server.
	  */
		_api_register('ajax.json()', function () {
			var ctx = this.context;

			if (ctx.length > 0) {
				return ctx[0].json;
			}

			// else return undefined;
		});

		/**
	  * Get the data submitted in the last Ajax request
	  */
		_api_register('ajax.params()', function () {
			var ctx = this.context;

			if (ctx.length > 0) {
				return ctx[0].oAjaxData;
			}

			// else return undefined;
		});

		/**
	  * Reload tables from the Ajax data source. Note that this function will
	  * automatically re-draw the table when the remote data has been loaded.
	  *
	  * @param {boolean} [reset=true] Reset (default) or hold the current paging
	  *   position. A full re-sort and re-filter is performed when this method is
	  *   called, which is why the pagination reset is the default action.
	  * @returns {DataTables.Api} this
	  */
		_api_register('ajax.reload()', function (callback, resetPaging) {
			return this.iterator('table', function (settings) {
				__reload(settings, resetPaging === false, callback);
			});
		});

		/**
	  * Get the current Ajax URL. Note that this returns the URL from the first
	  * table in the current context.
	  *
	  * @return {string} Current Ajax source URL
	  */ /**
	     * Set the Ajax URL. Note that this will set the URL for all tables in the
	     * current context.
	     *
	     * @param {string} url URL to set.
	     * @returns {DataTables.Api} this
	     */
		_api_register('ajax.url()', function (url) {
			var ctx = this.context;

			if (url === undefined) {
				// get
				if (ctx.length === 0) {
					return undefined;
				}
				ctx = ctx[0];

				return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;
			}

			// set
			return this.iterator('table', function (settings) {
				if ($.isPlainObject(settings.ajax)) {
					settings.ajax.url = url;
				} else {
					settings.ajax = url;
				}
				// No need to consider sAjaxSource here since DataTables gives priority
				// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
				// value of `sAjaxSource` redundant.
			});
		});

		/**
	  * Load data from the newly set Ajax URL. Note that this method is only
	  * available when `ajax.url()` is used to set a URL. Additionally, this method
	  * has the same effect as calling `ajax.reload()` but is provided for
	  * convenience when setting a new URL. Like `ajax.reload()` it will
	  * automatically redraw the table once the remote data has been loaded.
	  *
	  * @returns {DataTables.Api} this
	  */
		_api_register('ajax.url().load()', function (callback, resetPaging) {
			// Same as a reload, but makes sense to present it for easy access after a
			// url change
			return this.iterator('table', function (ctx) {
				__reload(ctx, resetPaging === false, callback);
			});
		});

		var _selector_run = function _selector_run(type, selector, selectFn, settings, opts) {
			var out = [],
			    res,
			    a,
			    i,
			    ien,
			    j,
			    jen,
			    selectorType = typeof selector === 'undefined' ? 'undefined' : _typeof(selector);

			// Can't just check for isArray here, as an API or jQuery instance might be
			// given with their array like look
			if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
				selector = [selector];
			}

			for (i = 0, ien = selector.length; i < ien; i++) {
				// Only split on simple strings - complex expressions will be jQuery selectors
				a = selector[i] && selector[i].split && !selector[i].match(/[\[\(:]/) ? selector[i].split(',') : [selector[i]];

				for (j = 0, jen = a.length; j < jen; j++) {
					res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);

					if (res && res.length) {
						out = out.concat(res);
					}
				}
			}

			// selector extensions
			var ext = _ext.selector[type];
			if (ext.length) {
				for (i = 0, ien = ext.length; i < ien; i++) {
					out = ext[i](settings, opts, out);
				}
			}

			return _unique(out);
		};

		var _selector_opts = function _selector_opts(opts) {
			if (!opts) {
				opts = {};
			}

			// Backwards compatibility for 1.9- which used the terminology filter rather
			// than search
			if (opts.filter && opts.search === undefined) {
				opts.search = opts.filter;
			}

			return $.extend({
				search: 'none',
				order: 'current',
				page: 'all'
			}, opts);
		};

		var _selector_first = function _selector_first(inst) {
			// Reduce the API instance to the first item found
			for (var i = 0, ien = inst.length; i < ien; i++) {
				if (inst[i].length > 0) {
					// Assign the first element to the first item in the instance
					// and truncate the instance and context
					inst[0] = inst[i];
					inst[0].length = 1;
					inst.length = 1;
					inst.context = [inst.context[i]];

					return inst;
				}
			}

			// Not found - return an empty instance
			inst.length = 0;
			return inst;
		};

		var _selector_row_indexes = function _selector_row_indexes(settings, opts) {
			var i,
			    ien,
			    tmp,
			    a = [],
			    displayFiltered = settings.aiDisplay,
			    displayMaster = settings.aiDisplayMaster;

			var search = opts.search,
			    // none, applied, removed
			order = opts.order,
			    // applied, current, index (original - compatibility with 1.9)
			page = opts.page; // all, current

			if (_fnDataSource(settings) == 'ssp') {
				// In server-side processing mode, most options are irrelevant since
				// rows not shown don't exist and the index order is the applied order
				// Removed is a special case - for consistency just return an empty
				// array
				return search === 'removed' ? [] : _range(0, displayMaster.length);
			} else if (page == 'current') {
				// Current page implies that order=current and fitler=applied, since it is
				// fairly senseless otherwise, regardless of what order and search actually
				// are
				for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {
					a.push(displayFiltered[i]);
				}
			} else if (order == 'current' || order == 'applied') {
				a = search == 'none' ? displayMaster.slice() : // no search
				search == 'applied' ? displayFiltered.slice() : // applied search
				$.map(displayMaster, function (el, i) {
					// removed search
					return $.inArray(el, displayFiltered) === -1 ? el : null;
				});
			} else if (order == 'index' || order == 'original') {
				for (i = 0, ien = settings.aoData.length; i < ien; i++) {
					if (search == 'none') {
						a.push(i);
					} else {
						// applied | removed
						tmp = $.inArray(i, displayFiltered);

						if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {
							a.push(i);
						}
					}
				}
			}

			return a;
		};

		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	  * Rows
	  *
	  * {}          - no selector - use all available rows
	  * {integer}   - row aoData index
	  * {node}      - TR node
	  * {string}    - jQuery selector to apply to the TR elements
	  * {array}     - jQuery array of nodes, or simply an array of TR nodes
	  *
	  */

		var __row_selector = function __row_selector(settings, selector, opts) {
			var rows;
			var run = function run(sel) {
				var selInt = _intVal(sel);
				var i, ien;

				// Short cut - selector is a number and no options provided (default is
				// all records, so no need to check if the index is in there, since it
				// must be - dev error if the index doesn't exist).
				if (selInt !== null && !opts) {
					return [selInt];
				}

				if (!rows) {
					rows = _selector_row_indexes(settings, opts);
				}

				if (selInt !== null && $.inArray(selInt, rows) !== -1) {
					// Selector - integer
					return [selInt];
				} else if (sel === null || sel === undefined || sel === '') {
					// Selector - none
					return rows;
				}

				// Selector - function
				if (typeof sel === 'function') {
					return $.map(rows, function (idx) {
						var row = settings.aoData[idx];
						return sel(idx, row._aData, row.nTr) ? idx : null;
					});
				}

				// Get nodes in the order from the `rows` array with null values removed
				var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr'));

				// Selector - node
				if (sel.nodeName) {
					if (sel._DT_RowIndex !== undefined) {
						return [sel._DT_RowIndex]; // Property added by DT for fast lookup
					} else if (sel._DT_CellIndex) {
						return [sel._DT_CellIndex.row];
					} else {
						var host = $(sel).closest('*[data-dt-row]');
						return host.length ? [host.data('dt-row')] : [];
					}
				}

				// ID selector. Want to always be able to select rows by id, regardless
				// of if the tr element has been created or not, so can't rely upon
				// jQuery here - hence a custom implementation. This does not match
				// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
				// but to select it using a CSS selector engine (like Sizzle or
				// querySelect) it would need to need to be escaped for some characters.
				// DataTables simplifies this for row selectors since you can select
				// only a row. A # indicates an id any anything that follows is the id -
				// unescaped.
				if (typeof sel === 'string' && sel.charAt(0) === '#') {
					// get row index from id
					var rowObj = settings.aIds[sel.replace(/^#/, '')];
					if (rowObj !== undefined) {
						return [rowObj.idx];
					}

					// need to fall through to jQuery in case there is DOM id that
					// matches
				}

				// Selector - jQuery selector string, array of nodes or jQuery object/
				// As jQuery's .filter() allows jQuery objects to be passed in filter,
				// it also allows arrays, so this will cope with all three options
				return $(nodes).filter(sel).map(function () {
					return this._DT_RowIndex;
				}).toArray();
			};

			return _selector_run('row', selector, run, settings, opts);
		};

		_api_register('rows()', function (selector, opts) {
			// argument shifting
			if (selector === undefined) {
				selector = '';
			} else if ($.isPlainObject(selector)) {
				opts = selector;
				selector = '';
			}

			opts = _selector_opts(opts);

			var inst = this.iterator('table', function (settings) {
				return __row_selector(settings, selector, opts);
			}, 1);

			// Want argument shifting here and in __row_selector?
			inst.selector.rows = selector;
			inst.selector.opts = opts;

			return inst;
		});

		_api_register('rows().nodes()', function () {
			return this.iterator('row', function (settings, row) {
				return settings.aoData[row].nTr || undefined;
			}, 1);
		});

		_api_register('rows().data()', function () {
			return this.iterator(true, 'rows', function (settings, rows) {
				return _pluck_order(settings.aoData, rows, '_aData');
			}, 1);
		});

		_api_registerPlural('rows().cache()', 'row().cache()', function (type) {
			return this.iterator('row', function (settings, row) {
				var r = settings.aoData[row];
				return type === 'search' ? r._aFilterData : r._aSortData;
			}, 1);
		});

		_api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {
			return this.iterator('row', function (settings, row) {
				_fnInvalidate(settings, row, src);
			});
		});

		_api_registerPlural('rows().indexes()', 'row().index()', function () {
			return this.iterator('row', function (settings, row) {
				return row;
			}, 1);
		});

		_api_registerPlural('rows().ids()', 'row().id()', function (hash) {
			var a = [];
			var context = this.context;

			// `iterator` will drop undefined values, but in this case we want them
			for (var i = 0, ien = context.length; i < ien; i++) {
				for (var j = 0, jen = this[i].length; j < jen; j++) {
					var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
					a.push((hash === true ? '#' : '') + id);
				}
			}

			return new _Api2(context, a);
		});

		_api_registerPlural('rows().remove()', 'row().remove()', function () {
			var that = this;

			this.iterator('row', function (settings, row, thatIdx) {
				var data = settings.aoData;
				var rowData = data[row];
				var i, ien, j, jen;
				var loopRow, loopCells;

				data.splice(row, 1);

				// Update the cached indexes
				for (i = 0, ien = data.length; i < ien; i++) {
					loopRow = data[i];
					loopCells = loopRow.anCells;

					// Rows
					if (loopRow.nTr !== null) {
						loopRow.nTr._DT_RowIndex = i;
					}

					// Cells
					if (loopCells !== null) {
						for (j = 0, jen = loopCells.length; j < jen; j++) {
							loopCells[j]._DT_CellIndex.row = i;
						}
					}
				}

				// Delete from the display arrays
				_fnDeleteIndex(settings.aiDisplayMaster, row);
				_fnDeleteIndex(settings.aiDisplay, row);
				_fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes

				// Check for an 'overflow' they case for displaying the table
				_fnLengthOverflow(settings);

				// Remove the row's ID reference if there is one
				var id = settings.rowIdFn(rowData._aData);
				if (id !== undefined) {
					delete settings.aIds[id];
				}
			});

			this.iterator('table', function (settings) {
				for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
					settings.aoData[i].idx = i;
				}
			});

			return this;
		});

		_api_register('rows.add()', function (rows) {
			var newRows = this.iterator('table', function (settings) {
				var row, i, ien;
				var out = [];

				for (i = 0, ien = rows.length; i < ien; i++) {
					row = rows[i];

					if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
						out.push(_fnAddTr(settings, row)[0]);
					} else {
						out.push(_fnAddData(settings, row));
					}
				}

				return out;
			}, 1);

			// Return an Api.rows() extended instance, so rows().nodes() etc can be used
			var modRows = this.rows(-1);
			modRows.pop();
			$.merge(modRows, newRows);

			return modRows;
		});

		/**
	  *
	  */
		_api_register('row()', function (selector, opts) {
			return _selector_first(this.rows(selector, opts));
		});

		_api_register('row().data()', function (data) {
			var ctx = this.context;

			if (data === undefined) {
				// Get
				return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;
			}

			// Set
			ctx[0].aoData[this[0]]._aData = data;

			// Automatically invalidate
			_fnInvalidate(ctx[0], this[0], 'data');

			return this;
		});

		_api_register('row().node()', function () {
			var ctx = this.context;

			return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
		});

		_api_register('row.add()', function (row) {
			// Allow a jQuery object to be passed in - only a single row is added from
			// it though - the first element in the set
			if (row instanceof $ && row.length) {
				row = row[0];
			}

			var rows = this.iterator('table', function (settings) {
				if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
					return _fnAddTr(settings, row)[0];
				}
				return _fnAddData(settings, row);
			});

			// Return an Api.rows() extended instance, with the newly added row selected
			return this.row(rows[0]);
		});

		var __details_add = function __details_add(ctx, row, data, klass) {
			// Convert to array of TR elements
			var rows = [];
			var addRow = function addRow(r, k) {
				// Recursion to allow for arrays of jQuery objects
				if ($.isArray(r) || r instanceof $) {
					for (var i = 0, ien = r.length; i < ien; i++) {
						addRow(r[i], k);
					}
					return;
				}

				// If we get a TR element, then just add it directly - up to the dev
				// to add the correct number of columns etc
				if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
					rows.push(r);
				} else {
					// Otherwise create a row with a wrapper
					var created = $('<tr><td/></tr>').addClass(k);
					$('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);

					rows.push(created[0]);
				}
			};

			addRow(data, klass);

			if (row._details) {
				row._details.detach();
			}

			row._details = $(rows);

			// If the children were already shown, that state should be retained
			if (row._detailsShow) {
				row._details.insertAfter(row.nTr);
			}
		};

		var __details_remove = function __details_remove(api, idx) {
			var ctx = api.context;

			if (ctx.length) {
				var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

				if (row && row._details) {
					row._details.remove();

					row._detailsShow = undefined;
					row._details = undefined;
				}
			}
		};

		var __details_display = function __details_display(api, show) {
			var ctx = api.context;

			if (ctx.length && api.length) {
				var row = ctx[0].aoData[api[0]];

				if (row._details) {
					row._detailsShow = show;

					if (show) {
						row._details.insertAfter(row.nTr);
					} else {
						row._details.detach();
					}

					__details_events(ctx[0]);
				}
			}
		};

		var __details_events = function __details_events(settings) {
			var api = new _Api2(settings);
			var namespace = '.dt.DT_details';
			var drawEvent = 'draw' + namespace;
			var colvisEvent = 'column-visibility' + namespace;
			var destroyEvent = 'destroy' + namespace;
			var data = settings.aoData;

			api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);

			if (_pluck(data, '_details').length > 0) {
				// On each draw, insert the required elements into the document
				api.on(drawEvent, function (e, ctx) {
					if (settings !== ctx) {
						return;
					}

					api.rows({ page: 'current' }).eq(0).each(function (idx) {
						// Internal data grab
						var row = data[idx];

						if (row._detailsShow) {
							row._details.insertAfter(row.nTr);
						}
					});
				});

				// Column visibility change - update the colspan
				api.on(colvisEvent, function (e, ctx, idx, vis) {
					if (settings !== ctx) {
						return;
					}

					// Update the colspan for the details rows (note, only if it already has
					// a colspan)
					var row,
					    visible = _fnVisbleColumns(ctx);

					for (var i = 0, ien = data.length; i < ien; i++) {
						row = data[i];

						if (row._details) {
							row._details.children('td[colspan]').attr('colspan', visible);
						}
					}
				});

				// Table destroyed - nuke any child rows
				api.on(destroyEvent, function (e, ctx) {
					if (settings !== ctx) {
						return;
					}

					for (var i = 0, ien = data.length; i < ien; i++) {
						if (data[i]._details) {
							__details_remove(api, i);
						}
					}
				});
			}
		};

		// Strings for the method names to help minification
		var _emp = '';
		var _child_obj = _emp + 'row().child';
		var _child_mth = _child_obj + '()';

		// data can be:
		//  tr
		//  string
		//  jQuery or array of any of the above
		_api_register(_child_mth, function (data, klass) {
			var ctx = this.context;

			if (data === undefined) {
				// get
				return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;
			} else if (data === true) {
				// show
				this.child.show();
			} else if (data === false) {
				// remove
				__details_remove(this);
			} else if (ctx.length && this.length) {
				// set
				__details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
			}

			return this;
		});

		_api_register([_child_obj + '.show()', _child_mth + '.show()' // only when `child()` was called with parameters (without
		], function (show) {
			// it returns an object and this method is not executed)
			__details_display(this, true);
			return this;
		});

		_api_register([_child_obj + '.hide()', _child_mth + '.hide()' // only when `child()` was called with parameters (without
		], function () {
			// it returns an object and this method is not executed)
			__details_display(this, false);
			return this;
		});

		_api_register([_child_obj + '.remove()', _child_mth + '.remove()' // only when `child()` was called with parameters (without
		], function () {
			// it returns an object and this method is not executed)
			__details_remove(this);
			return this;
		});

		_api_register(_child_obj + '.isShown()', function () {
			var ctx = this.context;

			if (ctx.length && this.length) {
				// _detailsShown as false or undefined will fall through to return false
				return ctx[0].aoData[this[0]]._detailsShow || false;
			}
			return false;
		});

		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	  * Columns
	  *
	  * {integer}           - column index (>=0 count from left, <0 count from right)
	  * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	  * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	  * "{string}:name"     - column name
	  * "{string}"          - jQuery selector on column header nodes
	  *
	  */

		// can be an array of these items, comma separated list, or an array of comma
		// separated lists

		var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;

		// r1 and r2 are redundant - but it means that the parameters match for the
		// iterator callback in columns().data()
		var __columnData = function __columnData(settings, column, r1, r2, rows) {
			var a = [];
			for (var row = 0, ien = rows.length; row < ien; row++) {
				a.push(_fnGetCellData(settings, rows[row], column));
			}
			return a;
		};

		var __column_selector = function __column_selector(settings, selector, opts) {
			var columns = settings.aoColumns,
			    names = _pluck(columns, 'sName'),
			    nodes = _pluck(columns, 'nTh');

			var run = function run(s) {
				var selInt = _intVal(s);

				// Selector - all
				if (s === '') {
					return _range(columns.length);
				}

				// Selector - index
				if (selInt !== null) {
					return [selInt >= 0 ? selInt : // Count from left
					columns.length + selInt // Count from right (+ because its a negative value)
					];
				}

				// Selector = function
				if (typeof s === 'function') {
					var rows = _selector_row_indexes(settings, opts);

					return $.map(columns, function (col, idx) {
						return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;
					});
				}

				// jQuery or string selector
				var match = typeof s === 'string' ? s.match(__re_column_selector) : '';

				if (match) {
					switch (match[2]) {
						case 'visIdx':
						case 'visible':
							var idx = parseInt(match[1], 10);
							// Visible index given, convert to column index
							if (idx < 0) {
								// Counting from the right
								var visColumns = $.map(columns, function (col, i) {
									return col.bVisible ? i : null;
								});
								return [visColumns[visColumns.length + idx]];
							}
							// Counting from the left
							return [_fnVisibleToColumnIndex(settings, idx)];

						case 'name':
							// match by name. `names` is column index complete and in order
							return $.map(names, function (name, i) {
								return name === match[1] ? i : null;
							});

						default:
							return [];
					}
				}

				// Cell in the table body
				if (s.nodeName && s._DT_CellIndex) {
					return [s._DT_CellIndex.column];
				}

				// jQuery selector on the TH elements for the columns
				var jqResult = $(nodes).filter(s).map(function () {
					return $.inArray(this, nodes); // `nodes` is column index complete and in order
				}).toArray();

				if (jqResult.length || !s.nodeName) {
					return jqResult;
				}

				// Otherwise a node which might have a `dt-column` data attribute, or be
				// a child or such an element
				var host = $(s).closest('*[data-dt-column]');
				return host.length ? [host.data('dt-column')] : [];
			};

			return _selector_run('column', selector, run, settings, opts);
		};

		var __setColumnVis = function __setColumnVis(settings, column, vis) {
			var cols = settings.aoColumns,
			    col = cols[column],
			    data = settings.aoData,
			    row,
			    cells,
			    i,
			    ien,
			    tr;

			// Get
			if (vis === undefined) {
				return col.bVisible;
			}

			// Set
			// No change
			if (col.bVisible === vis) {
				return;
			}

			if (vis) {
				// Insert column
				// Need to decide if we should use appendChild or insertBefore
				var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);

				for (i = 0, ien = data.length; i < ien; i++) {
					tr = data[i].nTr;
					cells = data[i].anCells;

					if (tr) {
						// insertBefore can act like appendChild if 2nd arg is null
						tr.insertBefore(cells[column], cells[insertBefore] || null);
					}
				}
			} else {
				// Remove column
				$(_pluck(settings.aoData, 'anCells', column)).detach();
			}

			// Common actions
			col.bVisible = vis;
			_fnDrawHead(settings, settings.aoHeader);
			_fnDrawHead(settings, settings.aoFooter);

			_fnSaveState(settings);
		};

		_api_register('columns()', function (selector, opts) {
			// argument shifting
			if (selector === undefined) {
				selector = '';
			} else if ($.isPlainObject(selector)) {
				opts = selector;
				selector = '';
			}

			opts = _selector_opts(opts);

			var inst = this.iterator('table', function (settings) {
				return __column_selector(settings, selector, opts);
			}, 1);

			// Want argument shifting here and in _row_selector?
			inst.selector.cols = selector;
			inst.selector.opts = opts;

			return inst;
		});

		_api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {
			return this.iterator('column', function (settings, column) {
				return settings.aoColumns[column].nTh;
			}, 1);
		});

		_api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {
			return this.iterator('column', function (settings, column) {
				return settings.aoColumns[column].nTf;
			}, 1);
		});

		_api_registerPlural('columns().data()', 'column().data()', function () {
			return this.iterator('column-rows', __columnData, 1);
		});

		_api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {
			return this.iterator('column', function (settings, column) {
				return settings.aoColumns[column].mData;
			}, 1);
		});

		_api_registerPlural('columns().cache()', 'column().cache()', function (type) {
			return this.iterator('column-rows', function (settings, column, i, j, rows) {
				return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);
			}, 1);
		});

		_api_registerPlural('columns().nodes()', 'column().nodes()', function () {
			return this.iterator('column-rows', function (settings, column, i, j, rows) {
				return _pluck_order(settings.aoData, rows, 'anCells', column);
			}, 1);
		});

		_api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {
			var ret = this.iterator('column', function (settings, column) {
				if (vis === undefined) {
					return settings.aoColumns[column].bVisible;
				} // else
				__setColumnVis(settings, column, vis);
			});

			// Group the column visibility changes
			if (vis !== undefined) {
				// Second loop once the first is done for events
				this.iterator('column', function (settings, column) {
					_fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, calc]);
				});

				if (calc === undefined || calc) {
					this.columns.adjust();
				}
			}

			return ret;
		});

		_api_registerPlural('columns().indexes()', 'column().index()', function (type) {
			return this.iterator('column', function (settings, column) {
				return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;
			}, 1);
		});

		_api_register('columns.adjust()', function () {
			return this.iterator('table', function (settings) {
				_fnAdjustColumnSizing(settings);
			}, 1);
		});

		_api_register('column.index()', function (type, idx) {
			if (this.context.length !== 0) {
				var ctx = this.context[0];

				if (type === 'fromVisible' || type === 'toData') {
					return _fnVisibleToColumnIndex(ctx, idx);
				} else if (type === 'fromData' || type === 'toVisible') {
					return _fnColumnIndexToVisible(ctx, idx);
				}
			}
		});

		_api_register('column()', function (selector, opts) {
			return _selector_first(this.columns(selector, opts));
		});

		var __cell_selector = function __cell_selector(settings, selector, opts) {
			var data = settings.aoData;
			var rows = _selector_row_indexes(settings, opts);
			var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));
			var allCells = $([].concat.apply([], cells));
			var row;
			var columns = settings.aoColumns.length;
			var a, i, ien, j, o, host;

			var run = function run(s) {
				var fnSelector = typeof s === 'function';

				if (s === null || s === undefined || fnSelector) {
					// All cells and function selectors
					a = [];

					for (i = 0, ien = rows.length; i < ien; i++) {
						row = rows[i];

						for (j = 0; j < columns; j++) {
							o = {
								row: row,
								column: j
							};

							if (fnSelector) {
								// Selector - function
								host = data[row];

								if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
									a.push(o);
								}
							} else {
								// Selector - all
								a.push(o);
							}
						}
					}

					return a;
				}

				// Selector - index
				if ($.isPlainObject(s)) {
					return [s];
				}

				// Selector - jQuery filtered cells
				var jqResult = allCells.filter(s).map(function (i, el) {
					return { // use a new object, in case someone changes the values
						row: el._DT_CellIndex.row,
						column: el._DT_CellIndex.column
					};
				}).toArray();

				if (jqResult.length || !s.nodeName) {
					return jqResult;
				}

				// Otherwise the selector is a node, and there is one last option - the
				// element might be a child of an element which has dt-row and dt-column
				// data attributes
				host = $(s).closest('*[data-dt-row]');
				return host.length ? [{
					row: host.data('dt-row'),
					column: host.data('dt-column')
				}] : [];
			};

			return _selector_run('cell', selector, run, settings, opts);
		};

		_api_register('cells()', function (rowSelector, columnSelector, opts) {
			// Argument shifting
			if ($.isPlainObject(rowSelector)) {
				// Indexes
				if (rowSelector.row === undefined) {
					// Selector options in first parameter
					opts = rowSelector;
					rowSelector = null;
				} else {
					// Cell index objects in first parameter
					opts = columnSelector;
					columnSelector = null;
				}
			}
			if ($.isPlainObject(columnSelector)) {
				opts = columnSelector;
				columnSelector = null;
			}

			// Cell selector
			if (columnSelector === null || columnSelector === undefined) {
				return this.iterator('table', function (settings) {
					return __cell_selector(settings, rowSelector, _selector_opts(opts));
				});
			}

			// Row + column selector
			var columns = this.columns(columnSelector, opts);
			var rows = this.rows(rowSelector, opts);
			var a, i, ien, j, jen;

			var cells = this.iterator('table', function (settings, idx) {
				a = [];

				for (i = 0, ien = rows[idx].length; i < ien; i++) {
					for (j = 0, jen = columns[idx].length; j < jen; j++) {
						a.push({
							row: rows[idx][i],
							column: columns[idx][j]
						});
					}
				}

				return a;
			}, 1);

			$.extend(cells.selector, {
				cols: columnSelector,
				rows: rowSelector,
				opts: opts
			});

			return cells;
		});

		_api_registerPlural('cells().nodes()', 'cell().node()', function () {
			return this.iterator('cell', function (settings, row, column) {
				var data = settings.aoData[row];

				return data && data.anCells ? data.anCells[column] : undefined;
			}, 1);
		});

		_api_register('cells().data()', function () {
			return this.iterator('cell', function (settings, row, column) {
				return _fnGetCellData(settings, row, column);
			}, 1);
		});

		_api_registerPlural('cells().cache()', 'cell().cache()', function (type) {
			type = type === 'search' ? '_aFilterData' : '_aSortData';

			return this.iterator('cell', function (settings, row, column) {
				return settings.aoData[row][type][column];
			}, 1);
		});

		_api_registerPlural('cells().render()', 'cell().render()', function (type) {
			return this.iterator('cell', function (settings, row, column) {
				return _fnGetCellData(settings, row, column, type);
			}, 1);
		});

		_api_registerPlural('cells().indexes()', 'cell().index()', function () {
			return this.iterator('cell', function (settings, row, column) {
				return {
					row: row,
					column: column,
					columnVisible: _fnColumnIndexToVisible(settings, column)
				};
			}, 1);
		});

		_api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {
			return this.iterator('cell', function (settings, row, column) {
				_fnInvalidate(settings, row, src, column);
			});
		});

		_api_register('cell()', function (rowSelector, columnSelector, opts) {
			return _selector_first(this.cells(rowSelector, columnSelector, opts));
		});

		_api_register('cell().data()', function (data) {
			var ctx = this.context;
			var cell = this[0];

			if (data === undefined) {
				// Get
				return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;
			}

			// Set
			_fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
			_fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);

			return this;
		});

		/**
	  * Get current ordering (sorting) that has been applied to the table.
	  *
	  * @returns {array} 2D array containing the sorting information for the first
	  *   table in the current context. Each element in the parent array represents
	  *   a column being sorted upon (i.e. multi-sorting with two columns would have
	  *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	  *   the column index that the sorting condition applies to, the second is the
	  *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	  *   index of the sorting order from the `column.sorting` initialisation array.
	  */ /**
	     * Set the ordering for the table.
	     *
	     * @param {integer} order Column index to sort upon.
	     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	     * @returns {DataTables.Api} this
	     */ /**
	        * Set the ordering for the table.
	        *
	        * @param {array} order 1D array of sorting information to be applied.
	        * @param {array} [...] Optional additional sorting conditions
	        * @returns {DataTables.Api} this
	        */ /**
	           * Set the ordering for the table.
	           *
	           * @param {array} order 2D array of sorting information to be applied.
	           * @returns {DataTables.Api} this
	           */
		_api_register('order()', function (order, dir) {
			var ctx = this.context;

			if (order === undefined) {
				// get
				return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
			}

			// set
			if (typeof order === 'number') {
				// Simple column / direction passed in
				order = [[order, dir]];
			} else if (order.length && !$.isArray(order[0])) {
				// Arguments passed in (list of 1D arrays)
				order = Array.prototype.slice.call(arguments);
			}
			// otherwise a 2D array was passed in

			return this.iterator('table', function (settings) {
				settings.aaSorting = order.slice();
			});
		});

		/**
	  * Attach a sort listener to an element for a given column
	  *
	  * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	  *   listener to. This can take the form of a single DOM node, a jQuery
	  *   collection of nodes or a jQuery selector which will identify the node(s).
	  * @param {integer} column the column that a click on this node will sort on
	  * @param {function} [callback] callback function when sort is run
	  * @returns {DataTables.Api} this
	  */
		_api_register('order.listener()', function (node, column, callback) {
			return this.iterator('table', function (settings) {
				_fnSortAttachListener(settings, node, column, callback);
			});
		});

		_api_register('order.fixed()', function (set) {
			if (!set) {
				var ctx = this.context;
				var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;

				return $.isArray(fixed) ? { pre: fixed } : fixed;
			}

			return this.iterator('table', function (settings) {
				settings.aaSortingFixed = $.extend(true, {}, set);
			});
		});

		// Order by the selected column(s)
		_api_register(['columns().order()', 'column().order()'], function (dir) {
			var that = this;

			return this.iterator('table', function (settings, i) {
				var sort = [];

				$.each(that[i], function (j, col) {
					sort.push([col, dir]);
				});

				settings.aaSorting = sort;
			});
		});

		_api_register('search()', function (input, regex, smart, caseInsen) {
			var ctx = this.context;

			if (input === undefined) {
				// get
				return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;
			}

			// set
			return this.iterator('table', function (settings) {
				if (!settings.oFeatures.bFilter) {
					return;
				}

				_fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
					"sSearch": input + "",
					"bRegex": regex === null ? false : regex,
					"bSmart": smart === null ? true : smart,
					"bCaseInsensitive": caseInsen === null ? true : caseInsen
				}), 1);
			});
		});

		_api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {
			return this.iterator('column', function (settings, column) {
				var preSearch = settings.aoPreSearchCols;

				if (input === undefined) {
					// get
					return preSearch[column].sSearch;
				}

				// set
				if (!settings.oFeatures.bFilter) {
					return;
				}

				$.extend(preSearch[column], {
					"sSearch": input + "",
					"bRegex": regex === null ? false : regex,
					"bSmart": smart === null ? true : smart,
					"bCaseInsensitive": caseInsen === null ? true : caseInsen
				});

				_fnFilterComplete(settings, settings.oPreviousSearch, 1);
			});
		});

		/*
	  * State API methods
	  */

		_api_register('state()', function () {
			return this.context.length ? this.context[0].oSavedState : null;
		});

		_api_register('state.clear()', function () {
			return this.iterator('table', function (settings) {
				// Save an empty object
				settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
			});
		});

		_api_register('state.loaded()', function () {
			return this.context.length ? this.context[0].oLoadedState : null;
		});

		_api_register('state.save()', function () {
			return this.iterator('table', function (settings) {
				_fnSaveState(settings);
			});
		});

		/**
	  * Provide a common method for plug-ins to check the version of DataTables being
	  * used, in order to ensure compatibility.
	  *
	  *  @param {string} version Version string to check for, in the format "X.Y.Z".
	  *    Note that the formats "X" and "X.Y" are also acceptable.
	  *  @returns {boolean} true if this version of DataTables is greater or equal to
	  *    the required version, or false if this version of DataTales is not
	  *    suitable
	  *  @static
	  *  @dtopt API-Static
	  *
	  *  @example
	  *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	  */
		DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {
			var aThis = DataTable.version.split('.');
			var aThat = version.split('.');
			var iThis, iThat;

			for (var i = 0, iLen = aThat.length; i < iLen; i++) {
				iThis = parseInt(aThis[i], 10) || 0;
				iThat = parseInt(aThat[i], 10) || 0;

				// Parts are the same, keep comparing
				if (iThis === iThat) {
					continue;
				}

				// Parts are different, return immediately
				return iThis > iThat;
			}

			return true;
		};

		/**
	  * Check if a `<table>` node is a DataTable table already or not.
	  *
	  *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	  *      selector for the table to test. Note that if more than more than one
	  *      table is passed on, only the first will be checked
	  *  @returns {boolean} true the table given is a DataTable, or false otherwise
	  *  @static
	  *  @dtopt API-Static
	  *
	  *  @example
	  *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	  *      $('#example').dataTable();
	  *    }
	  */
		DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {
			var t = $(table).get(0);
			var is = false;

			if (table instanceof DataTable.Api) {
				return true;
			}

			$.each(DataTable.settings, function (i, o) {
				var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
				var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

				if (o.nTable === t || head === t || foot === t) {
					is = true;
				}
			});

			return is;
		};

		/**
	  * Get all DataTable tables that have been initialised - optionally you can
	  * select to get only currently visible tables.
	  *
	  *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	  *    or visible tables only.
	  *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	  *    DataTables
	  *  @static
	  *  @dtopt API-Static
	  *
	  *  @example
	  *    $.each( $.fn.dataTable.tables(true), function () {
	  *      $(table).DataTable().columns.adjust();
	  *    } );
	  */
		DataTable.tables = DataTable.fnTables = function (visible) {
			var api = false;

			if ($.isPlainObject(visible)) {
				api = visible.api;
				visible = visible.visible;
			}

			var a = $.map(DataTable.settings, function (o) {
				if (!visible || visible && $(o.nTable).is(':visible')) {
					return o.nTable;
				}
			});

			return api ? new _Api2(a) : a;
		};

		/**
	  * Convert from camel case parameters to Hungarian notation. This is made public
	  * for the extensions to provide the same ability as DataTables core to accept
	  * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	  * parameters.
	  *
	  *  @param {object} src The model object which holds all parameters that can be
	  *    mapped.
	  *  @param {object} user The object to convert from camel case to Hungarian.
	  *  @param {boolean} force When set to `true`, properties which already have a
	  *    Hungarian value in the `user` object will be overwritten. Otherwise they
	  *    won't be.
	  */
		DataTable.camelToHungarian = _fnCamelToHungarian;

		/**
	  *
	  */
		_api_register('$()', function (selector, opts) {
			var rows = this.rows(opts).nodes(),
			    // Get all rows
			jqRows = $(rows);

			return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));
		});

		// jQuery functions to operate on the tables
		$.each(['on', 'one', 'off'], function (i, key) {
			_api_register(key + '()', function () /* event, handler */{
				var args = Array.prototype.slice.call(arguments);

				// Add the `dt` namespace automatically if it isn't already present
				args[0] = $.map(args[0].split(/\s/), function (e) {
					return !e.match(/\.dt\b/) ? e + '.dt' : e;
				}).join(' ');

				var inst = $(this.tables().nodes());
				inst[key].apply(inst, args);
				return this;
			});
		});

		_api_register('clear()', function () {
			return this.iterator('table', function (settings) {
				_fnClearTable(settings);
			});
		});

		_api_register('settings()', function () {
			return new _Api2(this.context, this.context);
		});

		_api_register('init()', function () {
			var ctx = this.context;
			return ctx.length ? ctx[0].oInit : null;
		});

		_api_register('data()', function () {
			return this.iterator('table', function (settings) {
				return _pluck(settings.aoData, '_aData');
			}).flatten();
		});

		_api_register('destroy()', function (remove) {
			remove = remove || false;

			return this.iterator('table', function (settings) {
				var orig = settings.nTableWrapper.parentNode;
				var classes = settings.oClasses;
				var table = settings.nTable;
				var tbody = settings.nTBody;
				var thead = settings.nTHead;
				var tfoot = settings.nTFoot;
				var jqTable = $(table);
				var jqTbody = $(tbody);
				var jqWrapper = $(settings.nTableWrapper);
				var rows = $.map(settings.aoData, function (r) {
					return r.nTr;
				});
				var i, ien;

				// Flag to note that the table is currently being destroyed - no action
				// should be taken
				settings.bDestroying = true;

				// Fire off the destroy callbacks for plug-ins etc
				_fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]);

				// If not being removed from the document, make all columns visible
				if (!remove) {
					new _Api2(settings).columns().visible(true);
				}

				// Blitz all `DT` namespaced events (these are internal events, the
				// lowercase, `dt` events are user subscribed and they are responsible
				// for removing them
				jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
				$(window).off('.DT-' + settings.sInstance);

				// When scrolling we had to break the table up - restore it
				if (table != thead.parentNode) {
					jqTable.children('thead').detach();
					jqTable.append(thead);
				}

				if (tfoot && table != tfoot.parentNode) {
					jqTable.children('tfoot').detach();
					jqTable.append(tfoot);
				}

				settings.aaSorting = [];
				settings.aaSortingFixed = [];
				_fnSortingClasses(settings);

				$(rows).removeClass(settings.asStripeClasses.join(' '));

				$('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone);

				if (settings.bJUI) {
					$('th span.' + classes.sSortIcon + ', td span.' + classes.sSortIcon, thead).detach();
					$('th, td', thead).each(function () {
						var wrapper = $('div.' + classes.sSortJUIWrapper, this);
						$(this).append(wrapper.contents());
						wrapper.detach();
					});
				}

				// Add the TR elements back into the table in their original order
				jqTbody.children().detach();
				jqTbody.append(rows);

				// Remove the DataTables generated nodes, events and classes
				var removedMethod = remove ? 'remove' : 'detach';
				jqTable[removedMethod]();
				jqWrapper[removedMethod]();

				// If we need to reattach the table to the document
				if (!remove && orig) {
					// insertBefore acts like appendChild if !arg[1]
					orig.insertBefore(table, settings.nTableReinsertBefore);

					// Restore the width of the original table - was read from the style property,
					// so we can restore directly to that
					jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable);

					// If the were originally stripe classes - then we add them back here.
					// Note this is not fool proof (for example if not all rows had stripe
					// classes - but it's a good effort without getting carried away
					ien = settings.asDestroyStripes.length;

					if (ien) {
						jqTbody.children().each(function (i) {
							$(this).addClass(settings.asDestroyStripes[i % ien]);
						});
					}
				}

				/* Remove the settings object from the settings array */
				var idx = $.inArray(settings, DataTable.settings);
				if (idx !== -1) {
					DataTable.settings.splice(idx, 1);
				}
			});
		});

		// Add the `every()` method for rows, columns and cells in a compact form
		$.each(['column', 'row', 'cell'], function (i, type) {
			_api_register(type + 's().every()', function (fn) {
				var opts = this.selector.opts;
				var api = this;

				return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {
					// Rows and columns:
					//  arg1 - index
					//  arg2 - table counter
					//  arg3 - loop counter
					//  arg4 - undefined
					// Cells:
					//  arg1 - row index
					//  arg2 - column index
					//  arg3 - table counter
					//  arg4 - loop counter
					fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);
				});
			});
		});

		// i18n method for extensions to be able to use the language object from the
		// DataTable
		_api_register('i18n()', function (token, def, plural) {
			var ctx = this.context[0];
			var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

			if (resolved === undefined) {
				resolved = def;
			}

			if (plural !== undefined && $.isPlainObject(resolved)) {
				resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;
			}

			return resolved.replace('%d', plural); // nb: plural might be undefined,
		});

		/**
	  * Version string for plug-ins to check compatibility. Allowed format is
	  * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	  * only for non-release builds. See http://semver.org/ for more information.
	  *  @member
	  *  @type string
	  *  @default Version number
	  */
		DataTable.version = "1.10.13";

		/**
	  * Private data store, containing all of the settings objects that are
	  * created for the tables on a given page.
	  *
	  * Note that the `DataTable.settings` object is aliased to
	  * `jQuery.fn.dataTableExt` through which it may be accessed and
	  * manipulated, or `jQuery.fn.dataTable.settings`.
	  *  @member
	  *  @type array
	  *  @default []
	  *  @private
	  */
		DataTable.settings = [];

		/**
	  * Object models container, for the various models that DataTables has
	  * available to it. These models define the objects that are used to hold
	  * the active state and configuration of the table.
	  *  @namespace
	  */
		DataTable.models = {};

		/**
	  * Template object for the way in which DataTables holds information about
	  * search information for the global filter and individual column filters.
	  *  @namespace
	  */
		DataTable.models.oSearch = {
			/**
	   * Flag to indicate if the filtering should be case insensitive or not
	   *  @type boolean
	   *  @default true
	   */
			"bCaseInsensitive": true,

			/**
	   * Applied search term
	   *  @type string
	   *  @default <i>Empty string</i>
	   */
			"sSearch": "",

			/**
	   * Flag to indicate if the search term should be interpreted as a
	   * regular expression (true) or not (false) and therefore and special
	   * regex characters escaped.
	   *  @type boolean
	   *  @default false
	   */
			"bRegex": false,

			/**
	   * Flag to indicate if DataTables is to use its smart filtering or not.
	   *  @type boolean
	   *  @default true
	   */
			"bSmart": true
		};

		/**
	  * Template object for the way in which DataTables holds information about
	  * each individual row. This is the object format used for the settings
	  * aoData array.
	  *  @namespace
	  */
		DataTable.models.oRow = {
			/**
	   * TR element for the row
	   *  @type node
	   *  @default null
	   */
			"nTr": null,

			/**
	   * Array of TD elements for each row. This is null until the row has been
	   * created.
	   *  @type array nodes
	   *  @default []
	   */
			"anCells": null,

			/**
	   * Data object from the original data source for the row. This is either
	   * an array if using the traditional form of DataTables, or an object if
	   * using mData options. The exact type will depend on the passed in
	   * data from the data source, or will be an array if using DOM a data
	   * source.
	   *  @type array|object
	   *  @default []
	   */
			"_aData": [],

			/**
	   * Sorting data cache - this array is ostensibly the same length as the
	   * number of columns (although each index is generated only as it is
	   * needed), and holds the data that is used for sorting each column in the
	   * row. We do this cache generation at the start of the sort in order that
	   * the formatting of the sort data need be done only once for each cell
	   * per sort. This array should not be read from or written to by anything
	   * other than the master sorting methods.
	   *  @type array
	   *  @default null
	   *  @private
	   */
			"_aSortData": null,

			/**
	   * Per cell filtering data cache. As per the sort data cache, used to
	   * increase the performance of the filtering in DataTables
	   *  @type array
	   *  @default null
	   *  @private
	   */
			"_aFilterData": null,

			/**
	   * Filtering data cache. This is the same as the cell filtering cache, but
	   * in this case a string rather than an array. This is easily computed with
	   * a join on `_aFilterData`, but is provided as a cache so the join isn't
	   * needed on every search (memory traded for performance)
	   *  @type array
	   *  @default null
	   *  @private
	   */
			"_sFilterRow": null,

			/**
	   * Cache of the class name that DataTables has applied to the row, so we
	   * can quickly look at this variable rather than needing to do a DOM check
	   * on className for the nTr property.
	   *  @type string
	   *  @default <i>Empty string</i>
	   *  @private
	   */
			"_sRowStripe": "",

			/**
	   * Denote if the original data source was from the DOM, or the data source
	   * object. This is used for invalidating data, so DataTables can
	   * automatically read data from the original source, unless uninstructed
	   * otherwise.
	   *  @type string
	   *  @default null
	   *  @private
	   */
			"src": null,

			/**
	   * Index in the aoData array. This saves an indexOf lookup when we have the
	   * object, but want to know the index
	   *  @type integer
	   *  @default -1
	   *  @private
	   */
			"idx": -1
		};

		/**
	  * Template object for the column information object in DataTables. This object
	  * is held in the settings aoColumns array and contains all the information that
	  * DataTables needs about each individual column.
	  *
	  * Note that this object is related to {@link DataTable.defaults.column}
	  * but this one is the internal data store for DataTables's cache of columns.
	  * It should NOT be manipulated outside of DataTables. Any configuration should
	  * be done through the initialisation options.
	  *  @namespace
	  */
		DataTable.models.oColumn = {
			/**
	   * Column index. This could be worked out on-the-fly with $.inArray, but it
	   * is faster to just hold it as a variable
	   *  @type integer
	   *  @default null
	   */
			"idx": null,

			/**
	   * A list of the columns that sorting should occur on when this column
	   * is sorted. That this property is an array allows multi-column sorting
	   * to be defined for a column (for example first name / last name columns
	   * would benefit from this). The values are integers pointing to the
	   * columns to be sorted on (typically it will be a single integer pointing
	   * at itself, but that doesn't need to be the case).
	   *  @type array
	   */
			"aDataSort": null,

			/**
	   * Define the sorting directions that are applied to the column, in sequence
	   * as the column is repeatedly sorted upon - i.e. the first value is used
	   * as the sorting direction when the column if first sorted (clicked on).
	   * Sort it again (click again) and it will move on to the next index.
	   * Repeat until loop.
	   *  @type array
	   */
			"asSorting": null,

			/**
	   * Flag to indicate if the column is searchable, and thus should be included
	   * in the filtering or not.
	   *  @type boolean
	   */
			"bSearchable": null,

			/**
	   * Flag to indicate if the column is sortable or not.
	   *  @type boolean
	   */
			"bSortable": null,

			/**
	   * Flag to indicate if the column is currently visible in the table or not
	   *  @type boolean
	   */
			"bVisible": null,

			/**
	   * Store for manual type assignment using the `column.type` option. This
	   * is held in store so we can manipulate the column's `sType` property.
	   *  @type string
	   *  @default null
	   *  @private
	   */
			"_sManualType": null,

			/**
	   * Flag to indicate if HTML5 data attributes should be used as the data
	   * source for filtering or sorting. True is either are.
	   *  @type boolean
	   *  @default false
	   *  @private
	   */
			"_bAttrSrc": false,

			/**
	   * Developer definable function that is called whenever a cell is created (Ajax source,
	   * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	   * allowing you to modify the DOM element (add background colour for example) when the
	   * element is available.
	   *  @type function
	   *  @param {element} nTd The TD node that has been created
	   *  @param {*} sData The Data for the cell
	   *  @param {array|object} oData The data for the whole row
	   *  @param {int} iRow The row index for the aoData data store
	   *  @default null
	   */
			"fnCreatedCell": null,

			/**
	   * Function to get data from a cell in a column. You should <b>never</b>
	   * access data directly through _aData internally in DataTables - always use
	   * the method attached to this property. It allows mData to function as
	   * required. This function is automatically assigned by the column
	   * initialisation method
	   *  @type function
	   *  @param {array|object} oData The data array/object for the array
	   *    (i.e. aoData[]._aData)
	   *  @param {string} sSpecific The specific data type you want to get -
	   *    'display', 'type' 'filter' 'sort'
	   *  @returns {*} The data for the cell from the given row's data
	   *  @default null
	   */
			"fnGetData": null,

			/**
	   * Function to set data for a cell in the column. You should <b>never</b>
	   * set the data directly to _aData internally in DataTables - always use
	   * this method. It allows mData to function as required. This function
	   * is automatically assigned by the column initialisation method
	   *  @type function
	   *  @param {array|object} oData The data array/object for the array
	   *    (i.e. aoData[]._aData)
	   *  @param {*} sValue Value to set
	   *  @default null
	   */
			"fnSetData": null,

			/**
	   * Property to read the value for the cells in the column from the data
	   * source array / object. If null, then the default content is used, if a
	   * function is given then the return from the function is used.
	   *  @type function|int|string|null
	   *  @default null
	   */
			"mData": null,

			/**
	   * Partner property to mData which is used (only when defined) to get
	   * the data - i.e. it is basically the same as mData, but without the
	   * 'set' option, and also the data fed to it is the result from mData.
	   * This is the rendering method to match the data method of mData.
	   *  @type function|int|string|null
	   *  @default null
	   */
			"mRender": null,

			/**
	   * Unique header TH/TD element for this column - this is what the sorting
	   * listener is attached to (if sorting is enabled.)
	   *  @type node
	   *  @default null
	   */
			"nTh": null,

			/**
	   * Unique footer TH/TD element for this column (if there is one). Not used
	   * in DataTables as such, but can be used for plug-ins to reference the
	   * footer for each column.
	   *  @type node
	   *  @default null
	   */
			"nTf": null,

			/**
	   * The class to apply to all TD elements in the table's TBODY for the column
	   *  @type string
	   *  @default null
	   */
			"sClass": null,

			/**
	   * When DataTables calculates the column widths to assign to each column,
	   * it finds the longest string in each column and then constructs a
	   * temporary table and reads the widths from that. The problem with this
	   * is that "mmm" is much wider then "iiii", but the latter is a longer
	   * string - thus the calculation can go wrong (doing it properly and putting
	   * it into an DOM object and measuring that is horribly(!) slow). Thus as
	   * a "work around" we provide this option. It will append its value to the
	   * text that is found to be the longest string for the column - i.e. padding.
	   *  @type string
	   */
			"sContentPadding": null,

			/**
	   * Allows a default value to be given for a column's data, and will be used
	   * whenever a null data source is encountered (this can be because mData
	   * is set to null, or because the data source itself is null).
	   *  @type string
	   *  @default null
	   */
			"sDefaultContent": null,

			/**
	   * Name for the column, allowing reference to the column by name as well as
	   * by index (needs a lookup to work by name).
	   *  @type string
	   */
			"sName": null,

			/**
	   * Custom sorting data type - defines which of the available plug-ins in
	   * afnSortData the custom sorting will use - if any is defined.
	   *  @type string
	   *  @default std
	   */
			"sSortDataType": 'std',

			/**
	   * Class to be applied to the header element when sorting on this column
	   *  @type string
	   *  @default null
	   */
			"sSortingClass": null,

			/**
	   * Class to be applied to the header element when sorting on this column -
	   * when jQuery UI theming is used.
	   *  @type string
	   *  @default null
	   */
			"sSortingClassJUI": null,

			/**
	   * Title of the column - what is seen in the TH element (nTh).
	   *  @type string
	   */
			"sTitle": null,

			/**
	   * Column sorting and filtering type
	   *  @type string
	   *  @default null
	   */
			"sType": null,

			/**
	   * Width of the column
	   *  @type string
	   *  @default null
	   */
			"sWidth": null,

			/**
	   * Width of the column when it was first "encountered"
	   *  @type string
	   *  @default null
	   */
			"sWidthOrig": null
		};

		/*
	  * Developer note: The properties of the object below are given in Hungarian
	  * notation, that was used as the interface for DataTables prior to v1.10, however
	  * from v1.10 onwards the primary interface is camel case. In order to avoid
	  * breaking backwards compatibility utterly with this change, the Hungarian
	  * version is still, internally the primary interface, but is is not documented
	  * - hence the @name tags in each doc comment. This allows a Javascript function
	  * to create a map from Hungarian notation to camel case (going the other direction
	  * would require each property to be listed, which would at around 3K to the size
	  * of DataTables, while this method is about a 0.5K hit.
	  *
	  * Ultimately this does pave the way for Hungarian notation to be dropped
	  * completely, but that is a massive amount of work and will break current
	  * installs (therefore is on-hold until v2).
	  */

		/**
	  * Initialisation options that can be given to DataTables at initialisation
	  * time.
	  *  @namespace
	  */
		DataTable.defaults = {
			/**
	   * An array of data to use for the table, passed in at initialisation which
	   * will be used in preference to any data which is already in the DOM. This is
	   * particularly useful for constructing tables purely in Javascript, for
	   * example with a custom Ajax call.
	   *  @type array
	   *  @default null
	   *
	   *  @dtopt Option
	   *  @name DataTable.defaults.data
	   *
	   *  @example
	   *    // Using a 2D array data source
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "data": [
	   *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
	   *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
	   *        ],
	   *        "columns": [
	   *          { "title": "Engine" },
	   *          { "title": "Browser" },
	   *          { "title": "Platform" },
	   *          { "title": "Version" },
	   *          { "title": "Grade" }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using an array of objects as a data source (`data`)
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "data": [
	   *          {
	   *            "engine":   "Trident",
	   *            "browser":  "Internet Explorer 4.0",
	   *            "platform": "Win 95+",
	   *            "version":  4,
	   *            "grade":    "X"
	   *          },
	   *          {
	   *            "engine":   "Trident",
	   *            "browser":  "Internet Explorer 5.0",
	   *            "platform": "Win 95+",
	   *            "version":  5,
	   *            "grade":    "C"
	   *          }
	   *        ],
	   *        "columns": [
	   *          { "title": "Engine",   "data": "engine" },
	   *          { "title": "Browser",  "data": "browser" },
	   *          { "title": "Platform", "data": "platform" },
	   *          { "title": "Version",  "data": "version" },
	   *          { "title": "Grade",    "data": "grade" }
	   *        ]
	   *      } );
	   *    } );
	   */
			"aaData": null,

			/**
	   * If ordering is enabled, then DataTables will perform a first pass sort on
	   * initialisation. You can define which column(s) the sort is performed
	   * upon, and the sorting direction, with this variable. The `sorting` array
	   * should contain an array for each column to be sorted initially containing
	   * the column's index and a direction string ('asc' or 'desc').
	   *  @type array
	   *  @default [[0,'asc']]
	   *
	   *  @dtopt Option
	   *  @name DataTable.defaults.order
	   *
	   *  @example
	   *    // Sort by 3rd column first, and then 4th column
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "order": [[2,'asc'], [3,'desc']]
	   *      } );
	   *    } );
	   *
	   *    // No initial sorting
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "order": []
	   *      } );
	   *    } );
	   */
			"aaSorting": [[0, 'asc']],

			/**
	   * This parameter is basically identical to the `sorting` parameter, but
	   * cannot be overridden by user interaction with the table. What this means
	   * is that you could have a column (visible or hidden) which the sorting
	   * will always be forced on first - any sorting after that (from the user)
	   * will then be performed as required. This can be useful for grouping rows
	   * together.
	   *  @type array
	   *  @default null
	   *
	   *  @dtopt Option
	   *  @name DataTable.defaults.orderFixed
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "orderFixed": [[0,'asc']]
	   *      } );
	   *    } )
	   */
			"aaSortingFixed": [],

			/**
	   * DataTables can be instructed to load data to display in the table from a
	   * Ajax source. This option defines how that Ajax call is made and where to.
	   *
	   * The `ajax` property has three different modes of operation, depending on
	   * how it is defined. These are:
	   *
	   * * `string` - Set the URL from where the data should be loaded from.
	   * * `object` - Define properties for `jQuery.ajax`.
	   * * `function` - Custom data get function
	   *
	   * `string`
	   * --------
	   *
	   * As a string, the `ajax` property simply defines the URL from which
	   * DataTables will load data.
	   *
	   * `object`
	   * --------
	   *
	   * As an object, the parameters in the object are passed to
	   * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
	   * of the Ajax request. DataTables has a number of default parameters which
	   * you can override using this option. Please refer to the jQuery
	   * documentation for a full description of the options available, although
	   * the following parameters provide additional options in DataTables or
	   * require special consideration:
	   *
	   * * `data` - As with jQuery, `data` can be provided as an object, but it
	   *   can also be used as a function to manipulate the data DataTables sends
	   *   to the server. The function takes a single parameter, an object of
	   *   parameters with the values that DataTables has readied for sending. An
	   *   object may be returned which will be merged into the DataTables
	   *   defaults, or you can add the items to the object that was passed in and
	   *   not return anything from the function. This supersedes `fnServerParams`
	   *   from DataTables 1.9-.
	   *
	   * * `dataSrc` - By default DataTables will look for the property `data` (or
	   *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
	   *   from an Ajax source or for server-side processing - this parameter
	   *   allows that property to be changed. You can use Javascript dotted
	   *   object notation to get a data source for multiple levels of nesting, or
	   *   it my be used as a function. As a function it takes a single parameter,
	   *   the JSON returned from the server, which can be manipulated as
	   *   required, with the returned value being that used by DataTables as the
	   *   data source for the table. This supersedes `sAjaxDataProp` from
	   *   DataTables 1.9-.
	   *
	   * * `success` - Should not be overridden it is used internally in
	   *   DataTables. To manipulate / transform the data returned by the server
	   *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
	   *
	   * `function`
	   * ----------
	   *
	   * As a function, making the Ajax call is left up to yourself allowing
	   * complete control of the Ajax request. Indeed, if desired, a method other
	   * than Ajax could be used to obtain the required data, such as Web storage
	   * or an AIR database.
	   *
	   * The function is given four parameters and no return is required. The
	   * parameters are:
	   *
	   * 1. _object_ - Data to send to the server
	   * 2. _function_ - Callback function that must be executed when the required
	   *    data has been obtained. That data should be passed into the callback
	   *    as the only parameter
	   * 3. _object_ - DataTables settings object for the table
	   *
	   * Note that this supersedes `fnServerData` from DataTables 1.9-.
	   *
	   *  @type string|object|function
	   *  @default null
	   *
	   *  @dtopt Option
	   *  @name DataTable.defaults.ajax
	   *  @since 1.10.0
	   *
	   * @example
	   *   // Get JSON data from a file via Ajax.
	   *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
	   *   $('#example').dataTable( {
	   *     "ajax": "data.json"
	   *   } );
	   *
	   * @example
	   *   // Get JSON data from a file via Ajax, using `dataSrc` to change
	   *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
	   *   $('#example').dataTable( {
	   *     "ajax": {
	   *       "url": "data.json",
	   *       "dataSrc": "tableData"
	   *     }
	   *   } );
	   *
	   * @example
	   *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
	   *   // from a plain array rather than an array in an object
	   *   $('#example').dataTable( {
	   *     "ajax": {
	   *       "url": "data.json",
	   *       "dataSrc": ""
	   *     }
	   *   } );
	   *
	   * @example
	   *   // Manipulate the data returned from the server - add a link to data
	   *   // (note this can, should, be done using `render` for the column - this
	   *   // is just a simple example of how the data can be manipulated).
	   *   $('#example').dataTable( {
	   *     "ajax": {
	   *       "url": "data.json",
	   *       "dataSrc": function ( json ) {
	   *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
	   *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
	   *         }
	   *         return json;
	   *       }
	   *     }
	   *   } );
	   *
	   * @example
	   *   // Add data to the request
	   *   $('#example').dataTable( {
	   *     "ajax": {
	   *       "url": "data.json",
	   *       "data": function ( d ) {
	   *         return {
	   *           "extra_search": $('#extra').val()
	   *         };
	   *       }
	   *     }
	   *   } );
	   *
	   * @example
	   *   // Send request as POST
	   *   $('#example').dataTable( {
	   *     "ajax": {
	   *       "url": "data.json",
	   *       "type": "POST"
	   *     }
	   *   } );
	   *
	   * @example
	   *   // Get the data from localStorage (could interface with a form for
	   *   // adding, editing and removing rows).
	   *   $('#example').dataTable( {
	   *     "ajax": function (data, callback, settings) {
	   *       callback(
	   *         JSON.parse( localStorage.getItem('dataTablesData') )
	   *       );
	   *     }
	   *   } );
	   */
			"ajax": null,

			/**
	   * This parameter allows you to readily specify the entries in the length drop
	   * down menu that DataTables shows when pagination is enabled. It can be
	   * either a 1D array of options which will be used for both the displayed
	   * option and the value, or a 2D array which will use the array in the first
	   * position as the value, and the array in the second position as the
	   * displayed options (useful for language strings such as 'All').
	   *
	   * Note that the `pageLength` property will be automatically set to the
	   * first value given in this array, unless `pageLength` is also provided.
	   *  @type array
	   *  @default [ 10, 25, 50, 100 ]
	   *
	   *  @dtopt Option
	   *  @name DataTable.defaults.lengthMenu
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
	   *      } );
	   *    } );
	   */
			"aLengthMenu": [10, 25, 50, 100],

			/**
	   * The `columns` option in the initialisation parameter allows you to define
	   * details about the way individual columns behave. For a full list of
	   * column options that can be set, please see
	   * {@link DataTable.defaults.column}. Note that if you use `columns` to
	   * define your columns, you must have an entry in the array for every single
	   * column that you have in your table (these can be null if you don't which
	   * to specify any options).
	   *  @member
	   *
	   *  @name DataTable.defaults.column
	   */
			"aoColumns": null,

			/**
	   * Very similar to `columns`, `columnDefs` allows you to target a specific
	   * column, multiple columns, or all columns, using the `targets` property of
	   * each object in the array. This allows great flexibility when creating
	   * tables, as the `columnDefs` arrays can be of any length, targeting the
	   * columns you specifically want. `columnDefs` may use any of the column
	   * options available: {@link DataTable.defaults.column}, but it _must_
	   * have `targets` defined in each object in the array. Values in the `targets`
	   * array may be:
	   *   <ul>
	   *     <li>a string - class name will be matched on the TH for the column</li>
	   *     <li>0 or a positive integer - column index counting from the left</li>
	   *     <li>a negative integer - column index counting from the right</li>
	   *     <li>the string "_all" - all columns (i.e. assign a default)</li>
	   *   </ul>
	   *  @member
	   *
	   *  @name DataTable.defaults.columnDefs
	   */
			"aoColumnDefs": null,

			/**
	   * Basically the same as `search`, this parameter defines the individual column
	   * filtering state at initialisation time. The array must be of the same size
	   * as the number of columns, and each element be an object with the parameters
	   * `search` and `escapeRegex` (the latter is optional). 'null' is also
	   * accepted and the default will be used.
	   *  @type array
	   *  @default []
	   *
	   *  @dtopt Option
	   *  @name DataTable.defaults.searchCols
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "searchCols": [
	   *          null,
	   *          { "search": "My filter" },
	   *          null,
	   *          { "search": "^[0-9]", "escapeRegex": false }
	   *        ]
	   *      } );
	   *    } )
	   */
			"aoSearchCols": [],

			/**
	   * An array of CSS classes that should be applied to displayed rows. This
	   * array may be of any length, and DataTables will apply each class
	   * sequentially, looping when required.
	   *  @type array
	   *  @default null <i>Will take the values determined by the `oClasses.stripe*`
	   *    options</i>
	   *
	   *  @dtopt Option
	   *  @name DataTable.defaults.stripeClasses
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
	   *      } );
	   *    } )
	   */
			"asStripeClasses": null,

			/**
	   * Enable or disable automatic column width calculation. This can be disabled
	   * as an optimisation (it takes some time to calculate the widths) if the
	   * tables widths are passed in using `columns`.
	   *  @type boolean
	   *  @default true
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.autoWidth
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "autoWidth": false
	   *      } );
	   *    } );
	   */
			"bAutoWidth": true,

			/**
	   * Deferred rendering can provide DataTables with a huge speed boost when you
	   * are using an Ajax or JS data source for the table. This option, when set to
	   * true, will cause DataTables to defer the creation of the table elements for
	   * each row until they are needed for a draw - saving a significant amount of
	   * time.
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.deferRender
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "ajax": "sources/arrays.txt",
	   *        "deferRender": true
	   *      } );
	   *    } );
	   */
			"bDeferRender": false,

			/**
	   * Replace a DataTable which matches the given selector and replace it with
	   * one which has the properties of the new initialisation object passed. If no
	   * table matches the selector, then the new DataTable will be constructed as
	   * per normal.
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.destroy
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "srollY": "200px",
	   *        "paginate": false
	   *      } );
	   *
	   *      // Some time later....
	   *      $('#example').dataTable( {
	   *        "filter": false,
	   *        "destroy": true
	   *      } );
	   *    } );
	   */
			"bDestroy": false,

			/**
	   * Enable or disable filtering of data. Filtering in DataTables is "smart" in
	   * that it allows the end user to input multiple words (space separated) and
	   * will match a row containing those words, even if not in the order that was
	   * specified (this allow matching across multiple columns). Note that if you
	   * wish to use filtering in DataTables this must remain 'true' - to remove the
	   * default filtering input box and retain filtering abilities, please use
	   * {@link DataTable.defaults.dom}.
	   *  @type boolean
	   *  @default true
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.searching
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "searching": false
	   *      } );
	   *    } );
	   */
			"bFilter": true,

			/**
	   * Enable or disable the table information display. This shows information
	   * about the data that is currently visible on the page, including information
	   * about filtered data if that action is being performed.
	   *  @type boolean
	   *  @default true
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.info
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "info": false
	   *      } );
	   *    } );
	   */
			"bInfo": true,

			/**
	   * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
	   * slightly different and additional mark-up from what DataTables has
	   * traditionally used).
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.jQueryUI
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "jQueryUI": true
	   *      } );
	   *    } );
	   */
			"bJQueryUI": false,

			/**
	   * Allows the end user to select the size of a formatted page from a select
	   * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
	   *  @type boolean
	   *  @default true
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.lengthChange
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "lengthChange": false
	   *      } );
	   *    } );
	   */
			"bLengthChange": true,

			/**
	   * Enable or disable pagination.
	   *  @type boolean
	   *  @default true
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.paging
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "paging": false
	   *      } );
	   *    } );
	   */
			"bPaginate": true,

			/**
	   * Enable or disable the display of a 'processing' indicator when the table is
	   * being processed (e.g. a sort). This is particularly useful for tables with
	   * large amounts of data where it can take a noticeable amount of time to sort
	   * the entries.
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.processing
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "processing": true
	   *      } );
	   *    } );
	   */
			"bProcessing": false,

			/**
	   * Retrieve the DataTables object for the given selector. Note that if the
	   * table has already been initialised, this parameter will cause DataTables
	   * to simply return the object that has already been set up - it will not take
	   * account of any changes you might have made to the initialisation object
	   * passed to DataTables (setting this parameter to true is an acknowledgement
	   * that you understand this). `destroy` can be used to reinitialise a table if
	   * you need.
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.retrieve
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      initTable();
	   *      tableActions();
	   *    } );
	   *
	   *    function initTable ()
	   *    {
	   *      return $('#example').dataTable( {
	   *        "scrollY": "200px",
	   *        "paginate": false,
	   *        "retrieve": true
	   *      } );
	   *    }
	   *
	   *    function tableActions ()
	   *    {
	   *      var table = initTable();
	   *      // perform API operations with oTable
	   *    }
	   */
			"bRetrieve": false,

			/**
	   * When vertical (y) scrolling is enabled, DataTables will force the height of
	   * the table's viewport to the given height at all times (useful for layout).
	   * However, this can look odd when filtering data down to a small data set,
	   * and the footer is left "floating" further down. This parameter (when
	   * enabled) will cause DataTables to collapse the table's viewport down when
	   * the result set will fit within the given Y height.
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.scrollCollapse
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "scrollY": "200",
	   *        "scrollCollapse": true
	   *      } );
	   *    } );
	   */
			"bScrollCollapse": false,

			/**
	   * Configure DataTables to use server-side processing. Note that the
	   * `ajax` parameter must also be given in order to give DataTables a
	   * source to obtain the required data for each draw.
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Features
	   *  @dtopt Server-side
	   *  @name DataTable.defaults.serverSide
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "serverSide": true,
	   *        "ajax": "xhr.php"
	   *      } );
	   *    } );
	   */
			"bServerSide": false,

			/**
	   * Enable or disable sorting of columns. Sorting of individual columns can be
	   * disabled by the `sortable` option for each column.
	   *  @type boolean
	   *  @default true
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.ordering
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "ordering": false
	   *      } );
	   *    } );
	   */
			"bSort": true,

			/**
	   * Enable or display DataTables' ability to sort multiple columns at the
	   * same time (activated by shift-click by the user).
	   *  @type boolean
	   *  @default true
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.orderMulti
	   *
	   *  @example
	   *    // Disable multiple column sorting ability
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "orderMulti": false
	   *      } );
	   *    } );
	   */
			"bSortMulti": true,

			/**
	   * Allows control over whether DataTables should use the top (true) unique
	   * cell that is found for a single column, or the bottom (false - default).
	   * This is useful when using complex headers.
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.orderCellsTop
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "orderCellsTop": true
	   *      } );
	   *    } );
	   */
			"bSortCellsTop": false,

			/**
	   * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
	   * `sorting\_3` to the columns which are currently being sorted on. This is
	   * presented as a feature switch as it can increase processing time (while
	   * classes are removed and added) so for large data sets you might want to
	   * turn this off.
	   *  @type boolean
	   *  @default true
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.orderClasses
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "orderClasses": false
	   *      } );
	   *    } );
	   */
			"bSortClasses": true,

			/**
	   * Enable or disable state saving. When enabled HTML5 `localStorage` will be
	   * used to save table display information such as pagination information,
	   * display length, filtering and sorting. As such when the end user reloads
	   * the page the display display will match what thy had previously set up.
	   *
	   * Due to the use of `localStorage` the default state saving is not supported
	   * in IE6 or 7. If state saving is required in those browsers, use
	   * `stateSaveCallback` to provide a storage solution such as cookies.
	   *  @type boolean
	   *  @default false
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.stateSave
	   *
	   *  @example
	   *    $(document).ready( function () {
	   *      $('#example').dataTable( {
	   *        "stateSave": true
	   *      } );
	   *    } );
	   */
			"bStateSave": false,

			/**
	   * This function is called when a TR element is created (and all TD child
	   * elements have been inserted), or registered if using a DOM source, allowing
	   * manipulation of the TR element (adding classes etc).
	   *  @type function
	   *  @param {node} row "TR" element for the current row
	   *  @param {array} data Raw data array for this row
	   *  @param {int} dataIndex The index of this row in the internal aoData array
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.createdRow
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "createdRow": function( row, data, dataIndex ) {
	   *          // Bold the grade for all 'A' grade browsers
	   *          if ( data[4] == "A" )
	   *          {
	   *            $('td:eq(4)', row).html( '<b>A</b>' );
	   *          }
	   *        }
	   *      } );
	   *    } );
	   */
			"fnCreatedRow": null,

			/**
	   * This function is called on every 'draw' event, and allows you to
	   * dynamically modify any aspect you want about the created DOM.
	   *  @type function
	   *  @param {object} settings DataTables settings object
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.drawCallback
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "drawCallback": function( settings ) {
	   *          alert( 'DataTables has redrawn the table' );
	   *        }
	   *      } );
	   *    } );
	   */
			"fnDrawCallback": null,

			/**
	   * Identical to fnHeaderCallback() but for the table footer this function
	   * allows you to modify the table footer on every 'draw' event.
	   *  @type function
	   *  @param {node} foot "TR" element for the footer
	   *  @param {array} data Full table data (as derived from the original HTML)
	   *  @param {int} start Index for the current display starting point in the
	   *    display array
	   *  @param {int} end Index for the current display ending point in the
	   *    display array
	   *  @param {array int} display Index array to translate the visual position
	   *    to the full data array
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.footerCallback
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "footerCallback": function( tfoot, data, start, end, display ) {
	   *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
	   *        }
	   *      } );
	   *    } )
	   */
			"fnFooterCallback": null,

			/**
	   * When rendering large numbers in the information element for the table
	   * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
	   * to have a comma separator for the 'thousands' units (e.g. 1 million is
	   * rendered as "1,000,000") to help readability for the end user. This
	   * function will override the default method DataTables uses.
	   *  @type function
	   *  @member
	   *  @param {int} toFormat number to be formatted
	   *  @returns {string} formatted string for DataTables to show the number
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.formatNumber
	   *
	   *  @example
	   *    // Format a number using a single quote for the separator (note that
	   *    // this can also be done with the language.thousands option)
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "formatNumber": function ( toFormat ) {
	   *          return toFormat.toString().replace(
	   *            /\B(?=(\d{3})+(?!\d))/g, "'"
	   *          );
	   *        };
	   *      } );
	   *    } );
	   */
			"fnFormatNumber": function fnFormatNumber(toFormat) {
				return toFormat.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
			},

			/**
	   * This function is called on every 'draw' event, and allows you to
	   * dynamically modify the header row. This can be used to calculate and
	   * display useful information about the table.
	   *  @type function
	   *  @param {node} head "TR" element for the header
	   *  @param {array} data Full table data (as derived from the original HTML)
	   *  @param {int} start Index for the current display starting point in the
	   *    display array
	   *  @param {int} end Index for the current display ending point in the
	   *    display array
	   *  @param {array int} display Index array to translate the visual position
	   *    to the full data array
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.headerCallback
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "fheaderCallback": function( head, data, start, end, display ) {
	   *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
	   *        }
	   *      } );
	   *    } )
	   */
			"fnHeaderCallback": null,

			/**
	   * The information element can be used to convey information about the current
	   * state of the table. Although the internationalisation options presented by
	   * DataTables are quite capable of dealing with most customisations, there may
	   * be times where you wish to customise the string further. This callback
	   * allows you to do exactly that.
	   *  @type function
	   *  @param {object} oSettings DataTables settings object
	   *  @param {int} start Starting position in data for the draw
	   *  @param {int} end End position in data for the draw
	   *  @param {int} max Total number of rows in the table (regardless of
	   *    filtering)
	   *  @param {int} total Total number of rows in the data set, after filtering
	   *  @param {string} pre The string that DataTables has formatted using it's
	   *    own rules
	   *  @returns {string} The string to be displayed in the information element.
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.infoCallback
	   *
	   *  @example
	   *    $('#example').dataTable( {
	   *      "infoCallback": function( settings, start, end, max, total, pre ) {
	   *        return start +" to "+ end;
	   *      }
	   *    } );
	   */
			"fnInfoCallback": null,

			/**
	   * Called when the table has been initialised. Normally DataTables will
	   * initialise sequentially and there will be no need for this function,
	   * however, this does not hold true when using external language information
	   * since that is obtained using an async XHR call.
	   *  @type function
	   *  @param {object} settings DataTables settings object
	   *  @param {object} json The JSON object request from the server - only
	   *    present if client-side Ajax sourced data is used
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.initComplete
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "initComplete": function(settings, json) {
	   *          alert( 'DataTables has finished its initialisation.' );
	   *        }
	   *      } );
	   *    } )
	   */
			"fnInitComplete": null,

			/**
	   * Called at the very start of each table draw and can be used to cancel the
	   * draw by returning false, any other return (including undefined) results in
	   * the full draw occurring).
	   *  @type function
	   *  @param {object} settings DataTables settings object
	   *  @returns {boolean} False will cancel the draw, anything else (including no
	   *    return) will allow it to complete.
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.preDrawCallback
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "preDrawCallback": function( settings ) {
	   *          if ( $('#test').val() == 1 ) {
	   *            return false;
	   *          }
	   *        }
	   *      } );
	   *    } );
	   */
			"fnPreDrawCallback": null,

			/**
	   * This function allows you to 'post process' each row after it have been
	   * generated for each table draw, but before it is rendered on screen. This
	   * function might be used for setting the row class name etc.
	   *  @type function
	   *  @param {node} row "TR" element for the current row
	   *  @param {array} data Raw data array for this row
	   *  @param {int} displayIndex The display index for the current table draw
	   *  @param {int} displayIndexFull The index of the data in the full list of
	   *    rows (after filtering)
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.rowCallback
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
	   *          // Bold the grade for all 'A' grade browsers
	   *          if ( data[4] == "A" ) {
	   *            $('td:eq(4)', row).html( '<b>A</b>' );
	   *          }
	   *        }
	   *      } );
	   *    } );
	   */
			"fnRowCallback": null,

			/**
	   * __Deprecated__ The functionality provided by this parameter has now been
	   * superseded by that provided through `ajax`, which should be used instead.
	   *
	   * This parameter allows you to override the default function which obtains
	   * the data from the server so something more suitable for your application.
	   * For example you could use POST data, or pull information from a Gears or
	   * AIR database.
	   *  @type function
	   *  @member
	   *  @param {string} source HTTP source to obtain the data from (`ajax`)
	   *  @param {array} data A key/value pair object containing the data to send
	   *    to the server
	   *  @param {function} callback to be called on completion of the data get
	   *    process that will draw the data on the page.
	   *  @param {object} settings DataTables settings object
	   *
	   *  @dtopt Callbacks
	   *  @dtopt Server-side
	   *  @name DataTable.defaults.serverData
	   *
	   *  @deprecated 1.10. Please use `ajax` for this functionality now.
	   */
			"fnServerData": null,

			/**
	   * __Deprecated__ The functionality provided by this parameter has now been
	   * superseded by that provided through `ajax`, which should be used instead.
	   *
	   *  It is often useful to send extra data to the server when making an Ajax
	   * request - for example custom filtering information, and this callback
	   * function makes it trivial to send extra information to the server. The
	   * passed in parameter is the data set that has been constructed by
	   * DataTables, and you can add to this or modify it as you require.
	   *  @type function
	   *  @param {array} data Data array (array of objects which are name/value
	   *    pairs) that has been constructed by DataTables and will be sent to the
	   *    server. In the case of Ajax sourced data with server-side processing
	   *    this will be an empty array, for server-side processing there will be a
	   *    significant number of parameters!
	   *  @returns {undefined} Ensure that you modify the data array passed in,
	   *    as this is passed by reference.
	   *
	   *  @dtopt Callbacks
	   *  @dtopt Server-side
	   *  @name DataTable.defaults.serverParams
	   *
	   *  @deprecated 1.10. Please use `ajax` for this functionality now.
	   */
			"fnServerParams": null,

			/**
	   * Load the table state. With this function you can define from where, and how, the
	   * state of a table is loaded. By default DataTables will load from `localStorage`
	   * but you might wish to use a server-side database or cookies.
	   *  @type function
	   *  @member
	   *  @param {object} settings DataTables settings object
	   *  @param {object} callback Callback that can be executed when done. It
	   *    should be passed the loaded state object.
	   *  @return {object} The DataTables state object to be loaded
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.stateLoadCallback
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "stateSave": true,
	   *        "stateLoadCallback": function (settings, callback) {
	   *          $.ajax( {
	   *            "url": "/state_load",
	   *            "dataType": "json",
	   *            "success": function (json) {
	   *              callback( json );
	   *            }
	   *          } );
	   *        }
	   *      } );
	   *    } );
	   */
			"fnStateLoadCallback": function fnStateLoadCallback(settings) {
				try {
					return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));
				} catch (e) {}
			},

			/**
	   * Callback which allows modification of the saved state prior to loading that state.
	   * This callback is called when the table is loading state from the stored data, but
	   * prior to the settings object being modified by the saved state. Note that for
	   * plug-in authors, you should use the `stateLoadParams` event to load parameters for
	   * a plug-in.
	   *  @type function
	   *  @param {object} settings DataTables settings object
	   *  @param {object} data The state object that is to be loaded
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.stateLoadParams
	   *
	   *  @example
	   *    // Remove a saved filter, so filtering is never loaded
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "stateSave": true,
	   *        "stateLoadParams": function (settings, data) {
	   *          data.oSearch.sSearch = "";
	   *        }
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Disallow state loading by returning false
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "stateSave": true,
	   *        "stateLoadParams": function (settings, data) {
	   *          return false;
	   *        }
	   *      } );
	   *    } );
	   */
			"fnStateLoadParams": null,

			/**
	   * Callback that is called when the state has been loaded from the state saving method
	   * and the DataTables settings object has been modified as a result of the loaded state.
	   *  @type function
	   *  @param {object} settings DataTables settings object
	   *  @param {object} data The state object that was loaded
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.stateLoaded
	   *
	   *  @example
	   *    // Show an alert with the filtering value that was saved
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "stateSave": true,
	   *        "stateLoaded": function (settings, data) {
	   *          alert( 'Saved filter was: '+data.oSearch.sSearch );
	   *        }
	   *      } );
	   *    } );
	   */
			"fnStateLoaded": null,

			/**
	   * Save the table state. This function allows you to define where and how the state
	   * information for the table is stored By default DataTables will use `localStorage`
	   * but you might wish to use a server-side database or cookies.
	   *  @type function
	   *  @member
	   *  @param {object} settings DataTables settings object
	   *  @param {object} data The state object to be saved
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.stateSaveCallback
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "stateSave": true,
	   *        "stateSaveCallback": function (settings, data) {
	   *          // Send an Ajax request to the server with the state object
	   *          $.ajax( {
	   *            "url": "/state_save",
	   *            "data": data,
	   *            "dataType": "json",
	   *            "method": "POST"
	   *            "success": function () {}
	   *          } );
	   *        }
	   *      } );
	   *    } );
	   */
			"fnStateSaveCallback": function fnStateSaveCallback(settings, data) {
				try {
					(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));
				} catch (e) {}
			},

			/**
	   * Callback which allows modification of the state to be saved. Called when the table
	   * has changed state a new state save is required. This method allows modification of
	   * the state saving object prior to actually doing the save, including addition or
	   * other state properties or modification. Note that for plug-in authors, you should
	   * use the `stateSaveParams` event to save parameters for a plug-in.
	   *  @type function
	   *  @param {object} settings DataTables settings object
	   *  @param {object} data The state object to be saved
	   *
	   *  @dtopt Callbacks
	   *  @name DataTable.defaults.stateSaveParams
	   *
	   *  @example
	   *    // Remove a saved filter, so filtering is never saved
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "stateSave": true,
	   *        "stateSaveParams": function (settings, data) {
	   *          data.oSearch.sSearch = "";
	   *        }
	   *      } );
	   *    } );
	   */
			"fnStateSaveParams": null,

			/**
	   * Duration for which the saved state information is considered valid. After this period
	   * has elapsed the state will be returned to the default.
	   * Value is given in seconds.
	   *  @type int
	   *  @default 7200 <i>(2 hours)</i>
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.stateDuration
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "stateDuration": 60*60*24; // 1 day
	   *      } );
	   *    } )
	   */
			"iStateDuration": 7200,

			/**
	   * When enabled DataTables will not make a request to the server for the first
	   * page draw - rather it will use the data already on the page (no sorting etc
	   * will be applied to it), thus saving on an XHR at load time. `deferLoading`
	   * is used to indicate that deferred loading is required, but it is also used
	   * to tell DataTables how many records there are in the full table (allowing
	   * the information element and pagination to be displayed correctly). In the case
	   * where a filtering is applied to the table on initial load, this can be
	   * indicated by giving the parameter as an array, where the first element is
	   * the number of records available after filtering and the second element is the
	   * number of records without filtering (allowing the table information element
	   * to be shown correctly).
	   *  @type int | array
	   *  @default null
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.deferLoading
	   *
	   *  @example
	   *    // 57 records available in the table, no filtering applied
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "serverSide": true,
	   *        "ajax": "scripts/server_processing.php",
	   *        "deferLoading": 57
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // 57 records after filtering, 100 without filtering (an initial filter applied)
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "serverSide": true,
	   *        "ajax": "scripts/server_processing.php",
	   *        "deferLoading": [ 57, 100 ],
	   *        "search": {
	   *          "search": "my_filter"
	   *        }
	   *      } );
	   *    } );
	   */
			"iDeferLoading": null,

			/**
	   * Number of rows to display on a single page when using pagination. If
	   * feature enabled (`lengthChange`) then the end user will be able to override
	   * this to a custom setting using a pop-up menu.
	   *  @type int
	   *  @default 10
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.pageLength
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "pageLength": 50
	   *      } );
	   *    } )
	   */
			"iDisplayLength": 10,

			/**
	   * Define the starting point for data display when using DataTables with
	   * pagination. Note that this parameter is the number of records, rather than
	   * the page number, so if you have 10 records per page and want to start on
	   * the third page, it should be "20".
	   *  @type int
	   *  @default 0
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.displayStart
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "displayStart": 20
	   *      } );
	   *    } )
	   */
			"iDisplayStart": 0,

			/**
	   * By default DataTables allows keyboard navigation of the table (sorting, paging,
	   * and filtering) by adding a `tabindex` attribute to the required elements. This
	   * allows you to tab through the controls and press the enter key to activate them.
	   * The tabindex is default 0, meaning that the tab follows the flow of the document.
	   * You can overrule this using this parameter if you wish. Use a value of -1 to
	   * disable built-in keyboard navigation.
	   *  @type int
	   *  @default 0
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.tabIndex
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "tabIndex": 1
	   *      } );
	   *    } );
	   */
			"iTabIndex": 0,

			/**
	   * Classes that DataTables assigns to the various components and features
	   * that it adds to the HTML table. This allows classes to be configured
	   * during initialisation in addition to through the static
	   * {@link DataTable.ext.oStdClasses} object).
	   *  @namespace
	   *  @name DataTable.defaults.classes
	   */
			"oClasses": {},

			/**
	   * All strings that DataTables uses in the user interface that it creates
	   * are defined in this object, allowing you to modified them individually or
	   * completely replace them all as required.
	   *  @namespace
	   *  @name DataTable.defaults.language
	   */
			"oLanguage": {
				/**
	    * Strings that are used for WAI-ARIA labels and controls only (these are not
	    * actually visible on the page, but will be read by screenreaders, and thus
	    * must be internationalised as well).
	    *  @namespace
	    *  @name DataTable.defaults.language.aria
	    */
				"oAria": {
					/**
	     * ARIA label that is added to the table headers when the column may be
	     * sorted ascending by activing the column (click or return when focused).
	     * Note that the column header is prefixed to this string.
	     *  @type string
	     *  @default : activate to sort column ascending
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.aria.sortAscending
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "aria": {
	     *            "sortAscending": " - click/return to sort ascending"
	     *          }
	     *        }
	     *      } );
	     *    } );
	     */
					"sSortAscending": ": activate to sort column ascending",

					/**
	     * ARIA label that is added to the table headers when the column may be
	     * sorted descending by activing the column (click or return when focused).
	     * Note that the column header is prefixed to this string.
	     *  @type string
	     *  @default : activate to sort column ascending
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.aria.sortDescending
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "aria": {
	     *            "sortDescending": " - click/return to sort descending"
	     *          }
	     *        }
	     *      } );
	     *    } );
	     */
					"sSortDescending": ": activate to sort column descending"
				},

				/**
	    * Pagination string used by DataTables for the built-in pagination
	    * control types.
	    *  @namespace
	    *  @name DataTable.defaults.language.paginate
	    */
				"oPaginate": {
					/**
	     * Text to use when using the 'full_numbers' type of pagination for the
	     * button to take the user to the first page.
	     *  @type string
	     *  @default First
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.paginate.first
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "paginate": {
	     *            "first": "First page"
	     *          }
	     *        }
	     *      } );
	     *    } );
	     */
					"sFirst": "First",

					/**
	     * Text to use when using the 'full_numbers' type of pagination for the
	     * button to take the user to the last page.
	     *  @type string
	     *  @default Last
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.paginate.last
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "paginate": {
	     *            "last": "Last page"
	     *          }
	     *        }
	     *      } );
	     *    } );
	     */
					"sLast": "Last",

					/**
	     * Text to use for the 'next' pagination button (to take the user to the
	     * next page).
	     *  @type string
	     *  @default Next
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.paginate.next
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "paginate": {
	     *            "next": "Next page"
	     *          }
	     *        }
	     *      } );
	     *    } );
	     */
					"sNext": "Next",

					/**
	     * Text to use for the 'previous' pagination button (to take the user to
	     * the previous page).
	     *  @type string
	     *  @default Previous
	     *
	     *  @dtopt Language
	     *  @name DataTable.defaults.language.paginate.previous
	     *
	     *  @example
	     *    $(document).ready( function() {
	     *      $('#example').dataTable( {
	     *        "language": {
	     *          "paginate": {
	     *            "previous": "Previous page"
	     *          }
	     *        }
	     *      } );
	     *    } );
	     */
					"sPrevious": "Previous"
				},

				/**
	    * This string is shown in preference to `zeroRecords` when the table is
	    * empty of data (regardless of filtering). Note that this is an optional
	    * parameter - if it is not given, the value of `zeroRecords` will be used
	    * instead (either the default or given value).
	    *  @type string
	    *  @default No data available in table
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.emptyTable
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "emptyTable": "No data available in table"
	    *        }
	    *      } );
	    *    } );
	    */
				"sEmptyTable": "No data available in table",

				/**
	    * This string gives information to the end user about the information
	    * that is current on display on the page. The following tokens can be
	    * used in the string and will be dynamically replaced as the table
	    * display updates. This tokens can be placed anywhere in the string, or
	    * removed as needed by the language requires:
	    *
	    * * `\_START\_` - Display index of the first record on the current page
	    * * `\_END\_` - Display index of the last record on the current page
	    * * `\_TOTAL\_` - Number of records in the table after filtering
	    * * `\_MAX\_` - Number of records in the table without filtering
	    * * `\_PAGE\_` - Current page number
	    * * `\_PAGES\_` - Total number of pages of data in the table
	    *
	    *  @type string
	    *  @default Showing _START_ to _END_ of _TOTAL_ entries
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.info
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "info": "Showing page _PAGE_ of _PAGES_"
	    *        }
	    *      } );
	    *    } );
	    */
				"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",

				/**
	    * Display information string for when the table is empty. Typically the
	    * format of this string should match `info`.
	    *  @type string
	    *  @default Showing 0 to 0 of 0 entries
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.infoEmpty
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "infoEmpty": "No entries to show"
	    *        }
	    *      } );
	    *    } );
	    */
				"sInfoEmpty": "Showing 0 to 0 of 0 entries",

				/**
	    * When a user filters the information in a table, this string is appended
	    * to the information (`info`) to give an idea of how strong the filtering
	    * is. The variable _MAX_ is dynamically updated.
	    *  @type string
	    *  @default (filtered from _MAX_ total entries)
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.infoFiltered
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "infoFiltered": " - filtering from _MAX_ records"
	    *        }
	    *      } );
	    *    } );
	    */
				"sInfoFiltered": "(filtered from _MAX_ total entries)",

				/**
	    * If can be useful to append extra information to the info string at times,
	    * and this variable does exactly that. This information will be appended to
	    * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
	    * being used) at all times.
	    *  @type string
	    *  @default <i>Empty string</i>
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.infoPostFix
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "infoPostFix": "All records shown are derived from real information."
	    *        }
	    *      } );
	    *    } );
	    */
				"sInfoPostFix": "",

				/**
	    * This decimal place operator is a little different from the other
	    * language options since DataTables doesn't output floating point
	    * numbers, so it won't ever use this for display of a number. Rather,
	    * what this parameter does is modify the sort methods of the table so
	    * that numbers which are in a format which has a character other than
	    * a period (`.`) as a decimal place will be sorted numerically.
	    *
	    * Note that numbers with different decimal places cannot be shown in
	    * the same table and still be sortable, the table must be consistent.
	    * However, multiple different tables on the page can use different
	    * decimal place characters.
	    *  @type string
	    *  @default 
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.decimal
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "decimal": ","
	    *          "thousands": "."
	    *        }
	    *      } );
	    *    } );
	    */
				"sDecimal": "",

				/**
	    * DataTables has a build in number formatter (`formatNumber`) which is
	    * used to format large numbers that are used in the table information.
	    * By default a comma is used, but this can be trivially changed to any
	    * character you wish with this parameter.
	    *  @type string
	    *  @default ,
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.thousands
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "thousands": "'"
	    *        }
	    *      } );
	    *    } );
	    */
				"sThousands": ",",

				/**
	    * Detail the action that will be taken when the drop down menu for the
	    * pagination length option is changed. The '_MENU_' variable is replaced
	    * with a default select list of 10, 25, 50 and 100, and can be replaced
	    * with a custom select box if required.
	    *  @type string
	    *  @default Show _MENU_ entries
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.lengthMenu
	    *
	    *  @example
	    *    // Language change only
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "lengthMenu": "Display _MENU_ records"
	    *        }
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Language and options change
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "lengthMenu": 'Display <select>'+
	    *            '<option value="10">10</option>'+
	    *            '<option value="20">20</option>'+
	    *            '<option value="30">30</option>'+
	    *            '<option value="40">40</option>'+
	    *            '<option value="50">50</option>'+
	    *            '<option value="-1">All</option>'+
	    *            '</select> records'
	    *        }
	    *      } );
	    *    } );
	    */
				"sLengthMenu": "Show _MENU_ entries",

				/**
	    * When using Ajax sourced data and during the first draw when DataTables is
	    * gathering the data, this message is shown in an empty row in the table to
	    * indicate to the end user the the data is being loaded. Note that this
	    * parameter is not used when loading data by server-side processing, just
	    * Ajax sourced data with client-side processing.
	    *  @type string
	    *  @default Loading...
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.loadingRecords
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "loadingRecords": "Please wait - loading..."
	    *        }
	    *      } );
	    *    } );
	    */
				"sLoadingRecords": "Loading...",

				/**
	    * Text which is displayed when the table is processing a user action
	    * (usually a sort command or similar).
	    *  @type string
	    *  @default Processing...
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.processing
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "processing": "DataTables is currently busy"
	    *        }
	    *      } );
	    *    } );
	    */
				"sProcessing": "Processing...",

				/**
	    * Details the actions that will be taken when the user types into the
	    * filtering input text box. The variable "_INPUT_", if used in the string,
	    * is replaced with the HTML text box for the filtering input allowing
	    * control over where it appears in the string. If "_INPUT_" is not given
	    * then the input box is appended to the string automatically.
	    *  @type string
	    *  @default Search:
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.search
	    *
	    *  @example
	    *    // Input text box will be appended at the end automatically
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "search": "Filter records:"
	    *        }
	    *      } );
	    *    } );
	    *
	    *  @example
	    *    // Specify where the filter should appear
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "search": "Apply filter _INPUT_ to table"
	    *        }
	    *      } );
	    *    } );
	    */
				"sSearch": "Search:",

				/**
	    * Assign a `placeholder` attribute to the search `input` element
	    *  @type string
	    *  @default 
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.searchPlaceholder
	    */
				"sSearchPlaceholder": "",

				/**
	    * All of the language information can be stored in a file on the
	    * server-side, which DataTables will look up if this parameter is passed.
	    * It must store the URL of the language file, which is in a JSON format,
	    * and the object has the same properties as the oLanguage object in the
	    * initialiser object (i.e. the above parameters). Please refer to one of
	    * the example language files to see how this works in action.
	    *  @type string
	    *  @default <i>Empty string - i.e. disabled</i>
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.url
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
	    *        }
	    *      } );
	    *    } );
	    */
				"sUrl": "",

				/**
	    * Text shown inside the table records when the is no information to be
	    * displayed after filtering. `emptyTable` is shown when there is simply no
	    * information in the table at all (regardless of filtering).
	    *  @type string
	    *  @default No matching records found
	    *
	    *  @dtopt Language
	    *  @name DataTable.defaults.language.zeroRecords
	    *
	    *  @example
	    *    $(document).ready( function() {
	    *      $('#example').dataTable( {
	    *        "language": {
	    *          "zeroRecords": "No records to display"
	    *        }
	    *      } );
	    *    } );
	    */
				"sZeroRecords": "No matching records found"
			},

			/**
	   * This parameter allows you to have define the global filtering state at
	   * initialisation time. As an object the `search` parameter must be
	   * defined, but all other parameters are optional. When `regex` is true,
	   * the search string will be treated as a regular expression, when false
	   * (default) it will be treated as a straight string. When `smart`
	   * DataTables will use it's smart filtering methods (to word match at
	   * any point in the data), when false this will not be done.
	   *  @namespace
	   *  @extends DataTable.models.oSearch
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.search
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "search": {"search": "Initial search"}
	   *      } );
	   *    } )
	   */
			"oSearch": $.extend({}, DataTable.models.oSearch),

			/**
	   * __Deprecated__ The functionality provided by this parameter has now been
	   * superseded by that provided through `ajax`, which should be used instead.
	   *
	   * By default DataTables will look for the property `data` (or `aaData` for
	   * compatibility with DataTables 1.9-) when obtaining data from an Ajax
	   * source or for server-side processing - this parameter allows that
	   * property to be changed. You can use Javascript dotted object notation to
	   * get a data source for multiple levels of nesting.
	   *  @type string
	   *  @default data
	   *
	   *  @dtopt Options
	   *  @dtopt Server-side
	   *  @name DataTable.defaults.ajaxDataProp
	   *
	   *  @deprecated 1.10. Please use `ajax` for this functionality now.
	   */
			"sAjaxDataProp": "data",

			/**
	   * __Deprecated__ The functionality provided by this parameter has now been
	   * superseded by that provided through `ajax`, which should be used instead.
	   *
	   * You can instruct DataTables to load data from an external
	   * source using this parameter (use aData if you want to pass data in you
	   * already have). Simply provide a url a JSON object can be obtained from.
	   *  @type string
	   *  @default null
	   *
	   *  @dtopt Options
	   *  @dtopt Server-side
	   *  @name DataTable.defaults.ajaxSource
	   *
	   *  @deprecated 1.10. Please use `ajax` for this functionality now.
	   */
			"sAjaxSource": null,

			/**
	   * This initialisation variable allows you to specify exactly where in the
	   * DOM you want DataTables to inject the various controls it adds to the page
	   * (for example you might want the pagination controls at the top of the
	   * table). DIV elements (with or without a custom class) can also be added to
	   * aid styling. The follow syntax is used:
	   *   <ul>
	   *     <li>The following options are allowed:
	   *       <ul>
	   *         <li>'l' - Length changing</li>
	   *         <li>'f' - Filtering input</li>
	   *         <li>'t' - The table!</li>
	   *         <li>'i' - Information</li>
	   *         <li>'p' - Pagination</li>
	   *         <li>'r' - pRocessing</li>
	   *       </ul>
	   *     </li>
	   *     <li>The following constants are allowed:
	   *       <ul>
	   *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
	   *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
	   *       </ul>
	   *     </li>
	   *     <li>The following syntax is expected:
	   *       <ul>
	   *         <li>'&lt;' and '&gt;' - div elements</li>
	   *         <li>'&lt;"class" and '&gt;' - div with a class</li>
	   *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
	   *       </ul>
	   *     </li>
	   *     <li>Examples:
	   *       <ul>
	   *         <li>'&lt;"wrapper"flipt&gt;'</li>
	   *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
	   *       </ul>
	   *     </li>
	   *   </ul>
	   *  @type string
	   *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
	   *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.dom
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
	   *      } );
	   *    } );
	   */
			"sDom": "lfrtip",

			/**
	   * Search delay option. This will throttle full table searches that use the
	   * DataTables provided search input element (it does not effect calls to
	   * `dt-api search()`, providing a delay before the search is made.
	   *  @type integer
	   *  @default 0
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.searchDelay
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "searchDelay": 200
	   *      } );
	   *    } )
	   */
			"searchDelay": null,

			/**
	   * DataTables features six different built-in options for the buttons to
	   * display for pagination control:
	   *
	   * * `numbers` - Page number buttons only
	   * * `simple` - 'Previous' and 'Next' buttons only
	   * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
	   * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
	   * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
	   * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
	   *  
	   * Further methods can be added using {@link DataTable.ext.oPagination}.
	   *  @type string
	   *  @default simple_numbers
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.pagingType
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "pagingType": "full_numbers"
	   *      } );
	   *    } )
	   */
			"sPaginationType": "simple_numbers",

			/**
	   * Enable horizontal scrolling. When a table is too wide to fit into a
	   * certain layout, or you have a large number of columns in the table, you
	   * can enable x-scrolling to show the table in a viewport, which can be
	   * scrolled. This property can be `true` which will allow the table to
	   * scroll horizontally when needed, or any CSS unit, or a number (in which
	   * case it will be treated as a pixel measurement). Setting as simply `true`
	   * is recommended.
	   *  @type boolean|string
	   *  @default <i>blank string - i.e. disabled</i>
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.scrollX
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "scrollX": true,
	   *        "scrollCollapse": true
	   *      } );
	   *    } );
	   */
			"sScrollX": "",

			/**
	   * This property can be used to force a DataTable to use more width than it
	   * might otherwise do when x-scrolling is enabled. For example if you have a
	   * table which requires to be well spaced, this parameter is useful for
	   * "over-sizing" the table, and thus forcing scrolling. This property can by
	   * any CSS unit, or a number (in which case it will be treated as a pixel
	   * measurement).
	   *  @type string
	   *  @default <i>blank string - i.e. disabled</i>
	   *
	   *  @dtopt Options
	   *  @name DataTable.defaults.scrollXInner
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "scrollX": "100%",
	   *        "scrollXInner": "110%"
	   *      } );
	   *    } );
	   */
			"sScrollXInner": "",

			/**
	   * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
	   * to the given height, and enable scrolling for any data which overflows the
	   * current viewport. This can be used as an alternative to paging to display
	   * a lot of data in a small area (although paging and scrolling can both be
	   * enabled at the same time). This property can be any CSS unit, or a number
	   * (in which case it will be treated as a pixel measurement).
	   *  @type string
	   *  @default <i>blank string - i.e. disabled</i>
	   *
	   *  @dtopt Features
	   *  @name DataTable.defaults.scrollY
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "scrollY": "200px",
	   *        "paginate": false
	   *      } );
	   *    } );
	   */
			"sScrollY": "",

			/**
	   * __Deprecated__ The functionality provided by this parameter has now been
	   * superseded by that provided through `ajax`, which should be used instead.
	   *
	   * Set the HTTP method that is used to make the Ajax call for server-side
	   * processing or Ajax sourced data.
	   *  @type string
	   *  @default GET
	   *
	   *  @dtopt Options
	   *  @dtopt Server-side
	   *  @name DataTable.defaults.serverMethod
	   *
	   *  @deprecated 1.10. Please use `ajax` for this functionality now.
	   */
			"sServerMethod": "GET",

			/**
	   * DataTables makes use of renderers when displaying HTML elements for
	   * a table. These renderers can be added or modified by plug-ins to
	   * generate suitable mark-up for a site. For example the Bootstrap
	   * integration plug-in for DataTables uses a paging button renderer to
	   * display pagination buttons in the mark-up required by Bootstrap.
	   *
	   * For further information about the renderers available see
	   * DataTable.ext.renderer
	   *  @type string|object
	   *  @default null
	   *
	   *  @name DataTable.defaults.renderer
	   *
	   */
			"renderer": null,

			/**
	   * Set the data property name that DataTables should use to get a row's id
	   * to set as the `id` property in the node.
	   *  @type string
	   *  @default DT_RowId
	   *
	   *  @name DataTable.defaults.rowId
	   */
			"rowId": "DT_RowId"
		};

		_fnHungarianMap(DataTable.defaults);

		/*
	  * Developer note - See note in model.defaults.js about the use of Hungarian
	  * notation and camel case.
	  */

		/**
	  * Column options that can be given to DataTables at initialisation time.
	  *  @namespace
	  */
		DataTable.defaults.column = {
			/**
	   * Define which column(s) an order will occur on for this column. This
	   * allows a column's ordering to take multiple columns into account when
	   * doing a sort or use the data from a different column. For example first
	   * name / last name columns make sense to do a multi-column sort over the
	   * two columns.
	   *  @type array|int
	   *  @default null <i>Takes the value of the column index automatically</i>
	   *
	   *  @name DataTable.defaults.column.orderData
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
	   *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
	   *          { "orderData": 2, "targets": [ 2 ] }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "orderData": [ 0, 1 ] },
	   *          { "orderData": [ 1, 0 ] },
	   *          { "orderData": 2 },
	   *          null,
	   *          null
	   *        ]
	   *      } );
	   *    } );
	   */
			"aDataSort": null,
			"iDataSort": -1,

			/**
	   * You can control the default ordering direction, and even alter the
	   * behaviour of the sort handler (i.e. only allow ascending ordering etc)
	   * using this parameter.
	   *  @type array
	   *  @default [ 'asc', 'desc' ]
	   *
	   *  @name DataTable.defaults.column.orderSequence
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
	   *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
	   *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          null,
	   *          { "orderSequence": [ "asc" ] },
	   *          { "orderSequence": [ "desc", "asc", "asc" ] },
	   *          { "orderSequence": [ "desc" ] },
	   *          null
	   *        ]
	   *      } );
	   *    } );
	   */
			"asSorting": ['asc', 'desc'],

			/**
	   * Enable or disable filtering on the data in this column.
	   *  @type boolean
	   *  @default true
	   *
	   *  @name DataTable.defaults.column.searchable
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "searchable": false, "targets": [ 0 ] }
	   *        ] } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "searchable": false },
	   *          null,
	   *          null,
	   *          null,
	   *          null
	   *        ] } );
	   *    } );
	   */
			"bSearchable": true,

			/**
	   * Enable or disable ordering on this column.
	   *  @type boolean
	   *  @default true
	   *
	   *  @name DataTable.defaults.column.orderable
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "orderable": false, "targets": [ 0 ] }
	   *        ] } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "orderable": false },
	   *          null,
	   *          null,
	   *          null,
	   *          null
	   *        ] } );
	   *    } );
	   */
			"bSortable": true,

			/**
	   * Enable or disable the display of this column.
	   *  @type boolean
	   *  @default true
	   *
	   *  @name DataTable.defaults.column.visible
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "visible": false, "targets": [ 0 ] }
	   *        ] } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "visible": false },
	   *          null,
	   *          null,
	   *          null,
	   *          null
	   *        ] } );
	   *    } );
	   */
			"bVisible": true,

			/**
	   * Developer definable function that is called whenever a cell is created (Ajax source,
	   * etc) or processed for input (DOM source). This can be used as a compliment to mRender
	   * allowing you to modify the DOM element (add background colour for example) when the
	   * element is available.
	   *  @type function
	   *  @param {element} td The TD node that has been created
	   *  @param {*} cellData The Data for the cell
	   *  @param {array|object} rowData The data for the whole row
	   *  @param {int} row The row index for the aoData data store
	   *  @param {int} col The column index for aoColumns
	   *
	   *  @name DataTable.defaults.column.createdCell
	   *  @dtopt Columns
	   *
	   *  @example
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [ {
	   *          "targets": [3],
	   *          "createdCell": function (td, cellData, rowData, row, col) {
	   *            if ( cellData == "1.7" ) {
	   *              $(td).css('color', 'blue')
	   *            }
	   *          }
	   *        } ]
	   *      });
	   *    } );
	   */
			"fnCreatedCell": null,

			/**
	   * This parameter has been replaced by `data` in DataTables to ensure naming
	   * consistency. `dataProp` can still be used, as there is backwards
	   * compatibility in DataTables for this option, but it is strongly
	   * recommended that you use `data` in preference to `dataProp`.
	   *  @name DataTable.defaults.column.dataProp
	   */

			/**
	   * This property can be used to read data from any data source property,
	   * including deeply nested objects / properties. `data` can be given in a
	   * number of different ways which effect its behaviour:
	   *
	   * * `integer` - treated as an array index for the data source. This is the
	   *   default that DataTables uses (incrementally increased for each column).
	   * * `string` - read an object property from the data source. There are
	   *   three 'special' options that can be used in the string to alter how
	   *   DataTables reads the data from the source object:
	   *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	   *      Javascript to read from nested objects, so to can the options
	   *      specified in `data`. For example: `browser.version` or
	   *      `browser.name`. If your object parameter name contains a period, use
	   *      `\\` to escape it - i.e. `first\\.name`.
	   *    * `[]` - Array notation. DataTables can automatically combine data
	   *      from and array source, joining the data with the characters provided
	   *      between the two brackets. For example: `name[, ]` would provide a
	   *      comma-space separated list from the source array. If no characters
	   *      are provided between the brackets, the original array source is
	   *      returned.
	   *    * `()` - Function notation. Adding `()` to the end of a parameter will
	   *      execute a function of the name given. For example: `browser()` for a
	   *      simple function on the data source, `browser.version()` for a
	   *      function in a nested property or even `browser().version` to get an
	   *      object property if the function called returns an object. Note that
	   *      function notation is recommended for use in `render` rather than
	   *      `data` as it is much simpler to use as a renderer.
	   * * `null` - use the original data source for the row rather than plucking
	   *   data directly from it. This action has effects on two other
	   *   initialisation options:
	   *    * `defaultContent` - When null is given as the `data` option and
	   *      `defaultContent` is specified for the column, the value defined by
	   *      `defaultContent` will be used for the cell.
	   *    * `render` - When null is used for the `data` option and the `render`
	   *      option is specified for the column, the whole data source for the
	   *      row is used for the renderer.
	   * * `function` - the function given will be executed whenever DataTables
	   *   needs to set or get the data for a cell in the column. The function
	   *   takes three parameters:
	   *    * Parameters:
	   *      * `{array|object}` The data source for the row
	   *      * `{string}` The type call data requested - this will be 'set' when
	   *        setting data or 'filter', 'display', 'type', 'sort' or undefined
	   *        when gathering data. Note that when `undefined` is given for the
	   *        type DataTables expects to get the raw data for the object back<
	   *      * `{*}` Data to set when the second parameter is 'set'.
	   *    * Return:
	   *      * The return value from the function is not required when 'set' is
	   *        the type of call, but otherwise the return is what will be used
	   *        for the data requested.
	   *
	   * Note that `data` is a getter and setter option. If you just require
	   * formatting of data for output, you will likely want to use `render` which
	   * is simply a getter and thus simpler to use.
	   *
	   * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
	   * name change reflects the flexibility of this property and is consistent
	   * with the naming of mRender. If 'mDataProp' is given, then it will still
	   * be used by DataTables, as it automatically maps the old name to the new
	   * if required.
	   *
	   *  @type string|int|function|null
	   *  @default null <i>Use automatically calculated column index</i>
	   *
	   *  @name DataTable.defaults.column.data
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Read table data from objects
	   *    // JSON structure for each row:
	   *    //   {
	   *    //      "engine": {value},
	   *    //      "browser": {value},
	   *    //      "platform": {value},
	   *    //      "version": {value},
	   *    //      "grade": {value}
	   *    //   }
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "ajaxSource": "sources/objects.txt",
	   *        "columns": [
	   *          { "data": "engine" },
	   *          { "data": "browser" },
	   *          { "data": "platform" },
	   *          { "data": "version" },
	   *          { "data": "grade" }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Read information from deeply nested objects
	   *    // JSON structure for each row:
	   *    //   {
	   *    //      "engine": {value},
	   *    //      "browser": {value},
	   *    //      "platform": {
	   *    //         "inner": {value}
	   *    //      },
	   *    //      "details": [
	   *    //         {value}, {value}
	   *    //      ]
	   *    //   }
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "ajaxSource": "sources/deep.txt",
	   *        "columns": [
	   *          { "data": "engine" },
	   *          { "data": "browser" },
	   *          { "data": "platform.inner" },
	   *          { "data": "platform.details.0" },
	   *          { "data": "platform.details.1" }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `data` as a function to provide different information for
	   *    // sorting, filtering and display. In this case, currency (price)
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [ {
	   *          "targets": [ 0 ],
	   *          "data": function ( source, type, val ) {
	   *            if (type === 'set') {
	   *              source.price = val;
	   *              // Store the computed dislay and filter values for efficiency
	   *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
	   *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
	   *              return;
	   *            }
	   *            else if (type === 'display') {
	   *              return source.price_display;
	   *            }
	   *            else if (type === 'filter') {
	   *              return source.price_filter;
	   *            }
	   *            // 'sort', 'type' and undefined all just use the integer
	   *            return source.price;
	   *          }
	   *        } ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using default content
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [ {
	   *          "targets": [ 0 ],
	   *          "data": null,
	   *          "defaultContent": "Click to edit"
	   *        } ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using array notation - outputting a list from an array
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [ {
	   *          "targets": [ 0 ],
	   *          "data": "name[, ]"
	   *        } ]
	   *      } );
	   *    } );
	   *
	   */
			"mData": null,

			/**
	   * This property is the rendering partner to `data` and it is suggested that
	   * when you want to manipulate data for display (including filtering,
	   * sorting etc) without altering the underlying data for the table, use this
	   * property. `render` can be considered to be the the read only companion to
	   * `data` which is read / write (then as such more complex). Like `data`
	   * this option can be given in a number of different ways to effect its
	   * behaviour:
	   *
	   * * `integer` - treated as an array index for the data source. This is the
	   *   default that DataTables uses (incrementally increased for each column).
	   * * `string` - read an object property from the data source. There are
	   *   three 'special' options that can be used in the string to alter how
	   *   DataTables reads the data from the source object:
	   *    * `.` - Dotted Javascript notation. Just as you use a `.` in
	   *      Javascript to read from nested objects, so to can the options
	   *      specified in `data`. For example: `browser.version` or
	   *      `browser.name`. If your object parameter name contains a period, use
	   *      `\\` to escape it - i.e. `first\\.name`.
	   *    * `[]` - Array notation. DataTables can automatically combine data
	   *      from and array source, joining the data with the characters provided
	   *      between the two brackets. For example: `name[, ]` would provide a
	   *      comma-space separated list from the source array. If no characters
	   *      are provided between the brackets, the original array source is
	   *      returned.
	   *    * `()` - Function notation. Adding `()` to the end of a parameter will
	   *      execute a function of the name given. For example: `browser()` for a
	   *      simple function on the data source, `browser.version()` for a
	   *      function in a nested property or even `browser().version` to get an
	   *      object property if the function called returns an object.
	   * * `object` - use different data for the different data types requested by
	   *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
	   *   of the object is the data type the property refers to and the value can
	   *   defined using an integer, string or function using the same rules as
	   *   `render` normally does. Note that an `_` option _must_ be specified.
	   *   This is the default value to use if you haven't specified a value for
	   *   the data type requested by DataTables.
	   * * `function` - the function given will be executed whenever DataTables
	   *   needs to set or get the data for a cell in the column. The function
	   *   takes three parameters:
	   *    * Parameters:
	   *      * {array|object} The data source for the row (based on `data`)
	   *      * {string} The type call data requested - this will be 'filter',
	   *        'display', 'type' or 'sort'.
	   *      * {array|object} The full data source for the row (not based on
	   *        `data`)
	   *    * Return:
	   *      * The return value from the function is what will be used for the
	   *        data requested.
	   *
	   *  @type string|int|function|object|null
	   *  @default null Use the data source value.
	   *
	   *  @name DataTable.defaults.column.render
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Create a comma separated list from an array of objects
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "ajaxSource": "sources/deep.txt",
	   *        "columns": [
	   *          { "data": "engine" },
	   *          { "data": "browser" },
	   *          {
	   *            "data": "platform",
	   *            "render": "[, ].name"
	   *          }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Execute a function to obtain data
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [ {
	   *          "targets": [ 0 ],
	   *          "data": null, // Use the full data source object for the renderer's source
	   *          "render": "browserName()"
	   *        } ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // As an object, extracting different data for the different types
	   *    // This would be used with a data source such as:
	   *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
	   *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
	   *    // (which has both forms) is used for filtering for if a user inputs either format, while
	   *    // the formatted phone number is the one that is shown in the table.
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [ {
	   *          "targets": [ 0 ],
	   *          "data": null, // Use the full data source object for the renderer's source
	   *          "render": {
	   *            "_": "phone",
	   *            "filter": "phone_filter",
	   *            "display": "phone_display"
	   *          }
	   *        } ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Use as a function to create a link from the data source
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [ {
	   *          "targets": [ 0 ],
	   *          "data": "download_link",
	   *          "render": function ( data, type, full ) {
	   *            return '<a href="'+data+'">Download</a>';
	   *          }
	   *        } ]
	   *      } );
	   *    } );
	   */
			"mRender": null,

			/**
	   * Change the cell type created for the column - either TD cells or TH cells. This
	   * can be useful as TH cells have semantic meaning in the table body, allowing them
	   * to act as a header for a row (you may wish to add scope='row' to the TH elements).
	   *  @type string
	   *  @default td
	   *
	   *  @name DataTable.defaults.column.cellType
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Make the first column use TH cells
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [ {
	   *          "targets": [ 0 ],
	   *          "cellType": "th"
	   *        } ]
	   *      } );
	   *    } );
	   */
			"sCellType": "td",

			/**
	   * Class to give to each cell in this column.
	   *  @type string
	   *  @default <i>Empty string</i>
	   *
	   *  @name DataTable.defaults.column.class
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "class": "my_class", "targets": [ 0 ] }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "class": "my_class" },
	   *          null,
	   *          null,
	   *          null,
	   *          null
	   *        ]
	   *      } );
	   *    } );
	   */
			"sClass": "",

			/**
	   * When DataTables calculates the column widths to assign to each column,
	   * it finds the longest string in each column and then constructs a
	   * temporary table and reads the widths from that. The problem with this
	   * is that "mmm" is much wider then "iiii", but the latter is a longer
	   * string - thus the calculation can go wrong (doing it properly and putting
	   * it into an DOM object and measuring that is horribly(!) slow). Thus as
	   * a "work around" we provide this option. It will append its value to the
	   * text that is found to be the longest string for the column - i.e. padding.
	   * Generally you shouldn't need this!
	   *  @type string
	   *  @default <i>Empty string<i>
	   *
	   *  @name DataTable.defaults.column.contentPadding
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          null,
	   *          null,
	   *          null,
	   *          {
	   *            "contentPadding": "mmm"
	   *          }
	   *        ]
	   *      } );
	   *    } );
	   */
			"sContentPadding": "",

			/**
	   * Allows a default value to be given for a column's data, and will be used
	   * whenever a null data source is encountered (this can be because `data`
	   * is set to null, or because the data source itself is null).
	   *  @type string
	   *  @default null
	   *
	   *  @name DataTable.defaults.column.defaultContent
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          {
	   *            "data": null,
	   *            "defaultContent": "Edit",
	   *            "targets": [ -1 ]
	   *          }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          null,
	   *          null,
	   *          null,
	   *          {
	   *            "data": null,
	   *            "defaultContent": "Edit"
	   *          }
	   *        ]
	   *      } );
	   *    } );
	   */
			"sDefaultContent": null,

			/**
	   * This parameter is only used in DataTables' server-side processing. It can
	   * be exceptionally useful to know what columns are being displayed on the
	   * client side, and to map these to database fields. When defined, the names
	   * also allow DataTables to reorder information from the server if it comes
	   * back in an unexpected order (i.e. if you switch your columns around on the
	   * client-side, your server-side code does not also need updating).
	   *  @type string
	   *  @default <i>Empty string</i>
	   *
	   *  @name DataTable.defaults.column.name
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "name": "engine", "targets": [ 0 ] },
	   *          { "name": "browser", "targets": [ 1 ] },
	   *          { "name": "platform", "targets": [ 2 ] },
	   *          { "name": "version", "targets": [ 3 ] },
	   *          { "name": "grade", "targets": [ 4 ] }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "name": "engine" },
	   *          { "name": "browser" },
	   *          { "name": "platform" },
	   *          { "name": "version" },
	   *          { "name": "grade" }
	   *        ]
	   *      } );
	   *    } );
	   */
			"sName": "",

			/**
	   * Defines a data source type for the ordering which can be used to read
	   * real-time information from the table (updating the internally cached
	   * version) prior to ordering. This allows ordering to occur on user
	   * editable elements such as form inputs.
	   *  @type string
	   *  @default std
	   *
	   *  @name DataTable.defaults.column.orderDataType
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
	   *          { "type": "numeric", "targets": [ 3 ] },
	   *          { "orderDataType": "dom-select", "targets": [ 4 ] },
	   *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          null,
	   *          null,
	   *          { "orderDataType": "dom-text" },
	   *          { "orderDataType": "dom-text", "type": "numeric" },
	   *          { "orderDataType": "dom-select" },
	   *          { "orderDataType": "dom-checkbox" }
	   *        ]
	   *      } );
	   *    } );
	   */
			"sSortDataType": "std",

			/**
	   * The title of this column.
	   *  @type string
	   *  @default null <i>Derived from the 'TH' value for this column in the
	   *    original HTML table.</i>
	   *
	   *  @name DataTable.defaults.column.title
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "title": "My column title", "targets": [ 0 ] }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "title": "My column title" },
	   *          null,
	   *          null,
	   *          null,
	   *          null
	   *        ]
	   *      } );
	   *    } );
	   */
			"sTitle": null,

			/**
	   * The type allows you to specify how the data for this column will be
	   * ordered. Four types (string, numeric, date and html (which will strip
	   * HTML tags before ordering)) are currently available. Note that only date
	   * formats understood by Javascript's Date() object will be accepted as type
	   * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
	   * 'numeric', 'date' or 'html' (by default). Further types can be adding
	   * through plug-ins.
	   *  @type string
	   *  @default null <i>Auto-detected from raw data</i>
	   *
	   *  @name DataTable.defaults.column.type
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "type": "html", "targets": [ 0 ] }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "type": "html" },
	   *          null,
	   *          null,
	   *          null,
	   *          null
	   *        ]
	   *      } );
	   *    } );
	   */
			"sType": null,

			/**
	   * Defining the width of the column, this parameter may take any CSS value
	   * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
	   * been given a specific width through this interface ensuring that the table
	   * remains readable.
	   *  @type string
	   *  @default null <i>Automatic</i>
	   *
	   *  @name DataTable.defaults.column.width
	   *  @dtopt Columns
	   *
	   *  @example
	   *    // Using `columnDefs`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columnDefs": [
	   *          { "width": "20%", "targets": [ 0 ] }
	   *        ]
	   *      } );
	   *    } );
	   *
	   *  @example
	   *    // Using `columns`
	   *    $(document).ready( function() {
	   *      $('#example').dataTable( {
	   *        "columns": [
	   *          { "width": "20%" },
	   *          null,
	   *          null,
	   *          null,
	   *          null
	   *        ]
	   *      } );
	   *    } );
	   */
			"sWidth": null
		};

		_fnHungarianMap(DataTable.defaults.column);

		/**
	  * DataTables settings object - this holds all the information needed for a
	  * given table, including configuration, data and current application of the
	  * table options. DataTables does not have a single instance for each DataTable
	  * with the settings attached to that instance, but rather instances of the
	  * DataTable "class" are created on-the-fly as needed (typically by a
	  * $().dataTable() call) and the settings object is then applied to that
	  * instance.
	  *
	  * Note that this object is related to {@link DataTable.defaults} but this
	  * one is the internal data store for DataTables's cache of columns. It should
	  * NOT be manipulated outside of DataTables. Any configuration should be done
	  * through the initialisation options.
	  *  @namespace
	  *  @todo Really should attach the settings object to individual instances so we
	  *    don't need to create new instances on each $().dataTable() call (if the
	  *    table already exists). It would also save passing oSettings around and
	  *    into every single function. However, this is a very significant
	  *    architecture change for DataTables and will almost certainly break
	  *    backwards compatibility with older installations. This is something that
	  *    will be done in 2.0.
	  */
		DataTable.models.oSettings = {
			/**
	   * Primary features of DataTables and their enablement state.
	   *  @namespace
	   */
			"oFeatures": {

				/**
	    * Flag to say if DataTables should automatically try to calculate the
	    * optimum table and columns widths (true) or not (false).
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bAutoWidth": null,

				/**
	    * Delay the creation of TR and TD elements until they are actually
	    * needed by a driven page draw. This can give a significant speed
	    * increase for Ajax source and Javascript source data, but makes no
	    * difference at all fro DOM and server-side processing tables.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bDeferRender": null,

				/**
	    * Enable filtering on the table or not. Note that if this is disabled
	    * then there is no filtering at all on the table, including fnFilter.
	    * To just remove the filtering input use sDom and remove the 'f' option.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bFilter": null,

				/**
	    * Table information element (the 'Showing x of y records' div) enable
	    * flag.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bInfo": null,

				/**
	    * Present a user control allowing the end user to change the page size
	    * when pagination is enabled.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bLengthChange": null,

				/**
	    * Pagination enabled or not. Note that if this is disabled then length
	    * changing must also be disabled.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bPaginate": null,

				/**
	    * Processing indicator enable flag whenever DataTables is enacting a
	    * user request - typically an Ajax request for server-side processing.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bProcessing": null,

				/**
	    * Server-side processing enabled flag - when enabled DataTables will
	    * get all data from the server for every draw - there is no filtering,
	    * sorting or paging done on the client-side.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bServerSide": null,

				/**
	    * Sorting enablement flag.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bSort": null,

				/**
	    * Multi-column sorting
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bSortMulti": null,

				/**
	    * Apply a class to the columns which are being sorted to provide a
	    * visual highlight or not. This can slow things down when enabled since
	    * there is a lot of DOM interaction.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bSortClasses": null,

				/**
	    * State saving enablement flag.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bStateSave": null
			},

			/**
	   * Scrolling settings for a table.
	   *  @namespace
	   */
			"oScroll": {
				/**
	    * When the table is shorter in height than sScrollY, collapse the
	    * table container down to the height of the table (when true).
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type boolean
	    */
				"bCollapse": null,

				/**
	    * Width of the scrollbar for the web-browser's platform. Calculated
	    * during table initialisation.
	    *  @type int
	    *  @default 0
	    */
				"iBarWidth": 0,

				/**
	    * Viewport width for horizontal scrolling. Horizontal scrolling is
	    * disabled if an empty string.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type string
	    */
				"sX": null,

				/**
	    * Width to expand the table to when using x-scrolling. Typically you
	    * should not need to use this.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type string
	    *  @deprecated
	    */
				"sXInner": null,

				/**
	    * Viewport height for vertical scrolling. Vertical scrolling is disabled
	    * if an empty string.
	    * Note that this parameter will be set by the initialisation routine. To
	    * set a default use {@link DataTable.defaults}.
	    *  @type string
	    */
				"sY": null
			},

			/**
	   * Language information for the table.
	   *  @namespace
	   *  @extends DataTable.defaults.oLanguage
	   */
			"oLanguage": {
				/**
	    * Information callback function. See
	    * {@link DataTable.defaults.fnInfoCallback}
	    *  @type function
	    *  @default null
	    */
				"fnInfoCallback": null
			},

			/**
	   * Browser support parameters
	   *  @namespace
	   */
			"oBrowser": {
				/**
	    * Indicate if the browser incorrectly calculates width:100% inside a
	    * scrolling element (IE6/7)
	    *  @type boolean
	    *  @default false
	    */
				"bScrollOversize": false,

				/**
	    * Determine if the vertical scrollbar is on the right or left of the
	    * scrolling container - needed for rtl language layout, although not
	    * all browsers move the scrollbar (Safari).
	    *  @type boolean
	    *  @default false
	    */
				"bScrollbarLeft": false,

				/**
	    * Flag for if `getBoundingClientRect` is fully supported or not
	    *  @type boolean
	    *  @default false
	    */
				"bBounding": false,

				/**
	    * Browser scrollbar width
	    *  @type integer
	    *  @default 0
	    */
				"barWidth": 0
			},

			"ajax": null,

			/**
	   * Array referencing the nodes which are used for the features. The
	   * parameters of this object match what is allowed by sDom - i.e.
	   *   <ul>
	   *     <li>'l' - Length changing</li>
	   *     <li>'f' - Filtering input</li>
	   *     <li>'t' - The table!</li>
	   *     <li>'i' - Information</li>
	   *     <li>'p' - Pagination</li>
	   *     <li>'r' - pRocessing</li>
	   *   </ul>
	   *  @type array
	   *  @default []
	   */
			"aanFeatures": [],

			/**
	   * Store data information - see {@link DataTable.models.oRow} for detailed
	   * information.
	   *  @type array
	   *  @default []
	   */
			"aoData": [],

			/**
	   * Array of indexes which are in the current display (after filtering etc)
	   *  @type array
	   *  @default []
	   */
			"aiDisplay": [],

			/**
	   * Array of indexes for display - no filtering
	   *  @type array
	   *  @default []
	   */
			"aiDisplayMaster": [],

			/**
	   * Map of row ids to data indexes
	   *  @type object
	   *  @default {}
	   */
			"aIds": {},

			/**
	   * Store information about each column that is in use
	   *  @type array
	   *  @default []
	   */
			"aoColumns": [],

			/**
	   * Store information about the table's header
	   *  @type array
	   *  @default []
	   */
			"aoHeader": [],

			/**
	   * Store information about the table's footer
	   *  @type array
	   *  @default []
	   */
			"aoFooter": [],

			/**
	   * Store the applied global search information in case we want to force a
	   * research or compare the old search to a new one.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @namespace
	   *  @extends DataTable.models.oSearch
	   */
			"oPreviousSearch": {},

			/**
	   * Store the applied search for each column - see
	   * {@link DataTable.models.oSearch} for the format that is used for the
	   * filtering information for each column.
	   *  @type array
	   *  @default []
	   */
			"aoPreSearchCols": [],

			/**
	   * Sorting that is applied to the table. Note that the inner arrays are
	   * used in the following manner:
	   * <ul>
	   *   <li>Index 0 - column number</li>
	   *   <li>Index 1 - current sorting direction</li>
	   * </ul>
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type array
	   *  @todo These inner arrays should really be objects
	   */
			"aaSorting": null,

			/**
	   * Sorting that is always applied to the table (i.e. prefixed in front of
	   * aaSorting).
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type array
	   *  @default []
	   */
			"aaSortingFixed": [],

			/**
	   * Classes to use for the striping of a table.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type array
	   *  @default []
	   */
			"asStripeClasses": null,

			/**
	   * If restoring a table - we should restore its striping classes as well
	   *  @type array
	   *  @default []
	   */
			"asDestroyStripes": [],

			/**
	   * If restoring a table - we should restore its width
	   *  @type int
	   *  @default 0
	   */
			"sDestroyWidth": 0,

			/**
	   * Callback functions array for every time a row is inserted (i.e. on a draw).
	   *  @type array
	   *  @default []
	   */
			"aoRowCallback": [],

			/**
	   * Callback functions for the header on each draw.
	   *  @type array
	   *  @default []
	   */
			"aoHeaderCallback": [],

			/**
	   * Callback function for the footer on each draw.
	   *  @type array
	   *  @default []
	   */
			"aoFooterCallback": [],

			/**
	   * Array of callback functions for draw callback functions
	   *  @type array
	   *  @default []
	   */
			"aoDrawCallback": [],

			/**
	   * Array of callback functions for row created function
	   *  @type array
	   *  @default []
	   */
			"aoRowCreatedCallback": [],

			/**
	   * Callback functions for just before the table is redrawn. A return of
	   * false will be used to cancel the draw.
	   *  @type array
	   *  @default []
	   */
			"aoPreDrawCallback": [],

			/**
	   * Callback functions for when the table has been initialised.
	   *  @type array
	   *  @default []
	   */
			"aoInitComplete": [],

			/**
	   * Callbacks for modifying the settings to be stored for state saving, prior to
	   * saving state.
	   *  @type array
	   *  @default []
	   */
			"aoStateSaveParams": [],

			/**
	   * Callbacks for modifying the settings that have been stored for state saving
	   * prior to using the stored values to restore the state.
	   *  @type array
	   *  @default []
	   */
			"aoStateLoadParams": [],

			/**
	   * Callbacks for operating on the settings object once the saved state has been
	   * loaded
	   *  @type array
	   *  @default []
	   */
			"aoStateLoaded": [],

			/**
	   * Cache the table ID for quick access
	   *  @type string
	   *  @default <i>Empty string</i>
	   */
			"sTableId": "",

			/**
	   * The TABLE node for the main table
	   *  @type node
	   *  @default null
	   */
			"nTable": null,

			/**
	   * Permanent ref to the thead element
	   *  @type node
	   *  @default null
	   */
			"nTHead": null,

			/**
	   * Permanent ref to the tfoot element - if it exists
	   *  @type node
	   *  @default null
	   */
			"nTFoot": null,

			/**
	   * Permanent ref to the tbody element
	   *  @type node
	   *  @default null
	   */
			"nTBody": null,

			/**
	   * Cache the wrapper node (contains all DataTables controlled elements)
	   *  @type node
	   *  @default null
	   */
			"nTableWrapper": null,

			/**
	   * Indicate if when using server-side processing the loading of data
	   * should be deferred until the second draw.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type boolean
	   *  @default false
	   */
			"bDeferLoading": false,

			/**
	   * Indicate if all required information has been read in
	   *  @type boolean
	   *  @default false
	   */
			"bInitialised": false,

			/**
	   * Information about open rows. Each object in the array has the parameters
	   * 'nTr' and 'nParent'
	   *  @type array
	   *  @default []
	   */
			"aoOpenRows": [],

			/**
	   * Dictate the positioning of DataTables' control elements - see
	   * {@link DataTable.model.oInit.sDom}.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type string
	   *  @default null
	   */
			"sDom": null,

			/**
	   * Search delay (in mS)
	   *  @type integer
	   *  @default null
	   */
			"searchDelay": null,

			/**
	   * Which type of pagination should be used.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type string
	   *  @default two_button
	   */
			"sPaginationType": "two_button",

			/**
	   * The state duration (for `stateSave`) in seconds.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type int
	   *  @default 0
	   */
			"iStateDuration": 0,

			/**
	   * Array of callback functions for state saving. Each array element is an
	   * object with the following parameters:
	   *   <ul>
	   *     <li>function:fn - function to call. Takes two parameters, oSettings
	   *       and the JSON string to save that has been thus far created. Returns
	   *       a JSON string to be inserted into a json object
	   *       (i.e. '"param": [ 0, 1, 2]')</li>
	   *     <li>string:sName - name of callback</li>
	   *   </ul>
	   *  @type array
	   *  @default []
	   */
			"aoStateSave": [],

			/**
	   * Array of callback functions for state loading. Each array element is an
	   * object with the following parameters:
	   *   <ul>
	   *     <li>function:fn - function to call. Takes two parameters, oSettings
	   *       and the object stored. May return false to cancel state loading</li>
	   *     <li>string:sName - name of callback</li>
	   *   </ul>
	   *  @type array
	   *  @default []
	   */
			"aoStateLoad": [],

			/**
	   * State that was saved. Useful for back reference
	   *  @type object
	   *  @default null
	   */
			"oSavedState": null,

			/**
	   * State that was loaded. Useful for back reference
	   *  @type object
	   *  @default null
	   */
			"oLoadedState": null,

			/**
	   * Source url for AJAX data for the table.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type string
	   *  @default null
	   */
			"sAjaxSource": null,

			/**
	   * Property from a given object from which to read the table data from. This
	   * can be an empty string (when not server-side processing), in which case
	   * it is  assumed an an array is given directly.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type string
	   */
			"sAjaxDataProp": null,

			/**
	   * Note if draw should be blocked while getting data
	   *  @type boolean
	   *  @default true
	   */
			"bAjaxDataGet": true,

			/**
	   * The last jQuery XHR object that was used for server-side data gathering.
	   * This can be used for working with the XHR information in one of the
	   * callbacks
	   *  @type object
	   *  @default null
	   */
			"jqXHR": null,

			/**
	   * JSON returned from the server in the last Ajax request
	   *  @type object
	   *  @default undefined
	   */
			"json": undefined,

			/**
	   * Data submitted as part of the last Ajax request
	   *  @type object
	   *  @default undefined
	   */
			"oAjaxData": undefined,

			/**
	   * Function to get the server-side data.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type function
	   */
			"fnServerData": null,

			/**
	   * Functions which are called prior to sending an Ajax request so extra
	   * parameters can easily be sent to the server
	   *  @type array
	   *  @default []
	   */
			"aoServerParams": [],

			/**
	   * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
	   * required).
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type string
	   */
			"sServerMethod": null,

			/**
	   * Format numbers for display.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type function
	   */
			"fnFormatNumber": null,

			/**
	   * List of options that can be used for the user selectable length menu.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type array
	   *  @default []
	   */
			"aLengthMenu": null,

			/**
	   * Counter for the draws that the table does. Also used as a tracker for
	   * server-side processing
	   *  @type int
	   *  @default 0
	   */
			"iDraw": 0,

			/**
	   * Indicate if a redraw is being done - useful for Ajax
	   *  @type boolean
	   *  @default false
	   */
			"bDrawing": false,

			/**
	   * Draw index (iDraw) of the last error when parsing the returned data
	   *  @type int
	   *  @default -1
	   */
			"iDrawError": -1,

			/**
	   * Paging display length
	   *  @type int
	   *  @default 10
	   */
			"_iDisplayLength": 10,

			/**
	   * Paging start point - aiDisplay index
	   *  @type int
	   *  @default 0
	   */
			"_iDisplayStart": 0,

			/**
	   * Server-side processing - number of records in the result set
	   * (i.e. before filtering), Use fnRecordsTotal rather than
	   * this property to get the value of the number of records, regardless of
	   * the server-side processing setting.
	   *  @type int
	   *  @default 0
	   *  @private
	   */
			"_iRecordsTotal": 0,

			/**
	   * Server-side processing - number of records in the current display set
	   * (i.e. after filtering). Use fnRecordsDisplay rather than
	   * this property to get the value of the number of records, regardless of
	   * the server-side processing setting.
	   *  @type boolean
	   *  @default 0
	   *  @private
	   */
			"_iRecordsDisplay": 0,

			/**
	   * Flag to indicate if jQuery UI marking and classes should be used.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type boolean
	   */
			"bJUI": null,

			/**
	   * The classes to use for the table
	   *  @type object
	   *  @default {}
	   */
			"oClasses": {},

			/**
	   * Flag attached to the settings object so you can check in the draw
	   * callback if filtering has been done in the draw. Deprecated in favour of
	   * events.
	   *  @type boolean
	   *  @default false
	   *  @deprecated
	   */
			"bFiltered": false,

			/**
	   * Flag attached to the settings object so you can check in the draw
	   * callback if sorting has been done in the draw. Deprecated in favour of
	   * events.
	   *  @type boolean
	   *  @default false
	   *  @deprecated
	   */
			"bSorted": false,

			/**
	   * Indicate that if multiple rows are in the header and there is more than
	   * one unique cell per column, if the top one (true) or bottom one (false)
	   * should be used for sorting / title by DataTables.
	   * Note that this parameter will be set by the initialisation routine. To
	   * set a default use {@link DataTable.defaults}.
	   *  @type boolean
	   */
			"bSortCellsTop": null,

			/**
	   * Initialisation object that is used for the table
	   *  @type object
	   *  @default null
	   */
			"oInit": null,

			/**
	   * Destroy callback functions - for plug-ins to attach themselves to the
	   * destroy so they can clean up markup and events.
	   *  @type array
	   *  @default []
	   */
			"aoDestroyCallback": [],

			/**
	   * Get the number of records in the current record set, before filtering
	   *  @type function
	   */
			"fnRecordsTotal": function fnRecordsTotal() {
				return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;
			},

			/**
	   * Get the number of records in the current record set, after filtering
	   *  @type function
	   */
			"fnRecordsDisplay": function fnRecordsDisplay() {
				return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;
			},

			/**
	   * Get the display end point - aiDisplay index
	   *  @type function
	   */
			"fnDisplayEnd": function fnDisplayEnd() {
				var len = this._iDisplayLength,
				    start = this._iDisplayStart,
				    calc = start + len,
				    records = this.aiDisplay.length,
				    features = this.oFeatures,
				    paginate = features.bPaginate;

				if (features.bServerSide) {
					return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);
				} else {
					return !paginate || calc > records || len === -1 ? records : calc;
				}
			},

			/**
	   * The DataTables object for this table
	   *  @type object
	   *  @default null
	   */
			"oInstance": null,

			/**
	   * Unique identifier for each instance of the DataTables object. If there
	   * is an ID on the table node, then it takes that value, otherwise an
	   * incrementing internal counter is used.
	   *  @type string
	   *  @default null
	   */
			"sInstance": null,

			/**
	   * tabindex attribute value that is added to DataTables control elements, allowing
	   * keyboard navigation of the table and its controls.
	   */
			"iTabIndex": 0,

			/**
	   * DIV container for the footer scrolling table if scrolling
	   */
			"nScrollHead": null,

			/**
	   * DIV container for the footer scrolling table if scrolling
	   */
			"nScrollFoot": null,

			/**
	   * Last applied sort
	   *  @type array
	   *  @default []
	   */
			"aLastSort": [],

			/**
	   * Stored plug-in instances
	   *  @type object
	   *  @default {}
	   */
			"oPlugins": {},

			/**
	   * Function used to get a row's id from the row's data
	   *  @type function
	   *  @default null
	   */
			"rowIdFn": null,

			/**
	   * Data location where to store a row's id
	   *  @type string
	   *  @default null
	   */
			"rowId": null
		};

		/**
	  * Extension object for DataTables that is used to provide all extension
	  * options.
	  *
	  * Note that the `DataTable.ext` object is available through
	  * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	  * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	  *  @namespace
	  *  @extends DataTable.models.ext
	  */

		/**
	  * DataTables extensions
	  * 
	  * This namespace acts as a collection area for plug-ins that can be used to
	  * extend DataTables capabilities. Indeed many of the build in methods
	  * use this method to provide their own capabilities (sorting methods for
	  * example).
	  *
	  * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	  * reasons
	  *
	  *  @namespace
	  */
		DataTable.ext = _ext = {
			/**
	   * Buttons. For use with the Buttons extension for DataTables. This is
	   * defined here so other extensions can define buttons regardless of load
	   * order. It is _not_ used by DataTables core.
	   *
	   *  @type object
	   *  @default {}
	   */
			buttons: {},

			/**
	   * Element class names
	   *
	   *  @type object
	   *  @default {}
	   */
			classes: {},

			/**
	   * DataTables build type (expanded by the download builder)
	   *
	   *  @type string
	   */
			builder: "-source-",

			/**
	   * Error reporting.
	   * 
	   * How should DataTables report an error. Can take the value 'alert',
	   * 'throw', 'none' or a function.
	   *
	   *  @type string|function
	   *  @default alert
	   */
			errMode: "alert",

			/**
	   * Feature plug-ins.
	   * 
	   * This is an array of objects which describe the feature plug-ins that are
	   * available to DataTables. These feature plug-ins are then available for
	   * use through the `dom` initialisation option.
	   * 
	   * Each feature plug-in is described by an object which must have the
	   * following properties:
	   * 
	   * * `fnInit` - function that is used to initialise the plug-in,
	   * * `cFeature` - a character so the feature can be enabled by the `dom`
	   *   instillation option. This is case sensitive.
	   *
	   * The `fnInit` function has the following input parameters:
	   *
	   * 1. `{object}` DataTables settings object: see
	   *    {@link DataTable.models.oSettings}
	   *
	   * And the following return is expected:
	   * 
	   * * {node|null} The element which contains your feature. Note that the
	   *   return may also be void if your plug-in does not require to inject any
	   *   DOM elements into DataTables control (`dom`) - for example this might
	   *   be useful when developing a plug-in which allows table control via
	   *   keyboard entry
	   *
	   *  @type array
	   *
	   *  @example
	   *    $.fn.dataTable.ext.features.push( {
	   *      "fnInit": function( oSettings ) {
	   *        return new TableTools( { "oDTSettings": oSettings } );
	   *      },
	   *      "cFeature": "T"
	   *    } );
	   */
			feature: [],

			/**
	   * Row searching.
	   * 
	   * This method of searching is complimentary to the default type based
	   * searching, and a lot more comprehensive as it allows you complete control
	   * over the searching logic. Each element in this array is a function
	   * (parameters described below) that is called for every row in the table,
	   * and your logic decides if it should be included in the searching data set
	   * or not.
	   *
	   * Searching functions have the following input parameters:
	   *
	   * 1. `{object}` DataTables settings object: see
	   *    {@link DataTable.models.oSettings}
	   * 2. `{array|object}` Data for the row to be processed (same as the
	   *    original format that was passed in as the data source, or an array
	   *    from a DOM data source
	   * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
	   *    can be useful to retrieve the `TR` element if you need DOM interaction.
	   *
	   * And the following return is expected:
	   *
	   * * {boolean} Include the row in the searched result set (true) or not
	   *   (false)
	   *
	   * Note that as with the main search ability in DataTables, technically this
	   * is "filtering", since it is subtractive. However, for consistency in
	   * naming we call it searching here.
	   *
	   *  @type array
	   *  @default []
	   *
	   *  @example
	   *    // The following example shows custom search being applied to the
	   *    // fourth column (i.e. the data[3] index) based on two input values
	   *    // from the end-user, matching the data in a certain range.
	   *    $.fn.dataTable.ext.search.push(
	   *      function( settings, data, dataIndex ) {
	   *        var min = document.getElementById('min').value * 1;
	   *        var max = document.getElementById('max').value * 1;
	   *        var version = data[3] == "-" ? 0 : data[3]*1;
	   *
	   *        if ( min == "" && max == "" ) {
	   *          return true;
	   *        }
	   *        else if ( min == "" && version < max ) {
	   *          return true;
	   *        }
	   *        else if ( min < version && "" == max ) {
	   *          return true;
	   *        }
	   *        else if ( min < version && version < max ) {
	   *          return true;
	   *        }
	   *        return false;
	   *      }
	   *    );
	   */
			search: [],

			/**
	   * Selector extensions
	   *
	   * The `selector` option can be used to extend the options available for the
	   * selector modifier options (`selector-modifier` object data type) that
	   * each of the three built in selector types offer (row, column and cell +
	   * their plural counterparts). For example the Select extension uses this
	   * mechanism to provide an option to select only rows, columns and cells
	   * that have been marked as selected by the end user (`{selected: true}`),
	   * which can be used in conjunction with the existing built in selector
	   * options.
	   *
	   * Each property is an array to which functions can be pushed. The functions
	   * take three attributes:
	   *
	   * * Settings object for the host table
	   * * Options object (`selector-modifier` object type)
	   * * Array of selected item indexes
	   *
	   * The return is an array of the resulting item indexes after the custom
	   * selector has been applied.
	   *
	   *  @type object
	   */
			selector: {
				cell: [],
				column: [],
				row: []
			},

			/**
	   * Internal functions, exposed for used in plug-ins.
	   * 
	   * Please note that you should not need to use the internal methods for
	   * anything other than a plug-in (and even then, try to avoid if possible).
	   * The internal function may change between releases.
	   *
	   *  @type object
	   *  @default {}
	   */
			internal: {},

			/**
	   * Legacy configuration options. Enable and disable legacy options that
	   * are available in DataTables.
	   *
	   *  @type object
	   */
			legacy: {
				/**
	    * Enable / disable DataTables 1.9 compatible server-side processing
	    * requests
	    *
	    *  @type boolean
	    *  @default null
	    */
				ajax: null
			},

			/**
	   * Pagination plug-in methods.
	   * 
	   * Each entry in this object is a function and defines which buttons should
	   * be shown by the pagination rendering method that is used for the table:
	   * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
	   * buttons are displayed in the document, while the functions here tell it
	   * what buttons to display. This is done by returning an array of button
	   * descriptions (what each button will do).
	   *
	   * Pagination types (the four built in options and any additional plug-in
	   * options defined here) can be used through the `paginationType`
	   * initialisation parameter.
	   *
	   * The functions defined take two parameters:
	   *
	   * 1. `{int} page` The current page index
	   * 2. `{int} pages` The number of pages in the table
	   *
	   * Each function is expected to return an array where each element of the
	   * array can be one of:
	   *
	   * * `first` - Jump to first page when activated
	   * * `last` - Jump to last page when activated
	   * * `previous` - Show previous page when activated
	   * * `next` - Show next page when activated
	   * * `{int}` - Show page of the index given
	   * * `{array}` - A nested array containing the above elements to add a
	   *   containing 'DIV' element (might be useful for styling).
	   *
	   * Note that DataTables v1.9- used this object slightly differently whereby
	   * an object with two functions would be defined for each plug-in. That
	   * ability is still supported by DataTables 1.10+ to provide backwards
	   * compatibility, but this option of use is now decremented and no longer
	   * documented in DataTables 1.10+.
	   *
	   *  @type object
	   *  @default {}
	   *
	   *  @example
	   *    // Show previous, next and current page buttons only
	   *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
	   *      return [ 'previous', page, 'next' ];
	   *    };
	   */
			pager: {},

			renderer: {
				pageButton: {},
				header: {}
			},

			/**
	   * Ordering plug-ins - custom data source
	   * 
	   * The extension options for ordering of data available here is complimentary
	   * to the default type based ordering that DataTables typically uses. It
	   * allows much greater control over the the data that is being used to
	   * order a column, but is necessarily therefore more complex.
	   * 
	   * This type of ordering is useful if you want to do ordering based on data
	   * live from the DOM (for example the contents of an 'input' element) rather
	   * than just the static string that DataTables knows of.
	   * 
	   * The way these plug-ins work is that you create an array of the values you
	   * wish to be ordering for the column in question and then return that
	   * array. The data in the array much be in the index order of the rows in
	   * the table (not the currently ordering order!). Which order data gathering
	   * function is run here depends on the `dt-init columns.orderDataType`
	   * parameter that is used for the column (if any).
	   *
	   * The functions defined take two parameters:
	   *
	   * 1. `{object}` DataTables settings object: see
	   *    {@link DataTable.models.oSettings}
	   * 2. `{int}` Target column index
	   *
	   * Each function is expected to return an array:
	   *
	   * * `{array}` Data for the column to be ordering upon
	   *
	   *  @type array
	   *
	   *  @example
	   *    // Ordering using `input` node values
	   *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
	   *    {
	   *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
	   *        return $('input', td).val();
	   *      } );
	   *    }
	   */
			order: {},

			/**
	   * Type based plug-ins.
	   *
	   * Each column in DataTables has a type assigned to it, either by automatic
	   * detection or by direct assignment using the `type` option for the column.
	   * The type of a column will effect how it is ordering and search (plug-ins
	   * can also make use of the column type if required).
	   *
	   * @namespace
	   */
			type: {
				/**
	    * Type detection functions.
	    *
	    * The functions defined in this object are used to automatically detect
	    * a column's type, making initialisation of DataTables super easy, even
	    * when complex data is in the table.
	    *
	    * The functions defined take two parameters:
	    *
	       *  1. `{*}` Data from the column cell to be analysed
	       *  2. `{settings}` DataTables settings object. This can be used to
	       *     perform context specific type detection - for example detection
	       *     based on language settings such as using a comma for a decimal
	       *     place. Generally speaking the options from the settings will not
	       *     be required
	    *
	    * Each function is expected to return:
	    *
	    * * `{string|null}` Data type detected, or null if unknown (and thus
	    *   pass it on to the other type detection functions.
	    *
	    *  @type array
	    *
	    *  @example
	    *    // Currency type detection plug-in:
	    *    $.fn.dataTable.ext.type.detect.push(
	    *      function ( data, settings ) {
	    *        // Check the numeric part
	    *        if ( ! $.isNumeric( data.substring(1) ) ) {
	    *          return null;
	    *        }
	    *
	    *        // Check prefixed by currency
	    *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
	    *          return 'currency';
	    *        }
	    *        return null;
	    *      }
	    *    );
	    */
				detect: [],

				/**
	    * Type based search formatting.
	    *
	    * The type based searching functions can be used to pre-format the
	    * data to be search on. For example, it can be used to strip HTML
	    * tags or to de-format telephone numbers for numeric only searching.
	    *
	    * Note that is a search is not defined for a column of a given type,
	    * no search formatting will be performed.
	    * 
	    * Pre-processing of searching data plug-ins - When you assign the sType
	    * for a column (or have it automatically detected for you by DataTables
	    * or a type detection plug-in), you will typically be using this for
	    * custom sorting, but it can also be used to provide custom searching
	    * by allowing you to pre-processing the data and returning the data in
	    * the format that should be searched upon. This is done by adding
	    * functions this object with a parameter name which matches the sType
	    * for that target column. This is the corollary of <i>afnSortData</i>
	    * for searching data.
	    *
	    * The functions defined take a single parameter:
	    *
	       *  1. `{*}` Data from the column cell to be prepared for searching
	    *
	    * Each function is expected to return:
	    *
	    * * `{string|null}` Formatted string that will be used for the searching.
	    *
	    *  @type object
	    *  @default {}
	    *
	    *  @example
	    *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
	    *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
	    *    }
	    */
				search: {},

				/**
	    * Type based ordering.
	    *
	    * The column type tells DataTables what ordering to apply to the table
	    * when a column is sorted upon. The order for each type that is defined,
	    * is defined by the functions available in this object.
	    *
	    * Each ordering option can be described by three properties added to
	    * this object:
	    *
	    * * `{type}-pre` - Pre-formatting function
	    * * `{type}-asc` - Ascending order function
	    * * `{type}-desc` - Descending order function
	    *
	    * All three can be used together, only `{type}-pre` or only
	    * `{type}-asc` and `{type}-desc` together. It is generally recommended
	    * that only `{type}-pre` is used, as this provides the optimal
	    * implementation in terms of speed, although the others are provided
	    * for compatibility with existing Javascript sort functions.
	    *
	    * `{type}-pre`: Functions defined take a single parameter:
	    *
	       *  1. `{*}` Data from the column cell to be prepared for ordering
	    *
	    * And return:
	    *
	    * * `{*}` Data to be sorted upon
	    *
	    * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
	    * functions, taking two parameters:
	    *
	       *  1. `{*}` Data to compare to the second parameter
	       *  2. `{*}` Data to compare to the first parameter
	    *
	    * And returning:
	    *
	    * * `{*}` Ordering match: <0 if first parameter should be sorted lower
	    *   than the second parameter, ===0 if the two parameters are equal and
	    *   >0 if the first parameter should be sorted height than the second
	    *   parameter.
	    * 
	    *  @type object
	    *  @default {}
	    *
	    *  @example
	    *    // Numeric ordering of formatted numbers with a pre-formatter
	    *    $.extend( $.fn.dataTable.ext.type.order, {
	    *      "string-pre": function(x) {
	    *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
	    *        return parseFloat( a );
	    *      }
	    *    } );
	    *
	    *  @example
	    *    // Case-sensitive string ordering, with no pre-formatting method
	    *    $.extend( $.fn.dataTable.ext.order, {
	    *      "string-case-asc": function(x,y) {
	    *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
	    *      },
	    *      "string-case-desc": function(x,y) {
	    *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
	    *      }
	    *    } );
	    */
				order: {}
			},

			/**
	   * Unique DataTables instance counter
	   *
	   * @type int
	   * @private
	   */
			_unique: 0,

			//
			// Depreciated
			// The following properties are retained for backwards compatiblity only.
			// The should not be used in new projects and will be removed in a future
			// version
			//

			/**
	   * Version check function.
	   *  @type function
	   *  @depreciated Since 1.10
	   */
			fnVersionCheck: DataTable.fnVersionCheck,

			/**
	   * Index for what 'this' index API functions should use
	   *  @type int
	   *  @deprecated Since v1.10
	   */
			iApiIndex: 0,

			/**
	   * jQuery UI class container
	   *  @type object
	   *  @deprecated Since v1.10
	   */
			oJUIClasses: {},

			/**
	   * Software version
	   *  @type string
	   *  @deprecated Since v1.10
	   */
			sVersion: DataTable.version
		};

		//
		// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
		//
		$.extend(_ext, {
			afnFiltering: _ext.search,
			aTypes: _ext.type.detect,
			ofnSearch: _ext.type.search,
			oSort: _ext.type.order,
			afnSortData: _ext.order,
			aoFeatures: _ext.feature,
			oApi: _ext.internal,
			oStdClasses: _ext.classes,
			oPagination: _ext.pager
		});

		$.extend(DataTable.ext.classes, {
			"sTable": "dataTable",
			"sNoFooter": "no-footer",

			/* Paging buttons */
			"sPageButton": "paginate_button",
			"sPageButtonActive": "current",
			"sPageButtonDisabled": "disabled",

			/* Striping classes */
			"sStripeOdd": "odd",
			"sStripeEven": "even",

			/* Empty row */
			"sRowEmpty": "dataTables_empty",

			/* Features */
			"sWrapper": "dataTables_wrapper",
			"sFilter": "dataTables_filter",
			"sInfo": "dataTables_info",
			"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
			"sLength": "dataTables_length",
			"sProcessing": "dataTables_processing",

			/* Sorting */
			"sSortAsc": "sorting_asc",
			"sSortDesc": "sorting_desc",
			"sSortable": "sorting", /* Sortable in both directions */
			"sSortableAsc": "sorting_asc_disabled",
			"sSortableDesc": "sorting_desc_disabled",
			"sSortableNone": "sorting_disabled",
			"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */

			/* Filtering */
			"sFilterInput": "",

			/* Page length */
			"sLengthSelect": "",

			/* Scrolling */
			"sScrollWrapper": "dataTables_scroll",
			"sScrollHead": "dataTables_scrollHead",
			"sScrollHeadInner": "dataTables_scrollHeadInner",
			"sScrollBody": "dataTables_scrollBody",
			"sScrollFoot": "dataTables_scrollFoot",
			"sScrollFootInner": "dataTables_scrollFootInner",

			/* Misc */
			"sHeaderTH": "",
			"sFooterTH": "",

			// Deprecated
			"sSortJUIAsc": "",
			"sSortJUIDesc": "",
			"sSortJUI": "",
			"sSortJUIAscAllowed": "",
			"sSortJUIDescAllowed": "",
			"sSortJUIWrapper": "",
			"sSortIcon": "",
			"sJUIHeader": "",
			"sJUIFooter": ""
		});

		(function () {

			// Reused strings for better compression. Closure compiler appears to have a
			// weird edge case where it is trying to expand strings rather than use the
			// variable version. This results in about 200 bytes being added, for very
			// little preference benefit since it this run on script load only.
			var _empty = '';
			_empty = '';

			var _stateDefault = _empty + 'ui-state-default';
			var _sortIcon = _empty + 'css_right ui-icon ui-icon-';
			var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';

			$.extend(DataTable.ext.oJUIClasses, DataTable.ext.classes, {
				/* Full numbers paging buttons */
				"sPageButton": "fg-button ui-button " + _stateDefault,
				"sPageButtonActive": "ui-state-disabled",
				"sPageButtonDisabled": "ui-state-disabled",

				/* Features */
				"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi " + "ui-buttonset-multi paging_", /* Note that the type is postfixed */

				/* Sorting */
				"sSortAsc": _stateDefault + " sorting_asc",
				"sSortDesc": _stateDefault + " sorting_desc",
				"sSortable": _stateDefault + " sorting",
				"sSortableAsc": _stateDefault + " sorting_asc_disabled",
				"sSortableDesc": _stateDefault + " sorting_desc_disabled",
				"sSortableNone": _stateDefault + " sorting_disabled",
				"sSortJUIAsc": _sortIcon + "triangle-1-n",
				"sSortJUIDesc": _sortIcon + "triangle-1-s",
				"sSortJUI": _sortIcon + "carat-2-n-s",
				"sSortJUIAscAllowed": _sortIcon + "carat-1-n",
				"sSortJUIDescAllowed": _sortIcon + "carat-1-s",
				"sSortJUIWrapper": "DataTables_sort_wrapper",
				"sSortIcon": "DataTables_sort_icon",

				/* Scrolling */
				"sScrollHead": "dataTables_scrollHead " + _stateDefault,
				"sScrollFoot": "dataTables_scrollFoot " + _stateDefault,

				/* Misc */
				"sHeaderTH": _stateDefault,
				"sFooterTH": _stateDefault,
				"sJUIHeader": _headerFooter + " ui-corner-tl ui-corner-tr",
				"sJUIFooter": _headerFooter + " ui-corner-bl ui-corner-br"
			});
		})();

		var extPagination = DataTable.ext.pager;

		function _numbers(page, pages) {
			var numbers = [],
			    buttons = extPagination.numbers_length,
			    half = Math.floor(buttons / 2),
			    i = 1;

			if (pages <= buttons) {
				numbers = _range(0, pages);
			} else if (page <= half) {
				numbers = _range(0, buttons - 2);
				numbers.push('ellipsis');
				numbers.push(pages - 1);
			} else if (page >= pages - 1 - half) {
				numbers = _range(pages - (buttons - 2), pages);
				numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6
				numbers.splice(0, 0, 0);
			} else {
				numbers = _range(page - half + 2, page + half - 1);
				numbers.push('ellipsis');
				numbers.push(pages - 1);
				numbers.splice(0, 0, 'ellipsis');
				numbers.splice(0, 0, 0);
			}

			numbers.DT_el = 'span';
			return numbers;
		}

		$.extend(extPagination, {
			simple: function simple(page, pages) {
				return ['previous', 'next'];
			},

			full: function full(page, pages) {
				return ['first', 'previous', 'next', 'last'];
			},

			numbers: function numbers(page, pages) {
				return [_numbers(page, pages)];
			},

			simple_numbers: function simple_numbers(page, pages) {
				return ['previous', _numbers(page, pages), 'next'];
			},

			full_numbers: function full_numbers(page, pages) {
				return ['first', 'previous', _numbers(page, pages), 'next', 'last'];
			},

			first_last_numbers: function first_last_numbers(page, pages) {
				return ['first', _numbers(page, pages), 'last'];
			},

			// For testing and plug-ins to use
			_numbers: _numbers,

			// Number of number buttons (including ellipsis) to show. _Must be odd!_
			numbers_length: 7
		});

		$.extend(true, DataTable.ext.renderer, {
			pageButton: {
				_: function _(settings, host, idx, buttons, page, pages) {
					var classes = settings.oClasses;
					var lang = settings.oLanguage.oPaginate;
					var aria = settings.oLanguage.oAria.paginate || {};
					var btnDisplay,
					    btnClass,
					    counter = 0;

					var attach = function attach(container, buttons) {
						var i, ien, node, button;
						var clickHandler = function clickHandler(e) {
							_fnPageChange(settings, e.data.action, true);
						};

						for (i = 0, ien = buttons.length; i < ien; i++) {
							button = buttons[i];

							if ($.isArray(button)) {
								var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);
								attach(inner, button);
							} else {
								btnDisplay = null;
								btnClass = '';

								switch (button) {
									case 'ellipsis':
										container.append('<span class="ellipsis">&#x2026;</span>');
										break;

									case 'first':
										btnDisplay = lang.sFirst;
										btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
										break;

									case 'previous':
										btnDisplay = lang.sPrevious;
										btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
										break;

									case 'next':
										btnDisplay = lang.sNext;
										btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
										break;

									case 'last':
										btnDisplay = lang.sLast;
										btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
										break;

									default:
										btnDisplay = button + 1;
										btnClass = page === button ? classes.sPageButtonActive : '';
										break;
								}

								if (btnDisplay !== null) {
									node = $('<a>', {
										'class': classes.sPageButton + ' ' + btnClass,
										'aria-controls': settings.sTableId,
										'aria-label': aria[button],
										'data-dt-idx': counter,
										'tabindex': settings.iTabIndex,
										'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
									}).html(btnDisplay).appendTo(container);

									_fnBindAction(node, { action: button }, clickHandler);

									counter++;
								}
							}
						}
					};

					// IE9 throws an 'unknown error' if document.activeElement is used
					// inside an iframe or frame. Try / catch the error. Not good for
					// accessibility, but neither are frames.
					var activeEl;

					try {
						// Because this approach is destroying and recreating the paging
						// elements, focus is lost on the select button which is bad for
						// accessibility. So we want to restore focus once the draw has
						// completed
						activeEl = $(host).find(document.activeElement).data('dt-idx');
					} catch (e) {}

					attach($(host).empty(), buttons);

					if (activeEl !== undefined) {
						$(host).find('[data-dt-idx=' + activeEl + ']').focus();
					}
				}
			}
		});

		// Built in type detection. See model.ext.aTypes for information about
		// what is required from this methods.
		$.extend(DataTable.ext.type.detect, [
		// Plain numbers - first since V8 detects some plain numbers as dates
		// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
		function (d, settings) {
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber(d, decimal) ? 'num' + decimal : null;
		},

		// Dates (only those recognised by the browser's Date.parse)
		function (d, settings) {
			// V8 tries _very_ hard to make a string passed into `Date.parse()`
			// valid, so we need to use a regex to restrict date formats. Use a
			// plug-in for anything other than ISO8601 style strings
			if (d && !(d instanceof Date) && !_re_date.test(d)) {
				return null;
			}
			var parsed = Date.parse(d);
			return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;
		},

		// Formatted numbers
		function (d, settings) {
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
		},

		// HTML numeric
		function (d, settings) {
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
		},

		// HTML numeric, formatted
		function (d, settings) {
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
		},

		// HTML (this is strict checking - there must be html)
		function (d, settings) {
			return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;
		}]);

		// Filter formatting functions. See model.ext.ofnSearch for information about
		// what is required from these methods.
		// 
		// Note that additional search methods are added for the html numbers and
		// html formatted numbers by `_addNumericSort()` when we know what the decimal
		// place is


		$.extend(DataTable.ext.type.search, {
			html: function html(data) {
				return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ").replace(_re_html, "") : '';
			},

			string: function string(data) {
				return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ") : data;
			}
		});

		var __numericReplace = function __numericReplace(d, decimalPlace, re1, re2) {
			if (d !== 0 && (!d || d === '-')) {
				return -Infinity;
			}

			// If a decimal place other than `.` is used, it needs to be given to the
			// function so we can detect it and replace with a `.` which is the only
			// decimal place Javascript recognises - it is not locale aware.
			if (decimalPlace) {
				d = _numToDecimal(d, decimalPlace);
			}

			if (d.replace) {
				if (re1) {
					d = d.replace(re1, '');
				}

				if (re2) {
					d = d.replace(re2, '');
				}
			}

			return d * 1;
		};

		// Add the numeric 'deformatting' functions for sorting and search. This is done
		// in a function to provide an easy ability for the language options to add
		// additional methods if a non-period decimal place is used.
		function _addNumericSort(decimalPlace) {
			$.each({
				// Plain numbers
				"num": function num(d) {
					return __numericReplace(d, decimalPlace);
				},

				// Formatted numbers
				"num-fmt": function numFmt(d) {
					return __numericReplace(d, decimalPlace, _re_formatted_numeric);
				},

				// HTML numeric
				"html-num": function htmlNum(d) {
					return __numericReplace(d, decimalPlace, _re_html);
				},

				// HTML numeric, formatted
				"html-num-fmt": function htmlNumFmt(d) {
					return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
				}
			}, function (key, fn) {
				// Add the ordering method
				_ext.type.order[key + decimalPlace + '-pre'] = fn;

				// For HTML types add a search formatter that will strip the HTML
				if (key.match(/^html\-/)) {
					_ext.type.search[key + decimalPlace] = _ext.type.search.html;
				}
			});
		}

		// Default sort methods
		$.extend(_ext.type.order, {
			// Dates
			"date-pre": function datePre(d) {
				return Date.parse(d) || -Infinity;
			},

			// html
			"html-pre": function htmlPre(a) {
				return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + '';
			},

			// string
			"string-pre": function stringPre(a) {
				// This is a little complex, but faster than always calling toString,
				// http://jsperf.com/tostring-v-check
				return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();
			},

			// string-asc and -desc are retained only for compatibility with the old
			// sort methods
			"string-asc": function stringAsc(x, y) {
				return x < y ? -1 : x > y ? 1 : 0;
			},

			"string-desc": function stringDesc(x, y) {
				return x < y ? 1 : x > y ? -1 : 0;
			}
		});

		// Numeric sorting types - order doesn't matter here
		_addNumericSort('');

		$.extend(true, DataTable.ext.renderer, {
			header: {
				_: function _(settings, cell, column, classes) {
					// No additional mark-up required
					// Attach a sort listener to update on sort - note that using the
					// `DT` namespace will allow the event to be removed automatically
					// on destroy, while the `dt` namespaced event is the one we are
					// listening for
					$(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
						if (settings !== ctx) {
							// need to check this this is the host
							return; // table, not a nested one
						}

						var colIdx = column.idx;

						cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
					});
				},

				jqueryui: function jqueryui(settings, cell, column, classes) {
					$('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell);

					// Attach a sort listener to update on sort
					$(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
						if (settings !== ctx) {
							return;
						}

						var colIdx = column.idx;

						cell.removeClass(classes.sSortAsc + " " + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);

						cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + " " + classes.sSortJUIDesc + " " + classes.sSortJUI + " " + classes.sSortJUIAscAllowed + " " + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);
					});
				}
			}
		});

		/*
	  * Public helper functions. These aren't used internally by DataTables, or
	  * called by any of the options passed into DataTables, but they can be used
	  * externally by developers working with DataTables. They are helper functions
	  * to make working with DataTables a little bit easier.
	  */

		var __htmlEscapeEntities = function __htmlEscapeEntities(d) {
			return typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : d;
		};

		/**
	  * Helpers for `columns.render`.
	  *
	  * The options defined here can be used with the `columns.render` initialisation
	  * option to provide a display renderer. The following functions are defined:
	  *
	  * * `number` - Will format numeric data (defined by `columns.data`) for
	  *   display, retaining the original unformatted data for sorting and filtering.
	  *   It takes 5 parameters:
	  *   * `string` - Thousands grouping separator
	  *   * `string` - Decimal point indicator
	  *   * `integer` - Number of decimal points to show
	  *   * `string` (optional) - Prefix.
	  *   * `string` (optional) - Postfix (/suffix).
	  * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
	  *   parameters.
	  *
	  * @example
	  *   // Column definition using the number renderer
	  *   {
	  *     data: "salary",
	  *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	  *   }
	  *
	  * @namespace
	  */
		DataTable.render = {
			number: function number(thousands, decimal, precision, prefix, postfix) {
				return {
					display: function display(d) {
						if (typeof d !== 'number' && typeof d !== 'string') {
							return d;
						}

						var negative = d < 0 ? '-' : '';
						var flo = parseFloat(d);

						// If NaN then there isn't much formatting that we can do - just
						// return immediately, escaping any HTML (this was supposed to
						// be a number after all)
						if (isNaN(flo)) {
							return __htmlEscapeEntities(d);
						}

						flo = flo.toFixed(precision);
						d = Math.abs(flo);

						var intPart = parseInt(d, 10);
						var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';

						return negative + (prefix || '') + intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) + floatPart + (postfix || '');
					}
				};
			},

			text: function text() {
				return {
					display: __htmlEscapeEntities
				};
			}
		};

		/*
	  * This is really a good bit rubbish this method of exposing the internal methods
	  * publicly... - To be fixed in 2.0 using methods on the prototype
	  */

		/**
	  * Create a wrapper function for exporting an internal functions to an external API.
	  *  @param {string} fn API function name
	  *  @returns {function} wrapped function
	  *  @memberof DataTable#internal
	  */
		function _fnExternApiFunc(fn) {
			return function () {
				var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
				return DataTable.ext.internal[fn].apply(this, args);
			};
		}

		/**
	  * Reference to internal functions for use by plug-in developers. Note that
	  * these methods are references to internal functions and are considered to be
	  * private. If you use these methods, be aware that they are liable to change
	  * between versions.
	  *  @namespace
	  */
		$.extend(DataTable.ext.internal, {
			_fnExternApiFunc: _fnExternApiFunc,
			_fnBuildAjax: _fnBuildAjax,
			_fnAjaxUpdate: _fnAjaxUpdate,
			_fnAjaxParameters: _fnAjaxParameters,
			_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
			_fnAjaxDataSrc: _fnAjaxDataSrc,
			_fnAddColumn: _fnAddColumn,
			_fnColumnOptions: _fnColumnOptions,
			_fnAdjustColumnSizing: _fnAdjustColumnSizing,
			_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
			_fnColumnIndexToVisible: _fnColumnIndexToVisible,
			_fnVisbleColumns: _fnVisbleColumns,
			_fnGetColumns: _fnGetColumns,
			_fnColumnTypes: _fnColumnTypes,
			_fnApplyColumnDefs: _fnApplyColumnDefs,
			_fnHungarianMap: _fnHungarianMap,
			_fnCamelToHungarian: _fnCamelToHungarian,
			_fnLanguageCompat: _fnLanguageCompat,
			_fnBrowserDetect: _fnBrowserDetect,
			_fnAddData: _fnAddData,
			_fnAddTr: _fnAddTr,
			_fnNodeToDataIndex: _fnNodeToDataIndex,
			_fnNodeToColumnIndex: _fnNodeToColumnIndex,
			_fnGetCellData: _fnGetCellData,
			_fnSetCellData: _fnSetCellData,
			_fnSplitObjNotation: _fnSplitObjNotation,
			_fnGetObjectDataFn: _fnGetObjectDataFn,
			_fnSetObjectDataFn: _fnSetObjectDataFn,
			_fnGetDataMaster: _fnGetDataMaster,
			_fnClearTable: _fnClearTable,
			_fnDeleteIndex: _fnDeleteIndex,
			_fnInvalidate: _fnInvalidate,
			_fnGetRowElements: _fnGetRowElements,
			_fnCreateTr: _fnCreateTr,
			_fnBuildHead: _fnBuildHead,
			_fnDrawHead: _fnDrawHead,
			_fnDraw: _fnDraw,
			_fnReDraw: _fnReDraw,
			_fnAddOptionsHtml: _fnAddOptionsHtml,
			_fnDetectHeader: _fnDetectHeader,
			_fnGetUniqueThs: _fnGetUniqueThs,
			_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
			_fnFilterComplete: _fnFilterComplete,
			_fnFilterCustom: _fnFilterCustom,
			_fnFilterColumn: _fnFilterColumn,
			_fnFilter: _fnFilter,
			_fnFilterCreateSearch: _fnFilterCreateSearch,
			_fnEscapeRegex: _fnEscapeRegex,
			_fnFilterData: _fnFilterData,
			_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
			_fnUpdateInfo: _fnUpdateInfo,
			_fnInfoMacros: _fnInfoMacros,
			_fnInitialise: _fnInitialise,
			_fnInitComplete: _fnInitComplete,
			_fnLengthChange: _fnLengthChange,
			_fnFeatureHtmlLength: _fnFeatureHtmlLength,
			_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
			_fnPageChange: _fnPageChange,
			_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
			_fnProcessingDisplay: _fnProcessingDisplay,
			_fnFeatureHtmlTable: _fnFeatureHtmlTable,
			_fnScrollDraw: _fnScrollDraw,
			_fnApplyToChildren: _fnApplyToChildren,
			_fnCalculateColumnWidths: _fnCalculateColumnWidths,
			_fnThrottle: _fnThrottle,
			_fnConvertToWidth: _fnConvertToWidth,
			_fnGetWidestNode: _fnGetWidestNode,
			_fnGetMaxLenString: _fnGetMaxLenString,
			_fnStringToCss: _fnStringToCss,
			_fnSortFlatten: _fnSortFlatten,
			_fnSort: _fnSort,
			_fnSortAria: _fnSortAria,
			_fnSortListener: _fnSortListener,
			_fnSortAttachListener: _fnSortAttachListener,
			_fnSortingClasses: _fnSortingClasses,
			_fnSortData: _fnSortData,
			_fnSaveState: _fnSaveState,
			_fnLoadState: _fnLoadState,
			_fnSettingsFromNode: _fnSettingsFromNode,
			_fnLog: _fnLog,
			_fnMap: _fnMap,
			_fnBindAction: _fnBindAction,
			_fnCallbackReg: _fnCallbackReg,
			_fnCallbackFire: _fnCallbackFire,
			_fnLengthOverflow: _fnLengthOverflow,
			_fnRenderer: _fnRenderer,
			_fnDataSource: _fnDataSource,
			_fnRowAttributes: _fnRowAttributes,
			_fnCalculateEnd: function _fnCalculateEnd() {} // Used by a lot of plug-ins, but redundant
			// in 1.10, so this dead-end function is
			// added to prevent errors
		});

		// jQuery access
		$.fn.dataTable = DataTable;

		// Provide access to the host jQuery object (circular reference)
		DataTable.$ = $;

		// Legacy aliases
		$.fn.dataTableSettings = DataTable.settings;
		$.fn.dataTableExt = DataTable.ext;

		// With a capital `D` we return a DataTables API instance rather than a
		// jQuery object
		$.fn.DataTable = function (opts) {
			return $(this).dataTable(opts).api();
		};

		// All properties that are available to $.fn.dataTable should also be
		// available on $.fn.DataTable
		$.each(DataTable, function (prop, val) {
			$.fn.DataTable[prop] = val;
		});

		// Information about events fired by DataTables - for documentation.
		/**
	  * Draw event, fired whenever the table is redrawn on the page, at the same
	  * point as fnDrawCallback. This may be useful for binding events or
	  * performing calculations when the table is altered at all.
	  *  @name DataTable#draw.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  */

		/**
	  * Search event, fired when the searching applied to the table (using the
	  * built-in global search, or column filters) is altered.
	  *  @name DataTable#search.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  */

		/**
	  * Page change event, fired when the paging of the table is altered.
	  *  @name DataTable#page.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  */

		/**
	  * Order event, fired when the ordering applied to the table is altered.
	  *  @name DataTable#order.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  */

		/**
	  * DataTables initialisation complete event, fired when the table is fully
	  * drawn, including Ajax data loaded, if Ajax data is required.
	  *  @name DataTable#init.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} oSettings DataTables settings object
	  *  @param {object} json The JSON object request from the server - only
	  *    present if client-side Ajax sourced data is used</li></ol>
	  */

		/**
	  * State save event, fired when the table has changed state a new state save
	  * is required. This event allows modification of the state saving object
	  * prior to actually doing the save, including addition or other state
	  * properties (for plug-ins) or modification of a DataTables core property.
	  *  @name DataTable#stateSaveParams.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} oSettings DataTables settings object
	  *  @param {object} json The state information to be saved
	  */

		/**
	  * State load event, fired when the table is loading state from the stored
	  * data, but prior to the settings object being modified by the saved state
	  * - allowing modification of the saved state is required or loading of
	  * state for a plug-in.
	  *  @name DataTable#stateLoadParams.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} oSettings DataTables settings object
	  *  @param {object} json The saved state information
	  */

		/**
	  * State loaded event, fired when state has been loaded from stored data and
	  * the settings object has been modified by the loaded data.
	  *  @name DataTable#stateLoaded.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} oSettings DataTables settings object
	  *  @param {object} json The saved state information
	  */

		/**
	  * Processing event, fired when DataTables is doing some kind of processing
	  * (be it, order, searcg or anything else). It can be used to indicate to
	  * the end user that there is something happening, or that something has
	  * finished.
	  *  @name DataTable#processing.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} oSettings DataTables settings object
	  *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	  */

		/**
	  * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	  * request to made to the server for new data. This event is called before
	  * DataTables processed the returned data, so it can also be used to pre-
	  * process the data returned from the server, if needed.
	  *
	  * Note that this trigger is called in `fnServerData`, if you override
	  * `fnServerData` and which to use this event, you need to trigger it in you
	  * success function.
	  *  @name DataTable#xhr.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  *  @param {object} json JSON returned from the server
	  *
	  *  @example
	  *     // Use a custom property returned from the server in another DOM element
	  *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	  *       $('#status').html( json.status );
	  *     } );
	  *
	  *  @example
	  *     // Pre-process the data returned from the server
	  *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	  *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	  *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	  *       }
	  *       // Note no return - manipulate the data directly in the JSON object.
	  *     } );
	  */

		/**
	  * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	  * or passing the bDestroy:true parameter in the initialisation object. This
	  * can be used to remove bound events, added DOM nodes, etc.
	  *  @name DataTable#destroy.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  */

		/**
	  * Page length change event, fired when number of records to show on each
	  * page (the length) is changed.
	  *  @name DataTable#length.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  *  @param {integer} len New length
	  */

		/**
	  * Column sizing has changed.
	  *  @name DataTable#column-sizing.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  */

		/**
	  * Column visibility has changed.
	  *  @name DataTable#column-visibility.dt
	  *  @event
	  *  @param {event} e jQuery event object
	  *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	  *  @param {int} column Column index
	  *  @param {bool} vis `false` if column now hidden, or `true` if visible
	  */

		return $.fn.dataTable;
	});

/***/ }
/******/ ]);